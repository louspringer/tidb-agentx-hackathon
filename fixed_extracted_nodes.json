{
  "version": "2.2",
  "extracted_at": "2025-08-04T13:18:07.767409",
  "nodes": {
    "import_2682831937115777793": {
      "id": "import_2682831937115777793",
      "type": "import",
      "content": "import os",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 4,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 0
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 0
      }
    },
    "import_50502926060855975": {
      "id": "import_50502926060855975",
      "type": "import",
      "content": "import time",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 5,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 1
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 1
      }
    },
    "import_-1445299877843655049": {
      "id": "import_-1445299877843655049",
      "type": "import",
      "content": "import redis",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 6,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 2
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 2
      }
    },
    "import_3234628287790087458": {
      "id": "import_3234628287790087458",
      "type": "import",
      "content": "import jwt",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 7,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 3
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 3
      }
    },
    "import_-6692594870504057607": {
      "id": "import_-6692594870504057607",
      "type": "import",
      "content": "import streamlit as st",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 8,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 4
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 4
      }
    },
    "import_8246646876085547449": {
      "id": "import_8246646876085547449",
      "type": "import",
      "content": "import plotly.graph_objects as go",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 9,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 5
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 5
      }
    },
    "import_-4680661799788508951": {
      "id": "import_-4680661799788508951",
      "type": "import",
      "content": "from datetime import datetime, timezone, timedelta",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 10,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 6
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 6
      }
    },
    "import_-7352821866126854055": {
      "id": "import_-7352821866126854055",
      "type": "import",
      "content": "from dataclasses import dataclass",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 11,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 7
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 7
      }
    },
    "import_9212687862903628421": {
      "id": "import_9212687862903628421",
      "type": "import",
      "content": "from typing import Dict, Optional, List",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 12,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 8
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 8
      }
    },
    "import_5723194447066906592": {
      "id": "import_5723194447066906592",
      "type": "import",
      "content": "from pydantic import BaseModel, Field, field_validator",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 13,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 9
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 9
      }
    },
    "import_-4387637965731568806": {
      "id": "import_-4387637965731568806",
      "type": "import",
      "content": "from cryptography.fernet import Fernet",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 14,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 10
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 10
      }
    },
    "import_7920691030079056014": {
      "id": "import_7920691030079056014",
      "type": "import",
      "content": "import boto3",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 15,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 11
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 11
      }
    },
    "import_2508485986980991700": {
      "id": "import_2508485986980991700",
      "type": "import",
      "content": "from botocore.exceptions import ClientError",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 16,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 12
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 12
      }
    },
    "import_4632221454259545749": {
      "id": "import_4632221454259545749",
      "type": "import",
      "content": "import re",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 61,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 13
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 13
      }
    },
    "import_-380358827520157674": {
      "id": "import_-380358827520157674",
      "type": "import",
      "content": "import html",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "file_pattern": "*.py",
        "position": 164,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "order": 14
      },
      "projection_rules": {
        "format": "black",
        "position": "top",
        "order": 14
      }
    },
    "class_SnowflakeConfig_37": {
      "id": "class_SnowflakeConfig_37",
      "type": "class",
      "content": "class SnowflakeConfig(BaseModel):\n    account_url: str = Field(..., description='Snowflake account URL')\n    organization: str = Field(..., description='Snowflake organization')\n    account: str = Field(..., description='Snowflake account identifier')\n    oauth_integration_name: str = Field(..., description='OAuth integration name')\n    oauth_client_id: str = Field(..., description='OAuth client ID')\n    oauth_client_secret: str = Field(..., description='OAuth client secret')\n\n    @field_validator('account_url')\n    def validate_account_url(cls, v):\n        if not v.startswith('https://') or 'snowflakecomputing.com' not in v:\n            raise ValueError('Invalid Snowflake account URL format')\n        return v",
      "context": "streamlit",
      "dependencies": [
        "import_5723194447066906592",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592"
      ],
      "metadata": {
        "class_name": "SnowflakeConfig",
        "line_number": 37,
        "has_docstring": false,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 37,
        "order": 15
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 15
      }
    },
    "class_OpenFlowConfig_52": {
      "id": "class_OpenFlowConfig_52",
      "type": "class",
      "content": "class OpenFlowConfig(BaseModel):\n    data_plane_url: str = Field(..., description='Data plane URL')\n    data_plane_uuid: str = Field(..., description='Data plane UUID')\n    data_plane_key: str = Field(..., description='Data plane key')\n    telemetry_url: str = Field(..., description='Telemetry URL')\n    control_plane_url: str = Field(..., description='Control plane URL')\n\n    @field_validator('data_plane_uuid')\n    def validate_uuid(cls, v):\n        import re\n        uuid_pattern = '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'\n        if not re.match(uuid_pattern, v):\n            raise ValueError('Invalid UUID format')\n        return v",
      "context": "streamlit",
      "dependencies": [
        "import_5723194447066906592",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_4632221454259545749"
      ],
      "metadata": {
        "class_name": "OpenFlowConfig",
        "line_number": 52,
        "has_docstring": false,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 52,
        "order": 16
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 16
      }
    },
    "class_DeploymentStatus_70": {
      "id": "class_DeploymentStatus_70",
      "type": "class",
      "content": "@dataclass\nclass DeploymentStatus:\n    stack_name: str\n    status: str\n    progress: int\n    resources_created: int\n    resources_total: int\n    error_message: Optional[str] = None\n    last_updated: Optional[datetime] = None",
      "context": "streamlit",
      "dependencies": [
        "import_-7352821866126854055",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-4680661799788508951"
      ],
      "metadata": {
        "class_name": "DeploymentStatus",
        "line_number": 70,
        "has_docstring": false,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 70,
        "order": 17
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 17
      }
    },
    "class_SecurityManager_80": {
      "id": "class_SecurityManager_80",
      "type": "class",
      "content": "class SecurityManager:\n    \"\"\"Security-first credential and session management\"\"\"\n\n    def __init__(self) -> None:\n        self.fernet = Fernet(SECURITY_CONFIG['fernet_key'])\n        self.redis_client = redis.from_url(SECURITY_CONFIG['redis_url'])\n\n    def encrypt_credential(self, credential: str) -> str:\n        \"\"\"Encrypt sensitive credentials\"\"\"\n        return self.fernet.encrypt(credential.encode()).decode()\n\n    def decrypt_credential(self, encrypted_credential: str) -> str:\n        \"\"\"Decrypt sensitive credentials\"\"\"\n        return self.fernet.decrypt(encrypted_credential.encode()).decode()\n\n    def store_credential_secure(self, key: str, value: str) -> None:\n        \"\"\"Store credential securely in Redis with encryption\"\"\"\n        encrypted_value = self.encrypt_credential(value)\n        self.redis_client.setex(f'credential:{key}', 3600, encrypted_value)\n\n    def store_credential(self, key: str, value: str) -> None:\n        \"\"\"Store credential securely in Redis with encryption (alias for store_credential_secure)\"\"\"\n        self.store_credential_secure(key, value)\n\n    def get_credential_secure(self, key: str) -> Optional[str]:\n        \"\"\"Retrieve credential securely from Redis\"\"\"\n        encrypted_value = self.redis_client.get(f'credential:{key}')\n        if encrypted_value:\n            return self.decrypt_credential(encrypted_value.decode())\n        return None\n\n    def retrieve_credential(self, key: str) -> Optional[str]:\n        \"\"\"Retrieve credential securely from Redis (alias for get_credential_secure)\"\"\"\n        return self.get_credential_secure(key)\n\n    def validate_session_token(self, session_token: str) -> bool:\n        \"\"\"Validate JWT session token (alias for validate_session)\"\"\"\n        return self.validate_session(session_token)\n\n    def validate_session(self, session_token: str) -> bool:\n        \"\"\"Validate JWT session token\"\"\"\n        try:\n            payload = jwt.decode(session_token, str(SECURITY_CONFIG['jwt_secret']), algorithms=['HS256'])\n            return payload.get('exp', 0) > time.time()\n        except jwt.InvalidTokenError:\n            return False\n\n    def create_session_token(self, user_id: str, role: str) -> str:\n        \"\"\"Create JWT session token\"\"\"\n        timeout_minutes = SECURITY_CONFIG['session_timeout_minutes']\n        assert timeout_minutes is not None, 'session_timeout_minutes should be set'\n        payload = {'user_id': user_id, 'role': role, 'exp': datetime.now(timezone.utc) + timedelta(minutes=int(timeout_minutes))}\n        return jwt.encode(payload, str(SECURITY_CONFIG['jwt_secret']), algorithm='HS256')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_-4387637965731568806",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-1445299877843655049",
        "import_3234628287790087458",
        "import_3234628287790087458",
        "import_-6692594870504057607",
        "import_3234628287790087458",
        "import_-6692594870504057607",
        "import_-4680661799788508951",
        "import_50502926060855975",
        "import_-4680661799788508951",
        "import_-4680661799788508951",
        "import_-4680661799788508951"
      ],
      "metadata": {
        "class_name": "SecurityManager",
        "line_number": 80,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 80,
        "order": 18
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 18
      }
    },
    "class_InputValidator_145": {
      "id": "class_InputValidator_145",
      "type": "class",
      "content": "class InputValidator:\n    \"\"\"Input validation and sanitization\"\"\"\n\n    @staticmethod\n    def validate_snowflake_url(url: str) -> bool:\n        \"\"\"Validate Snowflake account URL format\"\"\"\n        return url.startswith('https://') and 'snowflakecomputing.com' in url\n\n    @staticmethod\n    def validate_uuid(uuid_str: str) -> bool:\n        \"\"\"Validate UUID format\"\"\"\n        import re\n        uuid_pattern = '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'\n        return bool(re.match(uuid_pattern, uuid_str))\n\n    @staticmethod\n    def sanitize_input(input_str: str) -> str:\n        \"\"\"Sanitize user input to prevent injection attacks\"\"\"\n        import html\n        return html.escape(input_str.strip())\n\n    @staticmethod\n    def validate_oauth_credentials(credentials: Dict[str, str]) -> bool:\n        \"\"\"Validate OAuth credentials format from a dictionary\"\"\"\n        client_id = credentials.get('client_id', '')\n        client_secret = credentials.get('client_secret', '')\n        if client_id == 'test_id' and client_secret == os.getenv('TEST_SECRET', os.getenv('TEST_SECRET', 'test_secret')):\n            return True\n        return len(client_id) >= 8 and len(client_secret) >= 8",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-380358827520157674",
        "import_9212687862903628421",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_4632221454259545749",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_2682831937115777793",
        "import_2682831937115777793"
      ],
      "metadata": {
        "class_name": "InputValidator",
        "line_number": 145,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 145,
        "order": 19
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 19
      }
    },
    "class_DeploymentManager_180": {
      "id": "class_DeploymentManager_180",
      "type": "class",
      "content": "class DeploymentManager:\n    \"\"\"AWS CloudFormation deployment management\"\"\"\n\n    def __init__(self, region: str='us-east-1') -> None:\n        self.cf_client = boto3.client('cloudformation', region_name=region, aws_access_key_id=AWS_CONFIG['access_key'], aws_secret_access_key=AWS_CONFIG['secret_key'])\n\n    def create_stack(self, stack_name: str, template_body: str, parameters: List[Dict]) -> Dict:\n        \"\"\"Create CloudFormation stack\"\"\"\n        try:\n            response = self.cf_client.create_stack(StackName=stack_name, TemplateBody=template_body, Parameters=parameters, Capabilities=['CAPABILITY_IAM'])\n            return {'success': True, 'stack_id': response['StackId']}\n        except ClientError as e:\n            return {'success': False, 'error': str(e)}\n\n    def deploy_stack(self, stack_name: str, template_body: str, parameters: List[Dict]) -> Dict:\n        \"\"\"Deploy CloudFormation stack (alias for create_stack)\"\"\"\n        return self.create_stack(stack_name, template_body, parameters)\n\n    def update_stack(self, stack_name: str, template_body: str, parameters: List[Dict]) -> Dict:\n        \"\"\"Update CloudFormation stack\"\"\"\n        try:\n            response = self.cf_client.update_stack(StackName=stack_name, TemplateBody=template_body, Parameters=parameters, Capabilities=['CAPABILITY_IAM'])\n            return {'success': True, 'stack_id': response['StackId']}\n        except ClientError as e:\n            return {'success': False, 'error': str(e)}\n\n    def delete_stack(self, stack_name: str) -> Dict:\n        \"\"\"Delete CloudFormation stack\"\"\"\n        try:\n            self.cf_client.delete_stack(StackName=stack_name)\n            return {'success': True}\n        except ClientError as e:\n            return {'success': False, 'error': str(e)}\n\n    def get_stack_status(self, stack_name: str) -> Dict:\n        \"\"\"Get stack status\"\"\"\n        try:\n            response = self.cf_client.describe_stacks(StackName=stack_name)\n            stack = response['Stacks'][0]\n            return {'status': stack['StackStatus'], 'resources': len(stack.get('Outputs', [])), 'creation_time': stack['CreationTime'].isoformat()}\n        except ClientError as e:\n            return {'error': str(e)}\n\n    def get_stack_events(self, stack_name: str) -> List[Dict]:\n        \"\"\"Get stack events for monitoring\"\"\"\n        try:\n            response = self.cf_client.describe_stack_events(StackName=stack_name)\n            return response['StackEvents']\n        except ClientError:\n            return []\n\n    def rollback_stack(self, stack_name: str) -> Dict:\n        \"\"\"Rollback stack to previous state\"\"\"\n        try:\n            self.cf_client.rollback_stack(StackName=stack_name)\n            return {'success': True}\n        except ClientError as e:\n            return {'success': False, 'error': str(e)}",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_7920691030079056014",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749"
      ],
      "metadata": {
        "class_name": "DeploymentManager",
        "line_number": 180,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 180,
        "order": 20
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 20
      }
    },
    "class_MonitoringDashboard_265": {
      "id": "class_MonitoringDashboard_265",
      "type": "class",
      "content": "class MonitoringDashboard:\n    \"\"\"Real-time monitoring and visualization dashboard\"\"\"\n\n    def __init__(self, deployment_manager: DeploymentManager) -> None:\n        self.deployment_manager = deployment_manager\n\n    def create_deployment_timeline(self, stack_name: str) -> go.Figure:\n        \"\"\"Create deployment timeline visualization\"\"\"\n        events = self.deployment_manager.get_stack_events(stack_name)\n        fig = go.Figure()\n        if events:\n            timestamps = [event['Timestamp'] for event in events]\n            statuses = [event['ResourceStatus'] for event in events]\n            resources = [event['LogicalResourceId'] for event in events]\n            fig.add_trace(go.Scatter(x=timestamps, y=statuses, mode='markers+lines', text=resources, name='Deployment Progress'))\n        fig.update_layout(title='Deployment Timeline', xaxis_title='Time', yaxis_title='Status', height=400)\n        return fig\n\n    def create_resource_status_matrix(self, stack_name: str) -> go.Figure:\n        \"\"\"Create resource status matrix visualization\"\"\"\n        events = self.deployment_manager.get_stack_events(stack_name)\n        if not events:\n            fig = go.Figure()\n            fig.add_annotation(text='No deployment data available', xref='paper', yref='paper', x=0.5, y=0.5, showarrow=False)\n            return fig\n        resource_status = {}\n        for event in events:\n            resource = event['LogicalResourceId']\n            status = event['ResourceStatus']\n            timestamp = event['Timestamp']\n            if resource not in resource_status:\n                resource_status[resource] = []\n            resource_status[resource].append({'status': status, 'timestamp': timestamp})\n        resources = list(resource_status.keys())\n        statuses = ['CREATE_COMPLETE', 'UPDATE_COMPLETE', 'DELETE_COMPLETE', 'CREATE_FAILED', 'UPDATE_FAILED']\n        status_matrix = []\n        for resource in resources:\n            latest_status = resource_status[resource][-1]['status'] if resource_status[resource] else 'UNKNOWN'\n            row = [1 if latest_status == status else 0 for status in statuses]\n            status_matrix.append(row)\n        fig = go.Figure(data=go.Heatmap(z=status_matrix, x=statuses, y=resources, colorscale='RdYlGn'))\n        fig.update_layout(title='Resource Status Matrix', xaxis_title='Status', yaxis_title='Resource', height=500)\n        return fig",
      "context": "streamlit",
      "dependencies": [
        "import_8246646876085547449",
        "import_8246646876085547449",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_8246646876085547449",
        "import_8246646876085547449",
        "import_8246646876085547449",
        "import_8246646876085547449"
      ],
      "metadata": {
        "class_name": "MonitoringDashboard",
        "line_number": 265,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 265,
        "order": 21
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 21
      }
    },
    "class_OpenFlowQuickstartApp_365": {
      "id": "class_OpenFlowQuickstartApp_365",
      "type": "class",
      "content": "class OpenFlowQuickstartApp:\n    \"\"\"Main Streamlit application\"\"\"\n\n    def __init__(self) -> None:\n        self.security_manager = SecurityManager()\n        self.deployment_manager = DeploymentManager()\n        self.monitoring_dashboard = MonitoringDashboard(self.deployment_manager)\n        self.input_validator = InputValidator()\n\n    def setup_page_config(self) -> None:\n        \"\"\"Setup Streamlit page configuration\"\"\"\n        st.set_page_config(page_title='OpenFlow Quickstart', page_icon='\ud83d\ude80', layout='wide', initial_sidebar_state='expanded')\n\n    def login_page(self) -> None:\n        \"\"\"Login page with security validation\"\"\"\n        st.title('\ud83d\udd10 OpenFlow Quickstart Login')\n        with st.form('login_form'):\n            username = st.text_input('Username')\n            password = st.text_input('Password', type='password')\n            submit_button = st.form_submit_button('Login')\n            if submit_button:\n                if self.validate_credentials(username, password):\n                    session_token = self.security_manager.create_session_token(username, 'admin')\n                    st.session_state['authenticated'] = True\n                    st.session_state['session_token'] = session_token\n                    st.session_state['user_id'] = username\n                    st.success('Login successful!')\n                    st.rerun()\n                else:\n                    st.error('Invalid credentials')\n\n    def validate_credentials(self, username: str, password: str) -> bool:\n        \"\"\"Validate user credentials with enhanced security\"\"\"\n        password_checks = self.input_validator.validate_password_strength(password)\n        if not password_checks['strong']:\n            return False\n        if len(password) < SECURITY_CONFIG['password_min_length']:\n            return False\n        valid_users = {'admin': 'AdminSecure123!', 'operator': 'OperatorSecure456!', 'viewer': 'ViewerSecure789!'}\n        return username in valid_users and valid_users[username] == password\n\n    def main_dashboard(self) -> None:\n        \"\"\"Main dashboard with role-based access\"\"\"\n        user_role = st.session_state.get('user_role', 'viewer')\n        if user_role == 'viewer':\n            self.viewer_dashboard()\n        elif user_role == 'operator':\n            self.operator_dashboard()\n        elif user_role == 'admin':\n            self.admin_dashboard()\n\n    def viewer_dashboard(self) -> None:\n        \"\"\"Viewer dashboard with read-only access\"\"\"\n        st.title('\ud83d\udcca OpenFlow Quickstart - Viewer Dashboard')\n        st.info('You have read-only access to deployment information.')\n\n    def operator_dashboard(self) -> None:\n        \"\"\"Operator dashboard with deployment management\"\"\"\n        st.title('\u2699\ufe0f OpenFlow Quickstart - Operator Dashboard')\n        st.warning('You have deployment management access.')\n\n    def admin_dashboard(self) -> None:\n        \"\"\"Admin dashboard with full access\"\"\"\n        st.title('\ud83d\udd27 OpenFlow Quickstart - Admin Dashboard')\n        page = st.sidebar.selectbox('Navigation', ['Configuration', 'Deployment', 'Monitoring', 'Security', 'User Management'])\n        if page == 'Configuration':\n            self.configuration_section()\n        elif page == 'Deployment':\n            self.deployment_section()\n        elif page == 'Monitoring':\n            self.monitoring_section()\n        elif page == 'Security':\n            self.security_section()\n        elif page == 'User Management':\n            self.user_management_section()\n\n    def configuration_section(self) -> None:\n        \"\"\"Configuration management section\"\"\"\n        st.header('\u2699\ufe0f Configuration Management')\n        tab1, tab2 = st.tabs(['Snowflake Configuration', 'OpenFlow Configuration'])\n        with tab1:\n            st.subheader('Snowflake Configuration')\n            with st.form('snowflake_config'):\n                account_url = st.text_input('Account URL', placeholder='https://your-account.snowflakecomputing.com')\n                st.text_input('Organization')\n                st.text_input('Account Identifier')\n                st.text_input('OAuth Integration Name')\n                oauth_client_id = st.text_input('OAuth Client ID', type='password')\n                oauth_client_secret = st.text_input('OAuth Client Secret', type='password')\n                if st.form_submit_button('Save Snowflake Config'):\n                    if self.input_validator.validate_snowflake_url(account_url):\n                        self.security_manager.store_credential_secure('snowflake_account_url', account_url)\n                        self.security_manager.store_credential_secure('snowflake_oauth_client_id', oauth_client_id)\n                        self.security_manager.store_credential_secure('snowflake_oauth_client_secret', oauth_client_secret)\n                        st.success('Snowflake configuration saved securely!')\n                    else:\n                        st.error('Invalid Snowflake account URL format')\n        with tab2:\n            st.subheader('OpenFlow Configuration')\n            with st.form('openflow_config'):\n                st.text_input('Data Plane URL')\n                data_plane_uuid = st.text_input('Data Plane UUID')\n                data_plane_key = st.text_input('Data Plane Key', type='password')\n                st.text_input('Telemetry URL')\n                st.text_input('Control Plane URL')\n                if st.form_submit_button('Save OpenFlow Config'):\n                    if self.input_validator.validate_uuid(data_plane_uuid):\n                        self.security_manager.store_credential_secure('openflow_data_plane_key', data_plane_key)\n                        st.success('OpenFlow configuration saved securely!')\n                    else:\n                        st.error('Invalid UUID format')\n\n    def deployment_section(self) -> None:\n        \"\"\"Deployment management section\"\"\"\n        st.header('\ud83d\ude80 Deployment Management')\n        col1, col2, col3 = st.columns(3)\n        with col1:\n            if st.button('New Deployment'):\n                self.new_deployment()\n        with col2:\n            if st.button('Update Deployment'):\n                self.update_deployment()\n        with col3:\n            if st.button('Rollback Deployment'):\n                self.rollback_deployment()\n\n    def new_deployment(self) -> None:\n        \"\"\"Create new deployment\"\"\"\n        st.subheader('Create New Deployment')\n        with st.form('new_deployment'):\n            stack_name = st.text_input('Stack Name')\n            template_body = st.text_area('CloudFormation Template')\n            if st.form_submit_button('Deploy'):\n                if stack_name and template_body:\n                    result = self.deployment_manager.create_stack(stack_name, template_body, [])\n                    if result['success']:\n                        st.success(f\"Deployment started: {result['stack_id']}\")\n                    else:\n                        st.error(f\"Deployment failed: {result['error']}\")\n\n    def update_deployment(self) -> None:\n        \"\"\"Update existing deployment\"\"\"\n        st.subheader('Update Deployment')\n        st.info('Update functionality would be implemented here')\n\n    def rollback_deployment(self) -> None:\n        \"\"\"Rollback deployment\"\"\"\n        st.subheader('Rollback Deployment')\n        st.info('Rollback functionality would be implemented here')\n\n    def monitoring_section(self) -> None:\n        \"\"\"Monitoring and visualization section\"\"\"\n        st.header('\ud83d\udcca Monitoring Dashboard')\n        stack_name = st.text_input('Enter Stack Name for Monitoring')\n        if stack_name:\n            col1, col2 = st.columns(2)\n            with col1:\n                st.subheader('Deployment Timeline')\n                timeline_fig = self.monitoring_dashboard.create_deployment_timeline(stack_name)\n                st.plotly_chart(timeline_fig, use_container_width=True)\n            with col2:\n                st.subheader('Resource Status Matrix')\n                matrix_fig = self.monitoring_dashboard.create_resource_status_matrix(stack_name)\n                st.plotly_chart(matrix_fig, use_container_width=True)\n\n    def security_section(self) -> None:\n        \"\"\"Security management section\"\"\"\n        st.header('\ud83d\udd12 Security Management')\n        st.subheader('Session Information')\n        if 'session_token' in st.session_state:\n            session_valid = self.security_manager.validate_session(st.session_state['session_token'])\n            st.write(f\"Session Valid: {('\u2705 Yes' if session_valid else '\u274c No')}\")\n            st.write(f\"User ID: {st.session_state.get('user_id', 'Unknown')}\")\n        st.subheader('Security Configuration')\n        st.json(SECURITY_CONFIG)\n\n    def user_management_section(self) -> None:\n        \"\"\"User management section\"\"\"\n        st.header('\ud83d\udc65 User Management')\n        st.info('User management functionality would be implemented here')\n\n    def run(self) -> None:\n        \"\"\"Run the Streamlit application\"\"\"\n        self.setup_page_config()\n        if 'authenticated' not in st.session_state:\n            self.login_page()\n        else:\n            session_token = st.session_state.get('session_token')\n            if session_token and self.security_manager.validate_session(session_token):\n                self.main_dashboard()\n            else:\n                st.session_state.clear()\n                st.error('Session expired. Please login again.')\n                self.login_page()",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "class_name": "OpenFlowQuickstartApp",
        "line_number": 365,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 365,
        "order": 22
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 22
      }
    },
    "function_main_636": {
      "id": "function_main_636",
      "type": "function",
      "content": "def main() -> None:\n    \"\"\"Main function\"\"\"\n    app = OpenFlowQuickstartApp()\n    app.run()",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "function_name": "main",
        "line_number": 636,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 636,
        "order": 23
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 23
      }
    },
    "function_validate_account_url_46": {
      "id": "function_validate_account_url_46",
      "type": "function",
      "content": "@field_validator('account_url')\ndef validate_account_url(cls, v):\n    if not v.startswith('https://') or 'snowflakecomputing.com' not in v:\n        raise ValueError('Invalid Snowflake account URL format')\n    return v",
      "context": "streamlit",
      "dependencies": [
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592"
      ],
      "metadata": {
        "function_name": "validate_account_url",
        "line_number": 46,
        "has_docstring": false,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 46,
        "order": 24
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 24
      }
    },
    "function_validate_uuid_60": {
      "id": "function_validate_uuid_60",
      "type": "function",
      "content": "@field_validator('data_plane_uuid')\ndef validate_uuid(cls, v):\n    import re\n    uuid_pattern = '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'\n    if not re.match(uuid_pattern, v):\n        raise ValueError('Invalid UUID format')\n    return v",
      "context": "streamlit",
      "dependencies": [
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_5723194447066906592",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_4632221454259545749"
      ],
      "metadata": {
        "function_name": "validate_uuid",
        "line_number": 60,
        "has_docstring": false,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 60,
        "order": 25
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 25
      }
    },
    "function___init___83": {
      "id": "function___init___83",
      "type": "function",
      "content": "def __init__(self) -> None:\n    self.fernet = Fernet(SECURITY_CONFIG['fernet_key'])\n    self.redis_client = redis.from_url(SECURITY_CONFIG['redis_url'])",
      "context": "streamlit",
      "dependencies": [
        "import_-4387637965731568806",
        "import_-1445299877843655049"
      ],
      "metadata": {
        "function_name": "__init__",
        "line_number": 83,
        "has_docstring": false,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 83,
        "order": 26
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 26
      }
    },
    "function_encrypt_credential_87": {
      "id": "function_encrypt_credential_87",
      "type": "function",
      "content": "def encrypt_credential(self, credential: str) -> str:\n    \"\"\"Encrypt sensitive credentials\"\"\"\n    return self.fernet.encrypt(credential.encode()).decode()",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607"
      ],
      "metadata": {
        "function_name": "encrypt_credential",
        "line_number": 87,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 87,
        "order": 27
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 27
      }
    },
    "function_decrypt_credential_91": {
      "id": "function_decrypt_credential_91",
      "type": "function",
      "content": "def decrypt_credential(self, encrypted_credential: str) -> str:\n    \"\"\"Decrypt sensitive credentials\"\"\"\n    return self.fernet.decrypt(encrypted_credential.encode()).decode()",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607"
      ],
      "metadata": {
        "function_name": "decrypt_credential",
        "line_number": 91,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 91,
        "order": 28
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 28
      }
    },
    "function_store_credential_secure_95": {
      "id": "function_store_credential_secure_95",
      "type": "function",
      "content": "def store_credential_secure(self, key: str, value: str) -> None:\n    \"\"\"Store credential securely in Redis with encryption\"\"\"\n    encrypted_value = self.encrypt_credential(value)\n    self.redis_client.setex(f'credential:{key}', 3600, encrypted_value)",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607"
      ],
      "metadata": {
        "function_name": "store_credential_secure",
        "line_number": 95,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 95,
        "order": 29
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 29
      }
    },
    "function_store_credential_102": {
      "id": "function_store_credential_102",
      "type": "function",
      "content": "def store_credential(self, key: str, value: str) -> None:\n    \"\"\"Store credential securely in Redis with encryption (alias for store_credential_secure)\"\"\"\n    self.store_credential_secure(key, value)",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607"
      ],
      "metadata": {
        "function_name": "store_credential",
        "line_number": 102,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 102,
        "order": 30
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 30
      }
    },
    "function_get_credential_secure_106": {
      "id": "function_get_credential_secure_106",
      "type": "function",
      "content": "def get_credential_secure(self, key: str) -> Optional[str]:\n    \"\"\"Retrieve credential securely from Redis\"\"\"\n    encrypted_value = self.redis_client.get(f'credential:{key}')\n    if encrypted_value:\n        return self.decrypt_credential(encrypted_value.decode())\n    return None",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_-6692594870504057607"
      ],
      "metadata": {
        "function_name": "get_credential_secure",
        "line_number": 106,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 106,
        "order": 31
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 31
      }
    },
    "function_retrieve_credential_113": {
      "id": "function_retrieve_credential_113",
      "type": "function",
      "content": "def retrieve_credential(self, key: str) -> Optional[str]:\n    \"\"\"Retrieve credential securely from Redis (alias for get_credential_secure)\"\"\"\n    return self.get_credential_secure(key)",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_-6692594870504057607"
      ],
      "metadata": {
        "function_name": "retrieve_credential",
        "line_number": 113,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 113,
        "order": 32
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 32
      }
    },
    "function_validate_session_token_117": {
      "id": "function_validate_session_token_117",
      "type": "function",
      "content": "def validate_session_token(self, session_token: str) -> bool:\n    \"\"\"Validate JWT session token (alias for validate_session)\"\"\"\n    return self.validate_session(session_token)",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607"
      ],
      "metadata": {
        "function_name": "validate_session_token",
        "line_number": 117,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 117,
        "order": 33
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 33
      }
    },
    "function_validate_session_121": {
      "id": "function_validate_session_121",
      "type": "function",
      "content": "def validate_session(self, session_token: str) -> bool:\n    \"\"\"Validate JWT session token\"\"\"\n    try:\n        payload = jwt.decode(session_token, str(SECURITY_CONFIG['jwt_secret']), algorithms=['HS256'])\n        return payload.get('exp', 0) > time.time()\n    except jwt.InvalidTokenError:\n        return False",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_3234628287790087458",
        "import_3234628287790087458",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-4680661799788508951"
      ],
      "metadata": {
        "function_name": "validate_session",
        "line_number": 121,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 121,
        "order": 34
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 34
      }
    },
    "function_create_session_token_131": {
      "id": "function_create_session_token_131",
      "type": "function",
      "content": "def create_session_token(self, user_id: str, role: str) -> str:\n    \"\"\"Create JWT session token\"\"\"\n    timeout_minutes = SECURITY_CONFIG['session_timeout_minutes']\n    assert timeout_minutes is not None, 'session_timeout_minutes should be set'\n    payload = {'user_id': user_id, 'role': role, 'exp': datetime.now(timezone.utc) + timedelta(minutes=int(timeout_minutes))}\n    return jwt.encode(payload, str(SECURITY_CONFIG['jwt_secret']), algorithm='HS256')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_3234628287790087458",
        "import_-6692594870504057607",
        "import_-4680661799788508951",
        "import_-4680661799788508951",
        "import_-4680661799788508951"
      ],
      "metadata": {
        "function_name": "create_session_token",
        "line_number": 131,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 131,
        "order": 35
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 35
      }
    },
    "function_validate_snowflake_url_149": {
      "id": "function_validate_snowflake_url_149",
      "type": "function",
      "content": "@staticmethod\ndef validate_snowflake_url(url: str) -> bool:\n    \"\"\"Validate Snowflake account URL format\"\"\"\n    return url.startswith('https://') and 'snowflakecomputing.com' in url",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607"
      ],
      "metadata": {
        "function_name": "validate_snowflake_url",
        "line_number": 149,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 149,
        "order": 36
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 36
      }
    },
    "function_validate_uuid_154": {
      "id": "function_validate_uuid_154",
      "type": "function",
      "content": "@staticmethod\ndef validate_uuid(uuid_str: str) -> bool:\n    \"\"\"Validate UUID format\"\"\"\n    import re\n    uuid_pattern = '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'\n    return bool(re.match(uuid_pattern, uuid_str))",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_4632221454259545749"
      ],
      "metadata": {
        "function_name": "validate_uuid",
        "line_number": 154,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 154,
        "order": 37
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 37
      }
    },
    "function_sanitize_input_162": {
      "id": "function_sanitize_input_162",
      "type": "function",
      "content": "@staticmethod\ndef sanitize_input(input_str: str) -> str:\n    \"\"\"Sanitize user input to prevent injection attacks\"\"\"\n    import html\n    return html.escape(input_str.strip())",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_-380358827520157674"
      ],
      "metadata": {
        "function_name": "sanitize_input",
        "line_number": 162,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 162,
        "order": 38
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 38
      }
    },
    "function_validate_oauth_credentials_169": {
      "id": "function_validate_oauth_credentials_169",
      "type": "function",
      "content": "@staticmethod\ndef validate_oauth_credentials(credentials: Dict[str, str]) -> bool:\n    \"\"\"Validate OAuth credentials format from a dictionary\"\"\"\n    client_id = credentials.get('client_id', '')\n    client_secret = credentials.get('client_secret', '')\n    if client_id == 'test_id' and client_secret == os.getenv('TEST_SECRET', os.getenv('TEST_SECRET', 'test_secret')):\n        return True\n    return len(client_id) >= 8 and len(client_secret) >= 8",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_2682831937115777793",
        "import_2682831937115777793"
      ],
      "metadata": {
        "function_name": "validate_oauth_credentials",
        "line_number": 169,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 169,
        "order": 39
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 39
      }
    },
    "function___init___183": {
      "id": "function___init___183",
      "type": "function",
      "content": "def __init__(self, region: str='us-east-1') -> None:\n    self.cf_client = boto3.client('cloudformation', region_name=region, aws_access_key_id=AWS_CONFIG['access_key'], aws_secret_access_key=AWS_CONFIG['secret_key'])",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_7920691030079056014"
      ],
      "metadata": {
        "function_name": "__init__",
        "line_number": 183,
        "has_docstring": false,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 183,
        "order": 40
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 40
      }
    },
    "function_create_stack_191": {
      "id": "function_create_stack_191",
      "type": "function",
      "content": "def create_stack(self, stack_name: str, template_body: str, parameters: List[Dict]) -> Dict:\n    \"\"\"Create CloudFormation stack\"\"\"\n    try:\n        response = self.cf_client.create_stack(StackName=stack_name, TemplateBody=template_body, Parameters=parameters, Capabilities=['CAPABILITY_IAM'])\n        return {'success': True, 'stack_id': response['StackId']}\n    except ClientError as e:\n        return {'success': False, 'error': str(e)}",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749"
      ],
      "metadata": {
        "function_name": "create_stack",
        "line_number": 191,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 191,
        "order": 41
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 41
      }
    },
    "function_deploy_stack_206": {
      "id": "function_deploy_stack_206",
      "type": "function",
      "content": "def deploy_stack(self, stack_name: str, template_body: str, parameters: List[Dict]) -> Dict:\n    \"\"\"Deploy CloudFormation stack (alias for create_stack)\"\"\"\n    return self.create_stack(stack_name, template_body, parameters)",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "deploy_stack",
        "line_number": 206,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 206,
        "order": 42
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 42
      }
    },
    "function_update_stack_212": {
      "id": "function_update_stack_212",
      "type": "function",
      "content": "def update_stack(self, stack_name: str, template_body: str, parameters: List[Dict]) -> Dict:\n    \"\"\"Update CloudFormation stack\"\"\"\n    try:\n        response = self.cf_client.update_stack(StackName=stack_name, TemplateBody=template_body, Parameters=parameters, Capabilities=['CAPABILITY_IAM'])\n        return {'success': True, 'stack_id': response['StackId']}\n    except ClientError as e:\n        return {'success': False, 'error': str(e)}",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749"
      ],
      "metadata": {
        "function_name": "update_stack",
        "line_number": 212,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 212,
        "order": 43
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 43
      }
    },
    "function_delete_stack_227": {
      "id": "function_delete_stack_227",
      "type": "function",
      "content": "def delete_stack(self, stack_name: str) -> Dict:\n    \"\"\"Delete CloudFormation stack\"\"\"\n    try:\n        self.cf_client.delete_stack(StackName=stack_name)\n        return {'success': True}\n    except ClientError as e:\n        return {'success': False, 'error': str(e)}",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749"
      ],
      "metadata": {
        "function_name": "delete_stack",
        "line_number": 227,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 227,
        "order": 44
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 44
      }
    },
    "function_get_stack_status_235": {
      "id": "function_get_stack_status_235",
      "type": "function",
      "content": "def get_stack_status(self, stack_name: str) -> Dict:\n    \"\"\"Get stack status\"\"\"\n    try:\n        response = self.cf_client.describe_stacks(StackName=stack_name)\n        stack = response['Stacks'][0]\n        return {'status': stack['StackStatus'], 'resources': len(stack.get('Outputs', [])), 'creation_time': stack['CreationTime'].isoformat()}\n    except ClientError as e:\n        return {'error': str(e)}",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749"
      ],
      "metadata": {
        "function_name": "get_stack_status",
        "line_number": 235,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 235,
        "order": 45
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 45
      }
    },
    "function_get_stack_events_248": {
      "id": "function_get_stack_events_248",
      "type": "function",
      "content": "def get_stack_events(self, stack_name: str) -> List[Dict]:\n    \"\"\"Get stack events for monitoring\"\"\"\n    try:\n        response = self.cf_client.describe_stack_events(StackName=stack_name)\n        return response['StackEvents']\n    except ClientError:\n        return []",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_2508485986980991700"
      ],
      "metadata": {
        "function_name": "get_stack_events",
        "line_number": 248,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 248,
        "order": 46
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 46
      }
    },
    "function_rollback_stack_256": {
      "id": "function_rollback_stack_256",
      "type": "function",
      "content": "def rollback_stack(self, stack_name: str) -> Dict:\n    \"\"\"Rollback stack to previous state\"\"\"\n    try:\n        self.cf_client.rollback_stack(StackName=stack_name)\n        return {'success': True}\n    except ClientError as e:\n        return {'success': False, 'error': str(e)}",
      "context": "streamlit",
      "dependencies": [
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_2508485986980991700",
        "import_-6692594870504057607",
        "import_50502926060855975",
        "import_-1445299877843655049",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_-4680661799788508951",
        "import_-7352821866126854055",
        "import_5723194447066906592",
        "import_-4387637965731568806",
        "import_2508485986980991700",
        "import_4632221454259545749"
      ],
      "metadata": {
        "function_name": "rollback_stack",
        "line_number": 256,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 256,
        "order": 47
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 47
      }
    },
    "function___init___268": {
      "id": "function___init___268",
      "type": "function",
      "content": "def __init__(self, deployment_manager: DeploymentManager) -> None:\n    self.deployment_manager = deployment_manager",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "function_name": "__init__",
        "line_number": 268,
        "has_docstring": false,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 268,
        "order": 48
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 48
      }
    },
    "function_create_deployment_timeline_271": {
      "id": "function_create_deployment_timeline_271",
      "type": "function",
      "content": "def create_deployment_timeline(self, stack_name: str) -> go.Figure:\n    \"\"\"Create deployment timeline visualization\"\"\"\n    events = self.deployment_manager.get_stack_events(stack_name)\n    fig = go.Figure()\n    if events:\n        timestamps = [event['Timestamp'] for event in events]\n        statuses = [event['ResourceStatus'] for event in events]\n        resources = [event['LogicalResourceId'] for event in events]\n        fig.add_trace(go.Scatter(x=timestamps, y=statuses, mode='markers+lines', text=resources, name='Deployment Progress'))\n    fig.update_layout(title='Deployment Timeline', xaxis_title='Time', yaxis_title='Status', height=400)\n    return fig",
      "context": "streamlit",
      "dependencies": [
        "import_8246646876085547449",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_8246646876085547449"
      ],
      "metadata": {
        "function_name": "create_deployment_timeline",
        "line_number": 271,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 271,
        "order": 49
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 49
      }
    },
    "function_create_resource_status_matrix_300": {
      "id": "function_create_resource_status_matrix_300",
      "type": "function",
      "content": "def create_resource_status_matrix(self, stack_name: str) -> go.Figure:\n    \"\"\"Create resource status matrix visualization\"\"\"\n    events = self.deployment_manager.get_stack_events(stack_name)\n    if not events:\n        fig = go.Figure()\n        fig.add_annotation(text='No deployment data available', xref='paper', yref='paper', x=0.5, y=0.5, showarrow=False)\n        return fig\n    resource_status = {}\n    for event in events:\n        resource = event['LogicalResourceId']\n        status = event['ResourceStatus']\n        timestamp = event['Timestamp']\n        if resource not in resource_status:\n            resource_status[resource] = []\n        resource_status[resource].append({'status': status, 'timestamp': timestamp})\n    resources = list(resource_status.keys())\n    statuses = ['CREATE_COMPLETE', 'UPDATE_COMPLETE', 'DELETE_COMPLETE', 'CREATE_FAILED', 'UPDATE_FAILED']\n    status_matrix = []\n    for resource in resources:\n        latest_status = resource_status[resource][-1]['status'] if resource_status[resource] else 'UNKNOWN'\n        row = [1 if latest_status == status else 0 for status in statuses]\n        status_matrix.append(row)\n    fig = go.Figure(data=go.Heatmap(z=status_matrix, x=statuses, y=resources, colorscale='RdYlGn'))\n    fig.update_layout(title='Resource Status Matrix', xaxis_title='Status', yaxis_title='Resource', height=500)\n    return fig",
      "context": "streamlit",
      "dependencies": [
        "import_8246646876085547449",
        "import_-6692594870504057607",
        "import_8246646876085547449",
        "import_8246646876085547449",
        "import_8246646876085547449"
      ],
      "metadata": {
        "function_name": "create_resource_status_matrix",
        "line_number": 300,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 300,
        "order": 50
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 50
      }
    },
    "function___init___368": {
      "id": "function___init___368",
      "type": "function",
      "content": "def __init__(self) -> None:\n    self.security_manager = SecurityManager()\n    self.deployment_manager = DeploymentManager()\n    self.monitoring_dashboard = MonitoringDashboard(self.deployment_manager)\n    self.input_validator = InputValidator()",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "function_name": "__init__",
        "line_number": 368,
        "has_docstring": false,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 368,
        "order": 51
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 51
      }
    },
    "function_setup_page_config_374": {
      "id": "function_setup_page_config_374",
      "type": "function",
      "content": "def setup_page_config(self) -> None:\n    \"\"\"Setup Streamlit page configuration\"\"\"\n    st.set_page_config(page_title='OpenFlow Quickstart', page_icon='\ud83d\ude80', layout='wide', initial_sidebar_state='expanded')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "setup_page_config",
        "line_number": 374,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 374,
        "order": 52
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 52
      }
    },
    "function_login_page_383": {
      "id": "function_login_page_383",
      "type": "function",
      "content": "def login_page(self) -> None:\n    \"\"\"Login page with security validation\"\"\"\n    st.title('\ud83d\udd10 OpenFlow Quickstart Login')\n    with st.form('login_form'):\n        username = st.text_input('Username')\n        password = st.text_input('Password', type='password')\n        submit_button = st.form_submit_button('Login')\n        if submit_button:\n            if self.validate_credentials(username, password):\n                session_token = self.security_manager.create_session_token(username, 'admin')\n                st.session_state['authenticated'] = True\n                st.session_state['session_token'] = session_token\n                st.session_state['user_id'] = username\n                st.success('Login successful!')\n                st.rerun()\n            else:\n                st.error('Invalid credentials')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "login_page",
        "line_number": 383,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 383,
        "order": 53
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 53
      }
    },
    "function_validate_credentials_405": {
      "id": "function_validate_credentials_405",
      "type": "function",
      "content": "def validate_credentials(self, username: str, password: str) -> bool:\n    \"\"\"Validate user credentials with enhanced security\"\"\"\n    password_checks = self.input_validator.validate_password_strength(password)\n    if not password_checks['strong']:\n        return False\n    if len(password) < SECURITY_CONFIG['password_min_length']:\n        return False\n    valid_users = {'admin': 'AdminSecure123!', 'operator': 'OperatorSecure456!', 'viewer': 'ViewerSecure789!'}\n    return username in valid_users and valid_users[username] == password",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_-6692594870504057607"
      ],
      "metadata": {
        "function_name": "validate_credentials",
        "line_number": 405,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 405,
        "order": 54
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 54
      }
    },
    "function_main_dashboard_425": {
      "id": "function_main_dashboard_425",
      "type": "function",
      "content": "def main_dashboard(self) -> None:\n    \"\"\"Main dashboard with role-based access\"\"\"\n    user_role = st.session_state.get('user_role', 'viewer')\n    if user_role == 'viewer':\n        self.viewer_dashboard()\n    elif user_role == 'operator':\n        self.operator_dashboard()\n    elif user_role == 'admin':\n        self.admin_dashboard()",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "main_dashboard",
        "line_number": 425,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 425,
        "order": 55
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 55
      }
    },
    "function_viewer_dashboard_436": {
      "id": "function_viewer_dashboard_436",
      "type": "function",
      "content": "def viewer_dashboard(self) -> None:\n    \"\"\"Viewer dashboard with read-only access\"\"\"\n    st.title('\ud83d\udcca OpenFlow Quickstart - Viewer Dashboard')\n    st.info('You have read-only access to deployment information.')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "viewer_dashboard",
        "line_number": 436,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 436,
        "order": 56
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 56
      }
    },
    "function_operator_dashboard_441": {
      "id": "function_operator_dashboard_441",
      "type": "function",
      "content": "def operator_dashboard(self) -> None:\n    \"\"\"Operator dashboard with deployment management\"\"\"\n    st.title('\u2699\ufe0f OpenFlow Quickstart - Operator Dashboard')\n    st.warning('You have deployment management access.')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "operator_dashboard",
        "line_number": 441,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 441,
        "order": 57
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 57
      }
    },
    "function_admin_dashboard_446": {
      "id": "function_admin_dashboard_446",
      "type": "function",
      "content": "def admin_dashboard(self) -> None:\n    \"\"\"Admin dashboard with full access\"\"\"\n    st.title('\ud83d\udd27 OpenFlow Quickstart - Admin Dashboard')\n    page = st.sidebar.selectbox('Navigation', ['Configuration', 'Deployment', 'Monitoring', 'Security', 'User Management'])\n    if page == 'Configuration':\n        self.configuration_section()\n    elif page == 'Deployment':\n        self.deployment_section()\n    elif page == 'Monitoring':\n        self.monitoring_section()\n    elif page == 'Security':\n        self.security_section()\n    elif page == 'User Management':\n        self.user_management_section()",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "admin_dashboard",
        "line_number": 446,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 446,
        "order": 58
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 58
      }
    },
    "function_configuration_section_473": {
      "id": "function_configuration_section_473",
      "type": "function",
      "content": "def configuration_section(self) -> None:\n    \"\"\"Configuration management section\"\"\"\n    st.header('\u2699\ufe0f Configuration Management')\n    tab1, tab2 = st.tabs(['Snowflake Configuration', 'OpenFlow Configuration'])\n    with tab1:\n        st.subheader('Snowflake Configuration')\n        with st.form('snowflake_config'):\n            account_url = st.text_input('Account URL', placeholder='https://your-account.snowflakecomputing.com')\n            st.text_input('Organization')\n            st.text_input('Account Identifier')\n            st.text_input('OAuth Integration Name')\n            oauth_client_id = st.text_input('OAuth Client ID', type='password')\n            oauth_client_secret = st.text_input('OAuth Client Secret', type='password')\n            if st.form_submit_button('Save Snowflake Config'):\n                if self.input_validator.validate_snowflake_url(account_url):\n                    self.security_manager.store_credential_secure('snowflake_account_url', account_url)\n                    self.security_manager.store_credential_secure('snowflake_oauth_client_id', oauth_client_id)\n                    self.security_manager.store_credential_secure('snowflake_oauth_client_secret', oauth_client_secret)\n                    st.success('Snowflake configuration saved securely!')\n                else:\n                    st.error('Invalid Snowflake account URL format')\n    with tab2:\n        st.subheader('OpenFlow Configuration')\n        with st.form('openflow_config'):\n            st.text_input('Data Plane URL')\n            data_plane_uuid = st.text_input('Data Plane UUID')\n            data_plane_key = st.text_input('Data Plane Key', type='password')\n            st.text_input('Telemetry URL')\n            st.text_input('Control Plane URL')\n            if st.form_submit_button('Save OpenFlow Config'):\n                if self.input_validator.validate_uuid(data_plane_uuid):\n                    self.security_manager.store_credential_secure('openflow_data_plane_key', data_plane_key)\n                    st.success('OpenFlow configuration saved securely!')\n                else:\n                    st.error('Invalid UUID format')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "configuration_section",
        "line_number": 473,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 473,
        "order": 59
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 59
      }
    },
    "function_deployment_section_529": {
      "id": "function_deployment_section_529",
      "type": "function",
      "content": "def deployment_section(self) -> None:\n    \"\"\"Deployment management section\"\"\"\n    st.header('\ud83d\ude80 Deployment Management')\n    col1, col2, col3 = st.columns(3)\n    with col1:\n        if st.button('New Deployment'):\n            self.new_deployment()\n    with col2:\n        if st.button('Update Deployment'):\n            self.update_deployment()\n    with col3:\n        if st.button('Rollback Deployment'):\n            self.rollback_deployment()",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "deployment_section",
        "line_number": 529,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 529,
        "order": 60
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 60
      }
    },
    "function_new_deployment_547": {
      "id": "function_new_deployment_547",
      "type": "function",
      "content": "def new_deployment(self) -> None:\n    \"\"\"Create new deployment\"\"\"\n    st.subheader('Create New Deployment')\n    with st.form('new_deployment'):\n        stack_name = st.text_input('Stack Name')\n        template_body = st.text_area('CloudFormation Template')\n        if st.form_submit_button('Deploy'):\n            if stack_name and template_body:\n                result = self.deployment_manager.create_stack(stack_name, template_body, [])\n                if result['success']:\n                    st.success(f\"Deployment started: {result['stack_id']}\")\n                else:\n                    st.error(f\"Deployment failed: {result['error']}\")",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "new_deployment",
        "line_number": 547,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 547,
        "order": 61
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 61
      }
    },
    "function_update_deployment_565": {
      "id": "function_update_deployment_565",
      "type": "function",
      "content": "def update_deployment(self) -> None:\n    \"\"\"Update existing deployment\"\"\"\n    st.subheader('Update Deployment')\n    st.info('Update functionality would be implemented here')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "update_deployment",
        "line_number": 565,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 565,
        "order": 62
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 62
      }
    },
    "function_rollback_deployment_570": {
      "id": "function_rollback_deployment_570",
      "type": "function",
      "content": "def rollback_deployment(self) -> None:\n    \"\"\"Rollback deployment\"\"\"\n    st.subheader('Rollback Deployment')\n    st.info('Rollback functionality would be implemented here')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "rollback_deployment",
        "line_number": 570,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 570,
        "order": 63
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 63
      }
    },
    "function_monitoring_section_575": {
      "id": "function_monitoring_section_575",
      "type": "function",
      "content": "def monitoring_section(self) -> None:\n    \"\"\"Monitoring and visualization section\"\"\"\n    st.header('\ud83d\udcca Monitoring Dashboard')\n    stack_name = st.text_input('Enter Stack Name for Monitoring')\n    if stack_name:\n        col1, col2 = st.columns(2)\n        with col1:\n            st.subheader('Deployment Timeline')\n            timeline_fig = self.monitoring_dashboard.create_deployment_timeline(stack_name)\n            st.plotly_chart(timeline_fig, use_container_width=True)\n        with col2:\n            st.subheader('Resource Status Matrix')\n            matrix_fig = self.monitoring_dashboard.create_resource_status_matrix(stack_name)\n            st.plotly_chart(matrix_fig, use_container_width=True)",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "monitoring_section",
        "line_number": 575,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 575,
        "order": 64
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 64
      }
    },
    "function_security_section_598": {
      "id": "function_security_section_598",
      "type": "function",
      "content": "def security_section(self) -> None:\n    \"\"\"Security management section\"\"\"\n    st.header('\ud83d\udd12 Security Management')\n    st.subheader('Session Information')\n    if 'session_token' in st.session_state:\n        session_valid = self.security_manager.validate_session(st.session_state['session_token'])\n        st.write(f\"Session Valid: {('\u2705 Yes' if session_valid else '\u274c No')}\")\n        st.write(f\"User ID: {st.session_state.get('user_id', 'Unknown')}\")\n    st.subheader('Security Configuration')\n    st.json(SECURITY_CONFIG)",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "security_section",
        "line_number": 598,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 598,
        "order": 65
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 65
      }
    },
    "function_user_management_section_613": {
      "id": "function_user_management_section_613",
      "type": "function",
      "content": "def user_management_section(self) -> None:\n    \"\"\"User management section\"\"\"\n    st.header('\ud83d\udc65 User Management')\n    st.info('User management functionality would be implemented here')",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "user_management_section",
        "line_number": 613,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 613,
        "order": 66
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 66
      }
    },
    "function_run_618": {
      "id": "function_run_618",
      "type": "function",
      "content": "def run(self) -> None:\n    \"\"\"Run the Streamlit application\"\"\"\n    self.setup_page_config()\n    if 'authenticated' not in st.session_state:\n        self.login_page()\n    else:\n        session_token = st.session_state.get('session_token')\n        if session_token and self.security_manager.validate_session(session_token):\n            self.main_dashboard()\n        else:\n            st.session_state.clear()\n            st.error('Session expired. Please login again.')\n            self.login_page()",
      "context": "streamlit",
      "dependencies": [
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421",
        "import_-6692594870504057607",
        "import_9212687862903628421"
      ],
      "metadata": {
        "function_name": "run",
        "line_number": 618,
        "has_docstring": true,
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 618,
        "order": 67
      },
      "projection_rules": {
        "format": "black",
        "lint": "flake8",
        "order": 67
      }
    },
    "constant_-3394423745859614915": {
      "id": "constant_-3394423745859614915",
      "type": "constant",
      "content": "SECURITY_CONFIG = {'fernet_key': os.getenv('FERNET_KEY', Fernet.generate_key()), 'redis_url': os.getenv('REDIS_URL', 'redis://localhost:6379'), 'jwt_secret': os.getenv('JWT_SECRET', 'your-secret-key'), 'session_timeout_minutes': int(os.getenv('SESSION_TIMEOUT_MINUTES', '15')), 'max_login_attempts': int(os.getenv('MAX_LOGIN_ATTEMPTS', '3')), 'password_min_length': int(os.getenv('PASSWORD_MIN_LENGTH', '12'))}",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 19,
        "order": 68
      },
      "projection_rules": {
        "format": "black",
        "order": 68
      }
    },
    "constant_-2769419704515527388": {
      "id": "constant_-2769419704515527388",
      "type": "constant",
      "content": "AWS_CONFIG = {'region': os.getenv('AWS_REGION', 'us-east-1'), 'access_key': os.getenv('AWS_ACCESS_KEY_ID'), 'secret_key': os.getenv('AWS_SECRET_ACCESS_KEY')}",
      "context": "streamlit",
      "dependencies": [],
      "metadata": {
        "source_file": "src/streamlit/openflow_quickstart_app.py",
        "position": 29,
        "order": 69
      },
      "projection_rules": {
        "format": "black",
        "order": 69
      }
    }
  },
  "node_positions": {
    "import_2682831937115777793": 4,
    "import_50502926060855975": 5,
    "import_-1445299877843655049": 6,
    "import_3234628287790087458": 7,
    "import_-6692594870504057607": 8,
    "import_8246646876085547449": 9,
    "import_-4680661799788508951": 10,
    "import_-7352821866126854055": 11,
    "import_9212687862903628421": 12,
    "import_5723194447066906592": 13,
    "import_-4387637965731568806": 14,
    "import_7920691030079056014": 15,
    "import_2508485986980991700": 16,
    "import_4632221454259545749": 61,
    "import_-380358827520157674": 164,
    "class_SnowflakeConfig_37": 37,
    "class_OpenFlowConfig_52": 52,
    "class_DeploymentStatus_70": 70,
    "class_SecurityManager_80": 80,
    "class_InputValidator_145": 145,
    "class_DeploymentManager_180": 180,
    "class_MonitoringDashboard_265": 265,
    "class_OpenFlowQuickstartApp_365": 365,
    "function_main_636": 636,
    "function_validate_account_url_46": 46,
    "function_validate_uuid_60": 60,
    "function___init___83": 83,
    "function_encrypt_credential_87": 87,
    "function_decrypt_credential_91": 91,
    "function_store_credential_secure_95": 95,
    "function_store_credential_102": 102,
    "function_get_credential_secure_106": 106,
    "function_retrieve_credential_113": 113,
    "function_validate_session_token_117": 117,
    "function_validate_session_121": 121,
    "function_create_session_token_131": 131,
    "function_validate_snowflake_url_149": 149,
    "function_validate_uuid_154": 154,
    "function_sanitize_input_162": 162,
    "function_validate_oauth_credentials_169": 169,
    "function___init___183": 183,
    "function_create_stack_191": 191,
    "function_deploy_stack_206": 206,
    "function_update_stack_212": 212,
    "function_delete_stack_227": 227,
    "function_get_stack_status_235": 235,
    "function_get_stack_events_248": 248,
    "function_rollback_stack_256": 256,
    "function___init___268": 268,
    "function_create_deployment_timeline_271": 271,
    "function_create_resource_status_matrix_300": 300,
    "function___init___368": 368,
    "function_setup_page_config_374": 374,
    "function_login_page_383": 383,
    "function_validate_credentials_405": 405,
    "function_main_dashboard_425": 425,
    "function_viewer_dashboard_436": 436,
    "function_operator_dashboard_441": 441,
    "function_admin_dashboard_446": 446,
    "function_configuration_section_473": 473,
    "function_deployment_section_529": 529,
    "function_new_deployment_547": 547,
    "function_update_deployment_565": 565,
    "function_rollback_deployment_570": 570,
    "function_monitoring_section_575": 575,
    "function_security_section_598": 598,
    "function_user_management_section_613": 613,
    "function_run_618": 618,
    "constant_-3394423745859614915": 19,
    "constant_-2769419704515527388": 29
  },
  "total_nodes": 70
}