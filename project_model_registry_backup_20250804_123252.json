{
  "description": "Model-driven tool orchestration registry for OpenFlow Playground. This is the single source of truth for domain detection, tool selection, and requirements traceability.",
  "version": "1.8",
  "last_updated": "2024-12-19",
  "author": "LLM + Lou (OpenFlow-Playground)",
  "domains": {
    "cloudformation": {
      "patterns": [
        "*.template.yaml",
        "config/*.yaml",
        "*cloudformation*.yaml"
      ],
      "content_indicators": [
        "!Sub",
        "!Ref",
        "!GetAtt",
        "AWS::",
        "Type: 'AWS::"
      ],
      "linter": "cfn-lint",
      "validator": "aws-cloudformation",
      "exclusions": [],
      "requirements": [
        "Don't lint CloudFormation with generic YAML tools",
        "Use cfn-lint for CloudFormation validation"
      ]
    },
    "python": {
      "patterns": [
        "*.py"
      ],
      "content_indicators": [
        "import ",
        "def ",
        "class ",
        "#!/usr/bin/env python"
      ],
      "linter": "flake8",
      "formatter": "black",
      "validator": "ast-parse",
      "exclusions": [
        "__pycache__/*",
        "*.pyc"
      ],
      "requirements": [
        "Use flake8 for Python linting",
        "Format Python code with black",
        "All Python files must pass AST parsing",
        "All Python files must pass ArtifactForge detection and parsing",
        "No linter errors allowed in any Python file"
      ]
    },
    "streamlit": {
      "patterns": [
        "src/streamlit/*.py",
        "app.py",
        "pages/*.py"
      ],
      "content_indicators": [
        "import streamlit",
        "st.",
        "streamlit run"
      ],
      "linter": "flake8",
      "formatter": "black",
      "validator": "streamlit-validate",
      "exclusions": [
        "__pycache__/*",
        "*.pyc"
      ],
      "requirements": [
        "Use flake8 for Streamlit Python linting",
        "Format Streamlit code with black",
        "Validate Streamlit app structure and security"
      ]
    },
    "security_first": {
      "patterns": [
        "src/security_first/*.py",
        "src/security_first/*.sh",
        "src/security_first/*.json",
        "**/*",
        "**/*.py",
        "**/*.yaml",
        "**/*.yml"
      ],
      "content_indicators": [
        "credential",
        "password",
        "secret",
        "token",
        "key",
        "jwt",
        "encrypt",
        "hash",
        "https",
        "ssl",
        "csrf",
        "rate_limit"
      ],
      "linter": "bandit",
      "validator": "detect-secrets",
      "formatter": "safety",
      "exclusions": [],
      "requirements": [
        "Scan for hardcoded credentials and secrets",
        "Enforce security policy via detect-secrets and bandit",
        "Check for known vulnerabilities with safety",
        "Enforce HTTPS for all connections",
        "Implement rate limiting to prevent abuse",
        "Validate CSRF tokens for session security",
        "Implement CSRF protection for all forms"
      ]
    },
    "multi_agent_testing": {
      "patterns": [
        "src/multi_agent_testing/*.py",
        "*diversity*.py",
        "*agent*.py",
        "*orchestrator*.py"
      ],
      "content_indicators": [
        "DiversityAgent",
        "BlindSpotFinding",
        "multi_threaded",
        "orchestrator"
      ],
      "linter": "flake8",
      "formatter": "black",
      "validator": "pytest",
      "type_checker": "mypy",
      "exclusions": [
        "__pycache__/*",
        "*.pyc"
      ],
      "requirements": [
        "Use flake8 for multi-agent Python linting",
        "Format multi-agent code with black",
        "Validate multi-agent testing with pytest"
      ]
    },
    "bash": {
      "patterns": [
        "scripts/*.sh",
        "*.sh",
        "*.bash"
      ],
      "content_indicators": [
        "#!/bin/bash",
        "#!/bin/sh",
        "export ",
        "source "
      ],
      "linter": "shellcheck",
      "exclusions": [],
      "requirements": [
        "Lint shell scripts with shellcheck"
      ]
    },
    "documentation": {
      "patterns": [
        "docs/*.md",
        "*.md"
      ],
      "content_indicators": [
        "# ",
        "## ",
        "### ",
        "**",
        "*"
      ],
      "linter": "markdownlint",
      "formatter": "prettier",
      "exclusions": [
        "node_modules/*"
      ],
      "requirements": [
        "Use markdownlint for documentation linting",
        "Format documentation with prettier"
      ]
    },
    "configuration": {
      "patterns": [
        "config/*.yaml",
        "config/*.yml",
        "config/*.json",
        "config/*.env",
        "*.config.*"
      ],
      "content_indicators": [
        "config:",
        "settings:",
        "environment:",
        "features:"
      ],
      "linter": "yamllint",
      "validator": "jsonschema",
      "exclusions": [],
      "requirements": [
        "Use yamllint for configuration YAML files",
        "Apply schema validation for config files"
      ]
    },
    "mdc_generator": {
      "patterns": [
        "src/mdc_generator/*.py",
        "scripts/regenerate_mdc_files.py"
      ],
      "content_indicators": [
        "MDCFile",
        "MDCFrontmatter",
        "mdc_generator",
        "regenerate_mdc"
      ],
      "linter": "flake8",
      "formatter": "black",
      "validator": "pytest",
      "exclusions": [
        "__pycache__/*",
        "*.pyc"
      ],
      "requirements": [
        "Use flake8 for MDC generator Python linting",
        "Format MDC generator code with black",
        "Validate MDC generator with pytest"
      ]
    },
    "healthcare_cdc": {
      "patterns": [
        "healthcare-cdc/*.py",
        "healthcare-cdc/*.md",
        "healthcare-cdc/*.sql",
        "healthcare-cdc/*.yaml",
        "healthcare-cdc/*.json",
        "*healthcare*",
        "*cdc*",
        "*hipaa*",
        "*phi*"
      ],
      "content_indicators": [
        "healthcare",
        "cdc",
        "phi",
        "hipaa",
        "patient",
        "medical",
        "audit",
        "compliance"
      ],
      "linter": "flake8",
      "formatter": "black",
      "validator": "pytest",
      "exclusions": [
        "__pycache__/*",
        "*.pyc"
      ],
      "requirements": [
        "Enforce HIPAA compliance validation",
        "Implement PHI detection and validation",
        "Ensure immutable audit logging",
        "Validate healthcare data encryption",
        "Enforce access control and authentication",
        "Integrate with CI/CD for healthcare compliance"
      ]
    },
    "rule_compliance": {
      "patterns": [
        "scripts/rule-compliance-check.sh",
        "scripts/mdc-linter.py",
        ".cursor/plugins/rule-compliance-checker.py"
      ],
      "content_indicators": [
        "rule-compliance",
        "mdc-linter",
        "deterministic-editing",
        "cursor-plugin"
      ],
      "linter": "shellcheck",
      "formatter": "black",
      "validator": "pytest",
      "exclusions": [],
      "requirements": [
        "Rule compliance enforcement system",
        "Deterministic editing enforcement",
        "Immediate IDE feedback"
      ]
    },
    "package_management": {
      "patterns": [
        "pyproject.toml",
        "requirements*.txt",
        "uv.lock",
        "*.py"
      ],
      "content_indicators": [
        "uv",
        "dependencies",
        "dev-dependencies",
        "pyproject"
      ],
      "linter": "uv check",
      "validator": "uv sync",
      "formatter": "uv format",
      "exclusions": [],
      "requirements": [
        "Use UV for all Python package management",
        "Enforce UV lock file usage",
        "Validate dependencies with UV check",
        "Sync dependencies with UV sync"
      ]
    },
    "type_safety": {
      "patterns": [
        "*.py"
      ],
      "content_indicators": [
        "typing",
        "mypy",
        "type annotations"
      ],
      "linter": "mypy",
      "validator": "pytest test_type_safety.py",
      "formatter": null,
      "requirements": [
        "All Python functions must have type annotations",
        "All function parameters must have type annotations",
        "All return values must have type annotations",
        "External library stubs must be installed",
        "Mypy configuration must be properly set up",
        "Achieve minimum 50% type annotation coverage",
        "Enforce type annotations in CI/CD pipeline"
      ]
    },
    "ghostbusters": {
      "patterns": [
        "src/ghostbusters/**/*.py",
        "tests/test_ghostbusters*.py",
        "**/*.py"
      ],
      "content_indicators": [
        "delusion",
        "recovery",
        "agent",
        "validator",
        "orchestrator",
        "ghostbusters",
        "syntax_error",
        "indentation_error",
        "import_error",
        "type_error",
        "SecurityExpert",
        "CodeQualityExpert",
        "TestExpert",
        "BuildExpert",
        "ArchitectureExpert",
        "ModelExpert"
      ],
      "linter": "ghostbusters-orchestrator",
      "validator": "ghostbusters-validator",
      "formatter": "ghostbusters-recovery",
      "exclusions": [
        "__pycache__/*",
        "*.pyc"
      ],
      "requirements": [
        "Use Ghostbusters for delusion detection and recovery",
        "Run Ghostbusters before linting to fix syntax issues",
        "Use Ghostbusters agents for domain-specific analysis",
        "Apply Ghostbusters recovery engines for automated fixes",
        "Integrate Ghostbusters with LangGraph/LangChain",
        "Use Ghostbusters for multi-agent orchestration",
        "Apply Ghostbusters for confidence scoring and validation"
      ]
    },
    "meta_failure_prevention": {
      "patterns": [
        "**/*.mdc"
      ],
      "content_indicators": [
        "meta-failure",
        "broken tool",
        "fixer"
      ],
      "linter": "mdc-linter",
      "validator": "meta-failure-validator",
      "formatter": "mdc-formatter"
    },
    "testing": {
      "patterns": [
        "tests/*.py",
        "test_*.py",
        "*_test.py"
      ],
      "content_indicators": [
        "pytest",
        "test_",
        "assert",
        "unittest"
      ],
      "linter": "make lint",
      "formatter": "make format",
      "validator": "make test",
      "type_checker": "make type-check",
      "exclusions": [
        "__pycache__/*",
        "*.pyc"
      ],
      "requirements": [
        "ALWAYS use Make targets instead of direct commands",
        "Use make test for test validation",
        "Use make lint for test file linting",
        "Use make format for test code formatting",
        "Use make type-check for type checking",
        "Maintain minimum 80% test coverage",
        "Fix all indentation errors in test files",
        "Resolve all import errors in test files",
        "Never run pytest, flake8, black, or mypy directly"
      ]
    },
    "code_quality_model": {
      "patterns": [
        "src/code_quality_system/*.py",
        "*quality*.py"
      ],
      "content_indicators": [
        "CodeQualityModel",
        "quality_model",
        "code_quality"
      ],
      "linter": "flake8",
      "formatter": "black",
      "validator": "pytest",
      "exclusions": [
        "__pycache__/*",
        "*.pyc"
      ],
      "requirements": [
        "Implement CodeQualityModel class",
        "Use flake8 for code quality model linting",
        "Format code quality model with black",
        "Validate code quality model with pytest",
        "Ensure code quality model follows best practices"
      ]
    }
  },
  "tool_selection_logic": {
    "pattern_weight": 0.4,
    "content_indicator_weight": 0.3,
    "exclusion_weight": 0.3,
    "confidence_threshold": 0.5
  },
  "file_organization": {
    "src": {
      "description": "Source code organized by domain",
      "streamlit": "Streamlit application components",
      "security_first": "Security-first architecture components",
      "multi_agent_testing": "Multi-agent testing framework components"
    },
    "tests": {
      "description": "Test files organized by domain",
      "test_basic_validation.py": "Basic validation tests",
      "test_core_concepts.py": "Core concept validation tests",
      "test_file_organization.py": "File organization validation tests"
    },
    "scripts": {
      "description": "Bash scripts and automation",
      "deploy.sh": "Deployment automation",
      "monitor.sh": "Monitoring scripts",
      "run_live_smoke_test*.sh": "Testing automation scripts"
    },
    "docs": {
      "description": "Documentation and specifications",
      "PR_*.md": "Pull request documentation",
      "*.md": "General documentation",
      "ORGANIZATION_SUMMARY.md": "File organization documentation",
      "DOCUMENTATION_INDEX.md": "Comprehensive documentation index",
      "prioritized_implementation_plan.md": "Prioritized implementation plan"
    },
    "config": {
      "description": "Configuration files",
      "config.env.example": "Environment configuration example",
      ".pre-commit-config.yaml": "Pre-commit hooks configuration",
      ".yaml-lint-ignore": "YAML linting exclusions",
      "Openflow-Playground.yaml": "Infrastructure configuration"
    },
    "data": {
      "description": "Data files and results",
      "*.json": "JSON data files",
      "cost_analysis.py": "Data analysis scripts",
      "PR_Dashboard.html": "Dashboard data",
      "diversity_analysis_report.*": "Diversity analysis reports",
      "*.png": "Analysis visualization images",
      "*.svg": "Analysis visualization vectors",
      "synthesis_*.json": "Synthesis analysis data"
    },
    "healthcare_cdc": {
      "description": "Healthcare CDC domain",
      "healthcare_cdc_domain_model.py": "Healthcare CDC domain model",
      "test_healthcare_cdc_domain_model.py": "Healthcare CDC tests",
      "README.md": "Healthcare CDC documentation"
    },
    "requirements": {
      "description": "Dependency management",
      "requirements_streamlit.txt": "Streamlit app dependencies",
      "requirements_diversity.txt": "Diversity hypothesis dependencies"
    },
    "project_level": {
      "description": "Project-level files",
      "README.md": "Main project documentation",
      "QUICKSTART.md": "Quick start guide",
      "project_model_registry.json": "Model-driven tool orchestration",
      "project_model.py": "Project model implementation",
      "setup.py": "Project setup script",
      ".gitignore": "Git ignore rules"
    },
    "domain_rules": {
      "description": "Domain-specific development rules",
      "src/streamlit/.cursor/rules/streamlit-development.mdc": "Streamlit development guidelines",
      "src/security_first/.cursor/rules/security-first.mdc": "Security-first architecture guidelines",
      "src/multi_agent_testing/.cursor/rules/multi-agent-testing.mdc": "Multi-agent testing guidelines",
      "scripts/.cursor/rules/bash-scripting.mdc": "Bash scripting guidelines",
      "docs/.cursor/rules/documentation.mdc": "Documentation guidelines",
      "config/.cursor/rules/configuration.mdc": "Configuration management guidelines",
      "data/.cursor/rules/data-management.mdc": "Data management guidelines",
      ".cursor/rules/ghostbusters.mdc": "Ghostbusters multi-agent delusion detection and recovery guidelines"
    }
  },
  "requirements_traceability": [
    {
      "requirement": "Don't lint CloudFormation with generic YAML tools",
      "domain": "cloudformation",
      "implementation": "content_indicators, patterns, yamllint exclusions",
      "test": "test_requirement_1_cloudformation_detection"
    },
    {
      "requirement": "Use domain-specific tools",
      "domain": "*",
      "implementation": "linter, validator, formatter fields in each domain",
      "test": "test_requirement_2_tool_selection"
    },
    {
      "requirement": "Generate proper exclusions",
      "domain": "yaml",
      "implementation": "exclusions field in yaml domain",
      "test": "test_requirement_3_exclusion_generation"
    },
    {
      "requirement": "Intelligent content analysis",
      "domain": "*",
      "implementation": "content_indicators in each domain",
      "test": "test_requirement_4_content_analysis"
    },
    {
      "requirement": "Intelligent confidence scoring",
      "domain": "*",
      "implementation": "tool_selection_logic weights",
      "test": "test_requirement_5_confidence_scoring"
    },
    {
      "requirement": "Actual tool execution works",
      "domain": "*",
      "implementation": "validate_file() method",
      "test": "test_requirement_6_tool_execution"
    },
    {
      "requirement": "Extensible domain registry",
      "domain": "*",
      "implementation": "domains object in this file",
      "test": "test_requirement_7_domain_registry"
    },
    {
      "requirement": "YAML type-specific validation",
      "domain": "yaml_infrastructure",
      "implementation": "cfn-lint for CloudFormation, aws-cloudformation validator",
      "test": "test_requirement_8_yaml_infrastructure"
    },
    {
      "requirement": "Configuration YAML validation",
      "domain": "yaml_config",
      "implementation": "yamllint + jsonschema for config files",
      "test": "test_requirement_9_yaml_config"
    },
    {
      "requirement": "CI/CD YAML validation",
      "domain": "yaml_cicd",
      "implementation": "actionlint for GitHub Actions, gitlab-ci-lint for GitLab CI",
      "test": "test_requirement_10_yaml_cicd"
    },
    {
      "requirement": "Kubernetes YAML validation",
      "domain": "yaml_kubernetes",
      "implementation": "kubectl validate, kubeval for K8s files",
      "test": "test_requirement_11_yaml_kubernetes"
    },
    {
      "requirement": "Streamlit app security validation",
      "domain": "streamlit",
      "implementation": "flake8 + streamlit-validate for Streamlit apps",
      "test": "test_requirement_12_streamlit_security"
    },
    {
      "requirement": "Security-first architecture enforcement",
      "domain": "security_first",
      "implementation": "bandit + detect-secrets + safety for comprehensive security",
      "test": "test_requirement_13_security_first"
    },
    {
      "requirement": "Multi-agent testing validation",
      "domain": "multi_agent_testing",
      "implementation": "flake8 + black + pytest for multi-agent systems",
      "test": "test_requirement_14_multi_agent_testing"
    },
    {
      "requirement": "Domain-based file organization",
      "domain": "*",
      "implementation": "file_organization object in this file",
      "test": "test_requirement_15_file_organization"
    },
    {
      "requirement": "Bash script validation",
      "domain": "bash",
      "implementation": "shellcheck for bash script validation",
      "test": "test_requirement_16_bash_validation"
    },
    {
      "requirement": "Documentation validation",
      "domain": "documentation",
      "implementation": "markdownlint + prettier for documentation",
      "test": "test_requirement_17_documentation_validation"
    },
    {
      "requirement": "Configuration validation",
      "domain": "configuration",
      "implementation": "yamllint + jsonschema for configuration files",
      "test": "test_requirement_18_configuration_validation"
    },
    {
      "requirement": "Data file validation",
      "domain": "data",
      "implementation": "jsonlint + jsonschema for data files",
      "test": "test_requirement_19_data_validation"
    },
    {
      "requirement": "Healthcare CDC domain validation",
      "domain": "healthcare_cdc",
      "implementation": "flake8 + black + pytest for healthcare CDC",
      "test": "test_requirement_20_healthcare_cdc_validation"
    },
    {
      "requirement": "Domain-specific rules validation",
      "domain": "*",
      "implementation": "Domain-specific .cursor/rules files for each domain",
      "test": "test_requirement_21_domain_rules_validation"
    },
    {
      "requirement": "Rule compliance enforcement system",
      "domain": "rule_compliance",
      "implementation": "Pre-commit hooks + IDE plugins + automated linting for rule compliance",
      "test": "test_requirement_22_rule_compliance_enforcement"
    },
    {
      "requirement": "Deterministic editing enforcement",
      "domain": "rule_compliance",
      "implementation": "Rule compliance checker + MDC linter for deterministic editing",
      "test": "test_requirement_23_deterministic_editing_enforcement"
    },
    {
      "requirement": "Immediate IDE feedback",
      "domain": "rule_compliance",
      "implementation": "Cursor IDE plugin for immediate rule compliance feedback",
      "test": "test_requirement_24_immediate_ide_feedback"
    },
    {
      "requirement": "MDC file modeling and generation",
      "domain": "mdc_generator",
      "implementation": "Python dataclasses and standard libraries for .mdc file generation",
      "test": "test_requirement_25_mdc_generator"
    },
    {
      "requirement": "Simple projection from model to file",
      "domain": "mdc_generator",
      "implementation": "MDCGenerator class for automated .mdc file generation",
      "test": "test_requirement_26_mdc_projection"
    },
    {
      "requirement": "HIPAA compliance validation",
      "domain": "healthcare_cdc",
      "implementation": "HIPAA validation rules and PHI detection in healthcare CDC domain",
      "test": "test_requirement_27_hipaa_compliance_validation"
    },
    {
      "requirement": "PHI detection and validation",
      "domain": "healthcare_cdc",
      "implementation": "PHI detection algorithms and validation rules in healthcare CDC",
      "test": "test_requirement_28_phi_detection_validation"
    },
    {
      "requirement": "Immutable audit logging",
      "domain": "healthcare_cdc",
      "implementation": "Immutable audit trail with S3 Object Lock for healthcare data access",
      "test": "test_requirement_29_immutable_audit_logging"
    },
    {
      "requirement": "Healthcare data encryption",
      "domain": "healthcare_cdc",
      "implementation": "AES-256 encryption at rest and TLS 1.3 for healthcare data transmission",
      "test": "test_requirement_30_healthcare_data_encryption"
    },
    {
      "requirement": "Healthcare access control and authentication",
      "domain": "healthcare_cdc",
      "implementation": "RBAC and JWT-based authentication for healthcare CDC domain",
      "test": "test_requirement_31_healthcare_access_control"
    },
    {
      "requirement": "Healthcare CDC CI/CD integration",
      "domain": "healthcare_cdc",
      "implementation": "CI/CD pipeline with healthcare-specific security scans and monitoring",
      "test": "test_requirement_32_healthcare_cdc_cicd_integration"
    },
    {
      "requirement": "HTTPS enforcement for all connections",
      "domain": "security_first",
      "implementation": "HTTPS enforcement module with TLS 1.2+ configuration and certificate validation",
      "test": "test_requirement_33_https_enforcement"
    },
    {
      "requirement": "Rate limiting to prevent abuse",
      "domain": "security_first",
      "implementation": "Redis-based rate limiting with configurable limits per endpoint and user",
      "test": "test_requirement_34_rate_limiting"
    },
    {
      "requirement": "CSRF protection for session security",
      "domain": "security_first",
      "implementation": "Session-based CSRF tokens with SHA-256 generation and validation",
      "test": "test_requirement_35_csrf_protection"
    },
    {
      "requirement": "UV package management enforcement",
      "domain": "package_management",
      "implementation": "UV lock file and dependency management for all Python packages",
      "test": "test_requirement_36_uv_package_management"
    },
    {
      "requirement": "Streamlit app dependencies with UV",
      "domain": "package_management",
      "implementation": "streamlit, boto3, redis, plotly, pandas, pydantic, bcrypt managed via UV",
      "test": "test_requirement_37_streamlit_dependencies_uv"
    },
    {
      "requirement": "Security-first dependencies with UV",
      "domain": "package_management",
      "implementation": "cryptography, PyJWT, bandit, safety managed via UV",
      "test": "test_requirement_38_security_dependencies_uv"
    },
    {
      "requirement": "Development dependencies with UV",
      "domain": "package_management",
      "implementation": "pytest, flake8, black, mypy managed via UV",
      "test": "test_requirement_39_dev_dependencies_uv"
    },
    {
      "requirement": "Fix indentation errors in test files",
      "domain": "testing",
      "implementation": "Use black formatter and flake8 linter to fix indentation",
      "test": "test_indentation_fixes"
    },
    {
      "requirement": "Implement CodeQualityModel",
      "domain": "code_quality_model",
      "implementation": "Create CodeQualityModel class with proper structure",
      "test": "test_code_quality_model_implementation"
    },
    {
      "requirement": "Achieve 50% type annotation coverage",
      "domain": "type_safety",
      "implementation": "Add type annotations to all functions and enforce with mypy",
      "test": "test_type_annotation_coverage"
    },
    {
      "requirement": "Fix UV/hatchling compatibility",
      "domain": "package_management",
      "implementation": "Update pyproject.toml and UV configuration",
      "test": "test_uv_compatibility"
    },
    {
      "requirement": "Add global Python pattern to security",
      "domain": "security_first",
      "implementation": "Add **/*.py pattern to security domain patterns",
      "test": "test_security_pattern_coverage"
    },
    {
      "requirement": "Use Ghostbusters for delusion detection and recovery",
      "domain": "ghostbusters",
      "implementation": "GhostbustersOrchestrator with multi-agent workflow for automated issue detection and recovery",
      "test": "test_ghostbusters_orchestrator"
    },
    {
      "requirement": "Run Ghostbusters before linting to fix syntax issues",
      "domain": "ghostbusters",
      "implementation": "SyntaxRecoveryEngine and IndentationFixer for automated syntax and indentation fixes",
      "test": "test_ghostbusters_syntax_recovery"
    },
    {
      "requirement": "Use Ghostbusters agents for domain-specific analysis",
      "domain": "ghostbusters",
      "implementation": "SecurityExpert, CodeQualityExpert, TestExpert, BuildExpert, ArchitectureExpert, ModelExpert for comprehensive analysis",
      "test": "test_ghostbusters_agents"
    },
    {
      "requirement": "Apply Ghostbusters recovery engines for automated fixes",
      "domain": "ghostbusters",
      "implementation": "ImportResolver and TypeAnnotationFixer for automated import and type annotation fixes",
      "test": "test_ghostbusters_recovery_engines"
    },
    {
      "requirement": "Integrate Ghostbusters with LangGraph/LangChain",
      "domain": "ghostbusters",
      "implementation": "LangGraph StateGraph workflow with async nodes for multi-agent orchestration",
      "test": "test_ghostbusters_langgraph_integration"
    },
    {
      "requirement": "Use Ghostbusters for multi-agent orchestration",
      "domain": "ghostbusters",
      "implementation": "Multi-agent workflow with detection, validation, planning, execution, and reporting phases",
      "test": "test_ghostbusters_multi_agent_orchestration"
    },
    {
      "requirement": "Apply Ghostbusters for confidence scoring and validation",
      "domain": "ghostbusters",
      "implementation": "Comprehensive validation system with confidence scoring and actionable recommendations",
      "test": "test_ghostbusters_confidence_scoring"
    },
    {
      "requirement": "Enforce Python quality standards for all created files",
      "domain": "python_quality",
      "implementation": "Python Quality Enforcement Rule with mandatory linter compliance and ArtifactForge compatibility",
      "test": "test_python_quality_enforcement"
    },
    {
      "requirement": "Ensure all Python files pass AST parsing",
      "domain": "python_quality",
      "implementation": "AST parsing validation for all Python files before considering them complete",
      "test": "test_ast_parsing_compliance"
    },
    {
      "requirement": "Ensure all Python files pass ArtifactForge detection and parsing",
      "domain": "python_quality",
      "implementation": "ArtifactForge compatibility validation for all Python files",
      "test": "test_artifact_forge_compatibility"
    },
    {
      "requirement": "Zero linter errors in any Python file",
      "domain": "python_quality",
      "implementation": "Mandatory flake8, black, and mypy compliance for all Python files",
      "test": "test_zero_linter_errors"
    }
  ],
  "implementation_plan": {
    "implemented": [
      {
        "requirement": "Use Ghostbusters for delusion detection and recovery",
        "status": "implemented",
        "domain": "ghostbusters",
        "files": [
          "src/ghostbusters/ghostbusters_orchestrator.py",
          ".cursor/rules/ghostbusters.mdc",
          ".cursor/rules/call-more-ghostbusters.mdc"
        ],
        "tests": [
          "tests/test_ghostbusters_integration.py"
        ],
        "issues": [
          "pydantic compatibility in test_ghostbusters.py (temporarily disabled)"
        ],
        "last_updated": "2024-12-19"
      },
      {
        "requirement": "Healthcare CDC domain model implementation",
        "status": "implemented",
        "domain": "healthcare_cdc",
        "files": [
          "healthcare-cdc/healthcare_cdc_domain_model.py",
          "healthcare-cdc/test_healthcare_cdc_domain_model.py",
          "healthcare-cdc/.cursor/rules/healthcare-cdc-domain-model.mdc"
        ],
        "tests": [
          "tests/test_healthcare_cdc_requirements.py"
        ],
        "last_updated": "2024-12-19"
      },
      {
        "requirement": "Model-driven tool orchestration",
        "status": "implemented",
        "domain": "model_driven",
        "files": [
          "project_model_registry.json",
          "project_model.py"
        ],
        "tests": [
          "test_model_traceability.py"
        ],
        "last_updated": "2024-12-19"
      },
      {
        "requirement": "Python quality enforcement",
        "status": "implemented",
        "domain": "python_quality",
        "files": [
          "tests/test_python_quality_enforcement.py",
          "tests/test_type_safety.py"
        ],
        "tests": [
          "test_python_quality_enforcement",
          "test_type_safety_enforcement"
        ],
        "last_updated": "2024-12-19"
      }
    ],
    "backlogged": [
      {
        "requirement": "Healthcare access control implementation",
        "status": "backlogged",
        "domain": "healthcare_cdc",
        "priority": "medium",
        "estimated_effort": "2 weeks",
        "dependencies": [
          "healthcare_cdc_domain_model.py"
        ],
        "description": "Implement role-based access control for healthcare data",
        "acceptance_criteria": [
          "RBAC system for healthcare data access",
          "Audit logging for all access attempts",
          "Integration with existing healthcare CDC domain model"
        ],
        "date_added": "2024-12-19"
      },
      {
        "requirement": "Ghostbusters pydantic compatibility fix",
        "status": "backlogged",
        "domain": "ghostbusters",
        "priority": "high",
        "estimated_effort": "1 week",
        "dependencies": [
          "langchain-core compatibility",
          "pydantic version resolution"
        ],
        "description": "Fix pydantic compatibility issues preventing Ghostbusters tests from running",
        "acceptance_criteria": [
          "All Ghostbusters tests pass",
          "No pydantic version conflicts",
          "LangChain integration working"
        ],
        "date_added": "2024-12-19"
      },
      {
        "requirement": "Comprehensive MDC file validation",
        "status": "backlogged",
        "domain": "mdc_validation",
        "priority": "low",
        "estimated_effort": "1 week",
        "dependencies": [
          "mdc-linter.py improvements"
        ],
        "description": "Improve MDC file validation to handle edge cases and false positives",
        "acceptance_criteria": [
          "No false positives in MDC validation",
          "Proper handling of rule documentation",
          "Comprehensive MDC file coverage"
        ],
        "date_added": "2024-12-19"
      }
    ],
    "eliminated": [
      {
        "requirement": "Comprehensive AST modeler quality checks",
        "status": "eliminated",
        "reason": "File too large for standard quality checks, intended for specialized analysis only",
        "domain": "python_quality",
        "files_affected": [
          "comprehensive_ast_modeler.py"
        ],
        "date_eliminated": "2024-12-19"
      },
      {
        "requirement": "Generic YAML linting for CloudFormation",
        "status": "eliminated",
        "reason": "CloudFormation requires domain-specific tools, not generic YAML linting",
        "domain": "cloudformation",
        "date_eliminated": "2024-12-19"
      },
      {
        "requirement": "F-string without placeholders rule (F541)",
        "status": "eliminated",
        "reason": "Security analysis confirms this rule provides no security value. F-strings without placeholders have negligible security risk (extremely low likelihood, very low impact). The rule creates false positives, cognitive overhead, and enforces style preferences as security requirements. Real security risks are in user input validation, SQL injection prevention, and command injection - not f-string syntax.",
        "domain": "python_quality",
        "security_analysis": {
          "risk_likelihood": "extremely_low",
          "risk_impact": "very_low",
          "actual_threats": "none",
          "false_positive_rate": "high",
          "cognitive_overhead": "high",
          "security_value": "none"
        },
        "files_affected": [
          "tests/test_python_quality_enforcement.py",
          "project_model_registry.json",
          ".cursor/rules/dynamic-prevention-rules.mdc",
          ".cursor/rules/intelligent-linter-prevention.mdc",
          ".cursor/rules/python-quality-enforcement.mdc",
          ".cursor/rules/make-first-enforcement.mdc"
        ],
        "date_eliminated": "2024-12-19",
        "regime_policy_override": true,
        "intelligent_policy_applied": "When a tool creates more problems than it solves, use your intelligence instead. The goal is security, not compliance with broken tools."
      }
    ]
  },
  "meta": {
    "project": "OpenFlow Playground",
    "model_type": "model-driven tool orchestration",
    "file": "project_model_registry.json",
    "tests": [
      "test_model_traceability.py"
    ],
    "rules": [
      ".cursor/rules/security-credentials.mdc",
      ".cursor/rules/deterministic-editing.mdc",
      ".cursor/rules/investigation-analysis.mdc",
      ".cursor/rules/llm-architect.mdc",
      ".cursor/rules/intelligent-policy.mdc",
      ".cursor/rules/prevention-architecture.mdc",
      ".cursor/rules/cloudformation-linting.mdc",
      ".cursor/rules/yaml-type-specific.mdc",
      "src/streamlit/.cursor/rules/streamlit-development.mdc",
      "src/security_first/.cursor/rules/security-first.mdc",
      "src/multi_agent_testing/.cursor/rules/multi-agent-testing.mdc",
      "scripts/.cursor/rules/bash-scripting.mdc",
      "docs/.cursor/rules/documentation.mdc",
      "config/.cursor/rules/configuration.mdc",
      "data/.cursor/rules/data-management.mdc",
      ".cursor/rules/python-quality-enforcement.mdc"
    ]
  },
  "violations": [
    {
      "rule_code": "F401",
      "file_path": "test_file.py",
      "line_number": 5,
      "message": "import json imported but unused",
      "timestamp": "2025-08-03T12:53:09.459764",
      "prevention_rule_created": true
    },
    {
      "rule_code": "E302",
      "file_path": "test_file.py",
      "line_number": 15,
      "message": "expected 2 blank lines, found 1",
      "timestamp": "2025-08-03T12:53:09.467885",
      "prevention_rule_created": true
    },
    {
      "rule_code": "BLACK001",
      "file_path": "tests/test_python_quality_enforcement.py",
      "line_number": 1,
      "message": "Code needs formatting",
      "timestamp": "2025-08-03T12:54:48.193830",
      "prevention_rule_created": true
    }
  ],
  "linters": {
    "python": {
      "prevention_rules": {
        "F401": {
          "description": "import json imported but unused",
          "prevention_strategy": "import_validation",
          "ignore_directive": "# noqa: F401  # Import needed for type checking"
        },
        "E302": {
          "description": "expected 2 blank lines, found 1",
          "prevention_strategy": "spacing_validation",
          "ignore_directive": "# noqa: E302  # Compact module structure"
        },
        "BLACK001": {
          "description": "Code needs formatting",
          "prevention_strategy": "generic_validation",
          "ignore_directive": "# noqa: BLACK001  # Intentional violation"
        }
      }
    }
  }
}