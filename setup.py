#!/usr/bin/env python3
"""
Snowflake Openflow Setup Wizard
Interactive setup for Openflow deployment configuration
"""

import os
import re
import sys
from pathlib import Path

# Color codes for output
RED = "\033[91m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
BLUE = "\033[94m"
BOLD = "\033[1m"
END = "\033[0m"


def print_header(text):
    print(f"\n{BOLD}{BLUE}=== {text} ==={END}\n")


def print_success(text):
    print(f"{GREEN}✅ {text}{END}")


def print_error(text):
    print(f"{RED}❌ {text}{END}")


def print_warning(text):
    print(f"{YELLOW}⚠️  {text}{END}")


def validate_snowflake_url(url):
    """Validate Snowflake account URL format"""
    pattern = r"^https://[a-z0-9-]+\.snowflakecomputing\.com$"
    if not re.match(pattern, url):
        return False, "URL must be: https://your-account.snowflakecomputing.com"
    return True, ""


def validate_uuid(uuid):
    """Validate UUID format"""
    pattern = r"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
    if not re.match(pattern, uuid):
        return False, "UUID must be: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    return True, ""


def validate_url(url):
    """Validate general URL format"""
    pattern = r"^https?://[^\s]+$"
    if not re.match(pattern, url):
        return False, "Must be a valid URL starting with http:// or https://"
    return True, ""


def prompt_with_validation(prompt, validator=None, example=""):
    """Prompt for input with validation"""
    while True:
        if example:
            print(f"{YELLOW}Example: {example}{END}")

        value = input(f"{BOLD}{prompt}:{END} ").strip()

        if not value:
            print_error("This field is required!")
            continue

        if validator:
            is_valid, error_msg = validator(value)
            if not is_valid:
                print_error(error_msg)
                continue

        return value


def generate_config_env(values):
    """Generate config.env file content"""
    return f"""# Snowflake Openflow Configuration
# Generated by setup wizard - DO NOT EDIT MANUALLY

# Snowflake Account Information
SNOWFLAKE_ACCOUNT_URL={values['account_url']}
SNOWFLAKE_ORGANIZATION={values['organization']}
SNOWFLAKE_ACCOUNT={values['account']}

# OAuth Configuration
SNOWFLAKE_OAUTH_INTEGRATION_NAME={values['oauth_integration']}
SNOWFLAKE_OAUTH_CLIENT_ID={values['oauth_client_id']}
SNOWFLAKE_OAUTH_CLIENT_SECRET={values['oauth_client_secret']}

# Openflow Configuration
DATA_PLANE_URL={values['data_plane_url']}
DATA_PLANE_UUID={values['data_plane_uuid']}
DATA_PLANE_KEY={values['data_plane_key']}

# Telemetry and Control
TELEMETRY_URL={values['telemetry_url']}
CONTROL_PLANE_URL={values['control_plane_url']}

# AWS Configuration (optional)
AWS_REGION={values.get('aws_region', 'us-east-1')}
"""


def main():
    print_header("Snowflake Openflow Setup Wizard")
    print("This wizard will help you configure your Openflow deployment.")
    print("You'll need values from Snowflake support - contact them first!\n")

    # Check if config.env already exists
    if os.path.exists("config.env"):
        response = input(
            f"{YELLOW}config.env already exists. Overwrite? (y/N):{END} "
        ).lower()
        if response != "y":
            print("Setup cancelled.")
            return

    values = {}

    print_header("Snowflake Account Information")
    values["account_url"] = prompt_with_validation(
        "Enter your Snowflake account URL",
        validate_snowflake_url,
        "https://abc123.snowflakecomputing.com",
    )

    values["organization"] = prompt_with_validation(
        "Enter your Snowflake organization name", example="MY_ORG"
    )

    values["account"] = prompt_with_validation(
        "Enter your Snowflake account identifier", example="ABC123"
    )

    print_header("OAuth Configuration")
    print_warning("You need these from Snowflake support!")

    values["oauth_integration"] = prompt_with_validation(
        "Enter OAuth integration name", example="my-oauth-integration"
    )

    values["oauth_client_id"] = prompt_with_validation(
        "Enter OAuth client ID", example="8ThBttNtEB44hNz7yxGXZ7Jouuw="
    )

    values["oauth_client_secret"] = prompt_with_validation(
        "Enter OAuth client secret",
        example="75/dT4ojSHwa1ped1iFhwQO3X0o0JWzTIZn2V3tijxU=",
    )

    print_header("Openflow Configuration")
    print_warning("These come from Snowflake Openflow setup!")

    values["data_plane_url"] = prompt_with_validation(
        "Enter data plane URL",
        validate_url,
        "https://data-plane.snowflake-customer.app",
    )

    values["data_plane_uuid"] = prompt_with_validation(
        "Enter data plane UUID", validate_uuid, "your-data-plane-uuid-here"
    )

    values["data_plane_key"] = prompt_with_validation(
        "Enter unique deployment key", example="my-deployment-2024"
    )

    values["telemetry_url"] = prompt_with_validation(
        "Enter telemetry URL", validate_url, "https://telemetry.snowflake-customer.app"
    )

    values["control_plane_url"] = prompt_with_validation(
        "Enter control plane URL",
        validate_url,
        "https://control-plane.snowflake-customer.app",
    )

    print_header("AWS Configuration")
    values["aws_region"] = (
        input(f"{BOLD}AWS Region (default: us-east-1):{END} ").strip() or "us-east-1"
    )

    # Generate config file
    config_content = generate_config_env(values)

    with open("config.env", "w") as f:
        f.write(config_content)

    print_header("Setup Complete!")
    print_success("config.env generated successfully")
    print_success("You can now run: ./deploy.sh deploy")

    # Show summary
    print(f"\n{BOLD}Configuration Summary:{END}")
    print(f"  Account: {values['account_url']}")
    print(f"  Organization: {values['organization']}")
    print(f"  Data Plane UUID: {values['data_plane_uuid']}")
    print(f"  Deployment Key: {values['data_plane_key']}")
    print(f"  AWS Region: {values['aws_region']}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{YELLOW}Setup cancelled.{END}")
        sys.exit(1)
    except Exception as e:
        print_error(f"Setup failed: {e}")
        sys.exit(1)
