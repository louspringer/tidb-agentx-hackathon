{
  "file_models": {
    "fix_test_rule_compliance_indentation.py": {
      "file_path": "fix_test_rule_compliance_indentation.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 64,
      "line_count": 103,
      "function_count": 2,
      "class_count": 0,
      "import_count": 2,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Fix indentation issues in test_rule_compliance.py",
          "Fix indentation issues in test_rule_compliance.py",
          "Fix the test file"
        ],
        "imports": [
          "ast",
          "pathlib.Path"
        ],
        "functions": [
          {
            "name": "fix_test_rule_compliance_indentation",
            "docstring": "Fix indentation issues in test_rule_compliance.py"
          },
          {
            "name": "main",
            "docstring": "Fix the test file"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 103
      }
    },
    "final_syntax_fix.py": {
      "file_path": "final_syntax_fix.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 134,
      "line_count": 194,
      "function_count": 7,
      "class_count": 1,
      "import_count": 5,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Final Syntax Fixer\nComprehensive fixer for all remaining syntax issues",
          "Final comprehensive syntax fixer",
          "Test the final syntax fixer",
          "Fix all syntax issues in a file",
          "Apply comprehensive syntax fixes",
          "Check if we're inside a function or class definition",
          "Validate that the fix produces valid Python",
          "Fix multiple files",
          "Save fixed content to file"
        ],
        "imports": [
          "re",
          "ast",
          "pathlib.Path",
          "typing.List",
          "typing.Dict",
          "shutil"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Test the final syntax fixer"
          },
          {
            "name": "fix_file",
            "docstring": "Fix all syntax issues in a file"
          },
          {
            "name": "apply_comprehensive_fixes",
            "docstring": "Apply comprehensive syntax fixes"
          },
          {
            "name": "is_in_function_context",
            "docstring": "Check if we're inside a function or class definition"
          },
          {
            "name": "validate_fix",
            "docstring": "Validate that the fix produces valid Python"
          },
          {
            "name": "fix_multiple_files",
            "docstring": "Fix multiple files"
          },
          {
            "name": "save_fixed_file",
            "docstring": "Save fixed content to file"
          }
        ],
        "classes": [
          {
            "name": "FinalSyntaxFixer",
            "docstring": "Final comprehensive syntax fixer"
          }
        ],
        "variables": [],
        "line_count": 194
      }
    },
    "fix_test_rule_compliance.py": {
      "file_path": "fix_test_rule_compliance.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 67,
      "line_count": 108,
      "function_count": 2,
      "class_count": 0,
      "import_count": 2,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Fix indentation issues in test_rule_compliance_enforcement.py",
          "Fix indentation issues in test files",
          "Fix the test file"
        ],
        "imports": [
          "ast",
          "pathlib.Path"
        ],
        "functions": [
          {
            "name": "fix_test_file_indentation",
            "docstring": "Fix indentation issues in test files"
          },
          {
            "name": "main",
            "docstring": "Fix the test file"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 108
      }
    },
    "fix_remaining_indentation.py": {
      "file_path": "fix_remaining_indentation.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 144,
      "line_count": 200,
      "function_count": 7,
      "class_count": 0,
      "import_count": 3,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Fix the remaining indentation errors identified by flake8",
          "Fix specific indentation errors in a file",
          "Check if line is after a function definition",
          "Check if line is after a control flow statement",
          "Check if line is after a block start",
          "Check if a line needs indentation fix",
          "Find all Python files in the project",
          "Fix remaining indentation errors"
        ],
        "imports": [
          "subprocess",
          "pathlib.Path",
          "typing.List"
        ],
        "functions": [
          {
            "name": "fix_specific_indentation_errors",
            "docstring": "Fix specific indentation errors in a file"
          },
          {
            "name": "is_after_function_definition",
            "docstring": "Check if line is after a function definition"
          },
          {
            "name": "is_after_control_flow",
            "docstring": "Check if line is after a control flow statement"
          },
          {
            "name": "is_after_block_start",
            "docstring": "Check if line is after a block start"
          },
          {
            "name": "needs_indentation_fix",
            "docstring": "Check if a line needs indentation fix"
          },
          {
            "name": "find_python_files",
            "docstring": "Find all Python files in the project"
          },
          {
            "name": "main",
            "docstring": "Fix remaining indentation errors"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 200
      }
    },
    "ast_projection_demo.py": {
      "file_path": "ast_projection_demo.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 293,
      "line_count": 364,
      "function_count": 16,
      "class_count": 1,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "AST Projection Demo\nShows how bridging model gaps could help project/reconstruct broken Python code",
          "Demo of how AST-based projection could reconstruct broken code",
          "Run the AST projection demo",
          "Demonstrate how AST projection could work",
          "Demonstrate function signature projection",
          "Demonstrate class structure projection",
          "Demonstrate import structure projection",
          "Demonstrate expression structure projection",
          "Project complete function signature from broken fragment",
          "Project complete class structure from broken fragment",
          "Project complete import structure from broken fragment",
          "Project complete expression structure from broken fragment",
          "Show what AST analysis could provide for function projection",
          "Show what AST analysis could provide for class projection",
          "Show what AST analysis could provide for import projection",
          "Show what AST analysis could provide for expression projection",
          "Generate comprehensive projection capabilities report"
        ],
        "imports": [
          "ast",
          "re",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Run the AST projection demo"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "demonstrate_projection_capabilities",
            "docstring": "Demonstrate how AST projection could work"
          },
          {
            "name": "_demo_function_projection",
            "docstring": "Demonstrate function signature projection"
          },
          {
            "name": "_demo_class_projection",
            "docstring": "Demonstrate class structure projection"
          },
          {
            "name": "_demo_import_projection",
            "docstring": "Demonstrate import structure projection"
          },
          {
            "name": "_demo_expression_projection",
            "docstring": "Demonstrate expression structure projection"
          },
          {
            "name": "_project_function_signature",
            "docstring": "Project complete function signature from broken fragment"
          },
          {
            "name": "_project_class_structure",
            "docstring": "Project complete class structure from broken fragment"
          },
          {
            "name": "_project_import_structure",
            "docstring": "Project complete import structure from broken fragment"
          },
          {
            "name": "_project_expression_structure",
            "docstring": "Project complete expression structure from broken fragment"
          },
          {
            "name": "_analyze_function_ast_insights",
            "docstring": "Show what AST analysis could provide for function projection"
          },
          {
            "name": "_analyze_class_ast_insights",
            "docstring": "Show what AST analysis could provide for class projection"
          },
          {
            "name": "_analyze_import_ast_insights",
            "docstring": "Show what AST analysis could provide for import projection"
          },
          {
            "name": "_analyze_expression_ast_insights",
            "docstring": "Show what AST analysis could provide for expression projection"
          },
          {
            "name": "_generate_projection_report",
            "docstring": "Generate comprehensive projection capabilities report"
          }
        ],
        "classes": [
          {
            "name": "ASTProjectionDemo",
            "docstring": "Demo of how AST-based projection could reconstruct broken code"
          }
        ],
        "variables": [],
        "line_count": 364
      }
    },
    "test_git_enhanced.py": {
      "file_path": "test_git_enhanced.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 42,
      "line_count": 62,
      "function_count": 1,
      "class_count": 0,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Test Git-Enhanced AST Fixer\nDemonstrates the Git-enhanced approach with files that have Git history",
          "Test the Git-enhanced AST fixer with files that have Git history"
        ],
        "imports": [
          "git_enhanced_ast_fixer.GitEnhancedASTFixer",
          "pathlib.Path",
          "subprocess",
          "ast"
        ],
        "functions": [
          {
            "name": "test_git_enhanced_fixer",
            "docstring": "Test the Git-enhanced AST fixer with files that have Git history"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 62
      }
    },
    "multi_generational_git_analyzer.py": {
      "file_path": "multi_generational_git_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 428,
      "line_count": 545,
      "function_count": 26,
      "class_count": 2,
      "import_count": 9,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Multi-Generational Git Analyzer\nModels several commits back to understand file evolution and guide reconstruction",
          "Model of a file at a specific commit",
          "Analyzes multiple generations of Git history to understand file evolution",
          "Test the multi-generational Git analyzer",
          "Analyze file evolution across multiple Git generations",
          "Get models for multiple generations of commits",
          "Extract model from AST",
          "Extract basic model from content",
          "Extract functions from AST",
          "Extract classes from AST",
          "Extract imports from AST",
          "Extract variables from AST",
          "Extract decorator name from AST",
          "Extract base class name from AST",
          "Extract class methods from AST",
          "Calculate complexity metrics from AST",
          "Analyze patterns in file evolution",
          "Analyze size evolution trend",
          "Analyze structural evolution trend",
          "Analyze complexity evolution trend",
          "Calculate trend from a list of values",
          "Calculate stability score based on model consistency",
          "Calculate similarity between two models",
          "Identify distinct phases in file evolution",
          "Generate recommendations based on evolution analysis",
          "Create a database of evolution information",
          "Find the most stable generation",
          "Find the best generation to use as a template"
        ],
        "imports": [
          "json",
          "subprocess",
          "ast",
          "tempfile",
          "os",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "dataclasses.dataclass",
          "dataclasses.asdict",
          "git_enhanced_ast_fixer.GitEnhancedASTFixer"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Test the multi-generational Git analyzer"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "analyze_file_evolution",
            "docstring": "Analyze file evolution across multiple Git generations"
          },
          {
            "name": "get_commit_models",
            "docstring": "Get models for multiple generations of commits"
          },
          {
            "name": "extract_ast_model",
            "docstring": "Extract model from AST"
          },
          {
            "name": "extract_basic_model",
            "docstring": "Extract basic model from content"
          },
          {
            "name": "extract_functions_from_ast",
            "docstring": "Extract functions from AST"
          },
          {
            "name": "extract_classes_from_ast",
            "docstring": "Extract classes from AST"
          },
          {
            "name": "extract_imports_from_ast",
            "docstring": "Extract imports from AST"
          },
          {
            "name": "extract_variables_from_ast",
            "docstring": "Extract variables from AST"
          },
          {
            "name": "extract_decorator",
            "docstring": "Extract decorator name from AST"
          },
          {
            "name": "extract_base",
            "docstring": "Extract base class name from AST"
          },
          {
            "name": "extract_class_methods",
            "docstring": "Extract class methods from AST"
          },
          {
            "name": "calculate_complexity_metrics",
            "docstring": "Calculate complexity metrics from AST"
          },
          {
            "name": "analyze_evolution_patterns",
            "docstring": "Analyze patterns in file evolution"
          },
          {
            "name": "analyze_size_trend",
            "docstring": "Analyze size evolution trend"
          },
          {
            "name": "analyze_structure_trend",
            "docstring": "Analyze structural evolution trend"
          },
          {
            "name": "analyze_complexity_trend",
            "docstring": "Analyze complexity evolution trend"
          },
          {
            "name": "calculate_trend",
            "docstring": "Calculate trend from a list of values"
          },
          {
            "name": "calculate_stability_score",
            "docstring": "Calculate stability score based on model consistency"
          },
          {
            "name": "calculate_model_similarity",
            "docstring": "Calculate similarity between two models"
          },
          {
            "name": "identify_evolution_phases",
            "docstring": "Identify distinct phases in file evolution"
          },
          {
            "name": "generate_evolution_recommendations",
            "docstring": "Generate recommendations based on evolution analysis"
          },
          {
            "name": "create_evolution_database",
            "docstring": "Create a database of evolution information"
          },
          {
            "name": "find_most_stable_generation",
            "docstring": "Find the most stable generation"
          },
          {
            "name": "find_best_template_generation",
            "docstring": "Find the best generation to use as a template"
          }
        ],
        "classes": [
          {
            "name": "CommitModel",
            "docstring": "Model of a file at a specific commit"
          },
          {
            "name": "MultiGenerationalGitAnalyzer",
            "docstring": "Analyzes multiple generations of Git history to understand file evolution"
          }
        ],
        "variables": [],
        "line_count": 545
      }
    },
    "ast_model_gap_analyzer.py": {
      "file_path": "ast_model_gap_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 352,
      "line_count": 388,
      "function_count": 7,
      "class_count": 1,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "AST Model Gap Analyzer\nIdentifies what AST models that we don't have, and how bridging the gap could help",
          "Analyzer that identifies AST modeling capabilities we're missing",
          "Run the AST model gap analyzer",
          "Analyze what AST models that we don't have",
          "Identify what we currently model in our syntax fixing approach",
          "Identify what AST can model that we don't",
          "Identify the gaps between current models and AST models",
          "Generate comprehensive gap analysis report"
        ],
        "imports": [
          "ast",
          "json",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Set",
          "typing.Optional"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Run the AST model gap analyzer"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "analyze_model_gaps",
            "docstring": "Analyze what AST models that we don't have"
          },
          {
            "name": "_identify_current_models",
            "docstring": "Identify what we currently model in our syntax fixing approach"
          },
          {
            "name": "_identify_ast_models",
            "docstring": "Identify what AST can model that we don't"
          },
          {
            "name": "_identify_model_gaps",
            "docstring": "Identify the gaps between current models and AST models"
          },
          {
            "name": "_generate_gap_report",
            "docstring": "Generate comprehensive gap analysis report"
          }
        ],
        "classes": [
          {
            "name": "ASTModelGapAnalyzer",
            "docstring": "Analyzer that identifies AST modeling capabilities we're missing"
          }
        ],
        "variables": [],
        "line_count": 388
      }
    },
    "model_sufficiency_analyzer.py": {
      "file_path": "model_sufficiency_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 377,
      "line_count": 417,
      "function_count": 11,
      "class_count": 1,
      "import_count": 3,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Model Sufficiency Analyzer\nAnalyzes if our current models have sufficient information to determine requirements and recreate code",
          "Analyzer that determines if our models are sufficient for requirements and recreation",
          "Run the model sufficiency analyzer",
          "Analyze if our models are sufficient for requirements and recreation",
          "Define what models we currently have",
          "Analyze if our models can determine requirements",
          "Analyze if our models can recreate code",
          "Generate comprehensive sufficiency analysis report",
          "Calculate overall requirements determination score",
          "Calculate overall code recreation score",
          "Assess if requirements determination is sufficient",
          "Assess if code recreation is sufficient"
        ],
        "imports": [
          "json",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Set"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Run the model sufficiency analyzer"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "analyze_model_sufficiency",
            "docstring": "Analyze if our models are sufficient for requirements and recreation"
          },
          {
            "name": "_define_current_models",
            "docstring": "Define what models we currently have"
          },
          {
            "name": "_analyze_requirements_capabilities",
            "docstring": "Analyze if our models can determine requirements"
          },
          {
            "name": "_analyze_recreation_capabilities",
            "docstring": "Analyze if our models can recreate code"
          },
          {
            "name": "_generate_sufficiency_report",
            "docstring": "Generate comprehensive sufficiency analysis report"
          },
          {
            "name": "_calculate_requirements_score",
            "docstring": "Calculate overall requirements determination score"
          },
          {
            "name": "_calculate_recreation_score",
            "docstring": "Calculate overall code recreation score"
          },
          {
            "name": "_assess_requirements_sufficiency",
            "docstring": "Assess if requirements determination is sufficient"
          },
          {
            "name": "_assess_recreation_sufficiency",
            "docstring": "Assess if code recreation is sufficient"
          }
        ],
        "classes": [
          {
            "name": "ModelSufficiencyAnalyzer",
            "docstring": "Analyzer that determines if our models are sufficient for requirements and recreation"
          }
        ],
        "variables": [],
        "line_count": 417
      }
    },
    "ast_capability_analyzer.py": {
      "file_path": "ast_capability_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 383,
      "line_count": 452,
      "function_count": 26,
      "class_count": 1,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "AST Capability Analyzer\nDemonstrates how AST can enhance Python project modeling",
          "Analyzer that demonstrates AST capabilities for project modeling",
          "Run the AST capability analyzer",
          "Analyze what AST can tell us about Python projects",
          "Find Python files in our project (excluding .venv)",
          "Analyze what AST can extract from a file",
          "Extract comprehensive insights using AST",
          "Extract imports using AST - much more accurate than regex",
          "Extract functions using AST - complete function analysis",
          "Extract classes using AST - complete class analysis",
          "Extract dependencies using AST - accurate dependency tracking",
          "Calculate complexity using AST - precise metrics",
          "Analyze code structure using AST",
          "Detect code patterns using AST",
          "Calculate comprehensive metrics using AST",
          "Extract function arguments using AST",
          "Extract decorator information using AST",
          "Extract base class information using AST",
          "Extract keyword arguments using AST",
          "Extract expression information using AST",
          "Extract class methods using AST",
          "Extract return type using AST",
          "Extract type annotation using AST",
          "Calculate function complexity using AST",
          "Record files that AST cannot parse",
          "Generate comprehensive AST capability report",
          "Calculate average complexity metrics"
        ],
        "imports": [
          "ast",
          "json",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Set"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Run the AST capability analyzer"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "analyze_ast_capabilities",
            "docstring": "Analyze what AST can tell us about Python projects"
          },
          {
            "name": "_find_project_files",
            "docstring": "Find Python files in our project (excluding .venv)"
          },
          {
            "name": "_analyze_file_capabilities",
            "docstring": "Analyze what AST can extract from a file"
          },
          {
            "name": "_extract_ast_insights",
            "docstring": "Extract comprehensive insights using AST"
          },
          {
            "name": "_extract_imports_ast",
            "docstring": "Extract imports using AST - much more accurate than regex"
          },
          {
            "name": "_extract_functions_ast",
            "docstring": "Extract functions using AST - complete function analysis"
          },
          {
            "name": "_extract_classes_ast",
            "docstring": "Extract classes using AST - complete class analysis"
          },
          {
            "name": "_extract_dependencies_ast",
            "docstring": "Extract dependencies using AST - accurate dependency tracking"
          },
          {
            "name": "_calculate_complexity_ast",
            "docstring": "Calculate complexity using AST - precise metrics"
          },
          {
            "name": "_analyze_structure_ast",
            "docstring": "Analyze code structure using AST"
          },
          {
            "name": "_detect_patterns_ast",
            "docstring": "Detect code patterns using AST"
          },
          {
            "name": "_calculate_metrics_ast",
            "docstring": "Calculate comprehensive metrics using AST"
          },
          {
            "name": "_extract_function_args_ast",
            "docstring": "Extract function arguments using AST"
          },
          {
            "name": "_extract_decorator_ast",
            "docstring": "Extract decorator information using AST"
          },
          {
            "name": "_extract_base_ast",
            "docstring": "Extract base class information using AST"
          },
          {
            "name": "_extract_keyword_ast",
            "docstring": "Extract keyword arguments using AST"
          },
          {
            "name": "_extract_expression_ast",
            "docstring": "Extract expression information using AST"
          },
          {
            "name": "_extract_class_methods_ast",
            "docstring": "Extract class methods using AST"
          },
          {
            "name": "_extract_return_type_ast",
            "docstring": "Extract return type using AST"
          },
          {
            "name": "_extract_annotation_ast",
            "docstring": "Extract type annotation using AST"
          },
          {
            "name": "_calculate_function_complexity_ast",
            "docstring": "Calculate function complexity using AST"
          },
          {
            "name": "_record_syntax_error",
            "docstring": "Record files that AST cannot parse"
          },
          {
            "name": "_generate_capability_report",
            "docstring": "Generate comprehensive AST capability report"
          },
          {
            "name": "_calculate_avg_complexity",
            "docstring": "Calculate average complexity metrics"
          }
        ],
        "classes": [
          {
            "name": "ASTCapabilityAnalyzer",
            "docstring": "Analyzer that demonstrates AST capabilities for project modeling"
          }
        ],
        "variables": [],
        "line_count": 452
      }
    },
    "test_syntax_fix_safety.py": {
      "file_path": "test_syntax_fix_safety.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 109,
      "line_count": 152,
      "function_count": 4,
      "class_count": 0,
      "import_count": 2,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Test to ensure syntax fix scripts don't introduce structural issues",
          "Test that files don't have duplicate shebang lines",
          "Test that files don't have duplicate import statements",
          "Test that files have proper Python structure",
          "Test that syntax fix scripts don't introduce structural issues"
        ],
        "imports": [
          "pathlib.Path",
          "typing.List",
          "typing.Dict",
          "typing.Any"
        ],
        "functions": [
          {
            "name": "test_no_duplicate_shebangs",
            "docstring": "Test that files don't have duplicate shebang lines"
          },
          {
            "name": "test_no_duplicate_imports",
            "docstring": "Test that files don't have duplicate import statements"
          },
          {
            "name": "test_proper_structure",
            "docstring": "Test that files have proper Python structure"
          },
          {
            "name": "test_syntax_fix_safety",
            "docstring": "Test that syntax fix scripts don't introduce structural issues"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 152
      }
    },
    "setup.py": {
      "file_path": "setup.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 153,
      "line_count": 218,
      "function_count": 10,
      "class_count": 0,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Snowflake Openflow Setup Wizard\nInteractive setup for Openflow deployment configuration",
          "Validate Snowflake account URL format",
          "Validate UUID format",
          "Validate general URL format",
          "Prompt for input with validation",
          "Generate config.env file content"
        ],
        "imports": [
          "os",
          "re",
          "sys",
          "pathlib.Path"
        ],
        "functions": [
          {
            "name": "print_header",
            "docstring": null
          },
          {
            "name": "print_success",
            "docstring": null
          },
          {
            "name": "print_error",
            "docstring": null
          },
          {
            "name": "print_warning",
            "docstring": null
          },
          {
            "name": "validate_snowflake_url",
            "docstring": "Validate Snowflake account URL format"
          },
          {
            "name": "validate_uuid",
            "docstring": "Validate UUID format"
          },
          {
            "name": "validate_url",
            "docstring": "Validate general URL format"
          },
          {
            "name": "prompt_with_validation",
            "docstring": "Prompt for input with validation"
          },
          {
            "name": "generate_config_env",
            "docstring": "Generate config.env file content"
          },
          {
            "name": "main",
            "docstring": null
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 218
      }
    },
    "improved_syntax_fix.py": {
      "file_path": "improved_syntax_fix.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 121,
      "line_count": 176,
      "function_count": 5,
      "class_count": 0,
      "import_count": 3,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Improved syntax fix script that's more careful about structural integrity",
          "Fix syntax errors safely without introducing structural issues",
          "Check if a line is inside a function definition",
          "Check if a line needs indentation",
          "Find all Python files in the project",
          "Fix syntax errors safely in all Python files"
        ],
        "imports": [
          "subprocess",
          "pathlib.Path",
          "typing.List"
        ],
        "functions": [
          {
            "name": "fix_syntax_safely",
            "docstring": "Fix syntax errors safely without introducing structural issues"
          },
          {
            "name": "is_inside_function",
            "docstring": "Check if a line is inside a function definition"
          },
          {
            "name": "needs_indentation",
            "docstring": "Check if a line needs indentation"
          },
          {
            "name": "find_python_files",
            "docstring": "Find all Python files in the project"
          },
          {
            "name": "main",
            "docstring": "Fix syntax errors safely in all Python files"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 176
      }
    },
    "fix_all_syntax_errors.py": {
      "file_path": "fix_all_syntax_errors.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 180,
      "line_count": 245,
      "function_count": 8,
      "class_count": 0,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Comprehensive script to fix all remaining syntax errors",
          "Fix syntax errors in a single file",
          "Check if line is after a function definition",
          "Check if line is after a control flow statement",
          "Check if line is after a block start",
          "Check if a line should be indented based on context",
          "Check if a line needs indentation fix",
          "Find all Python files in the project",
          "Fix all remaining syntax errors"
        ],
        "imports": [
          "subprocess",
          "re",
          "pathlib.Path",
          "typing.List"
        ],
        "functions": [
          {
            "name": "fix_file_syntax",
            "docstring": "Fix syntax errors in a single file"
          },
          {
            "name": "is_after_function_definition",
            "docstring": "Check if line is after a function definition"
          },
          {
            "name": "is_after_control_flow",
            "docstring": "Check if line is after a control flow statement"
          },
          {
            "name": "is_after_block_start",
            "docstring": "Check if line is after a block start"
          },
          {
            "name": "should_be_indented",
            "docstring": "Check if a line should be indented based on context"
          },
          {
            "name": "needs_indentation_fix",
            "docstring": "Check if a line needs indentation fix"
          },
          {
            "name": "find_python_files",
            "docstring": "Find all Python files in the project"
          },
          {
            "name": "main",
            "docstring": "Fix all remaining syntax errors"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 245
      }
    },
    "model_consistency_analyzer.py": {
      "file_path": "model_consistency_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 337,
      "line_count": 435,
      "function_count": 24,
      "class_count": 1,
      "import_count": 6,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Model Consistency Analyzer\nAnalyzes whether files match persisted models or vary from committed models",
          "Analyzes model consistency between current, persisted, and committed models",
          "Test the model consistency analyzer",
          "Analyze model consistency for a file",
          "Check if file has Git history",
          "Analyze file that has Git history",
          "Analyze new artifact with no Git history",
          "Extract current model from file",
          "Extract model from most recent committed version",
          "Get persisted model from project_model_registry.json",
          "Extract model from AST",
          "Extract model from broken interpreter",
          "Extract basic model from content",
          "Extract functions from AST",
          "Extract classes from AST",
          "Extract imports from AST",
          "Extract variables from AST",
          "Extract decorator name from AST",
          "Extract base class name from AST",
          "Extract class methods from AST",
          "Compare two models",
          "Calculate structural similarity between models",
          "Find if current model matches any known patterns",
          "Generate recommendations based on model comparison",
          "Generate recommendations for new artifacts"
        ],
        "imports": [
          "json",
          "subprocess",
          "ast",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "git_enhanced_ast_fixer.GitEnhancedASTFixer"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Test the model consistency analyzer"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "analyze_file_consistency",
            "docstring": "Analyze model consistency for a file"
          },
          {
            "name": "check_git_history",
            "docstring": "Check if file has Git history"
          },
          {
            "name": "analyze_with_git_history",
            "docstring": "Analyze file that has Git history"
          },
          {
            "name": "analyze_new_artifact",
            "docstring": "Analyze new artifact with no Git history"
          },
          {
            "name": "extract_current_model",
            "docstring": "Extract current model from file"
          },
          {
            "name": "extract_committed_model",
            "docstring": "Extract model from most recent committed version"
          },
          {
            "name": "get_persisted_model",
            "docstring": "Get persisted model from project_model_registry.json"
          },
          {
            "name": "extract_ast_model",
            "docstring": "Extract model from AST"
          },
          {
            "name": "extract_interpretation_model",
            "docstring": "Extract model from broken interpreter"
          },
          {
            "name": "extract_basic_model",
            "docstring": "Extract basic model from content"
          },
          {
            "name": "extract_functions_from_ast",
            "docstring": "Extract functions from AST"
          },
          {
            "name": "extract_classes_from_ast",
            "docstring": "Extract classes from AST"
          },
          {
            "name": "extract_imports_from_ast",
            "docstring": "Extract imports from AST"
          },
          {
            "name": "extract_variables_from_ast",
            "docstring": "Extract variables from AST"
          },
          {
            "name": "extract_decorator",
            "docstring": "Extract decorator name from AST"
          },
          {
            "name": "extract_base",
            "docstring": "Extract base class name from AST"
          },
          {
            "name": "extract_class_methods",
            "docstring": "Extract class methods from AST"
          },
          {
            "name": "compare_models",
            "docstring": "Compare two models"
          },
          {
            "name": "calculate_structure_similarity",
            "docstring": "Calculate structural similarity between models"
          },
          {
            "name": "find_pattern_match",
            "docstring": "Find if current model matches any known patterns"
          },
          {
            "name": "generate_recommendations",
            "docstring": "Generate recommendations based on model comparison"
          },
          {
            "name": "generate_new_artifact_recommendations",
            "docstring": "Generate recommendations for new artifacts"
          }
        ],
        "classes": [
          {
            "name": "ModelConsistencyAnalyzer",
            "docstring": "Analyzes model consistency between current, persisted, and committed models"
          }
        ],
        "variables": [],
        "line_count": 435
      }
    },
    "comprehensive_indentation_fix.py": {
      "file_path": "comprehensive_indentation_fix.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 134,
      "line_count": 199,
      "function_count": 7,
      "class_count": 1,
      "import_count": 5,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Comprehensive Indentation Fixer\nFixes all indentation issues in broken Python files",
          "Comprehensive indentation fixer for broken Python files",
          "Test the comprehensive indentation fixer",
          "Fix all indentation issues in a file",
          "Apply comprehensive indentation fixes",
          "Determine if a line should be indented",
          "Validate that the fix produces valid Python",
          "Fix multiple files",
          "Save fixed content to file"
        ],
        "imports": [
          "re",
          "ast",
          "pathlib.Path",
          "typing.List",
          "typing.Dict",
          "shutil"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Test the comprehensive indentation fixer"
          },
          {
            "name": "fix_file",
            "docstring": "Fix all indentation issues in a file"
          },
          {
            "name": "apply_comprehensive_indentation_fixes",
            "docstring": "Apply comprehensive indentation fixes"
          },
          {
            "name": "should_be_indented",
            "docstring": "Determine if a line should be indented"
          },
          {
            "name": "validate_fix",
            "docstring": "Validate that the fix produces valid Python"
          },
          {
            "name": "fix_multiple_files",
            "docstring": "Fix multiple files"
          },
          {
            "name": "save_fixed_file",
            "docstring": "Save fixed content to file"
          }
        ],
        "classes": [
          {
            "name": "ComprehensiveIndentationFixer",
            "docstring": "Comprehensive indentation fixer for broken Python files"
          }
        ],
        "variables": [],
        "line_count": 199
      }
    },
    "fix_f_strings.py": {
      "file_path": "fix_f_strings.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 30,
      "line_count": 46,
      "function_count": 3,
      "class_count": 0,
      "import_count": 3,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Fix f-string issues by converting them to regular strings",
          "Fix f-string issues in a single file",
          "Fix f-strings in all Python files"
        ],
        "imports": [
          "re",
          "sys",
          "pathlib.Path"
        ],
        "functions": [
          {
            "name": "fix_f_strings_in_file",
            "docstring": "Fix f-string issues in a single file"
          },
          {
            "name": "main",
            "docstring": "Fix f-strings in all Python files"
          },
          {
            "name": "replace_f_string",
            "docstring": null
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 46
      }
    },
    "checkpointed_ast_modeler.py": {
      "file_path": "checkpointed_ast_modeler.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 242,
      "line_count": 328,
      "function_count": 12,
      "class_count": 2,
      "import_count": 8,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Checkpointed AST Modeler with logging and recovery",
          "AST model for a Python file",
          "AST modeler with checkpointing and recovery",
          "Model the project with checkpointing",
          "Load existing database or create new one",
          "Save database with optional checkpointing",
          "Keep only the most recent checkpoints",
          "List available checkpoints",
          "Restore database from checkpoint",
          "Check if file should be excluded",
          "Find Python files to model, excluding generated/temporary files",
          "Model a Python file using AST",
          "Model all Python files in directory with checkpointing",
          "Update only files that have changed"
        ],
        "imports": [
          "ast",
          "json",
          "os",
          "shutil",
          "pathlib.Path",
          "dataclasses.dataclass",
          "dataclasses.asdict",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "datetime.datetime"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Model the project with checkpointing"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "load_database",
            "docstring": "Load existing database or create new one"
          },
          {
            "name": "save_database",
            "docstring": "Save database with optional checkpointing"
          },
          {
            "name": "cleanup_old_checkpoints",
            "docstring": "Keep only the most recent checkpoints"
          },
          {
            "name": "list_checkpoints",
            "docstring": "List available checkpoints"
          },
          {
            "name": "restore_from_checkpoint",
            "docstring": "Restore database from checkpoint"
          },
          {
            "name": "should_exclude_file",
            "docstring": "Check if file should be excluded"
          },
          {
            "name": "find_python_files",
            "docstring": "Find Python files to model, excluding generated/temporary files"
          },
          {
            "name": "model_python_file",
            "docstring": "Model a Python file using AST"
          },
          {
            "name": "model_directory",
            "docstring": "Model all Python files in directory with checkpointing"
          },
          {
            "name": "incremental_update",
            "docstring": "Update only files that have changed"
          }
        ],
        "classes": [
          {
            "name": "ASTModel",
            "docstring": "AST model for a Python file"
          },
          {
            "name": "CheckpointedASTModeler",
            "docstring": "AST modeler with checkpointing and recovery"
          }
        ],
        "variables": [],
        "line_count": 328
      }
    },
    "focused_ast_modeler.py": {
      "file_path": "focused_ast_modeler.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 145,
      "line_count": 195,
      "function_count": 7,
      "class_count": 2,
      "import_count": 6,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Focused AST Modeler - Only model essential Python files",
          "AST model for a Python file",
          "Focused AST modeler that only models essential Python files",
          "Model the project with focused approach",
          "Check if file should be excluded",
          "Find Python files to model, excluding generated/temporary files",
          "Model a Python file using AST",
          "Model all Python files in directory",
          "Save database to JSON file"
        ],
        "imports": [
          "ast",
          "json",
          "os",
          "pathlib.Path",
          "dataclasses.dataclass",
          "dataclasses.asdict",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Model the project with focused approach"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "should_exclude_file",
            "docstring": "Check if file should be excluded"
          },
          {
            "name": "find_python_files",
            "docstring": "Find Python files to model, excluding generated/temporary files"
          },
          {
            "name": "model_python_file",
            "docstring": "Model a Python file using AST"
          },
          {
            "name": "model_directory",
            "docstring": "Model all Python files in directory"
          },
          {
            "name": "save_database",
            "docstring": "Save database to JSON file"
          }
        ],
        "classes": [
          {
            "name": "ASTModel",
            "docstring": "AST model for a Python file"
          },
          {
            "name": "FocusedASTModeler",
            "docstring": "Focused AST modeler that only models essential Python files"
          }
        ],
        "variables": [],
        "line_count": 195
      }
    },
    "debug_modeler.py": {
      "file_path": "debug_modeler.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 34,
      "line_count": 46,
      "function_count": 1,
      "class_count": 0,
      "import_count": 3,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Debug script to test PythonASTModeler"
        ],
        "imports": [
          "comprehensive_ast_modeler.PythonASTModeler",
          "ast",
          "traceback"
        ],
        "functions": [
          {
            "name": "test_modeler",
            "docstring": null
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 46
      }
    },
    "model_driven_reconstructor.py": {
      "file_path": "model_driven_reconstructor.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 318,
      "line_count": 428,
      "function_count": 18,
      "class_count": 1,
      "import_count": 9,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Model-Driven Artifact Reconstructor - Rebuild artifacts from models only",
          "Reconstruct artifacts from model data only - no peeking at originals",
          "Test model-driven reconstruction",
          "Load the models database",
          "Reconstruct artifact from model only - no peeking at original",
          "Reconstruct Python file from model",
          "Reconstruct MDC file from model",
          "Reconstruct Markdown file from model",
          "Reconstruct JSON file from model",
          "Reconstruct YAML file from model",
          "Reconstruct SQL file from model",
          "Reconstruct HTML file from model",
          "Reconstruct Shell script from model",
          "Reconstruct generic file from model",
          "Test semantic equivalence between reconstructed and original",
          "Calculate similarity between original and reconstructed content",
          "Compare structural elements",
          "Heuristic LLM analysis of semantic equivalence",
          "Test semantic equivalence for multiple files"
        ],
        "imports": [
          "json",
          "ast",
          "yaml",
          "re",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "dataclasses.asdict",
          "hashlib",
          "difflib"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Test model-driven reconstruction"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "_load_models",
            "docstring": "Load the models database"
          },
          {
            "name": "reconstruct_from_model",
            "docstring": "Reconstruct artifact from model only - no peeking at original"
          },
          {
            "name": "_reconstruct_python",
            "docstring": "Reconstruct Python file from model"
          },
          {
            "name": "_reconstruct_mdc",
            "docstring": "Reconstruct MDC file from model"
          },
          {
            "name": "_reconstruct_markdown",
            "docstring": "Reconstruct Markdown file from model"
          },
          {
            "name": "_reconstruct_json",
            "docstring": "Reconstruct JSON file from model"
          },
          {
            "name": "_reconstruct_yaml",
            "docstring": "Reconstruct YAML file from model"
          },
          {
            "name": "_reconstruct_sql",
            "docstring": "Reconstruct SQL file from model"
          },
          {
            "name": "_reconstruct_html",
            "docstring": "Reconstruct HTML file from model"
          },
          {
            "name": "_reconstruct_shell",
            "docstring": "Reconstruct Shell script from model"
          },
          {
            "name": "_reconstruct_generic",
            "docstring": "Reconstruct generic file from model"
          },
          {
            "name": "test_semantic_equivalence",
            "docstring": "Test semantic equivalence between reconstructed and original"
          },
          {
            "name": "_calculate_similarity",
            "docstring": "Calculate similarity between original and reconstructed content"
          },
          {
            "name": "_compare_structure",
            "docstring": "Compare structural elements"
          },
          {
            "name": "_heuristic_analysis",
            "docstring": "Heuristic LLM analysis of semantic equivalence"
          },
          {
            "name": "batch_test_equivalence",
            "docstring": "Test semantic equivalence for multiple files"
          }
        ],
        "classes": [
          {
            "name": "ModelDrivenReconstructor",
            "docstring": "Reconstruct artifacts from model data only - no peeking at originals"
          }
        ],
        "variables": [],
        "line_count": 428
      }
    },
    "fix_test_indentation.py": {
      "file_path": "fix_test_indentation.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 70,
      "line_count": 113,
      "function_count": 2,
      "class_count": 0,
      "import_count": 3,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Fix indentation issues in test files using AST-based approach",
          "Fix indentation issues in test files",
          "Fix the test file"
        ],
        "imports": [
          "ast",
          "re",
          "pathlib.Path"
        ],
        "functions": [
          {
            "name": "fix_test_file_indentation",
            "docstring": "Fix indentation issues in test files"
          },
          {
            "name": "main",
            "docstring": "Fix the test file"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 113
      }
    },
    "project_model.py": {
      "file_path": "project_model.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 243,
      "line_count": 294,
      "function_count": 7,
      "class_count": 3,
      "import_count": 7,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Model-Driven Tool Glue Layer\nIntelligent tool selection and orchestration across domains",
          "Configuration for a specific domain",
          "Analysis of a file's domain and tooling needs",
          "Model-driven tool orchestration",
          "Test the model-driven tool orchestration",
          "Initialize domain configurations",
          "Analyze a file to determine its domain and tooling needs",
          "Validate a file using the appropriate tools",
          "Validate entire project using model-driven tool selection",
          "Generate tool configurations based on project model"
        ],
        "imports": [
          "os",
          "re",
          "json",
          "subprocess",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "dataclasses.dataclass",
          "dataclasses.asdict",
          "dataclasses.field"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Test the model-driven tool orchestration"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "_initialize_domains",
            "docstring": "Initialize domain configurations"
          },
          {
            "name": "analyze_file",
            "docstring": "Analyze a file to determine its domain and tooling needs"
          },
          {
            "name": "validate_file",
            "docstring": "Validate a file using the appropriate tools"
          },
          {
            "name": "validate_project",
            "docstring": "Validate entire project using model-driven tool selection"
          },
          {
            "name": "generate_tool_config",
            "docstring": "Generate tool configurations based on project model"
          }
        ],
        "classes": [
          {
            "name": "DomainConfig",
            "docstring": "Configuration for a specific domain"
          },
          {
            "name": "FileAnalysis",
            "docstring": "Analysis of a file's domain and tooling needs"
          },
          {
            "name": "ProjectModel",
            "docstring": "Model-driven tool orchestration"
          }
        ],
        "variables": [],
        "line_count": 294
      }
    },
    "test_functional_equivalence.py": {
      "file_path": "test_functional_equivalence.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 120,
      "line_count": 153,
      "function_count": 3,
      "class_count": 0,
      "import_count": 6,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Test functional equivalence between original and reconstructed Python files",
          "Test functional equivalence using unit tests",
          "Run pytest on a test file",
          "Test functional equivalence for key files"
        ],
        "imports": [
          "subprocess",
          "tempfile",
          "os",
          "sys",
          "pathlib.Path",
          "model_driven_reconstructor.ModelDrivenReconstructor"
        ],
        "functions": [
          {
            "name": "test_functional_equivalence",
            "docstring": "Test functional equivalence using unit tests"
          },
          {
            "name": "run_tests",
            "docstring": "Run pytest on a test file"
          },
          {
            "name": "main",
            "docstring": "Test functional equivalence for key files"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 153
      }
    },
    "data/cost_analysis.py": {
      "file_path": "data/cost_analysis.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 240,
      "line_count": 336,
      "function_count": 5,
      "class_count": 0,
      "import_count": 3,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "\ud83d\udcb0 COST ANALYSIS FOR DIVERSITY HYPOTHESIS TESTING\n\nCalculate total tokens and costs for our multi-agent diversity analysis.",
          "Rough estimate of tokens (4 characters per token)",
          "Analyze costs from multi-dimensional smoke test",
          "Analyze costs from LangGraph diversity orchestrator",
          "Analyze costs from synthesis orchestrator",
          "Calculate total costs for diversity hypothesis testing"
        ],
        "imports": [
          "json",
          "os",
          "pathlib.Path"
        ],
        "functions": [
          {
            "name": "estimate_tokens",
            "docstring": "Rough estimate of tokens (4 characters per token)"
          },
          {
            "name": "analyze_multi_dimensional_costs",
            "docstring": "Analyze costs from multi-dimensional smoke test"
          },
          {
            "name": "analyze_langgraph_costs",
            "docstring": "Analyze costs from LangGraph diversity orchestrator"
          },
          {
            "name": "analyze_synthesis_costs",
            "docstring": "Analyze costs from synthesis orchestrator"
          },
          {
            "name": "main",
            "docstring": "Calculate total costs for diversity hypothesis testing"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 336
      }
    },
    "healthcare-cdc/healthcare_cdc_domain_model.py": {
      "file_path": "healthcare-cdc/healthcare_cdc_domain_model.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 574,
      "line_count": 659,
      "function_count": 8,
      "class_count": 11,
      "import_count": 9,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Healthcare CDC Domain Model\nModel-driven implementation of Snowflake Healthcare CDC with DynamoDB and Openflow\n\nBased on: https://quickstarts.snowflake.com/guide/Streamline_Healthcare_CDC_DDB_And_Openflow/\nOriginal Contributors: Snowflake Inc.",
          "CDC Event Types",
          "Healthcare Claim Status",
          "Payment Status",
          "Patient Information",
          "Healthcare Provider Information",
          "Insurance Payer Information",
          "Healthcare Insurance Claim",
          "Change Data Capture Event",
          "Infrastructure Components for Healthcare CDC",
          "Openflow Pipeline Configuration",
          "Domain Model for Healthcare CDC System",
          "Main function to demonstrate the domain model",
          "Convert to JSON for DynamoDB stream",
          "Add a processor to the pipeline",
          "Setup the Openflow pipeline configuration",
          "Get the SQL merge statement for CDC operations",
          "Generate CloudFormation template for the healthcare CDC infrastructure",
          "Generate Snowflake schema creation SQL"
        ],
        "imports": [
          "dataclasses.dataclass",
          "dataclasses.field",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "enum.Enum",
          "datetime.datetime",
          "json",
          "re",
          "os",
          "uuid.UUID"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Main function to demonstrate the domain model"
          },
          {
            "name": "to_json",
            "docstring": "Convert to JSON for DynamoDB stream"
          },
          {
            "name": "add_processor",
            "docstring": "Add a processor to the pipeline"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "_setup_pipeline",
            "docstring": "Setup the Openflow pipeline configuration"
          },
          {
            "name": "_get_merge_sql",
            "docstring": "Get the SQL merge statement for CDC operations"
          },
          {
            "name": "generate_cloudformation_template",
            "docstring": "Generate CloudFormation template for the healthcare CDC infrastructure"
          },
          {
            "name": "generate_snowflake_schema",
            "docstring": "Generate Snowflake schema creation SQL"
          }
        ],
        "classes": [
          {
            "name": "EventType",
            "docstring": "CDC Event Types"
          },
          {
            "name": "ClaimStatus",
            "docstring": "Healthcare Claim Status"
          },
          {
            "name": "PaymentStatus",
            "docstring": "Payment Status"
          },
          {
            "name": "PatientInfo",
            "docstring": "Patient Information"
          },
          {
            "name": "ProviderInfo",
            "docstring": "Healthcare Provider Information"
          },
          {
            "name": "PayerInfo",
            "docstring": "Insurance Payer Information"
          },
          {
            "name": "HealthcareClaim",
            "docstring": "Healthcare Insurance Claim"
          },
          {
            "name": "CDCEvent",
            "docstring": "Change Data Capture Event"
          },
          {
            "name": "InfrastructureComponents",
            "docstring": "Infrastructure Components for Healthcare CDC"
          },
          {
            "name": "PipelineConfiguration",
            "docstring": "Openflow Pipeline Configuration"
          },
          {
            "name": "HealthcareCDCDomainModel",
            "docstring": "Domain Model for Healthcare CDC System"
          }
        ],
        "variables": [],
        "line_count": 659
      }
    },
    "healthcare-cdc/__init__.py": {
      "file_path": "healthcare-cdc/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 32,
      "line_count": 38,
      "function_count": 0,
      "class_count": 0,
      "import_count": 1,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Healthcare CDC Package\nModel-driven implementation of Snowflake Healthcare CDC with DynamoDB and Openflow\n\nBased on: https://quickstarts.snowflake.com/guide/Streamline_Healthcare_CDC_DDB_And_Openflow/\nOriginal Contributors: Snowflake Inc.\nEnhanced by: OpenFlow Playground Team"
        ],
        "imports": [
          "healthcare_cdc_domain_model.HealthcareCDCDomainModel",
          "healthcare_cdc_domain_model.HealthcareClaim",
          "healthcare_cdc_domain_model.PatientInfo",
          "healthcare_cdc_domain_model.ProviderInfo",
          "healthcare_cdc_domain_model.PayerInfo",
          "healthcare_cdc_domain_model.CDCEvent",
          "healthcare_cdc_domain_model.EventType",
          "healthcare_cdc_domain_model.ClaimStatus",
          "healthcare_cdc_domain_model.PaymentStatus"
        ],
        "functions": [],
        "classes": [],
        "variables": [],
        "line_count": 38
      }
    },
    "healthcare-cdc/test_healthcare_cdc_domain_model.py": {
      "file_path": "healthcare-cdc/test_healthcare_cdc_domain_model.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 303,
      "line_count": 371,
      "function_count": 12,
      "class_count": 4,
      "import_count": 5,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Tests for Healthcare CDC Domain Model",
          "Test the healthcare CDC domain model",
          "Test healthcare claim data structure",
          "Test CDC event data structure",
          "Test enum values",
          "Integration test for the complete domain model",
          "Test domain model initialization",
          "Test pipeline configuration setup",
          "Test SQL merge statement generation",
          "Test CloudFormation template generation",
          "Test Snowflake schema generation",
          "Test creating a healthcare claim",
          "Test creating a CDC event",
          "Test CDC event JSON serialization",
          "Test event type enum values",
          "Test claim status enum values",
          "Test payment status enum values"
        ],
        "imports": [
          "pytest",
          "json",
          "datetime.datetime",
          "re",
          "healthcare_cdc_domain_model.HealthcareCDCDomainModel",
          "healthcare_cdc_domain_model.HealthcareClaim",
          "healthcare_cdc_domain_model.PatientInfo",
          "healthcare_cdc_domain_model.ProviderInfo",
          "healthcare_cdc_domain_model.PayerInfo",
          "healthcare_cdc_domain_model.CDCEvent",
          "healthcare_cdc_domain_model.EventType",
          "healthcare_cdc_domain_model.ClaimStatus",
          "healthcare_cdc_domain_model.PaymentStatus"
        ],
        "functions": [
          {
            "name": "test_integration",
            "docstring": "Integration test for the complete domain model"
          },
          {
            "name": "test_domain_model_initialization",
            "docstring": "Test domain model initialization"
          },
          {
            "name": "test_pipeline_configuration",
            "docstring": "Test pipeline configuration setup"
          },
          {
            "name": "test_merge_sql_generation",
            "docstring": "Test SQL merge statement generation"
          },
          {
            "name": "test_cloudformation_template_generation",
            "docstring": "Test CloudFormation template generation"
          },
          {
            "name": "test_snowflake_schema_generation",
            "docstring": "Test Snowflake schema generation"
          },
          {
            "name": "test_claim_creation",
            "docstring": "Test creating a healthcare claim"
          },
          {
            "name": "test_cdc_event_creation",
            "docstring": "Test creating a CDC event"
          },
          {
            "name": "test_cdc_event_json_serialization",
            "docstring": "Test CDC event JSON serialization"
          },
          {
            "name": "test_event_types",
            "docstring": "Test event type enum values"
          },
          {
            "name": "test_claim_status",
            "docstring": "Test claim status enum values"
          },
          {
            "name": "test_payment_status",
            "docstring": "Test payment status enum values"
          }
        ],
        "classes": [
          {
            "name": "TestHealthcareCDCDomainModel",
            "docstring": "Test the healthcare CDC domain model"
          },
          {
            "name": "TestHealthcareClaim",
            "docstring": "Test healthcare claim data structure"
          },
          {
            "name": "TestCDCEvent",
            "docstring": "Test CDC event data structure"
          },
          {
            "name": "TestEnums",
            "docstring": "Test enum values"
          }
        ],
        "variables": [],
        "line_count": 371
      }
    },
    "tests/test_rule_compliance.py": {
      "file_path": "tests/test_rule_compliance.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 148,
      "line_count": 203,
      "function_count": 10,
      "class_count": 3,
      "import_count": 6,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "\ud83e\uddea Rule Compliance Test Suite\n\nTests for rule compliance enforcement system including MDC linter,\nCursor IDE plugin, and pre-commit hooks.",
          "Test MDC linter functionality",
          "Test Cursor IDE plugin functionality",
          "Test the complete rule compliance system",
          "Setup test environment",
          "Test that linter accepts valid .mdc file",
          "Test that linter rejects .mdc file without frontmatter",
          "Test that linter rejects .mdc file with missing required fields",
          "Setup test environment",
          "Test that Cursor IDE plugin exists and is executable",
          "Test that plugin can check file compliance",
          "Setup test environment",
          "Test that all .mdc files in the project comply with rules",
          "Test that rule compliance system is complete"
        ],
        "imports": [
          "subprocess",
          "tempfile",
          "os",
          "sys",
          "json",
          "pathlib.Path"
        ],
        "functions": [
          {
            "name": "setup_method",
            "docstring": "Setup test environment"
          },
          {
            "name": "test_valid_mdc_file",
            "docstring": "Test that linter accepts valid .mdc file"
          },
          {
            "name": "test_invalid_mdc_file_missing_frontmatter",
            "docstring": "Test that linter rejects .mdc file without frontmatter"
          },
          {
            "name": "test_invalid_mdc_file_missing_fields",
            "docstring": "Test that linter rejects .mdc file with missing required fields"
          },
          {
            "name": "setup_method",
            "docstring": "Setup test environment"
          },
          {
            "name": "test_plugin_exists",
            "docstring": "Test that Cursor IDE plugin exists and is executable"
          },
          {
            "name": "test_plugin_check_file_compliance",
            "docstring": "Test that plugin can check file compliance"
          },
          {
            "name": "setup_method",
            "docstring": "Setup test environment"
          },
          {
            "name": "test_all_mdc_files_comply",
            "docstring": "Test that all .mdc files in the project comply with rules"
          },
          {
            "name": "test_rule_compliance_system_completeness",
            "docstring": "Test that rule compliance system is complete"
          }
        ],
        "classes": [
          {
            "name": "TestMDCLinter",
            "docstring": "Test MDC linter functionality"
          },
          {
            "name": "TestCursorPlugin",
            "docstring": "Test Cursor IDE plugin functionality"
          },
          {
            "name": "TestRuleComplianceSystem",
            "docstring": "Test the complete rule compliance system"
          }
        ],
        "variables": [],
        "line_count": 203
      }
    },
    "tests/test_file_organization.py": {
      "file_path": "tests/test_file_organization.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 20)"
      }
    },
    "tests/test_cline_plan_blind_spots.py": {
      "file_path": "tests/test_cline_plan_blind_spots.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 31)"
      }
    },
    "tests/test_data_fresh_cline_plan.py": {
      "file_path": "tests/test_data_fresh_cline_plan.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 76,
      "line_count": 132,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Test data for fresh Cline's healthcare CDC plan\nExtracted from test to improve maintainability"
        ],
        "imports": [],
        "functions": [],
        "classes": [],
        "variables": [],
        "line_count": 132
      }
    },
    "tests/test_gemini_2_5_flash_lite_pr_review.py": {
      "file_path": "tests/test_gemini_2_5_flash_lite_pr_review.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 16)"
      }
    },
    "tests/test_code_quality_comprehensive.py": {
      "file_path": "tests/test_code_quality_comprehensive.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 20)"
      }
    },
    "tests/validate_healthcare_cdc_simple.py": {
      "file_path": "tests/validate_healthcare_cdc_simple.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 15)"
      }
    },
    "tests/test_mdc_generator.py": {
      "file_path": "tests/test_mdc_generator.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 25)"
      }
    },
    "tests/test_file_existence.py": {
      "file_path": "tests/test_file_existence.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 19)"
      }
    },
    "tests/test_security_enhancements.py": {
      "file_path": "tests/test_security_enhancements.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 15)"
      }
    },
    "tests/test_basic_validation_simple.py": {
      "file_path": "tests/test_basic_validation_simple.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 19)"
      }
    },
    "tests/test_code_quality_system.py": {
      "file_path": "tests/test_code_quality_system.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 19)"
      }
    },
    "tests/test_basic_validation_pytest.py": {
      "file_path": "tests/test_basic_validation_pytest.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 19)"
      }
    },
    "tests/test_uv_package_management.py": {
      "file_path": "tests/test_uv_package_management.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 20)"
      }
    },
    "tests/test_type_safety.py": {
      "file_path": "tests/test_type_safety.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 20)"
      }
    },
    "tests/test_makefile_integration.py": {
      "file_path": "tests/test_makefile_integration.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 20)"
      }
    },
    "tests/test_gemini_2_5_preview_pr_review.py": {
      "file_path": "tests/test_gemini_2_5_preview_pr_review.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 16)"
      }
    },
    "tests/test_rule_compliance_enforcement.py": {
      "file_path": "tests/test_rule_compliance_enforcement.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 190,
      "line_count": 263,
      "function_count": 15,
      "class_count": 2,
      "import_count": 10,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "\ud83e\uddea Test Rule Compliance Enforcement System\n\nTests the pre-commit hooks, IDE plugins, and automated linting",
          "Test the rule compliance enforcement system",
          "Test that all MDC files comply with rules",
          "Setup test environment",
          "Test that rule compliance checker exists and is executable",
          "Test that MDC linter exists and is executable",
          "Test that Cursor IDE plugin exists and is executable",
          "Test that pre-commit config includes rule compliance hooks",
          "Test that rule compliance script runs without errors",
          "Test that MDC linter validates file structure",
          "Test that MDC linter rejects invalid file structure",
          "Test that Cursor IDE plugin has proper interface",
          "Test that deterministic editing rules are enforced",
          "Test that project model includes rule compliance",
          "Test that requirements traceability includes rule compliance",
          "Setup test environment",
          "Test that all MDC files comply with established rules",
          "Test that rule compliance system is complete"
        ],
        "imports": [
          "pytest",
          "subprocess",
          "tempfile",
          "os",
          "sys",
          "yaml",
          "json",
          "fnmatch",
          "pathlib.Path",
          "unittest.mock.patch"
        ],
        "functions": [
          {
            "name": "setup_method",
            "docstring": "Setup test environment"
          },
          {
            "name": "test_rule_compliance_checker_exists",
            "docstring": "Test that rule compliance checker exists and is executable"
          },
          {
            "name": "test_mdc_linter_exists",
            "docstring": "Test that MDC linter exists and is executable"
          },
          {
            "name": "test_cursor_plugin_exists",
            "docstring": "Test that Cursor IDE plugin exists and is executable"
          },
          {
            "name": "test_pre_commit_config_updated",
            "docstring": "Test that pre-commit config includes rule compliance hooks"
          },
          {
            "name": "test_rule_compliance_script_runs",
            "docstring": "Test that rule compliance script runs without errors"
          },
          {
            "name": "test_mdc_linter_validates_structure",
            "docstring": "Test that MDC linter validates file structure"
          },
          {
            "name": "test_mdc_linter_rejects_invalid_structure",
            "docstring": "Test that MDC linter rejects invalid file structure"
          },
          {
            "name": "test_cursor_plugin_interface",
            "docstring": "Test that Cursor IDE plugin has proper interface"
          },
          {
            "name": "test_deterministic_editing_rule_enforcement",
            "docstring": "Test that deterministic editing rules are enforced"
          },
          {
            "name": "test_project_model_includes_rule_compliance",
            "docstring": "Test that project model includes rule compliance"
          },
          {
            "name": "test_requirements_traceability_includes_rule_compliance",
            "docstring": "Test that requirements traceability includes rule compliance"
          },
          {
            "name": "setup_method",
            "docstring": "Setup test environment"
          },
          {
            "name": "test_all_mdc_files_comply_with_rules",
            "docstring": "Test that all MDC files comply with established rules"
          },
          {
            "name": "test_rule_compliance_system_completeness",
            "docstring": "Test that rule compliance system is complete"
          }
        ],
        "classes": [
          {
            "name": "TestRuleComplianceEnforcement",
            "docstring": "Test the rule compliance enforcement system"
          },
          {
            "name": "TestMDCFileCompliance",
            "docstring": "Test that all MDC files comply with rules"
          }
        ],
        "variables": [],
        "line_count": 263
      }
    },
    "tests/test_code_quality.py": {
      "file_path": "tests/test_code_quality.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 22)"
      }
    },
    "tests/test_core_concepts.py": {
      "file_path": "tests/test_core_concepts.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 24)"
      }
    },
    "tests/test_healthcare_cdc_requirements.py": {
      "file_path": "tests/test_healthcare_cdc_requirements.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 20)"
      }
    },
    "tests/test_cline_fresh_plan_blind_spots.py": {
      "file_path": "tests/test_cline_fresh_plan_blind_spots.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 14)"
      }
    },
    "tests/test_basic_validation.py": {
      "file_path": "tests/test_basic_validation.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 21)"
      }
    },
    "src/__init__.py": {
      "file_path": "src/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 9,
      "line_count": 12,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "OpenFlow Playground Source Package\n\nThis package contains the main application components organized by domain:\n- streamlit: Streamlit application components\n- security_first: Security-first architecture components\n- multi_agent_testing: Multi-agent testing framework components"
        ],
        "imports": [],
        "functions": [],
        "classes": [],
        "variables": [],
        "line_count": 12
      }
    },
    "scripts/mdc-linter.py": {
      "file_path": "scripts/mdc-linter.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 168,
      "line_count": 242,
      "function_count": 10,
      "class_count": 1,
      "import_count": 6,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "MDC Linter for .mdc files with YAML frontmatter",
          "Linter for .mdc files with YAML frontmatter",
          "Main function",
          "Log a violation",
          "Log a warning",
          "Validate YAML frontmatter structure",
          "Validate markdown content structure",
          "Validate file organization and naming",
          "Validate deterministic editing compliance",
          "Lint a single .mdc file",
          "Lint all .mdc files in a directory"
        ],
        "imports": [
          "sys",
          "yaml",
          "re",
          "pathlib.Path",
          "typing.List",
          "argparse"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Main function"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "log_violation",
            "docstring": "Log a violation"
          },
          {
            "name": "log_warning",
            "docstring": "Log a warning"
          },
          {
            "name": "validate_yaml_frontmatter",
            "docstring": "Validate YAML frontmatter structure"
          },
          {
            "name": "validate_markdown_content",
            "docstring": "Validate markdown content structure"
          },
          {
            "name": "validate_file_organization",
            "docstring": "Validate file organization and naming"
          },
          {
            "name": "validate_deterministic_editing_compliance",
            "docstring": "Validate deterministic editing compliance"
          },
          {
            "name": "lint_file",
            "docstring": "Lint a single .mdc file"
          },
          {
            "name": "lint_directory",
            "docstring": "Lint all .mdc files in a directory"
          }
        ],
        "classes": [
          {
            "name": "MDCLinter",
            "docstring": "Linter for .mdc files with YAML frontmatter"
          }
        ],
        "variables": [],
        "line_count": 242
      }
    },
    "scripts/fix_mypy_issues.py": {
      "file_path": "scripts/fix_mypy_issues.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 163,
      "line_count": 229,
      "function_count": 5,
      "class_count": 0,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Comprehensive Mypy Issue Fixer",
          "Add missing type annotations to a file",
          "Infer parameter type based on name",
          "Infer variable type from assignment value",
          "Fix mypy issues in all files",
          "Main function"
        ],
        "imports": [
          "re",
          "subprocess",
          "pathlib.Path",
          "typing.List",
          "typing.Dict",
          "typing.Any"
        ],
        "functions": [
          {
            "name": "add_missing_type_annotations",
            "docstring": "Add missing type annotations to a file"
          },
          {
            "name": "infer_parameter_type",
            "docstring": "Infer parameter type based on name"
          },
          {
            "name": "infer_variable_type",
            "docstring": "Infer variable type from assignment value"
          },
          {
            "name": "fix_mypy_issues",
            "docstring": "Fix mypy issues in all files"
          },
          {
            "name": "main",
            "docstring": "Main function"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 229
      }
    },
    "scripts/regenerate_mdc_files.py": {
      "file_path": "scripts/regenerate_mdc_files.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 29,
      "line_count": 45,
      "function_count": 1,
      "class_count": 0,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Regenerate all .mdc files"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "sys",
          "pathlib.Path",
          "mdc_generator.MDCGenerator"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Regenerate all .mdc files"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 45
      }
    },
    "scripts/fix_code_quality.py": {
      "file_path": "scripts/fix_code_quality.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 141,
      "line_count": 187,
      "function_count": 5,
      "class_count": 0,
      "import_count": 7,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Main function for the code quality fixer",
          "Analyze all files for linting issues",
          "Fix all files",
          "Analyze, fix, and re-analyze all files",
          "Print a summary of the results"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "sys",
          "json",
          "pathlib.Path",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "code_quality_system.quality_model.CodeQualityModel",
          "argparse"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Main function for the code quality fixer"
          },
          {
            "name": "analyze_all_files",
            "docstring": "Analyze all files for linting issues"
          },
          {
            "name": "fix_all_files",
            "docstring": "Fix all files"
          },
          {
            "name": "analyze_and_fix_all_files",
            "docstring": "Analyze, fix, and re-analyze all files"
          },
          {
            "name": "print_summary",
            "docstring": "Print a summary of the results"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 187
      }
    },
    ".cursor/plugins/rule-compliance-checker.py": {
      "file_path": ".cursor/plugins/rule-compliance-checker.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 124,
      "line_count": 152,
      "function_count": 7,
      "class_count": 1,
      "import_count": 8,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Cursor IDE plugin for rule compliance checking",
          "Cursor IDE plugin for rule compliance checking.",
          "Main function for testing",
          "Check compliance for a single file.",
          "Check .mdc file compliance specifically",
          "Get a summary of all rules",
          "Validate deterministic editing compliance",
          "Provide immediate feedback for a file"
        ],
        "imports": [
          "sys",
          "json",
          "subprocess",
          "re",
          "pathlib.Path",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "yaml",
          "argparse"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Main function for testing"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "check_file_compliance",
            "docstring": "Check compliance for a single file."
          },
          {
            "name": "check_mdc_compliance",
            "docstring": "Check .mdc file compliance specifically"
          },
          {
            "name": "get_rule_summary",
            "docstring": "Get a summary of all rules"
          },
          {
            "name": "validate_deterministic_editing",
            "docstring": "Validate deterministic editing compliance"
          },
          {
            "name": "provide_immediate_feedback",
            "docstring": "Provide immediate feedback for a file"
          }
        ],
        "classes": [
          {
            "name": "RuleComplianceChecker",
            "docstring": "Cursor IDE plugin for rule compliance checking."
          }
        ],
        "variables": [],
        "line_count": 152
      }
    },
    "src/code_quality_system/quality_model.py": {
      "file_path": "src/code_quality_system/quality_model.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 221,
      "line_count": 271,
      "function_count": 15,
      "class_count": 2,
      "import_count": 6,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Defines a linting rule and its fix",
          "Model-driven code quality system",
          "Define all linting rules with their fixes",
          "Define automated fixers for each rule type",
          "Run autoflake to fix unused imports and variables",
          "Run black to format code",
          "Apply custom fixes for specific issues",
          "Fix unused imports",
          "Fix f-string issues",
          "Fix trailing whitespace",
          "Fix bare except clauses",
          "Fix import order issues",
          "Fix unused variables",
          "Analyze a single file for all linting issues",
          "Fix all issues in a file",
          "Fix all files in the project"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "dataclasses.dataclass",
          "dataclasses.field",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Callable",
          "pathlib.Path",
          "re",
          "subprocess"
        ],
        "functions": [
          {
            "name": "__post_init__",
            "docstring": null
          },
          {
            "name": "_define_rules",
            "docstring": "Define all linting rules with their fixes"
          },
          {
            "name": "_define_fixers",
            "docstring": "Define automated fixers for each rule type"
          },
          {
            "name": "_run_autoflake",
            "docstring": "Run autoflake to fix unused imports and variables"
          },
          {
            "name": "_run_black",
            "docstring": "Run black to format code"
          },
          {
            "name": "_apply_custom_fixes",
            "docstring": "Apply custom fixes for specific issues"
          },
          {
            "name": "_fix_unused_imports",
            "docstring": "Fix unused imports"
          },
          {
            "name": "_fix_f_strings",
            "docstring": "Fix f-string issues"
          },
          {
            "name": "_fix_trailing_whitespace",
            "docstring": "Fix trailing whitespace"
          },
          {
            "name": "_fix_bare_except",
            "docstring": "Fix bare except clauses"
          },
          {
            "name": "_fix_import_order",
            "docstring": "Fix import order issues"
          },
          {
            "name": "_fix_unused_variables",
            "docstring": "Fix unused variables"
          },
          {
            "name": "analyze_file",
            "docstring": "Analyze a single file for all linting issues"
          },
          {
            "name": "fix_file",
            "docstring": "Fix all issues in a file"
          },
          {
            "name": "fix_all_files",
            "docstring": "Fix all files in the project"
          }
        ],
        "classes": [
          {
            "name": "LintingRule",
            "docstring": "Defines a linting rule and its fix"
          },
          {
            "name": "CodeQualityModel",
            "docstring": "Model-driven code quality system"
          }
        ],
        "variables": [],
        "line_count": 271
      }
    },
    "src/security_first/https_enforcement.py": {
      "file_path": "src/security_first/https_enforcement.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 156,
      "line_count": 204,
      "function_count": 16,
      "class_count": 4,
      "import_count": 9,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "HTTPS enforcement and SSL/TLS configuration for security-first architecture",
          "HTTPS enforcement and SSL/TLS configuration for security-first architecture.",
          "Rate limiting implementation to prevent abuse.",
          "CSRF protection implementation.",
          "Comprehensive security manager implementing all critical blind spots.",
          "Test HTTPS enforcement functionality",
          "Create secure SSL context with modern TLS configuration.",
          "Validate that URL uses HTTPS protocol.",
          "Enforce HTTPS redirect for HTTP URLs.",
          "Validate SSL certificate for given hostname.",
          "Configure requests session with secure SSL settings.",
          "Check if user has exceeded rate limit for endpoint.",
          "Get remaining requests for user on endpoint.",
          "Generate CSRF token for session.",
          "Validate CSRF token for session.",
          "Comprehensive request validation.",
          "Get security headers for responses."
        ],
        "imports": [
          "ssl",
          "socket",
          "logging",
          "hashlib",
          "time",
          "urllib.parse.urlparse",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "certifi",
          "requests"
        ],
        "functions": [
          {
            "name": "test_https_enforcement",
            "docstring": "Test HTTPS enforcement functionality"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "_create_ssl_context",
            "docstring": "Create secure SSL context with modern TLS configuration."
          },
          {
            "name": "validate_https_url",
            "docstring": "Validate that URL uses HTTPS protocol."
          },
          {
            "name": "enforce_https_redirect",
            "docstring": "Enforce HTTPS redirect for HTTP URLs."
          },
          {
            "name": "validate_ssl_certificate",
            "docstring": "Validate SSL certificate for given hostname."
          },
          {
            "name": "configure_secure_requests_session",
            "docstring": "Configure requests session with secure SSL settings."
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "check_rate_limit",
            "docstring": "Check if user has exceeded rate limit for endpoint."
          },
          {
            "name": "get_remaining_requests",
            "docstring": "Get remaining requests for user on endpoint."
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "generate_csrf_token",
            "docstring": "Generate CSRF token for session."
          },
          {
            "name": "validate_csrf_token",
            "docstring": "Validate CSRF token for session."
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "validate_request",
            "docstring": "Comprehensive request validation."
          },
          {
            "name": "get_security_headers",
            "docstring": "Get security headers for responses."
          }
        ],
        "classes": [
          {
            "name": "HTTPSEnforcement",
            "docstring": "HTTPS enforcement and SSL/TLS configuration for security-first architecture."
          },
          {
            "name": "RateLimiting",
            "docstring": "Rate limiting implementation to prevent abuse."
          },
          {
            "name": "CSRFProtection",
            "docstring": "CSRF protection implementation."
          },
          {
            "name": "SecurityManager",
            "docstring": "Comprehensive security manager implementing all critical blind spots."
          }
        ],
        "variables": [],
        "line_count": 204
      }
    },
    "src/security_first/test_https_enforcement.py": {
      "file_path": "src/security_first/test_https_enforcement.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 182,
      "line_count": 268,
      "function_count": 22,
      "class_count": 5,
      "import_count": 5,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Tests for HTTPS Enforcement Module\nValidates critical security blind spot fixes identified by multi-agent analysis.",
          "Test HTTPS enforcement functionality.",
          "Test rate limiting functionality.",
          "Test CSRF protection functionality.",
          "Test comprehensive security manager.",
          "Integration tests for security components.",
          "Setup test environment.",
          "Test validation of valid HTTPS URLs.",
          "Test validation of invalid HTTP URLs.",
          "Test HTTPS redirect enforcement.",
          "Test SSL context configuration.",
          "Test successful SSL certificate validation.",
          "Test SSL certificate validation failure.",
          "Setup test environment.",
          "Test rate limit check for first request.",
          "Test rate limit check when under limit.",
          "Test rate limit check when over limit.",
          "Test getting remaining requests.",
          "Setup test environment.",
          "Test CSRF token generation.",
          "Test valid CSRF token validation.",
          "Test invalid CSRF token validation.",
          "Setup test environment.",
          "Test request validation with all security checks passing.",
          "Test request validation with invalid HTTPS.",
          "Test request validation with rate limit exceeded.",
          "Test security headers generation.",
          "Test integration of all security components."
        ],
        "imports": [
          "pytest",
          "unittest.mock",
          "unittest.mock.MagicMock",
          "ssl",
          "https_enforcement.HTTPSEnforcement",
          "https_enforcement.RateLimiting",
          "https_enforcement.CSRFProtection",
          "https_enforcement.SecurityManager"
        ],
        "functions": [
          {
            "name": "setup_method",
            "docstring": "Setup test environment."
          },
          {
            "name": "test_validate_https_url_valid",
            "docstring": "Test validation of valid HTTPS URLs."
          },
          {
            "name": "test_validate_https_url_invalid",
            "docstring": "Test validation of invalid HTTP URLs."
          },
          {
            "name": "test_enforce_https_redirect",
            "docstring": "Test HTTPS redirect enforcement."
          },
          {
            "name": "test_ssl_context_configuration",
            "docstring": "Test SSL context configuration."
          },
          {
            "name": "test_validate_ssl_certificate_success",
            "docstring": "Test successful SSL certificate validation."
          },
          {
            "name": "test_validate_ssl_certificate_failure",
            "docstring": "Test SSL certificate validation failure."
          },
          {
            "name": "setup_method",
            "docstring": "Setup test environment."
          },
          {
            "name": "test_check_rate_limit_first_request",
            "docstring": "Test rate limit check for first request."
          },
          {
            "name": "test_check_rate_limit_under_limit",
            "docstring": "Test rate limit check when under limit."
          },
          {
            "name": "test_check_rate_limit_over_limit",
            "docstring": "Test rate limit check when over limit."
          },
          {
            "name": "test_get_remaining_requests",
            "docstring": "Test getting remaining requests."
          },
          {
            "name": "setup_method",
            "docstring": "Setup test environment."
          },
          {
            "name": "test_generate_csrf_token",
            "docstring": "Test CSRF token generation."
          },
          {
            "name": "test_validate_csrf_token_valid",
            "docstring": "Test valid CSRF token validation."
          },
          {
            "name": "test_validate_csrf_token_invalid",
            "docstring": "Test invalid CSRF token validation."
          },
          {
            "name": "setup_method",
            "docstring": "Setup test environment."
          },
          {
            "name": "test_validate_request_all_valid",
            "docstring": "Test request validation with all security checks passing."
          },
          {
            "name": "test_validate_request_https_invalid",
            "docstring": "Test request validation with invalid HTTPS."
          },
          {
            "name": "test_validate_request_rate_limit_exceeded",
            "docstring": "Test request validation with rate limit exceeded."
          },
          {
            "name": "test_get_security_headers",
            "docstring": "Test security headers generation."
          },
          {
            "name": "test_security_manager_integration",
            "docstring": "Test integration of all security components."
          }
        ],
        "classes": [
          {
            "name": "TestHTTPSEnforcement",
            "docstring": "Test HTTPS enforcement functionality."
          },
          {
            "name": "TestRateLimiting",
            "docstring": "Test rate limiting functionality."
          },
          {
            "name": "TestCSRFProtection",
            "docstring": "Test CSRF protection functionality."
          },
          {
            "name": "TestSecurityManager",
            "docstring": "Test comprehensive security manager."
          },
          {
            "name": "TestIntegration",
            "docstring": "Integration tests for security components."
          }
        ],
        "variables": [],
        "line_count": 268
      }
    },
    "src/security_first/rate_limiting.py": {
      "file_path": "src/security_first/rate_limiting.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 20)"
      }
    },
    "src/security_first/test_streamlit_security_first.py": {
      "file_path": "src/security_first/test_streamlit_security_first.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 43)"
      }
    },
    "src/security_first/test_security_model.py": {
      "file_path": "src/security_first/test_security_model.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 30)"
      }
    },
    "src/security_first/__init__.py": {
      "file_path": "src/security_first/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 16,
      "line_count": 22,
      "function_count": 0,
      "class_count": 0,
      "import_count": 2,
      "error_count": 0,
      "model_data": {
        "docstrings": [],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "https_enforcement.HTTPSEnforcement",
          "https_enforcement.RateLimiting",
          "https_enforcement.CSRFProtection",
          "https_enforcement.SecurityManager"
        ],
        "functions": [],
        "classes": [],
        "variables": [],
        "line_count": 22
      }
    },
    "src/mdc_generator/mdc_model.py": {
      "file_path": "src/mdc_generator/mdc_model.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 283,
      "line_count": 409,
      "function_count": 11,
      "class_count": 3,
      "import_count": 6,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Model for MDC file YAML frontmatter",
          "Complete MDC file model",
          "Generator for MDC files",
          "Main function for command-line usage",
          "Convert to YAML string",
          "Generate complete .mdc file content",
          "Save .mdc file",
          "Load .mdc file from disk",
          "Create a new MDC rule file",
          "Generate all standard .mdc rules",
          "Get standard rule definitions",
          "Validate a single .mdc file",
          "Validate all .mdc files in the project"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "yaml",
          "dataclasses.dataclass",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "pathlib.Path",
          "argparse"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Main function for command-line usage"
          },
          {
            "name": "to_yaml",
            "docstring": "Convert to YAML string"
          },
          {
            "name": "to_mdc_content",
            "docstring": "Generate complete .mdc file content"
          },
          {
            "name": "save",
            "docstring": "Save .mdc file"
          },
          {
            "name": "from_file",
            "docstring": "Load .mdc file from disk"
          },
          {
            "name": "create_rule",
            "docstring": "Create a new MDC rule file"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "generate_all_rules",
            "docstring": "Generate all standard .mdc rules"
          },
          {
            "name": "_get_standard_rules",
            "docstring": "Get standard rule definitions"
          },
          {
            "name": "validate_mdc_file",
            "docstring": "Validate a single .mdc file"
          },
          {
            "name": "validate_all_mdc_files",
            "docstring": "Validate all .mdc files in the project"
          }
        ],
        "classes": [
          {
            "name": "MDCFrontmatter",
            "docstring": "Model for MDC file YAML frontmatter"
          },
          {
            "name": "MDCFile",
            "docstring": "Complete MDC file model"
          },
          {
            "name": "MDCGenerator",
            "docstring": "Generator for MDC files"
          }
        ],
        "variables": [],
        "line_count": 409
      }
    },
    "src/mdc_generator/__init__.py": {
      "file_path": "src/mdc_generator/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 8,
      "line_count": 12,
      "function_count": 0,
      "class_count": 0,
      "import_count": 2,
      "error_count": 0,
      "model_data": {
        "docstrings": [],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "mdc_model.MDCFile",
          "mdc_model.MDCFrontmatter",
          "mdc_model.MDCGenerator"
        ],
        "functions": [],
        "classes": [],
        "variables": [],
        "line_count": 12
      }
    },
    "src/multi_agent_testing/diversity_synthesis_orchestrator.py": {
      "file_path": "src/multi_agent_testing/diversity_synthesis_orchestrator.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 432,
      "line_count": 582,
      "function_count": 9,
      "class_count": 4,
      "import_count": 13,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Main function to run synthesis",
          "Create LLM client for synthesis",
          "Load findings from diversity analysis",
          "Synthesize diverse findings into prioritized fixes",
          "Calculate stakeholder impact matrix",
          "Create visualizations for synthesis results",
          "Generate prioritized implementation report",
          "Run complete synthesis analysis"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "json",
          "os",
          "dataclasses.dataclass",
          "dataclasses.asdict",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "pathlib.Path",
          "langchain_core.messages.HumanMessage",
          "langchain_core.messages.SystemMessage",
          "langchain_openai.ChatOpenAI",
          "pydantic.BaseModel",
          "pydantic.Field",
          "matplotlib.pyplot",
          "seaborn",
          "pandas",
          "numpy"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Main function to run synthesis"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "create_llm_client",
            "docstring": "Create LLM client for synthesis"
          },
          {
            "name": "load_diversity_findings",
            "docstring": "Load findings from diversity analysis"
          },
          {
            "name": "synthesize_fixes",
            "docstring": "Synthesize diverse findings into prioritized fixes"
          },
          {
            "name": "calculate_stakeholder_impact_matrix",
            "docstring": "Calculate stakeholder impact matrix"
          },
          {
            "name": "create_synthesis_visualizations",
            "docstring": "Create visualizations for synthesis results"
          },
          {
            "name": "generate_prioritized_report",
            "docstring": "Generate prioritized implementation report"
          },
          {
            "name": "run_synthesis",
            "docstring": "Run complete synthesis analysis"
          }
        ],
        "classes": [
          {
            "name": "Stakeholder",
            "docstring": null
          },
          {
            "name": "SynthesizedFix",
            "docstring": null
          },
          {
            "name": "FixSynthesis",
            "docstring": null
          },
          {
            "name": "DiversitySynthesisOrchestrator",
            "docstring": null
          }
        ],
        "variables": [],
        "line_count": 582
      }
    },
    "src/multi_agent_testing/test_anthropic_simple.py": {
      "file_path": "src/multi_agent_testing/test_anthropic_simple.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 22)"
      }
    },
    "src/multi_agent_testing/test_multi_agent_blind_spot_detection.py": {
      "file_path": "src/multi_agent_testing/test_multi_agent_blind_spot_detection.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 463,
      "line_count": 569,
      "function_count": 27,
      "class_count": 6,
      "import_count": 3,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Multi-agent blind spot detection testing",
          "Result of blind spot detection test",
          "Diversity agent for blind spot detection",
          "Multi-agent blind spot detection system",
          "Test multi-agent blind spot detection",
          "Test compliance with blind spot detection requirements",
          "Test integration between blind spot detection and Streamlit app",
          "Analyze context for blind spots",
          "Analyze security blind spots",
          "Analyze DevOps blind spots",
          "Analyze code quality blind spots",
          "Analyze UX blind spots",
          "Analyze performance blind spots",
          "Run complete multi-agent analysis",
          "Setup test method",
          "Test security blind spot detection",
          "Test DevOps blind spot detection",
          "Test code quality blind spot detection",
          "Test UX blind spot detection",
          "Test performance blind spot detection",
          "Test complete multi-agent analysis",
          "Test blind spot coverage across all agents",
          "Test confidence score distribution",
          "Test recommendation quality",
          "Setup test method",
          "Test security compliance",
          "Test DevOps compliance",
          "Test code quality compliance",
          "Test UX compliance",
          "Test performance compliance",
          "Test that blind spots map to actual implementations",
          "Test prioritization of remaining blind spots"
        ],
        "imports": [
          "dataclasses.dataclass",
          "typing.Dict",
          "typing.List",
          "unittest.mock.patch"
        ],
        "functions": [
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "analyze",
            "docstring": "Analyze context for blind spots"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "analyze_security_blind_spots",
            "docstring": "Analyze security blind spots"
          },
          {
            "name": "analyze_devops_blind_spots",
            "docstring": "Analyze DevOps blind spots"
          },
          {
            "name": "analyze_code_quality_blind_spots",
            "docstring": "Analyze code quality blind spots"
          },
          {
            "name": "analyze_ux_blind_spots",
            "docstring": "Analyze UX blind spots"
          },
          {
            "name": "analyze_performance_blind_spots",
            "docstring": "Analyze performance blind spots"
          },
          {
            "name": "run_complete_analysis",
            "docstring": "Run complete multi-agent analysis"
          },
          {
            "name": "setup_method",
            "docstring": "Setup test method"
          },
          {
            "name": "test_security_blind_spot_detection",
            "docstring": "Test security blind spot detection"
          },
          {
            "name": "test_devops_blind_spot_detection",
            "docstring": "Test DevOps blind spot detection"
          },
          {
            "name": "test_code_quality_blind_spot_detection",
            "docstring": "Test code quality blind spot detection"
          },
          {
            "name": "test_ux_blind_spot_detection",
            "docstring": "Test UX blind spot detection"
          },
          {
            "name": "test_performance_blind_spot_detection",
            "docstring": "Test performance blind spot detection"
          },
          {
            "name": "test_complete_multi_agent_analysis",
            "docstring": "Test complete multi-agent analysis"
          },
          {
            "name": "test_blind_spot_coverage",
            "docstring": "Test blind spot coverage across all agents"
          },
          {
            "name": "test_confidence_score_distribution",
            "docstring": "Test confidence score distribution"
          },
          {
            "name": "test_recommendation_quality",
            "docstring": "Test recommendation quality"
          },
          {
            "name": "setup_method",
            "docstring": "Setup test method"
          },
          {
            "name": "test_security_compliance",
            "docstring": "Test security compliance"
          },
          {
            "name": "test_devops_compliance",
            "docstring": "Test DevOps compliance"
          },
          {
            "name": "test_code_quality_compliance",
            "docstring": "Test code quality compliance"
          },
          {
            "name": "test_ux_compliance",
            "docstring": "Test UX compliance"
          },
          {
            "name": "test_performance_compliance",
            "docstring": "Test performance compliance"
          },
          {
            "name": "test_blind_spot_to_implementation_mapping",
            "docstring": "Test that blind spots map to actual implementations"
          },
          {
            "name": "test_remaining_blind_spots_prioritization",
            "docstring": "Test prioritization of remaining blind spots"
          }
        ],
        "classes": [
          {
            "name": "BlindSpotTestResult",
            "docstring": "Result of blind spot detection test"
          },
          {
            "name": "DiversityAgent",
            "docstring": "Diversity agent for blind spot detection"
          },
          {
            "name": "MultiAgentBlindSpotDetector",
            "docstring": "Multi-agent blind spot detection system"
          },
          {
            "name": "TestMultiAgentBlindSpotDetection",
            "docstring": "Test multi-agent blind spot detection"
          },
          {
            "name": "TestBlindSpotDetectionCompliance",
            "docstring": "Test compliance with blind spot detection requirements"
          },
          {
            "name": "TestBlindSpotDetectionIntegration",
            "docstring": "Test integration between blind spot detection and Streamlit app"
          }
        ],
        "variables": [],
        "line_count": 569
      }
    },
    "src/multi_agent_testing/debug_anthropic_api.py": {
      "file_path": "src/multi_agent_testing/debug_anthropic_api.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 89,
      "line_count": 106,
      "function_count": 1,
      "class_count": 0,
      "import_count": 2,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Debug Anthropic API Issues",
          "Test Anthropic API with different configurations"
        ],
        "imports": [
          "os",
          "requests"
        ],
        "functions": [
          {
            "name": "test_anthropic_api",
            "docstring": "Test Anthropic API with different configurations"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 106
      }
    },
    "src/multi_agent_testing/test_diversity_hypothesis.py": {
      "file_path": "src/multi_agent_testing/test_diversity_hypothesis.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 30)"
      }
    },
    "src/multi_agent_testing/meta_cognitive_orchestrator.py": {
      "file_path": "src/multi_agent_testing/meta_cognitive_orchestrator.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 120,
      "line_count": 158,
      "function_count": 9,
      "class_count": 1,
      "import_count": 1,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Meta-Cognitive Orchestrator for LLM self-awareness",
          "Orchestrates meta-cognitive awareness through partner LLM questioning",
          "Test the meta-cognitive orchestrator",
          "Detect when I'm making assumptions or missing information",
          "Generate Jeopardy-style question for partner LLM",
          "Simulate partner LLM investigation with Jeopardy-style questions",
          "Analyze partner LLM feedback and identify blind spots",
          "Calculate confidence based on detected issues",
          "Make final decision based on confidence and blind spots",
          "Orchestrate meta-cognitive awareness for a given context"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Any"
        ],
        "functions": [
          {
            "name": "test_meta_cognitive_orchestrator",
            "docstring": "Test the meta-cognitive orchestrator"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "detect_assumptions",
            "docstring": "Detect when I'm making assumptions or missing information"
          },
          {
            "name": "generate_jeopardy_question",
            "docstring": "Generate Jeopardy-style question for partner LLM"
          },
          {
            "name": "simulate_partner_investigation",
            "docstring": "Simulate partner LLM investigation with Jeopardy-style questions"
          },
          {
            "name": "identify_blind_spots",
            "docstring": "Analyze partner LLM feedback and identify blind spots"
          },
          {
            "name": "calculate_confidence",
            "docstring": "Calculate confidence based on detected issues"
          },
          {
            "name": "make_decision",
            "docstring": "Make final decision based on confidence and blind spots"
          },
          {
            "name": "orchestrate",
            "docstring": "Orchestrate meta-cognitive awareness for a given context"
          }
        ],
        "classes": [
          {
            "name": "MetaCognitiveOrchestrator",
            "docstring": "Orchestrates meta-cognitive awareness through partner LLM questioning"
          }
        ],
        "variables": [],
        "line_count": 158
      }
    },
    "src/multi_agent_testing/test_live_smoke_test.py": {
      "file_path": "src/multi_agent_testing/test_live_smoke_test.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 66)"
      }
    },
    "src/multi_agent_testing/test_model_traceability.py": {
      "file_path": "src/multi_agent_testing/test_model_traceability.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 13)"
      }
    },
    "src/multi_agent_testing/multi_dimensional_smoke_test.py": {
      "file_path": "src/multi_agent_testing/multi_dimensional_smoke_test.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 140)"
      }
    },
    "src/multi_agent_testing/langgraph_diversity_orchestrator.py": {
      "file_path": "src/multi_agent_testing/langgraph_diversity_orchestrator.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 678,
      "line_count": 875,
      "function_count": 12,
      "class_count": 4,
      "import_count": 24,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Main function to run the diversity analysis",
          "Create LLM client based on agent configuration",
          "Analyze context with a specific agent",
          "Run analysis with all agents in parallel",
          "Calculate comprehensive diversity metrics",
          "Create comprehensive visualizations",
          "Create network graph showing agent relationships and findings overlap",
          "Create detailed findings analysis visualization",
          "Generate comprehensive PDF report",
          "Generate comprehensive Markdown report",
          "Run complete diversity analysis with all outputs"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "json",
          "os",
          "concurrent.futures.ThreadPoolExecutor",
          "concurrent.futures.as_completed",
          "dataclasses.dataclass",
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "matplotlib.pyplot",
          "seaborn",
          "pandas",
          "numpy",
          "pathlib.Path",
          "langchain_core.messages.HumanMessage",
          "langchain_core.messages.SystemMessage",
          "langchain_openai.ChatOpenAI",
          "langchain_anthropic.ChatAnthropic",
          "langchain_core.output_parsers.JsonOutputParser",
          "pydantic.BaseModel",
          "pydantic.Field",
          "networkx",
          "reportlab.lib.pagesizes.letter",
          "reportlab.platypus.SimpleDocTemplate",
          "reportlab.platypus.Paragraph",
          "reportlab.platypus.Spacer",
          "reportlab.platypus.Table",
          "reportlab.platypus.TableStyle",
          "reportlab.lib.styles.getSampleStyleSheet",
          "reportlab.lib.styles.ParagraphStyle",
          "reportlab.lib.colors",
          "markdown",
          "jinja2.Template"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Main function to run the diversity analysis"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "create_llm_client",
            "docstring": "Create LLM client based on agent configuration"
          },
          {
            "name": "analyze_with_agent",
            "docstring": "Analyze context with a specific agent"
          },
          {
            "name": "run_multi_threaded_analysis",
            "docstring": "Run analysis with all agents in parallel"
          },
          {
            "name": "calculate_diversity_metrics",
            "docstring": "Calculate comprehensive diversity metrics"
          },
          {
            "name": "create_visualizations",
            "docstring": "Create comprehensive visualizations"
          },
          {
            "name": "create_network_graph",
            "docstring": "Create network graph showing agent relationships and findings overlap"
          },
          {
            "name": "create_findings_analysis",
            "docstring": "Create detailed findings analysis visualization"
          },
          {
            "name": "generate_pdf_report",
            "docstring": "Generate comprehensive PDF report"
          },
          {
            "name": "generate_markdown_report",
            "docstring": "Generate comprehensive Markdown report"
          },
          {
            "name": "run_complete_analysis",
            "docstring": "Run complete diversity analysis with all outputs"
          }
        ],
        "classes": [
          {
            "name": "DiversityAgent",
            "docstring": null
          },
          {
            "name": "BlindSpotFinding",
            "docstring": null
          },
          {
            "name": "DiversityAnalysis",
            "docstring": null
          },
          {
            "name": "LangGraphDiversityOrchestrator",
            "docstring": null
          }
        ],
        "variables": [],
        "line_count": 875
      }
    },
    "src/multi_agent_testing/cost_analysis.py": {
      "file_path": "src/multi_agent_testing/cost_analysis.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 240,
      "line_count": 336,
      "function_count": 5,
      "class_count": 0,
      "import_count": 2,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "\ud83d\udcb0 COST ANALYSIS FOR DIVERSITY HYPOTHESIS TESTING\n\nCalculate total tokens and costs for our multi-agent diversity analysis.",
          "Rough estimate of tokens (4 characters per token)",
          "Analyze costs from multi-dimensional smoke test",
          "Analyze costs from LangGraph diversity orchestrator",
          "Analyze costs from synthesis orchestrator",
          "Calculate total costs for diversity hypothesis testing"
        ],
        "imports": [
          "json",
          "os"
        ],
        "functions": [
          {
            "name": "estimate_tokens",
            "docstring": "Rough estimate of tokens (4 characters per token)"
          },
          {
            "name": "analyze_multi_dimensional_costs",
            "docstring": "Analyze costs from multi-dimensional smoke test"
          },
          {
            "name": "analyze_langgraph_costs",
            "docstring": "Analyze costs from LangGraph diversity orchestrator"
          },
          {
            "name": "analyze_synthesis_costs",
            "docstring": "Analyze costs from synthesis orchestrator"
          },
          {
            "name": "main",
            "docstring": "Calculate total costs for diversity hypothesis testing"
          }
        ],
        "classes": [],
        "variables": [],
        "line_count": 336
      }
    },
    "src/multi_agent_testing/test_meta_cognitive_orchestrator.py": {
      "file_path": "src/multi_agent_testing/test_meta_cognitive_orchestrator.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 14)"
      }
    },
    "src/multi_agent_testing/live_smoke_test.py": {
      "file_path": "src/multi_agent_testing/live_smoke_test.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 158,
      "line_count": 201,
      "function_count": 8,
      "class_count": 1,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Live LLM integration for real smoke testing",
          "Live LLM integration for real smoke testing",
          "Test live LLM with PR workflow scenario",
          "Test live LLM with security scenario",
          "Test live LLM with edge case scenario",
          "Compare our analysis with live LLM results",
          "Call live LLM API for real second opinion"
        ],
        "imports": [
          "os",
          "json",
          "requests",
          "typing.Dict",
          "typing.Any",
          "typing.Optional"
        ],
        "functions": [
          {
            "name": "test_live_scenario_1",
            "docstring": "Test live LLM with PR workflow scenario"
          },
          {
            "name": "test_live_scenario_2",
            "docstring": "Test live LLM with security scenario"
          },
          {
            "name": "test_live_edge_case",
            "docstring": "Test live LLM with edge case scenario"
          },
          {
            "name": "compare_live_results",
            "docstring": "Compare our analysis with live LLM results"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "_get_base_url",
            "docstring": null
          },
          {
            "name": "_get_model",
            "docstring": null
          },
          {
            "name": "call_live_llm",
            "docstring": "Call live LLM API for real second opinion"
          }
        ],
        "classes": [
          {
            "name": "LiveLLMOrchestrator",
            "docstring": "Live LLM integration for real smoke testing"
          }
        ],
        "variables": [],
        "line_count": 201
      }
    },
    "src/multi_agent_testing/diversity_hypothesis_demo.py": {
      "file_path": "src/multi_agent_testing/diversity_hypothesis_demo.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 222,
      "line_count": 274,
      "function_count": 6,
      "class_count": 2,
      "import_count": 4,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "Simulate an AI reviewer's analysis based on their perspective",
          "Analyze how diversity improves blind spot detection",
          "Compare our diverse AI reviewers with GitHub Copilot findings",
          "Run the complete diversity hypothesis demonstration"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "json",
          "typing.Dict",
          "typing.Any",
          "dataclasses.dataclass"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": null
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "simulate_ai_review",
            "docstring": "Simulate an AI reviewer's analysis based on their perspective"
          },
          {
            "name": "analyze_diversity_impact",
            "docstring": "Analyze how diversity improves blind spot detection"
          },
          {
            "name": "compare_with_github_copilot",
            "docstring": "Compare our diverse AI reviewers with GitHub Copilot findings"
          },
          {
            "name": "run_demo",
            "docstring": "Run the complete diversity hypothesis demonstration"
          }
        ],
        "classes": [
          {
            "name": "AIReviewer",
            "docstring": null
          },
          {
            "name": "DiversityHypothesisDemo",
            "docstring": null
          }
        ],
        "variables": [],
        "line_count": 274
      }
    },
    "src/multi_agent_testing/live_smoke_test_langchain.py": {
      "file_path": "src/multi_agent_testing/live_smoke_test_langchain.py",
      "file_type": "python",
      "model_type": "error",
      "complexity_score": 0.0,
      "line_count": 0,
      "function_count": 0,
      "class_count": 0,
      "import_count": 0,
      "error_count": 1,
      "model_data": {
        "error": "unexpected indent (<unknown>, line 23)"
      }
    },
    "src/multi_agent_testing/__init__.py": {
      "file_path": "src/multi_agent_testing/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 11,
      "line_count": 16,
      "function_count": 0,
      "class_count": 0,
      "import_count": 2,
      "error_count": 0,
      "model_data": {
        "docstrings": [],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "test_multi_agent_blind_spot_detection.MultiAgentBlindSpotDetector"
        ],
        "functions": [],
        "classes": [],
        "variables": [],
        "line_count": 16
      }
    },
    "src/streamlit/openflow_quickstart_app.py": {
      "file_path": "src/streamlit/openflow_quickstart_app.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 495,
      "line_count": 608,
      "function_count": 41,
      "class_count": 8,
      "import_count": 16,
      "error_count": 0,
      "model_data": {
        "docstrings": [
          "OpenFlow Quickstart Application - Security-first Streamlit dashboard",
          "Security-first credential and session management",
          "Input validation and sanitization",
          "AWS CloudFormation deployment management",
          "Real-time monitoring and visualization dashboard",
          "Main Streamlit application",
          "Main function",
          "Encrypt sensitive credentials",
          "Decrypt sensitive credentials",
          "Store credential securely in Redis with encryption",
          "Retrieve credential securely from Redis",
          "Validate JWT session token",
          "Create JWT session token",
          "Validate Snowflake account URL format",
          "Validate UUID format",
          "Sanitize user input to prevent injection attacks",
          "Validate OAuth credentials format",
          "Create CloudFormation stack",
          "Update CloudFormation stack",
          "Delete CloudFormation stack",
          "Get stack status",
          "Get stack events for monitoring",
          "Rollback stack to previous state",
          "Create deployment timeline visualization",
          "Create resource status matrix visualization",
          "Setup Streamlit page configuration",
          "Login page with security validation",
          "Validate user credentials (demo implementation)",
          "Main dashboard with role-based access",
          "Viewer dashboard with read-only access",
          "Operator dashboard with deployment management",
          "Admin dashboard with full access",
          "Configuration management section",
          "Deployment management section",
          "Create new deployment",
          "Update existing deployment",
          "Rollback deployment",
          "Monitoring and visualization section",
          "Security management section",
          "User management section",
          "Run the Streamlit application"
        ],
        "imports": [
          "os",
          "time",
          "redis",
          "jwt",
          "streamlit",
          "plotly.graph_objects",
          "datetime.datetime",
          "datetime.timezone",
          "datetime.timedelta",
          "dataclasses.dataclass",
          "typing.Dict",
          "typing.Optional",
          "typing.List",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.validator",
          "cryptography.fernet.Fernet",
          "boto3",
          "botocore.exceptions.ClientError",
          "re",
          "re",
          "html"
        ],
        "functions": [
          {
            "name": "main",
            "docstring": "Main function"
          },
          {
            "name": "validate_account_url",
            "docstring": null
          },
          {
            "name": "validate_uuid",
            "docstring": null
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "encrypt_credential",
            "docstring": "Encrypt sensitive credentials"
          },
          {
            "name": "decrypt_credential",
            "docstring": "Decrypt sensitive credentials"
          },
          {
            "name": "store_credential_secure",
            "docstring": "Store credential securely in Redis with encryption"
          },
          {
            "name": "get_credential_secure",
            "docstring": "Retrieve credential securely from Redis"
          },
          {
            "name": "validate_session",
            "docstring": "Validate JWT session token"
          },
          {
            "name": "create_session_token",
            "docstring": "Create JWT session token"
          },
          {
            "name": "validate_snowflake_url",
            "docstring": "Validate Snowflake account URL format"
          },
          {
            "name": "validate_uuid",
            "docstring": "Validate UUID format"
          },
          {
            "name": "sanitize_input",
            "docstring": "Sanitize user input to prevent injection attacks"
          },
          {
            "name": "validate_oauth_credentials",
            "docstring": "Validate OAuth credentials format"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "create_stack",
            "docstring": "Create CloudFormation stack"
          },
          {
            "name": "update_stack",
            "docstring": "Update CloudFormation stack"
          },
          {
            "name": "delete_stack",
            "docstring": "Delete CloudFormation stack"
          },
          {
            "name": "get_stack_status",
            "docstring": "Get stack status"
          },
          {
            "name": "get_stack_events",
            "docstring": "Get stack events for monitoring"
          },
          {
            "name": "rollback_stack",
            "docstring": "Rollback stack to previous state"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "create_deployment_timeline",
            "docstring": "Create deployment timeline visualization"
          },
          {
            "name": "create_resource_status_matrix",
            "docstring": "Create resource status matrix visualization"
          },
          {
            "name": "__init__",
            "docstring": null
          },
          {
            "name": "setup_page_config",
            "docstring": "Setup Streamlit page configuration"
          },
          {
            "name": "login_page",
            "docstring": "Login page with security validation"
          },
          {
            "name": "validate_credentials",
            "docstring": "Validate user credentials (demo implementation)"
          },
          {
            "name": "main_dashboard",
            "docstring": "Main dashboard with role-based access"
          },
          {
            "name": "viewer_dashboard",
            "docstring": "Viewer dashboard with read-only access"
          },
          {
            "name": "operator_dashboard",
            "docstring": "Operator dashboard with deployment management"
          },
          {
            "name": "admin_dashboard",
            "docstring": "Admin dashboard with full access"
          },
          {
            "name": "configuration_section",
            "docstring": "Configuration management section"
          },
          {
            "name": "deployment_section",
            "docstring": "Deployment management section"
          },
          {
            "name": "new_deployment",
            "docstring": "Create new deployment"
          },
          {
            "name": "update_deployment",
            "docstring": "Update existing deployment"
          },
          {
            "name": "rollback_deployment",
            "docstring": "Rollback deployment"
          },
          {
            "name": "monitoring_section",
            "docstring": "Monitoring and visualization section"
          },
          {
            "name": "security_section",
            "docstring": "Security management section"
          },
          {
            "name": "user_management_section",
            "docstring": "User management section"
          },
          {
            "name": "run",
            "docstring": "Run the Streamlit application"
          }
        ],
        "classes": [
          {
            "name": "SnowflakeConfig",
            "docstring": null
          },
          {
            "name": "OpenFlowConfig",
            "docstring": null
          },
          {
            "name": "DeploymentStatus",
            "docstring": null
          },
          {
            "name": "SecurityManager",
            "docstring": "Security-first credential and session management"
          },
          {
            "name": "InputValidator",
            "docstring": "Input validation and sanitization"
          },
          {
            "name": "DeploymentManager",
            "docstring": "AWS CloudFormation deployment management"
          },
          {
            "name": "MonitoringDashboard",
            "docstring": "Real-time monitoring and visualization dashboard"
          },
          {
            "name": "OpenFlowQuickstartApp",
            "docstring": "Main Streamlit application"
          }
        ],
        "variables": [],
        "line_count": 608
      }
    },
    "src/streamlit/__init__.py": {
      "file_path": "src/streamlit/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "complexity_score": 7,
      "line_count": 14,
      "function_count": 0,
      "class_count": 0,
      "import_count": 1,
      "error_count": 0,
      "model_data": {
        "docstrings": [],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Tuple",
          "typing.Optional",
          "typing.Union",
          "typing.Any"
        ],
        "functions": [],
        "classes": [],
        "variables": [],
        "line_count": 14
      }
    },
    "/home/lou/Documents/OpenFlow-Playground/fix_test_rule_compliance.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/fix_test_rule_compliance.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "from pathlib import Path"
        ],
        "functions": [
          {
            "name": "fix_test_file_indentation",
            "parameters": [
              "file_path"
            ],
            "docstring": "Fix indentation issues in test files",
            "lineno": 7,
            "col_offset": 0,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Fix the test file",
            "lineno": 85,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "lines",
          "fixed_lines",
          "current_indent",
          "test_file",
          "fixed_content",
          "content",
          "stripped",
          "current_indent",
          "current_indent",
          "current_indent"
        ],
        "dependencies": [
          "ast",
          "pathlib"
        ],
        "docstrings": [
          "Fix indentation issues in test_rule_compliance_enforcement.py",
          "Fix indentation issues in test files",
          "Fix the test file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 104
              }
            ],
            "lineno": 101
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "fix_test_file_indentation",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_test_file_indentation",
            "parameter": "file_path",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 18,
          "cognitive": 31,
          "nesting": 0,
          "statements": 33
        },
        "nesting_depth": 11,
        "ast_nodes": 543,
        "structure_hash": "aea11c212a5e483a3a8babb1bd89b777"
      },
      "complexity_score": 18,
      "structure_hash": "aea11c212a5e483a3a8babb1bd89b777",
      "lines_of_code": 108,
      "created_at": "2025-08-03T10:06:02.231536",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/ghostbusters_comprehensive.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ghostbusters_comprehensive.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import sys",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "load_model_registry",
            "parameters": [],
            "docstring": "Load the project model registry",
            "lineno": 269,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "assemble_ghostbusters_team",
            "parameters": [],
            "docstring": "Assemble all available ghostbusters",
            "lineno": 282,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "call_more_ghostbusters",
            "parameters": [
              "model_registry"
            ],
            "docstring": "Call all ghostbusters for validation",
            "lineno": 294,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "generate_delusion_report",
            "parameters": [
              "validation_results"
            ],
            "docstring": "Generate comprehensive delusion detection report",
            "lineno": 314,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "print_ghostbusters_report",
            "parameters": [
              "report"
            ],
            "docstring": "Print the ghostbusters report",
            "lineno": 342,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main ghostbusters validation",
            "lineno": 378,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 15,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate security practices",
            "lineno": 19,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 55,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate model-driven approach",
            "lineno": 59,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 108,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate code quality practices",
            "lineno": 112,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 150,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate testing practices",
            "lineno": 154,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 200,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate build environment",
            "lineno": 204,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 240,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate architecture",
            "lineno": 244,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "SecurityExpert",
            "bases": [],
            "docstring": "Security Expert Ghostbuster",
            "lineno": 12,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "ModelExpert",
            "bases": [],
            "docstring": "Model Expert Ghostbuster",
            "lineno": 52,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "CodeQualityExpert",
            "bases": [],
            "docstring": "Code Quality Expert Ghostbuster",
            "lineno": 105,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "TestExpert",
            "bases": [],
            "docstring": "Test Expert Ghostbuster",
            "lineno": 147,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "BuildExpert",
            "bases": [],
            "docstring": "Build Expert Ghostbuster",
            "lineno": 197,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "ArchitectureExpert",
            "bases": [],
            "docstring": "Architecture Expert Ghostbuster",
            "lineno": 237,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "team",
          "results",
          "passed_validations",
          "failed_validations",
          "delusions_detected",
          "report",
          "summary",
          "model_registry",
          "validation_results",
          "delusion_report",
          "security_domain",
          "missing_requirements",
          "test_failures",
          "delusions",
          "missing_updates",
          "test_failures",
          "python_domain",
          "quality_issues",
          "test_failures",
          "test_domains",
          "test_coverage",
          "test_issues",
          "test_failures",
          "build_issues",
          "build_failures",
          "package_domain",
          "file_organization",
          "arch_issues",
          "expert_name",
          "findings",
          "status",
          "domain_config"
        ],
        "dependencies": [
          "sys",
          "typing",
          "json"
        ],
        "docstrings": [
          "Comprehensive Ghostbusters Validation Script\nDetects real issues from test runs and model violations",
          "Security Expert Ghostbuster",
          "Model Expert Ghostbuster",
          "Code Quality Expert Ghostbuster",
          "Test Expert Ghostbuster",
          "Build Expert Ghostbuster",
          "Architecture Expert Ghostbuster",
          "Load the project model registry",
          "Assemble all available ghostbusters",
          "Call all ghostbusters for validation",
          "Generate comprehensive delusion detection report",
          "Print the ghostbusters report",
          "Main ghostbusters validation",
          "Validate security practices",
          "Validate model-driven approach",
          "Validate code quality practices",
          "Validate testing practices",
          "Validate build environment",
          "Validate architecture"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 274
              },
              {
                "type": "json.JSONDecodeError",
                "lineno": 277
              }
            ],
            "lineno": 271
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "load_model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "assemble_ghostbusters_team",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "call_more_ghostbusters",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "call_more_ghostbusters",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "generate_delusion_report",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_delusion_report",
            "parameter": "validation_results",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "print_ghostbusters_report",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "print_ghostbusters_report",
            "parameter": "report",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 38,
          "cognitive": 39,
          "nesting": 0,
          "statements": 122
        },
        "nesting_depth": 12,
        "ast_nodes": 1756,
        "structure_hash": "a12e8a884e66272b21962ce9d00aaa9d"
      },
      "complexity_score": 38,
      "structure_hash": "a12e8a884e66272b21962ce9d00aaa9d",
      "lines_of_code": 405,
      "created_at": "2025-08-03T10:06:02.216130",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/final_syntax_fix.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/final_syntax_fix.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import re",
          "import ast",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "import shutil"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test the final syntax fixer",
            "lineno": 149,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "fix_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix all syntax issues in a file",
            "lineno": 16,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_comprehensive_fixes",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Apply comprehensive syntax fixes",
            "lineno": 35,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "is_in_function_context",
            "parameters": [
              "self",
              "line_num",
              "all_lines"
            ],
            "docstring": "Check if we're inside a function or class definition",
            "lineno": 105,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "validate_fix",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Validate that the fix produces valid Python",
            "lineno": 115,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "fix_multiple_files",
            "parameters": [
              "self",
              "file_paths"
            ],
            "docstring": "Fix multiple files",
            "lineno": 123,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "save_fixed_file",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Save fixed content to file",
            "lineno": 138,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "FinalSyntaxFixer",
            "bases": [],
            "docstring": "Final comprehensive syntax fixer",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "fix_file",
              "apply_comprehensive_fixes",
              "is_in_function_context",
              "validate_fix",
              "fix_multiple_files",
              "save_fixed_file"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "fixer",
          "test_files",
          "fixed_content",
          "lines",
          "fixed_lines",
          "i",
          "results",
          "content",
          "line",
          "line",
          "backup_path",
          "fixed_content",
          "line",
          "line",
          "line",
          "fixed_content",
          "line",
          "line",
          "line",
          "line",
          "line",
          "line",
          "line",
          "line",
          "line"
        ],
        "dependencies": [
          "ast",
          "typing",
          "pathlib",
          "shutil",
          "re"
        ],
        "docstrings": [
          "Final Syntax Fixer\nComprehensive fixer for all remaining syntax issues",
          "Final comprehensive syntax fixer",
          "Test the final syntax fixer",
          "Fix all syntax issues in a file",
          "Apply comprehensive syntax fixes",
          "Check if we're inside a function or class definition",
          "Validate that the fix produces valid Python",
          "Fix multiple files",
          "Save fixed content to file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 120
              }
            ],
            "lineno": 117
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 144
              }
            ],
            "lineno": 140
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 132
              }
            ],
            "lineno": 129
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 185
              }
            ],
            "lineno": 182
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "fix_file",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "apply_comprehensive_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_comprehensive_fixes",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "is_in_function_context",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_in_function_context",
            "parameter": "line_num",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "is_in_function_context",
            "parameter": "all_lines",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "validate_fix",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_fix",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "fix_multiple_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_multiple_files",
            "parameter": "file_paths",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "save_fixed_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "save_fixed_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "save_fixed_file",
            "parameter": "content",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 33,
          "cognitive": 36,
          "nesting": 0,
          "statements": 70
        },
        "nesting_depth": 19,
        "ast_nodes": 952,
        "structure_hash": "33b1e76954a8ef994583f036b6248258"
      },
      "complexity_score": 33,
      "structure_hash": "33b1e76954a8ef994583f036b6248258",
      "lines_of_code": 194,
      "created_at": "2025-08-03T10:06:02.203560",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/fix_test_rule_compliance_indentation.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/fix_test_rule_compliance_indentation.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "from pathlib import Path"
        ],
        "functions": [
          {
            "name": "fix_test_rule_compliance_indentation",
            "parameters": [
              "file_path"
            ],
            "docstring": "Fix indentation issues in test_rule_compliance.py",
            "lineno": 7,
            "col_offset": 0,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Fix the test file",
            "lineno": 80,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "lines",
          "fixed_lines",
          "current_indent",
          "test_file",
          "fixed_content",
          "content",
          "stripped",
          "current_indent",
          "current_indent",
          "current_indent"
        ],
        "dependencies": [
          "ast",
          "pathlib"
        ],
        "docstrings": [
          "Fix indentation issues in test_rule_compliance.py",
          "Fix indentation issues in test_rule_compliance.py",
          "Fix the test file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 99
              }
            ],
            "lineno": 96
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "fix_test_rule_compliance_indentation",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_test_rule_compliance_indentation",
            "parameter": "file_path",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 17,
          "cognitive": 29,
          "nesting": 0,
          "statements": 32
        },
        "nesting_depth": 11,
        "ast_nodes": 511,
        "structure_hash": "c967152011b63b3eefd21a23d336993f"
      },
      "complexity_score": 17,
      "structure_hash": "c967152011b63b3eefd21a23d336993f",
      "lines_of_code": 103,
      "created_at": "2025-08-03T10:06:02.157729",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/fix_remaining_indentation.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/fix_remaining_indentation.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import subprocess",
          "from pathlib import Path",
          "from typing import List"
        ],
        "functions": [
          {
            "name": "fix_specific_indentation_errors",
            "parameters": [
              "file_path"
            ],
            "docstring": "Fix specific indentation errors in a file",
            "lineno": 11,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "is_after_function_definition",
            "parameters": [
              "lines",
              "line_index"
            ],
            "docstring": "Check if line is after a function definition",
            "lineno": 61,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "is_after_control_flow",
            "parameters": [
              "lines",
              "line_index"
            ],
            "docstring": "Check if line is after a control flow statement",
            "lineno": 75,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "is_after_block_start",
            "parameters": [
              "lines",
              "line_index"
            ],
            "docstring": "Check if line is after a block start",
            "lineno": 97,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "needs_indentation_fix",
            "parameters": [
              "line"
            ],
            "docstring": "Check if a line needs indentation fix",
            "lineno": 108,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "find_python_files",
            "parameters": [],
            "docstring": "Find all Python files in the project",
            "lineno": 150,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[Path]",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Fix remaining indentation errors",
            "lineno": 160,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "fixes",
          "lines",
          "fixed_lines",
          "stripped",
          "python_files",
          "python_files",
          "total_fixes",
          "fixed_line",
          "fixed_content",
          "line",
          "line",
          "line",
          "fixes",
          "result",
          "content",
          "fixed_line",
          "fixed_line",
          "fixed_line"
        ],
        "dependencies": [
          "typing",
          "subprocess",
          "pathlib"
        ],
        "docstrings": [
          "Fix the remaining indentation errors identified by flake8",
          "Fix specific indentation errors in a file",
          "Check if line is after a function definition",
          "Check if line is after a control flow statement",
          "Check if line is after a block start",
          "Check if a line needs indentation fix",
          "Find all Python files in the project",
          "Fix remaining indentation errors"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 18
              }
            ],
            "lineno": 15
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 194
              }
            ],
            "lineno": 183
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 55
              }
            ],
            "lineno": 52
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "fix_specific_indentation_errors",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_specific_indentation_errors",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "is_after_function_definition",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_function_definition",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_function_definition",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "is_after_control_flow",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_control_flow",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_control_flow",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "is_after_block_start",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_block_start",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_block_start",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "needs_indentation_fix",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "needs_indentation_fix",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "find_python_files",
            "annotation": "List[Path]"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 41,
          "cognitive": 66,
          "nesting": 0,
          "statements": 67
        },
        "nesting_depth": 11,
        "ast_nodes": 990,
        "structure_hash": "b6fe54eac6adec481f051b6273a9f3de"
      },
      "complexity_score": 41,
      "structure_hash": "b6fe54eac6adec481f051b6273a9f3de",
      "lines_of_code": 200,
      "created_at": "2025-08-03T10:06:02.313886",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/ast_projection_demo.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ast_projection_demo.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import re",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Tuple"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run the AST projection demo",
            "lineno": 334,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 16,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "demonstrate_projection_capabilities",
            "parameters": [
              "self"
            ],
            "docstring": "Demonstrate how AST projection could work",
            "lineno": 19,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_demo_function_projection",
            "parameters": [
              "self"
            ],
            "docstring": "Demonstrate function signature projection",
            "lineno": 32,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_demo_class_projection",
            "parameters": [
              "self"
            ],
            "docstring": "Demonstrate class structure projection",
            "lineno": 56,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_demo_import_projection",
            "parameters": [
              "self"
            ],
            "docstring": "Demonstrate import structure projection",
            "lineno": 80,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_demo_expression_projection",
            "parameters": [
              "self"
            ],
            "docstring": "Demonstrate expression structure projection",
            "lineno": 104,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_project_function_signature",
            "parameters": [
              "self",
              "broken_func"
            ],
            "docstring": "Project complete function signature from broken fragment",
            "lineno": 128,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_project_class_structure",
            "parameters": [
              "self",
              "broken_class"
            ],
            "docstring": "Project complete class structure from broken fragment",
            "lineno": 149,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_project_import_structure",
            "parameters": [
              "self",
              "broken_import"
            ],
            "docstring": "Project complete import structure from broken fragment",
            "lineno": 170,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_project_expression_structure",
            "parameters": [
              "self",
              "broken_expr"
            ],
            "docstring": "Project complete expression structure from broken fragment",
            "lineno": 183,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_analyze_function_ast_insights",
            "parameters": [
              "self",
              "broken_func"
            ],
            "docstring": "Show what AST analysis could provide for function projection",
            "lineno": 196,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_analyze_class_ast_insights",
            "parameters": [
              "self",
              "broken_class"
            ],
            "docstring": "Show what AST analysis could provide for class projection",
            "lineno": 206,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_analyze_import_ast_insights",
            "parameters": [
              "self",
              "broken_import"
            ],
            "docstring": "Show what AST analysis could provide for import projection",
            "lineno": 216,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_analyze_expression_ast_insights",
            "parameters": [
              "self",
              "broken_expr"
            ],
            "docstring": "Show what AST analysis could provide for expression projection",
            "lineno": 226,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_generate_projection_report",
            "parameters": [
              "self"
            ],
            "docstring": "Generate comprehensive projection capabilities report",
            "lineno": 236,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ASTProjectionDemo",
            "bases": [],
            "docstring": "Demo of how AST-based projection could reconstruct broken code",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "demonstrate_projection_capabilities",
              "_demo_function_projection",
              "_demo_class_projection",
              "_demo_import_projection",
              "_demo_expression_projection",
              "_project_function_signature",
              "_project_class_structure",
              "_project_import_structure",
              "_project_expression_structure",
              "_analyze_function_ast_insights",
              "_analyze_class_ast_insights",
              "_analyze_import_ast_insights",
              "_analyze_expression_ast_insights",
              "_generate_projection_report"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "demo",
          "report",
          "broken_functions",
          "broken_classes",
          "broken_imports",
          "broken_expressions",
          "match",
          "func_name",
          "match",
          "class_name",
          "report",
          "projected",
          "ast_insights",
          "projected",
          "ast_insights",
          "projected",
          "ast_insights",
          "projected",
          "ast_insights"
        ],
        "dependencies": [
          "ast",
          "typing",
          "re",
          "pathlib"
        ],
        "docstrings": [
          "AST Projection Demo\nShows how bridging model gaps could help project/reconstruct broken Python code",
          "Demo of how AST-based projection could reconstruct broken code",
          "Run the AST projection demo",
          "Demonstrate how AST projection could work",
          "Demonstrate function signature projection",
          "Demonstrate class structure projection",
          "Demonstrate import structure projection",
          "Demonstrate expression structure projection",
          "Project complete function signature from broken fragment",
          "Project complete class structure from broken fragment",
          "Project complete import structure from broken fragment",
          "Project complete expression structure from broken fragment",
          "Show what AST analysis could provide for function projection",
          "Show what AST analysis could provide for class projection",
          "Show what AST analysis could provide for import projection",
          "Show what AST analysis could provide for expression projection",
          "Generate comprehensive projection capabilities report"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "demonstrate_projection_capabilities",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_demo_function_projection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_demo_class_projection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_demo_import_projection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_demo_expression_projection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_project_function_signature",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_project_function_signature",
            "parameter": "broken_func",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_project_class_structure",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_project_class_structure",
            "parameter": "broken_class",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_project_import_structure",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_project_import_structure",
            "parameter": "broken_import",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_project_expression_structure",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_project_expression_structure",
            "parameter": "broken_expr",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_function_ast_insights",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_function_ast_insights",
            "parameter": "broken_func",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_class_ast_insights",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_class_ast_insights",
            "parameter": "broken_class",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_import_ast_insights",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_import_ast_insights",
            "parameter": "broken_import",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_expression_ast_insights",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_expression_ast_insights",
            "parameter": "broken_expr",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_generate_projection_report",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 26,
          "cognitive": 24,
          "nesting": 0,
          "statements": 106
        },
        "nesting_depth": 11,
        "ast_nodes": 1088,
        "structure_hash": "caf4dc274228c8130c34a78b3f800a09"
      },
      "complexity_score": 26,
      "structure_hash": "caf4dc274228c8130c34a78b3f800a09",
      "lines_of_code": 364,
      "created_at": "2025-08-03T10:06:02.344527",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/comprehensive_syntax_fixer.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/comprehensive_syntax_fixer.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import tokenize",
          "import io",
          "import subprocess",
          "import re",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "import difflib"
        ],
        "functions": [
          {
            "name": "find_python_files",
            "parameters": [],
            "docstring": "Find all Python files in the project",
            "lineno": 304,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[Path]",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run the comprehensive syntax fixer",
            "lineno": 313,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 20,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "fix_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix syntax errors using multiple strategies",
            "lineno": 25,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_can_parse_with_ast",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Check if content can be parsed with AST",
            "lineno": 73,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_fix_common_patterns",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Fix common patterns that break parsing",
            "lineno": 81,
            "col_offset": 4,
            "decorators": [],
            "returns": "tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_fix_indentation_issues",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Fix indentation issues systematically",
            "lineno": 118,
            "col_offset": 4,
            "decorators": [],
            "returns": "tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_fix_structural_issues",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Fix structural issues in the code",
            "lineno": 166,
            "col_offset": 4,
            "decorators": [],
            "returns": "tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_aggressive_line_fix",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Aggressive line-by-line fix for severely broken files",
            "lineno": 197,
            "col_offset": 4,
            "decorators": [],
            "returns": "tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_should_be_indented",
            "parameters": [
              "self",
              "lines",
              "line_index"
            ],
            "docstring": "Check if a line should be indented based on context",
            "lineno": 216,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_in_block_context",
            "parameters": [
              "self",
              "lines",
              "line_index"
            ],
            "docstring": "Check if we're in a block context that requires indentation",
            "lineno": 245,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_looks_like_indented_statement",
            "parameters": [
              "self",
              "line",
              "lines",
              "line_index"
            ],
            "docstring": "Check if a line looks like it should be indented",
            "lineno": 270,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ComprehensiveSyntaxFixer",
            "bases": [],
            "docstring": "Multi-strategy Python syntax fixer",
            "lineno": 17,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "fix_file",
              "_can_parse_with_ast",
              "_fix_common_patterns",
              "_fix_indentation_issues",
              "_fix_structural_issues",
              "_aggressive_line_fix",
              "_should_be_indented",
              "_in_block_context",
              "_looks_like_indented_statement"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "python_files",
          "fixer",
          "python_files",
          "total_fixes",
          "fixes",
          "original_content",
          "fixes",
          "lines",
          "fixed_lines",
          "fixes",
          "lines",
          "fixed_lines",
          "indent_stack",
          "in_block",
          "fixes",
          "lines",
          "fixed_lines",
          "fixes",
          "lines",
          "fixed_lines",
          "stripped",
          "fixes",
          "result",
          "fixed_line",
          "stripped",
          "fixed_line",
          "fixed_line",
          "line",
          "line",
          "content",
          "fixed_line",
          "expected_indent",
          "current_indent",
          "fixed_line",
          "fixed_line",
          "fixed_line",
          "fixed_line",
          "new_line",
          "indent_stack",
          "fixed_line",
          "fixed_line"
        ],
        "dependencies": [
          "ast",
          "tokenize",
          "typing",
          "io",
          "pathlib",
          "subprocess",
          "difflib",
          "re"
        ],
        "docstrings": [
          "Comprehensive Python syntax fixer using multiple strategies\nHandles broken Python files that can't be parsed normally",
          "Multi-strategy Python syntax fixer",
          "Find all Python files in the project",
          "Run the comprehensive syntax fixer",
          "Fix syntax errors using multiple strategies",
          "Check if content can be parsed with AST",
          "Fix common patterns that break parsing",
          "Fix indentation issues systematically",
          "Fix structural issues in the code",
          "Aggressive line-by-line fix for severely broken files",
          "Check if a line should be indented based on context",
          "Check if we're in a block context that requires indentation",
          "Check if a line looks like it should be indented"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 350
              }
            ],
            "lineno": 339
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 32
              }
            ],
            "lineno": 29
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "SyntaxError",
                "lineno": 78
              }
            ],
            "lineno": 75
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 68
              }
            ],
            "lineno": 64
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "find_python_files",
            "annotation": "List[Path]"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "fix_file",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_file",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_can_parse_with_ast",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_can_parse_with_ast",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_fix_common_patterns",
            "annotation": "tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_common_patterns",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_fix_indentation_issues",
            "annotation": "tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_indentation_issues",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_fix_structural_issues",
            "annotation": "tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_structural_issues",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_aggressive_line_fix",
            "annotation": "tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_aggressive_line_fix",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_should_be_indented",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_should_be_indented",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_should_be_indented",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "_in_block_context",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_in_block_context",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_in_block_context",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "_looks_like_indented_statement",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_looks_like_indented_statement",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_looks_like_indented_statement",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_looks_like_indented_statement",
            "parameter": "line_index",
            "annotation": "int"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 56,
          "cognitive": 89,
          "nesting": 0,
          "statements": 130
        },
        "nesting_depth": 13,
        "ast_nodes": 1865,
        "structure_hash": "dbc66cf230a5d6db0766bfcd0c3a9ac6"
      },
      "complexity_score": 56,
      "structure_hash": "dbc66cf230a5d6db0766bfcd0c3a9ac6",
      "lines_of_code": 356,
      "created_at": "2025-08-03T10:06:02.386718",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/broken_python_interpreter.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/broken_python_interpreter.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import tokenize",
          "import io",
          "import re",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Tuple"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test the broken Python interpreter",
            "lineno": 529,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 18,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "interpret_broken_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Interpret broken Python file with semantic understanding",
            "lineno": 42,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "interpret_broken_file_with_content",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Interpret with given content (for recursion)",
            "lineno": 69,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_valid_ast",
            "parameters": [
              "self",
              "file_path",
              "tree",
              "content"
            ],
            "docstring": "Analyze valid AST tree",
            "lineno": 79,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_with_tokens",
            "parameters": [
              "self",
              "file_path",
              "content",
              "syntax_error"
            ],
            "docstring": "Analyze broken code using tokenization",
            "lineno": 95,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_with_regex",
            "parameters": [
              "self",
              "file_path",
              "content",
              "error"
            ],
            "docstring": "Analyze broken code using regex patterns",
            "lineno": 118,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "fix_indentation",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Fix basic indentation issues",
            "lineno": 137,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "should_be_indented",
            "parameters": [
              "self",
              "line",
              "previous_lines"
            ],
            "docstring": "Determine if a line should be indented based on context",
            "lineno": 152,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "extract_imports_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract imports from AST",
            "lineno": 168,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_functions_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract functions from AST",
            "lineno": 191,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_classes_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract classes from AST",
            "lineno": 206,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_variables_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract variables from AST",
            "lineno": 220,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "calculate_complexity_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Calculate complexity from AST",
            "lineno": 234,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_imports_from_tokens",
            "parameters": [
              "self",
              "tokens"
            ],
            "docstring": "Extract imports from tokens",
            "lineno": 244,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_functions_from_tokens",
            "parameters": [
              "self",
              "tokens"
            ],
            "docstring": "Extract functions from tokens",
            "lineno": 274,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_classes_from_tokens",
            "parameters": [
              "self",
              "tokens"
            ],
            "docstring": "Extract classes from tokens",
            "lineno": 294,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_variables_from_tokens",
            "parameters": [
              "self",
              "tokens"
            ],
            "docstring": "Extract variables from tokens",
            "lineno": 313,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "identify_syntax_issues",
            "parameters": [
              "self",
              "tokens"
            ],
            "docstring": "Identify syntax issues from tokens",
            "lineno": 330,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "is_indented",
            "parameters": [
              "self",
              "token"
            ],
            "docstring": "Check if token is indented",
            "lineno": 360,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "extract_imports_from_regex",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Extract imports using regex",
            "lineno": 364,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_functions_from_regex",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Extract functions using regex",
            "lineno": 393,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_classes_from_regex",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Extract classes using regex",
            "lineno": 414,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_variables_from_regex",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Extract variables using regex",
            "lineno": 434,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "identify_syntax_issues_regex",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Identify syntax issues using regex",
            "lineno": 452,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "estimate_complexity_regex",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Estimate complexity using regex",
            "lineno": 478,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_decorator",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract decorator name from AST",
            "lineno": 492,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "extract_base",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract base class name from AST",
            "lineno": 501,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "extract_class_methods",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract class methods from AST",
            "lineno": 507,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "calculate_function_complexity",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Calculate function complexity",
            "lineno": 520,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "BrokenPythonInterpreter",
            "bases": [],
            "docstring": "Interpreter for syntactically incorrect Python files",
            "lineno": 15,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "interpret_broken_file",
              "interpret_broken_file_with_content",
              "analyze_valid_ast",
              "analyze_with_tokens",
              "analyze_with_regex",
              "fix_indentation",
              "should_be_indented",
              "extract_imports_from_ast",
              "extract_functions_from_ast",
              "extract_classes_from_ast",
              "extract_variables_from_ast",
              "calculate_complexity_from_ast",
              "extract_imports_from_tokens",
              "extract_functions_from_tokens",
              "extract_classes_from_tokens",
              "extract_variables_from_tokens",
              "identify_syntax_issues",
              "is_indented",
              "extract_imports_from_regex",
              "extract_functions_from_regex",
              "extract_classes_from_regex",
              "extract_variables_from_regex",
              "identify_syntax_issues_regex",
              "estimate_complexity_regex",
              "extract_decorator",
              "extract_base",
              "extract_class_methods",
              "calculate_function_complexity"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "interpreter",
          "test_files",
          "lines",
          "lines",
          "fixed_lines",
          "prev_line",
          "imports",
          "functions",
          "classes",
          "variables",
          "complexity",
          "imports",
          "i",
          "functions",
          "i",
          "classes",
          "i",
          "variables",
          "i",
          "issues",
          "i",
          "imports",
          "lines",
          "functions",
          "lines",
          "classes",
          "lines",
          "variables",
          "lines",
          "issues",
          "lines",
          "complexity",
          "lines",
          "methods",
          "complexity",
          "tree",
          "tree",
          "tokens",
          "token",
          "token",
          "token",
          "token",
          "token",
          "line",
          "line",
          "line",
          "line",
          "match",
          "line",
          "interpretation",
          "content",
          "fixed_content",
          "match",
          "match",
          "match",
          "next_line",
          "interp",
          "line",
          "next_token",
          "match",
          "module"
        ],
        "dependencies": [
          "ast",
          "tokenize",
          "typing",
          "io",
          "pathlib",
          "re"
        ],
        "docstrings": [
          "Broken Python Interpreter\nInterprets syntactically incorrect Python files using tokenization and semantic analysis",
          "Interpreter for syntactically incorrect Python files",
          "Test the broken Python interpreter",
          "Interpret broken Python file with semantic understanding",
          "Interpret with given content (for recursion)",
          "Analyze valid AST tree",
          "Analyze broken code using tokenization",
          "Analyze broken code using regex patterns",
          "Fix basic indentation issues",
          "Determine if a line should be indented based on context",
          "Extract imports from AST",
          "Extract functions from AST",
          "Extract classes from AST",
          "Extract variables from AST",
          "Calculate complexity from AST",
          "Extract imports from tokens",
          "Extract functions from tokens",
          "Extract classes from tokens",
          "Extract variables from tokens",
          "Identify syntax issues from tokens",
          "Check if token is indented",
          "Extract imports using regex",
          "Extract functions using regex",
          "Extract classes using regex",
          "Extract variables using regex",
          "Identify syntax issues using regex",
          "Estimate complexity using regex",
          "Extract decorator name from AST",
          "Extract base class name from AST",
          "Extract class methods from AST",
          "Calculate function complexity"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 47
              }
            ],
            "lineno": 44
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "SyntaxError",
                "lineno": 58
              },
              {
                "type": "IndentationError",
                "lineno": 61
              },
              {
                "type": "Exception",
                "lineno": 65
              }
            ],
            "lineno": 55
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "SyntaxError",
                "lineno": 74
              },
              {
                "type": "Exception",
                "lineno": 76
              }
            ],
            "lineno": 71
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 114
              }
            ],
            "lineno": 97
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "interpret_broken_file",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "interpret_broken_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "interpret_broken_file_with_content",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "interpret_broken_file_with_content",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "interpret_broken_file_with_content",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "analyze_valid_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_valid_ast",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_valid_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_valid_ast",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "analyze_with_tokens",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_with_tokens",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_with_tokens",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_with_tokens",
            "parameter": "syntax_error",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "analyze_with_regex",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_with_regex",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_with_regex",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_with_regex",
            "parameter": "error",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "fix_indentation",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_indentation",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "should_be_indented",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "should_be_indented",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "should_be_indented",
            "parameter": "previous_lines",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "extract_imports_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_imports_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_functions_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_functions_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_classes_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_classes_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_variables_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_variables_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "calculate_complexity_from_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_complexity_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_imports_from_tokens",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_imports_from_tokens",
            "parameter": "tokens",
            "annotation": "List"
          },
          {
            "type": "return_annotation",
            "function": "extract_functions_from_tokens",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_functions_from_tokens",
            "parameter": "tokens",
            "annotation": "List"
          },
          {
            "type": "return_annotation",
            "function": "extract_classes_from_tokens",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_classes_from_tokens",
            "parameter": "tokens",
            "annotation": "List"
          },
          {
            "type": "return_annotation",
            "function": "extract_variables_from_tokens",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_variables_from_tokens",
            "parameter": "tokens",
            "annotation": "List"
          },
          {
            "type": "return_annotation",
            "function": "identify_syntax_issues",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "identify_syntax_issues",
            "parameter": "tokens",
            "annotation": "List"
          },
          {
            "type": "return_annotation",
            "function": "is_indented",
            "annotation": "bool"
          },
          {
            "type": "return_annotation",
            "function": "extract_imports_from_regex",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_imports_from_regex",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_functions_from_regex",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_functions_from_regex",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_classes_from_regex",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_classes_from_regex",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_variables_from_regex",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_variables_from_regex",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "identify_syntax_issues_regex",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "identify_syntax_issues_regex",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "estimate_complexity_regex",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "estimate_complexity_regex",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_decorator",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_decorator",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "extract_base",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_base",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "extract_class_methods",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_class_methods",
            "parameter": "node",
            "annotation": "ast.ClassDef"
          },
          {
            "type": "return_annotation",
            "function": "calculate_function_complexity",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_function_complexity",
            "parameter": "node",
            "annotation": "ast.FunctionDef"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 86,
          "cognitive": 103,
          "nesting": 0,
          "statements": 166
        },
        "nesting_depth": 15,
        "ast_nodes": 3398,
        "structure_hash": "d4dce04cb2a303d85897a545a60bf55c"
      },
      "complexity_score": 86,
      "structure_hash": "d4dce04cb2a303d85897a545a60bf55c",
      "lines_of_code": 562,
      "created_at": "2025-08-03T10:06:02.389657",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/test_git_enhanced.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/test_git_enhanced.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from git_enhanced_ast_fixer import GitEnhancedASTFixer",
          "from pathlib import Path",
          "import subprocess",
          "import ast"
        ],
        "functions": [
          {
            "name": "test_git_enhanced_fixer",
            "parameters": [],
            "docstring": "Test the Git-enhanced AST fixer with files that have Git history",
            "lineno": 11,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "fixer",
          "test_files",
          "result",
          "fixed_content"
        ],
        "dependencies": [
          "ast",
          "git_enhanced_ast_fixer",
          "subprocess",
          "pathlib"
        ],
        "docstrings": [
          "Test Git-Enhanced AST Fixer\nDemonstrates the Git-enhanced approach with files that have Git history",
          "Test the Git-enhanced AST fixer with files that have Git history"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 50
              }
            ],
            "lineno": 46
          }
        ],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 7,
          "cognitive": 7,
          "nesting": 0,
          "statements": 18
        },
        "nesting_depth": 13,
        "ast_nodes": 191,
        "structure_hash": "e3e35a4bb56ce038c3b714278bb2eabd"
      },
      "complexity_score": 7,
      "structure_hash": "e3e35a4bb56ce038c3b714278bb2eabd",
      "lines_of_code": 62,
      "created_at": "2025-08-03T10:06:02.417883",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/multi_generational_git_analyzer.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/multi_generational_git_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import subprocess",
          "import ast",
          "import tempfile",
          "import os",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from dataclasses import dataclass",
          "from dataclasses import asdict",
          "from git_enhanced_ast_fixer import GitEnhancedASTFixer"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test the multi-generational Git analyzer",
            "lineno": 508,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "max_generations"
            ],
            "docstring": null,
            "lineno": 33,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "analyze_file_evolution",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Analyze file evolution across multiple Git generations",
            "lineno": 38,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "get_commit_models",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Get models for multiple generations of commits",
            "lineno": 69,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[CommitModel]",
            "has_async": false
          },
          {
            "name": "extract_ast_model",
            "parameters": [
              "self",
              "tree",
              "content"
            ],
            "docstring": "Extract model from AST",
            "lineno": 133,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_basic_model",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Extract basic model from content",
            "lineno": 147,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_functions_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract functions from AST",
            "lineno": 175,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_classes_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract classes from AST",
            "lineno": 189,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_imports_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract imports from AST",
            "lineno": 203,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_variables_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract variables from AST",
            "lineno": 226,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_decorator",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract decorator name from AST",
            "lineno": 240,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "extract_base",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract base class name from AST",
            "lineno": 249,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "extract_class_methods",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract class methods from AST",
            "lineno": 255,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "calculate_complexity_metrics",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Calculate complexity metrics from AST",
            "lineno": 268,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_evolution_patterns",
            "parameters": [
              "self",
              "commit_models"
            ],
            "docstring": "Analyze patterns in file evolution",
            "lineno": 290,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_size_trend",
            "parameters": [
              "self",
              "commit_models"
            ],
            "docstring": "Analyze size evolution trend",
            "lineno": 305,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_structure_trend",
            "parameters": [
              "self",
              "commit_models"
            ],
            "docstring": "Analyze structural evolution trend",
            "lineno": 316,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_complexity_trend",
            "parameters": [
              "self",
              "commit_models"
            ],
            "docstring": "Analyze complexity evolution trend",
            "lineno": 331,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "calculate_trend",
            "parameters": [
              "self",
              "values"
            ],
            "docstring": "Calculate trend from a list of values",
            "lineno": 347,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "calculate_stability_score",
            "parameters": [
              "self",
              "commit_models"
            ],
            "docstring": "Calculate stability score based on model consistency",
            "lineno": 359,
            "col_offset": 4,
            "decorators": [],
            "returns": "float",
            "has_async": false
          },
          {
            "name": "calculate_model_similarity",
            "parameters": [
              "self",
              "model1",
              "model2"
            ],
            "docstring": "Calculate similarity between two models",
            "lineno": 374,
            "col_offset": 4,
            "decorators": [],
            "returns": "float",
            "has_async": false
          },
          {
            "name": "identify_evolution_phases",
            "parameters": [
              "self",
              "commit_models"
            ],
            "docstring": "Identify distinct phases in file evolution",
            "lineno": 398,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "generate_evolution_recommendations",
            "parameters": [
              "self",
              "commit_models",
              "evolution_analysis"
            ],
            "docstring": "Generate recommendations based on evolution analysis",
            "lineno": 428,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "create_evolution_database",
            "parameters": [
              "self",
              "file_path",
              "commit_models",
              "evolution_analysis"
            ],
            "docstring": "Create a database of evolution information",
            "lineno": 454,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "find_most_stable_generation",
            "parameters": [
              "self",
              "commit_models"
            ],
            "docstring": "Find the most stable generation",
            "lineno": 478,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "find_best_template_generation",
            "parameters": [
              "self",
              "commit_models"
            ],
            "docstring": "Find the best generation to use as a template",
            "lineno": 495,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "CommitModel",
            "bases": [],
            "docstring": "Model of a file at a specific commit",
            "lineno": 19,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "MultiGenerationalGitAnalyzer",
            "bases": [],
            "docstring": "Analyzes multiple generations of Git history to understand file evolution",
            "lineno": 30,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "analyze_file_evolution",
              "get_commit_models",
              "extract_ast_model",
              "extract_basic_model",
              "extract_functions_from_ast",
              "extract_classes_from_ast",
              "extract_imports_from_ast",
              "extract_variables_from_ast",
              "extract_decorator",
              "extract_base",
              "extract_class_methods",
              "calculate_complexity_metrics",
              "analyze_evolution_patterns",
              "analyze_size_trend",
              "analyze_structure_trend",
              "analyze_complexity_trend",
              "calculate_trend",
              "calculate_stability_score",
              "calculate_model_similarity",
              "identify_evolution_phases",
              "generate_evolution_recommendations",
              "create_evolution_database",
              "find_most_stable_generation",
              "find_best_template_generation"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "analyzer",
          "test_files",
          "results",
          "commit_models",
          "evolution_analysis",
          "recommendations",
          "evolution_db",
          "lines",
          "functions",
          "classes",
          "imports",
          "functions",
          "classes",
          "imports",
          "variables",
          "methods",
          "cyclomatic_complexity",
          "nesting_depth",
          "max_nesting",
          "evolution",
          "sizes",
          "function_counts",
          "class_counts",
          "import_counts",
          "complexities",
          "similarities",
          "total_elements",
          "matching_elements",
          "funcs1",
          "funcs2",
          "classes1",
          "classes2",
          "phases",
          "recommendations",
          "stability_score",
          "size_trend",
          "complexity_trend",
          "valid_versions",
          "max_functions",
          "most_stable",
          "valid_versions",
          "result",
          "commits",
          "commit_models",
          "stripped",
          "complexity",
          "similarity",
          "phase",
          "func_count",
          "result",
          "commit_hash",
          "commit_message",
          "timestamp_result",
          "timestamp",
          "content_result",
          "func_name",
          "nesting_depth",
          "max_functions",
          "most_stable",
          "evolution_db",
          "summary",
          "content",
          "commit_model",
          "class_name",
          "tree",
          "model",
          "is_valid_python",
          "model",
          "is_valid_python"
        ],
        "dependencies": [
          "tempfile",
          "ast",
          "typing",
          "git_enhanced_ast_fixer",
          "pathlib",
          "json",
          "dataclasses",
          "subprocess",
          "os"
        ],
        "docstrings": [
          "Multi-Generational Git Analyzer\nModels several commits back to understand file evolution and guide reconstruction",
          "Model of a file at a specific commit",
          "Analyzes multiple generations of Git history to understand file evolution",
          "Test the multi-generational Git analyzer",
          "Analyze file evolution across multiple Git generations",
          "Get models for multiple generations of commits",
          "Extract model from AST",
          "Extract basic model from content",
          "Extract functions from AST",
          "Extract classes from AST",
          "Extract imports from AST",
          "Extract variables from AST",
          "Extract decorator name from AST",
          "Extract base class name from AST",
          "Extract class methods from AST",
          "Calculate complexity metrics from AST",
          "Analyze patterns in file evolution",
          "Analyze size evolution trend",
          "Analyze structural evolution trend",
          "Analyze complexity evolution trend",
          "Calculate trend from a list of values",
          "Calculate stability score based on model consistency",
          "Calculate similarity between two models",
          "Identify distinct phases in file evolution",
          "Generate recommendations based on evolution analysis",
          "Create a database of evolution information",
          "Find the most stable generation",
          "Find the best generation to use as a template"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 129
              }
            ],
            "lineno": 71
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 110
              }
            ],
            "lineno": 106
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "max_generations",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "analyze_file_evolution",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_file_evolution",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "get_commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "parameter_annotation",
            "function": "get_commit_models",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_ast_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_ast_model",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_ast_model",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_basic_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_basic_model",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_functions_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_functions_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_classes_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_classes_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_imports_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_imports_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_variables_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_variables_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_decorator",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_decorator",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "extract_base",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_base",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "extract_class_methods",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_class_methods",
            "parameter": "node",
            "annotation": "ast.ClassDef"
          },
          {
            "type": "return_annotation",
            "function": "calculate_complexity_metrics",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_complexity_metrics",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "analyze_evolution_patterns",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_evolution_patterns",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "return_annotation",
            "function": "analyze_size_trend",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_size_trend",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "return_annotation",
            "function": "analyze_structure_trend",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_structure_trend",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "return_annotation",
            "function": "analyze_complexity_trend",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_complexity_trend",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "return_annotation",
            "function": "calculate_trend",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_trend",
            "parameter": "values",
            "annotation": "List[int]"
          },
          {
            "type": "return_annotation",
            "function": "calculate_stability_score",
            "annotation": "float"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_stability_score",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "return_annotation",
            "function": "calculate_model_similarity",
            "annotation": "float"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_model_similarity",
            "parameter": "model1",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_model_similarity",
            "parameter": "model2",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "identify_evolution_phases",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "identify_evolution_phases",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "return_annotation",
            "function": "generate_evolution_recommendations",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_evolution_recommendations",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_evolution_recommendations",
            "parameter": "evolution_analysis",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "create_evolution_database",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_evolution_database",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "create_evolution_database",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_evolution_database",
            "parameter": "evolution_analysis",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "find_most_stable_generation",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "find_most_stable_generation",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          },
          {
            "type": "return_annotation",
            "function": "find_best_template_generation",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "find_best_template_generation",
            "parameter": "commit_models",
            "annotation": "List[CommitModel]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 58,
          "cognitive": 60,
          "nesting": 0,
          "statements": 175
        },
        "nesting_depth": 14,
        "ast_nodes": 3215,
        "structure_hash": "15db944e5b96be2253cfe4a540d29ad9"
      },
      "complexity_score": 58,
      "structure_hash": "15db944e5b96be2253cfe4a540d29ad9",
      "lines_of_code": 545,
      "created_at": "2025-08-03T10:06:02.546169",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/enhanced_python_modeler.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/enhanced_python_modeler.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import tokenize",
          "import io",
          "import subprocess",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Set",
          "import re",
          "import json"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run the enhanced Python project modeler",
            "lineno": 422,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 20,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "model_project",
            "parameters": [
              "self",
              "project_root"
            ],
            "docstring": "Model the entire Python project",
            "lineno": 30,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_find_python_files",
            "parameters": [
              "self",
              "project_root"
            ],
            "docstring": "Find all Python files in the project",
            "lineno": 47,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Path]",
            "has_async": false
          },
          {
            "name": "_can_parse_with_ast",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check if file can be parsed with AST",
            "lineno": 55,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_analyze_with_ast",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Analyze file using AST for complete understanding",
            "lineno": 65,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_analyze_with_fallback",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Analyze broken file using fallback strategies",
            "lineno": 91,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_extract_imports",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract imports from AST",
            "lineno": 114,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_functions",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract functions from AST",
            "lineno": 137,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_classes",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract classes from AST",
            "lineno": 152,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_dependencies",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract dependencies from AST",
            "lineno": 166,
            "col_offset": 4,
            "decorators": [],
            "returns": "Set[str]",
            "has_async": false
          },
          {
            "name": "_calculate_complexity",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Calculate code complexity metrics",
            "lineno": 178,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_extract_imports_fallback",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Extract imports using regex fallback",
            "lineno": 194,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_functions_fallback",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Extract functions using regex fallback",
            "lineno": 223,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_classes_fallback",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Extract classes using regex fallback",
            "lineno": 244,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_identify_syntax_issues",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Identify syntax issues in broken files",
            "lineno": 264,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_estimate_complexity_fallback",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Estimate complexity using regex patterns",
            "lineno": 288,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_extract_function_args",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract function arguments from AST",
            "lineno": 306,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_extract_decorator",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract decorator name from AST",
            "lineno": 313,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_extract_base",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract base class name from AST",
            "lineno": 322,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_extract_class_methods",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract class methods from AST",
            "lineno": 328,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_calculate_function_complexity",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Calculate function complexity",
            "lineno": 341,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "_generate_project_model",
            "parameters": [
              "self"
            ],
            "docstring": "Generate comprehensive project model",
            "lineno": 349,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_aggregate_dependencies",
            "parameters": [
              "self"
            ],
            "docstring": "Aggregate all dependencies across files",
            "lineno": 371,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_aggregate_syntax_issues",
            "parameters": [
              "self"
            ],
            "docstring": "Aggregate all syntax issues",
            "lineno": 379,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_aggregate_complexity",
            "parameters": [
              "self"
            ],
            "docstring": "Aggregate complexity metrics",
            "lineno": 388,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_generate_recommendations",
            "parameters": [
              "self"
            ],
            "docstring": "Generate recommendations based on analysis",
            "lineno": 404,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "PythonProjectModeler",
            "bases": [],
            "docstring": "Enhanced Python project modeler with AST and fallback capabilities",
            "lineno": 17,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "model_project",
              "_find_python_files",
              "_can_parse_with_ast",
              "_analyze_with_ast",
              "_analyze_with_fallback",
              "_extract_imports",
              "_extract_functions",
              "_extract_classes",
              "_extract_dependencies",
              "_calculate_complexity",
              "_extract_imports_fallback",
              "_extract_functions_fallback",
              "_extract_classes_fallback",
              "_identify_syntax_issues",
              "_estimate_complexity_fallback",
              "_extract_function_args",
              "_extract_decorator",
              "_extract_base",
              "_extract_class_methods",
              "_calculate_function_complexity",
              "_generate_project_model",
              "_aggregate_dependencies",
              "_aggregate_syntax_issues",
              "_aggregate_complexity",
              "_generate_recommendations"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "modeler",
          "project_root",
          "model",
          "complexity",
          "python_files",
          "python_files",
          "imports",
          "functions",
          "classes",
          "dependencies",
          "complexity",
          "imports",
          "lines",
          "functions",
          "lines",
          "classes",
          "lines",
          "issues",
          "lines",
          "complexity",
          "lines",
          "args",
          "methods",
          "complexity",
          "model",
          "all_deps",
          "all_issues",
          "total_complexity",
          "recommendations",
          "total_issues",
          "complexity",
          "tree",
          "file_info",
          "file_info",
          "line",
          "line",
          "line",
          "line",
          "complexity",
          "complexity",
          "content",
          "content",
          "content",
          "match",
          "match",
          "match",
          "match",
          "next_line"
        ],
        "dependencies": [
          "re",
          "json",
          "ast",
          "tokenize",
          "typing",
          "io",
          "pathlib",
          "subprocess"
        ],
        "docstrings": [
          "Enhanced Python Project Modeler\nUses AST for valid files, fallback strategies for broken files",
          "Enhanced Python project modeler with AST and fallback capabilities",
          "Run the enhanced Python project modeler",
          "Model the entire Python project",
          "Find all Python files in the project",
          "Check if file can be parsed with AST",
          "Analyze file using AST for complete understanding",
          "Analyze broken file using fallback strategies",
          "Extract imports from AST",
          "Extract functions from AST",
          "Extract classes from AST",
          "Extract dependencies from AST",
          "Calculate code complexity metrics",
          "Extract imports using regex fallback",
          "Extract functions using regex fallback",
          "Extract classes using regex fallback",
          "Identify syntax issues in broken files",
          "Estimate complexity using regex patterns",
          "Extract function arguments from AST",
          "Extract decorator name from AST",
          "Extract base class name from AST",
          "Extract class methods from AST",
          "Calculate function complexity",
          "Generate comprehensive project model",
          "Aggregate all dependencies across files",
          "Aggregate all syntax issues",
          "Aggregate complexity metrics",
          "Generate recommendations based on analysis"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 62
              }
            ],
            "lineno": 57
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 88
              }
            ],
            "lineno": 67
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 111
              }
            ],
            "lineno": 93
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "model_project",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "model_project",
            "parameter": "project_root",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_find_python_files",
            "annotation": "List[Path]"
          },
          {
            "type": "parameter_annotation",
            "function": "_find_python_files",
            "parameter": "project_root",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_can_parse_with_ast",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_can_parse_with_ast",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_with_ast",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_with_ast",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_with_fallback",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_with_fallback",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_extract_imports",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_imports",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_functions",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_functions",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_classes",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_classes",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_dependencies",
            "annotation": "Set[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_dependencies",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_complexity",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_complexity",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_imports_fallback",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_imports_fallback",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_extract_functions_fallback",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_functions_fallback",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_extract_classes_fallback",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_classes_fallback",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_identify_syntax_issues",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_identify_syntax_issues",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_estimate_complexity_fallback",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_estimate_complexity_fallback",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_extract_function_args",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_function_args",
            "parameter": "node",
            "annotation": "ast.FunctionDef"
          },
          {
            "type": "return_annotation",
            "function": "_extract_decorator",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_decorator",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_extract_base",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_base",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_extract_class_methods",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_class_methods",
            "parameter": "node",
            "annotation": "ast.ClassDef"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_function_complexity",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_function_complexity",
            "parameter": "node",
            "annotation": "ast.FunctionDef"
          },
          {
            "type": "return_annotation",
            "function": "_generate_project_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_aggregate_dependencies",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_aggregate_syntax_issues",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "return_annotation",
            "function": "_aggregate_complexity",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_generate_recommendations",
            "annotation": "List[str]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 69,
          "cognitive": 69,
          "nesting": 0,
          "statements": 160
        },
        "nesting_depth": 14,
        "ast_nodes": 2783,
        "structure_hash": "d1429d15ac5751d6222ad197bd4bc58f"
      },
      "complexity_score": 69,
      "structure_hash": "d1429d15ac5751d6222ad197bd4bc58f",
      "lines_of_code": 464,
      "created_at": "2025-08-03T10:06:02.533923",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/python_ast_fixer.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/python_ast_fixer.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import tokenize",
          "import io",
          "import subprocess",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "import re"
        ],
        "functions": [
          {
            "name": "find_python_files",
            "parameters": [],
            "docstring": "Find all Python files in the project",
            "lineno": 306,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[Path]",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run the AST-based Python syntax fixer",
            "lineno": 315,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 19,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "fix_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix syntax errors in a Python file using AST analysis",
            "lineno": 23,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_fix_syntax_error",
            "parameters": [
              "self",
              "file_path",
              "content",
              "error"
            ],
            "docstring": "Fix specific syntax errors identified by AST",
            "lineno": 45,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_analyze_indentation",
            "parameters": [
              "self",
              "tokens",
              "content"
            ],
            "docstring": "Analyze indentation structure using tokens",
            "lineno": 72,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_should_be_indented",
            "parameters": [
              "self",
              "tokens",
              "position"
            ],
            "docstring": "Check if the next statement should be indented",
            "lineno": 110,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_fix_indentation_issues",
            "parameters": [
              "self",
              "file_path",
              "content",
              "issues"
            ],
            "docstring": "Fix indentation issues",
            "lineno": 133,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_fix_common_patterns",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Fix common syntax patterns that cause issues",
            "lineno": 164,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_is_unindented_assignment",
            "parameters": [
              "self",
              "line",
              "lines",
              "line_index"
            ],
            "docstring": "Check if a line is an unindented assignment that should be indented",
            "lineno": 205,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_should_be_indented_by_context",
            "parameters": [
              "self",
              "lines",
              "line_index"
            ],
            "docstring": "Check if a line should be indented based on surrounding context",
            "lineno": 220,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_fix_line_by_line",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Fallback line-by-line fix for files that can't be tokenized",
            "lineno": 249,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_needs_indentation_fix",
            "parameters": [
              "self",
              "line",
              "lines",
              "line_index"
            ],
            "docstring": "Check if a line needs indentation fix",
            "lineno": 275,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "PythonASTFixer",
            "bases": [],
            "docstring": "AST-based Python syntax fixer",
            "lineno": 16,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "fix_file",
              "_fix_syntax_error",
              "_analyze_indentation",
              "_should_be_indented",
              "_fix_indentation_issues",
              "_fix_common_patterns",
              "_is_unindented_assignment",
              "_should_be_indented_by_context",
              "_fix_line_by_line",
              "_needs_indentation_fix"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "python_files",
          "fixer",
          "python_files",
          "total_fixes",
          "fixes",
          "fixes",
          "indentation_issues",
          "issues",
          "lines",
          "current_indent",
          "expected_indent",
          "in_block",
          "fixes",
          "lines",
          "fixes",
          "lines",
          "fixed_lines",
          "stripped",
          "fixes",
          "lines",
          "fixed_lines",
          "stripped",
          "fixes",
          "result",
          "tokens",
          "line_num",
          "fixed_content",
          "fixed_line",
          "fixed_content",
          "line",
          "fixed_line",
          "fixed_content",
          "content",
          "current_indent",
          "token",
          "line",
          "expected_indent",
          "stripped",
          "fixed_line",
          "fixed_line",
          "fixed_line",
          "current_indent",
          "expected_indent",
          "new_line",
          "fixed_line",
          "next_token",
          "expected_indent"
        ],
        "dependencies": [
          "re",
          "ast",
          "tokenize",
          "typing",
          "io",
          "pathlib",
          "subprocess"
        ],
        "docstrings": [
          "Sophisticated Python AST-based syntax fixer\nUses Python's built-in ast module for proper parsing and fixing",
          "AST-based Python syntax fixer",
          "Find all Python files in the project",
          "Run the AST-based Python syntax fixer",
          "Fix syntax errors in a Python file using AST analysis",
          "Fix specific syntax errors identified by AST",
          "Analyze indentation structure using tokens",
          "Check if the next statement should be indented",
          "Fix indentation issues",
          "Fix common syntax patterns that cause issues",
          "Check if a line is an unindented assignment that should be indented",
          "Check if a line should be indented based on surrounding context",
          "Fallback line-by-line fix for files that can't be tokenized",
          "Check if a line needs indentation fix"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 351
              }
            ],
            "lineno": 340
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 30
              }
            ],
            "lineno": 27
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "SyntaxError",
                "lineno": 38
              }
            ],
            "lineno": 34
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "tokenize.TokenError",
                "lineno": 56
              }
            ],
            "lineno": 52
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 159
              }
            ],
            "lineno": 156
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 200
              }
            ],
            "lineno": 197
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 270
              }
            ],
            "lineno": 267
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "find_python_files",
            "annotation": "List[Path]"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "fix_file",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_file",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_fix_syntax_error",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_syntax_error",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_syntax_error",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_syntax_error",
            "parameter": "error",
            "annotation": "SyntaxError"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_indentation",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_indentation",
            "parameter": "tokens",
            "annotation": "List[tokenize.TokenInfo]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_indentation",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_should_be_indented",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_should_be_indented",
            "parameter": "tokens",
            "annotation": "List[tokenize.TokenInfo]"
          },
          {
            "type": "parameter_annotation",
            "function": "_should_be_indented",
            "parameter": "position",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "_fix_indentation_issues",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_indentation_issues",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_indentation_issues",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_indentation_issues",
            "parameter": "issues",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "return_annotation",
            "function": "_fix_common_patterns",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_common_patterns",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_common_patterns",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_is_unindented_assignment",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_is_unindented_assignment",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_is_unindented_assignment",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_is_unindented_assignment",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "_should_be_indented_by_context",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_should_be_indented_by_context",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_should_be_indented_by_context",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "_fix_line_by_line",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_line_by_line",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_line_by_line",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_needs_indentation_fix",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_needs_indentation_fix",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_needs_indentation_fix",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_needs_indentation_fix",
            "parameter": "line_index",
            "annotation": "int"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 60,
          "cognitive": 81,
          "nesting": 0,
          "statements": 123
        },
        "nesting_depth": 13,
        "ast_nodes": 1777,
        "structure_hash": "14942becc409d29507a35a1213d0adb6"
      },
      "complexity_score": 60,
      "structure_hash": "14942becc409d29507a35a1213d0adb6",
      "lines_of_code": 357,
      "created_at": "2025-08-03T10:06:02.572383",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/model_sufficiency_analyzer.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/model_sufficiency_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Set"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run the model sufficiency analyzer",
            "lineno": 382,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 15,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "analyze_model_sufficiency",
            "parameters": [
              "self"
            ],
            "docstring": "Analyze if our models are sufficient for requirements and recreation",
            "lineno": 20,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_define_current_models",
            "parameters": [
              "self"
            ],
            "docstring": "Define what models we currently have",
            "lineno": 36,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_analyze_requirements_capabilities",
            "parameters": [
              "self"
            ],
            "docstring": "Analyze if our models can determine requirements",
            "lineno": 99,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_analyze_recreation_capabilities",
            "parameters": [
              "self"
            ],
            "docstring": "Analyze if our models can recreate code",
            "lineno": 198,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_generate_sufficiency_report",
            "parameters": [
              "self"
            ],
            "docstring": "Generate comprehensive sufficiency analysis report",
            "lineno": 296,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_calculate_requirements_score",
            "parameters": [
              "self"
            ],
            "docstring": "Calculate overall requirements determination score",
            "lineno": 345,
            "col_offset": 4,
            "decorators": [],
            "returns": "float",
            "has_async": false
          },
          {
            "name": "_calculate_recreation_score",
            "parameters": [
              "self"
            ],
            "docstring": "Calculate overall code recreation score",
            "lineno": 352,
            "col_offset": 4,
            "decorators": [],
            "returns": "float",
            "has_async": false
          },
          {
            "name": "_assess_requirements_sufficiency",
            "parameters": [
              "self",
              "score"
            ],
            "docstring": "Assess if requirements determination is sufficient",
            "lineno": 359,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_assess_recreation_sufficiency",
            "parameters": [
              "self",
              "score"
            ],
            "docstring": "Assess if code recreation is sufficient",
            "lineno": 370,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ModelSufficiencyAnalyzer",
            "bases": [],
            "docstring": "Analyzer that determines if our models are sufficient for requirements and recreation",
            "lineno": 12,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "analyze_model_sufficiency",
              "_define_current_models",
              "_analyze_requirements_capabilities",
              "_analyze_recreation_capabilities",
              "_generate_sufficiency_report",
              "_calculate_requirements_score",
              "_calculate_recreation_score",
              "_assess_requirements_sufficiency",
              "_assess_recreation_sufficiency"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "analyzer",
          "report",
          "requirements_score",
          "recreation_score",
          "report",
          "functional_score",
          "non_functional_score",
          "syntax_score",
          "semantic_score"
        ],
        "dependencies": [
          "typing",
          "pathlib",
          "json"
        ],
        "docstrings": [
          "Model Sufficiency Analyzer\nAnalyzes if our current models have sufficient information to determine requirements and recreate code",
          "Analyzer that determines if our models are sufficient for requirements and recreation",
          "Run the model sufficiency analyzer",
          "Analyze if our models are sufficient for requirements and recreation",
          "Define what models we currently have",
          "Analyze if our models can determine requirements",
          "Analyze if our models can recreate code",
          "Generate comprehensive sufficiency analysis report",
          "Calculate overall requirements determination score",
          "Calculate overall code recreation score",
          "Assess if requirements determination is sufficient",
          "Assess if code recreation is sufficient"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "analyze_model_sufficiency",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_define_current_models",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_requirements_capabilities",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_recreation_capabilities",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_generate_sufficiency_report",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_requirements_score",
            "annotation": "float"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_recreation_score",
            "annotation": "float"
          },
          {
            "type": "return_annotation",
            "function": "_assess_requirements_sufficiency",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_assess_requirements_sufficiency",
            "parameter": "score",
            "annotation": "float"
          },
          {
            "type": "return_annotation",
            "function": "_assess_recreation_sufficiency",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_assess_recreation_sufficiency",
            "parameter": "score",
            "annotation": "float"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 10,
          "cognitive": 8,
          "nesting": 0,
          "statements": 62
        },
        "nesting_depth": 9,
        "ast_nodes": 853,
        "structure_hash": "a389a58e57c834390ef6319714cf07db"
      },
      "complexity_score": 10,
      "structure_hash": "a389a58e57c834390ef6319714cf07db",
      "lines_of_code": 417,
      "created_at": "2025-08-03T10:06:02.602520",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/ast_model_gap_analyzer.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ast_model_gap_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import json",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Set",
          "from typing import Optional"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run the AST model gap analyzer",
            "lineno": 341,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 16,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "analyze_model_gaps",
            "parameters": [
              "self",
              "project_root"
            ],
            "docstring": "Analyze what AST models that we don't have",
            "lineno": 21,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_identify_current_models",
            "parameters": [
              "self"
            ],
            "docstring": "Identify what we currently model in our syntax fixing approach",
            "lineno": 36,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_identify_ast_models",
            "parameters": [
              "self"
            ],
            "docstring": "Identify what AST can model that we don't",
            "lineno": 68,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_identify_model_gaps",
            "parameters": [
              "self"
            ],
            "docstring": "Identify the gaps between current models and AST models",
            "lineno": 194,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_generate_gap_report",
            "parameters": [
              "self"
            ],
            "docstring": "Generate comprehensive gap analysis report",
            "lineno": 253,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ASTModelGapAnalyzer",
            "bases": [],
            "docstring": "Analyzer that identifies AST modeling capabilities we're missing",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "analyze_model_gaps",
              "_identify_current_models",
              "_identify_ast_models",
              "_identify_model_gaps",
              "_generate_gap_report"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "analyzer",
          "project_root",
          "report",
          "total_ast_models",
          "bridging_benefits",
          "report",
          "count"
        ],
        "dependencies": [
          "typing",
          "ast",
          "pathlib",
          "json"
        ],
        "docstrings": [
          "AST Model Gap Analyzer\nIdentifies what AST models that we don't have, and how bridging the gap could help",
          "Analyzer that identifies AST modeling capabilities we're missing",
          "Run the AST model gap analyzer",
          "Analyze what AST models that we don't have",
          "Identify what we currently model in our syntax fixing approach",
          "Identify what AST can model that we don't",
          "Identify the gaps between current models and AST models",
          "Generate comprehensive gap analysis report"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "analyze_model_gaps",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_model_gaps",
            "parameter": "project_root",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_identify_current_models",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_identify_ast_models",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_identify_model_gaps",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_generate_gap_report",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 10,
          "cognitive": 8,
          "nesting": 0,
          "statements": 45
        },
        "nesting_depth": 10,
        "ast_nodes": 884,
        "structure_hash": "f2f74f46c348db649f42317a430390b7"
      },
      "complexity_score": 10,
      "structure_hash": "f2f74f46c348db649f42317a430390b7",
      "lines_of_code": 388,
      "created_at": "2025-08-03T10:06:02.589481",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/validate_no_bash_oneliners.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/validate_no_bash_oneliners.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import os",
          "import re",
          "import sys",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "load_model_registry",
            "parameters": [],
            "docstring": "Load the project model registry",
            "lineno": 209,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "assemble_ghostbusters_team",
            "parameters": [],
            "docstring": "Assemble ghostbusters team for script validation",
            "lineno": 222,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "call_ghostbusters_for_scripts",
            "parameters": [
              "project_path"
            ],
            "docstring": "Call ghostbusters for script validation",
            "lineno": 231,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "generate_script_validation_report",
            "parameters": [
              "validation_results"
            ],
            "docstring": "Generate comprehensive script validation report",
            "lineno": 251,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "print_script_validation_report",
            "parameters": [
              "report"
            ],
            "docstring": "Print the script validation report",
            "lineno": 279,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main script validation",
            "lineno": 315,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 18,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate_script_structure",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Validate script follows proper structure",
            "lineno": 22,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "project_path"
            ],
            "docstring": "Validate script quality across project",
            "lineno": 68,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 100,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "find_bash_oneliners",
            "parameters": [
              "self",
              "project_path"
            ],
            "docstring": "Find bash/zsh oneliners in the project",
            "lineno": 104,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "project_path"
            ],
            "docstring": "Validate no bash oneliners rule",
            "lineno": 145,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 165,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "project_path"
            ],
            "docstring": "Validate script naming conventions",
            "lineno": 169,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ScriptQualityExpert",
            "bases": [],
            "docstring": "Script Quality Expert Ghostbuster",
            "lineno": 15,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate_script_structure",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "BashOnelinerDetector",
            "bases": [],
            "docstring": "Bash Oneliner Detector Ghostbuster",
            "lineno": 97,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "find_bash_oneliners",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "ScriptNamingExpert",
            "bases": [],
            "docstring": "Script Naming Expert Ghostbuster",
            "lineno": 162,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "team",
          "results",
          "passed_validations",
          "failed_validations",
          "delusions_detected",
          "report",
          "summary",
          "project_path",
          "validation_results",
          "script_report",
          "issues",
          "python_files",
          "script_quality_results",
          "total_issues",
          "oneliners",
          "python_c_patterns",
          "bash_patterns",
          "oneliners",
          "python_files",
          "naming_issues",
          "good_names",
          "expert_name",
          "findings",
          "status",
          "result",
          "filename",
          "content",
          "matches",
          "content"
        ],
        "dependencies": [
          "json",
          "typing",
          "sys",
          "pathlib",
          "re",
          "os"
        ],
        "docstrings": [
          "Validate No Bash/Zsh Oneliners Rule\nGhostbusters validation for script quality and bash escaping prevention",
          "Script Quality Expert Ghostbuster",
          "Bash Oneliner Detector Ghostbuster",
          "Script Naming Expert Ghostbuster",
          "Load the project model registry",
          "Assemble ghostbusters team for script validation",
          "Call ghostbusters for script validation",
          "Generate comprehensive script validation report",
          "Print the script validation report",
          "Main script validation",
          "Validate script follows proper structure",
          "Validate script quality across project",
          "Find bash/zsh oneliners in the project",
          "Validate no bash oneliners rule",
          "Validate script naming conventions"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 214
              },
              {
                "type": "json.JSONDecodeError",
                "lineno": 217
              }
            ],
            "lineno": 211
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 27
              }
            ],
            "lineno": 24
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 140
              }
            ],
            "lineno": 128
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "load_model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "assemble_ghostbusters_team",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "call_ghostbusters_for_scripts",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "call_ghostbusters_for_scripts",
            "parameter": "project_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "generate_script_validation_report",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_script_validation_report",
            "parameter": "validation_results",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "print_script_validation_report",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "print_script_validation_report",
            "parameter": "report",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate_script_structure",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_script_structure",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "project_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "find_bash_oneliners",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "find_bash_oneliners",
            "parameter": "project_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "project_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "project_path",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 34,
          "cognitive": 33,
          "nesting": 0,
          "statements": 103
        },
        "nesting_depth": 19,
        "ast_nodes": 1459,
        "structure_hash": "4313522011fb3b8acebbad298697134e"
      },
      "complexity_score": 34,
      "structure_hash": "4313522011fb3b8acebbad298697134e",
      "lines_of_code": 342,
      "created_at": "2025-08-03T10:06:02.633094",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/semantic_reconstructor.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/semantic_reconstructor.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import re",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from broken_python_interpreter import BrokenPythonInterpreter",
          "import sys",
          "import ast",
          "import shutil"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test the semantic reconstructor",
            "lineno": 249,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 16,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "reconstruct_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Reconstruct broken Python file",
            "lineno": 40,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "read_file_content",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Read file content safely",
            "lineno": 65,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_semantic_fixes",
            "parameters": [
              "self",
              "content",
              "interpretation"
            ],
            "docstring": "Apply semantic fixes based on interpretation",
            "lineno": 74,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_indentation_fixes",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Apply indentation fixes",
            "lineno": 97,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_colon_fixes",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Apply missing colon fixes",
            "lineno": 119,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_subprocess_fixes",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Apply subprocess call fixes",
            "lineno": 146,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_import_fixes",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Apply import fixes",
            "lineno": 161,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_interpretation_based_fixes",
            "parameters": [
              "self",
              "content",
              "interpretation"
            ],
            "docstring": "Apply fixes based on interpretation analysis",
            "lineno": 176,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_syntax_issue",
            "parameters": [
              "self",
              "line",
              "issue"
            ],
            "docstring": "Fix a specific syntax issue",
            "lineno": 197,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "validate_fix",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Validate that the fix produces valid Python",
            "lineno": 213,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "reconstruct_multiple_files",
            "parameters": [
              "self",
              "file_paths"
            ],
            "docstring": "Reconstruct multiple files",
            "lineno": 223,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "save_reconstructed_file",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Save reconstructed content to file",
            "lineno": 238,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "SemanticReconstructor",
            "bases": [],
            "docstring": "Reconstructs broken Python files using semantic understanding",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "reconstruct_file",
              "read_file_content",
              "apply_semantic_fixes",
              "apply_indentation_fixes",
              "apply_colon_fixes",
              "apply_subprocess_fixes",
              "apply_import_fixes",
              "apply_interpretation_based_fixes",
              "fix_syntax_issue",
              "validate_fix",
              "reconstruct_multiple_files",
              "save_reconstructed_file"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "reconstructor",
          "interpretation",
          "original_content",
          "fixed_content",
          "fixed_content",
          "fixed_content",
          "fixed_content",
          "fixed_content",
          "fixed_content",
          "lines",
          "fixed_lines",
          "lines",
          "fixed_lines",
          "lines",
          "fixed_lines",
          "lines",
          "fixed_lines",
          "lines",
          "fixed_lines",
          "syntax_issues",
          "issue_type",
          "results",
          "test_files",
          "test_files",
          "interp",
          "fixed_content",
          "original_line",
          "line_num",
          "reconstructed_content",
          "line",
          "line",
          "line",
          "line",
          "line",
          "backup_path",
          "line",
          "line",
          "line",
          "reconstructed_content",
          "line",
          "line"
        ],
        "dependencies": [
          "ast",
          "typing",
          "sys",
          "pathlib",
          "shutil",
          "re",
          "broken_python_interpreter"
        ],
        "docstrings": [
          "Semantic Reconstructor\nReconstructs broken Python files using semantic understanding",
          "Reconstructs broken Python files using semantic understanding",
          "Test the semantic reconstructor",
          "Reconstruct broken Python file",
          "Read file content safely",
          "Apply semantic fixes based on interpretation",
          "Apply indentation fixes",
          "Apply missing colon fixes",
          "Apply subprocess call fixes",
          "Apply import fixes",
          "Apply fixes based on interpretation analysis",
          "Fix a specific syntax issue",
          "Validate that the fix produces valid Python",
          "Reconstruct multiple files",
          "Save reconstructed content to file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 70
              }
            ],
            "lineno": 67
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 220
              }
            ],
            "lineno": 215
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 244
              }
            ],
            "lineno": 240
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 232
              }
            ],
            "lineno": 229
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "reconstruct_file",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "reconstruct_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "read_file_content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "read_file_content",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "apply_semantic_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_semantic_fixes",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_semantic_fixes",
            "parameter": "interpretation",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "apply_indentation_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_indentation_fixes",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "apply_colon_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_colon_fixes",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "apply_subprocess_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_subprocess_fixes",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "apply_import_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_import_fixes",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "apply_interpretation_based_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_interpretation_based_fixes",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_interpretation_based_fixes",
            "parameter": "interpretation",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "fix_syntax_issue",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_syntax_issue",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_syntax_issue",
            "parameter": "issue",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate_fix",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_fix",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "reconstruct_multiple_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "reconstruct_multiple_files",
            "parameter": "file_paths",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "save_reconstructed_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "save_reconstructed_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "save_reconstructed_file",
            "parameter": "content",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 38,
          "cognitive": 44,
          "nesting": 0,
          "statements": 109
        },
        "nesting_depth": 15,
        "ast_nodes": 1406,
        "structure_hash": "88bcf5d8eb290378fcdf5c66ed1a3458"
      },
      "complexity_score": 38,
      "structure_hash": "88bcf5d8eb290378fcdf5c66ed1a3458",
      "lines_of_code": 295,
      "created_at": "2025-08-03T10:06:02.644172",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/test_syntax_fix_safety.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/test_syntax_fix_safety.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "test_no_duplicate_shebangs",
            "parameters": [
              "file_path"
            ],
            "docstring": "Test that files don't have duplicate shebang lines",
            "lineno": 10,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "test_no_duplicate_imports",
            "parameters": [
              "file_path"
            ],
            "docstring": "Test that files don't have duplicate import statements",
            "lineno": 35,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "test_proper_structure",
            "parameters": [
              "file_path"
            ],
            "docstring": "Test that files have proper Python structure",
            "lineno": 63,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "test_syntax_fix_safety",
            "parameters": [],
            "docstring": "Test that syntax fix scripts don't introduce structural issues",
            "lineno": 93,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "issues",
          "lines",
          "shebang_count",
          "issues",
          "lines",
          "imports",
          "seen_imports",
          "issues",
          "lines",
          "python_files",
          "results",
          "stripped",
          "file_issues",
          "shebang_issues",
          "import_issues",
          "structure_issues",
          "content",
          "content",
          "content"
        ],
        "dependencies": [
          "typing",
          "pathlib"
        ],
        "docstrings": [
          "Test to ensure syntax fix scripts don't introduce structural issues",
          "Test that files don't have duplicate shebang lines",
          "Test that files don't have duplicate import statements",
          "Test that files have proper Python structure",
          "Test that syntax fix scripts don't introduce structural issues"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 17
              }
            ],
            "lineno": 14
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 42
              }
            ],
            "lineno": 39
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 70
              }
            ],
            "lineno": 67
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_no_duplicate_shebangs",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "test_no_duplicate_shebangs",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "test_no_duplicate_imports",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "test_no_duplicate_imports",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "test_proper_structure",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "test_proper_structure",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "test_syntax_fix_safety",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 27,
          "cognitive": 30,
          "nesting": 0,
          "statements": 50
        },
        "nesting_depth": 12,
        "ast_nodes": 771,
        "structure_hash": "6abc49718c570bf9fdcaef43baf3471a"
      },
      "complexity_score": 27,
      "structure_hash": "6abc49718c570bf9fdcaef43baf3471a",
      "lines_of_code": 152,
      "created_at": "2025-08-03T10:06:02.682572",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/ast_capability_analyzer.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ast_capability_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import json",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Set"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run the AST capability analyzer",
            "lineno": 409,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 16,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "analyze_ast_capabilities",
            "parameters": [
              "self",
              "project_root"
            ],
            "docstring": "Analyze what AST can tell us about Python projects",
            "lineno": 20,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_find_project_files",
            "parameters": [
              "self",
              "project_root"
            ],
            "docstring": "Find Python files in our project (excluding .venv)",
            "lineno": 32,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Path]",
            "has_async": false
          },
          {
            "name": "_analyze_file_capabilities",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Analyze what AST can extract from a file",
            "lineno": 42,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_extract_ast_insights",
            "parameters": [
              "self",
              "file_path",
              "tree",
              "content"
            ],
            "docstring": "Extract comprehensive insights using AST",
            "lineno": 59,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_extract_imports_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract imports using AST - much more accurate than regex",
            "lineno": 78,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_functions_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract functions using AST - complete function analysis",
            "lineno": 103,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_classes_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract classes using AST - complete class analysis",
            "lineno": 121,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_dependencies_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract dependencies using AST - accurate dependency tracking",
            "lineno": 138,
            "col_offset": 4,
            "decorators": [],
            "returns": "Set[str]",
            "has_async": false
          },
          {
            "name": "_calculate_complexity_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Calculate complexity using AST - precise metrics",
            "lineno": 150,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_analyze_structure_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Analyze code structure using AST",
            "lineno": 175,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_detect_patterns_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Detect code patterns using AST",
            "lineno": 202,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_calculate_metrics_ast",
            "parameters": [
              "self",
              "tree",
              "content"
            ],
            "docstring": "Calculate comprehensive metrics using AST",
            "lineno": 227,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_extract_function_args_ast",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract function arguments using AST",
            "lineno": 243,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_decorator_ast",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract decorator information using AST",
            "lineno": 254,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_extract_base_ast",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract base class information using AST",
            "lineno": 263,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_extract_keyword_ast",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract keyword arguments using AST",
            "lineno": 271,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_extract_expression_ast",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract expression information using AST",
            "lineno": 278,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_extract_class_methods_ast",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract class methods using AST",
            "lineno": 286,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_return_type_ast",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract return type using AST",
            "lineno": 300,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_extract_annotation_ast",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract type annotation using AST",
            "lineno": 306,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_calculate_function_complexity_ast",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Calculate function complexity using AST",
            "lineno": 314,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "_record_syntax_error",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Record files that AST cannot parse",
            "lineno": 322,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_generate_capability_report",
            "parameters": [
              "self"
            ],
            "docstring": "Generate comprehensive AST capability report",
            "lineno": 333,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_calculate_avg_complexity",
            "parameters": [
              "self",
              "valid_files"
            ],
            "docstring": "Calculate average complexity metrics",
            "lineno": 394,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ASTCapabilityAnalyzer",
            "bases": [],
            "docstring": "Analyzer that demonstrates AST capabilities for project modeling",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "analyze_ast_capabilities",
              "_find_project_files",
              "_analyze_file_capabilities",
              "_extract_ast_insights",
              "_extract_imports_ast",
              "_extract_functions_ast",
              "_extract_classes_ast",
              "_extract_dependencies_ast",
              "_calculate_complexity_ast",
              "_analyze_structure_ast",
              "_detect_patterns_ast",
              "_calculate_metrics_ast",
              "_extract_function_args_ast",
              "_extract_decorator_ast",
              "_extract_base_ast",
              "_extract_keyword_ast",
              "_extract_expression_ast",
              "_extract_class_methods_ast",
              "_extract_return_type_ast",
              "_extract_annotation_ast",
              "_calculate_function_complexity_ast",
              "_record_syntax_error",
              "_generate_capability_report",
              "_calculate_avg_complexity"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "analyzer",
          "project_root",
          "report",
          "python_files",
          "python_files",
          "file_insights",
          "imports",
          "functions",
          "classes",
          "dependencies",
          "complexity",
          "structure",
          "patterns",
          "lines",
          "metrics",
          "args",
          "methods",
          "complexity",
          "valid_files",
          "error_files",
          "all_imports",
          "all_functions",
          "all_classes",
          "all_dependencies",
          "all_patterns",
          "report",
          "total_complexity",
          "capabilities",
          "complexity",
          "content",
          "tree"
        ],
        "dependencies": [
          "typing",
          "ast",
          "pathlib",
          "json"
        ],
        "docstrings": [
          "AST Capability Analyzer\nDemonstrates how AST can enhance Python project modeling",
          "Analyzer that demonstrates AST capabilities for project modeling",
          "Run the AST capability analyzer",
          "Analyze what AST can tell us about Python projects",
          "Find Python files in our project (excluding .venv)",
          "Analyze what AST can extract from a file",
          "Extract comprehensive insights using AST",
          "Extract imports using AST - much more accurate than regex",
          "Extract functions using AST - complete function analysis",
          "Extract classes using AST - complete class analysis",
          "Extract dependencies using AST - accurate dependency tracking",
          "Calculate complexity using AST - precise metrics",
          "Analyze code structure using AST",
          "Detect code patterns using AST",
          "Calculate comprehensive metrics using AST",
          "Extract function arguments using AST",
          "Extract decorator information using AST",
          "Extract base class information using AST",
          "Extract keyword arguments using AST",
          "Extract expression information using AST",
          "Extract class methods using AST",
          "Extract return type using AST",
          "Extract type annotation using AST",
          "Calculate function complexity using AST",
          "Record files that AST cannot parse",
          "Generate comprehensive AST capability report",
          "Calculate average complexity metrics"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 56
              }
            ],
            "lineno": 44
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "SyntaxError",
                "lineno": 52
              }
            ],
            "lineno": 49
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "analyze_ast_capabilities",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_ast_capabilities",
            "parameter": "project_root",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_find_project_files",
            "annotation": "List[Path]"
          },
          {
            "type": "parameter_annotation",
            "function": "_find_project_files",
            "parameter": "project_root",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_file_capabilities",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_file_capabilities",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_extract_ast_insights",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_ast_insights",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_ast_insights",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_ast_insights",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_extract_imports_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_imports_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_functions_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_functions_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_classes_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_classes_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_dependencies_ast",
            "annotation": "Set[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_dependencies_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_complexity_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_complexity_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_structure_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_structure_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_detect_patterns_ast",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_detect_patterns_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_metrics_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_metrics_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_metrics_ast",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_extract_function_args_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_function_args_ast",
            "parameter": "node",
            "annotation": "ast.FunctionDef"
          },
          {
            "type": "return_annotation",
            "function": "_extract_decorator_ast",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_decorator_ast",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_extract_base_ast",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_base_ast",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_extract_keyword_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_keyword_ast",
            "parameter": "node",
            "annotation": "ast.keyword"
          },
          {
            "type": "return_annotation",
            "function": "_extract_expression_ast",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_expression_ast",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_extract_class_methods_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_class_methods_ast",
            "parameter": "node",
            "annotation": "ast.ClassDef"
          },
          {
            "type": "return_annotation",
            "function": "_extract_return_type_ast",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_return_type_ast",
            "parameter": "node",
            "annotation": "ast.FunctionDef"
          },
          {
            "type": "return_annotation",
            "function": "_extract_annotation_ast",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_annotation_ast",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_function_complexity_ast",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_function_complexity_ast",
            "parameter": "node",
            "annotation": "ast.FunctionDef"
          },
          {
            "type": "return_annotation",
            "function": "_record_syntax_error",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "_record_syntax_error",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_generate_capability_report",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_avg_complexity",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_avg_complexity",
            "parameter": "valid_files",
            "annotation": "List[Dict[unknown]]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 67,
          "cognitive": 67,
          "nesting": 0,
          "statements": 142
        },
        "nesting_depth": 15,
        "ast_nodes": 2794,
        "structure_hash": "fdc40f0116017da8395d058306192cba"
      },
      "complexity_score": 67,
      "structure_hash": "fdc40f0116017da8395d058306192cba",
      "lines_of_code": 452,
      "created_at": "2025-08-03T10:06:02.702201",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/setup.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/setup.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import os",
          "import re",
          "import sys",
          "from pathlib import Path"
        ],
        "functions": [
          {
            "name": "print_header",
            "parameters": [
              "text"
            ],
            "docstring": null,
            "lineno": 21,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "print_success",
            "parameters": [
              "text"
            ],
            "docstring": null,
            "lineno": 25,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "print_error",
            "parameters": [
              "text"
            ],
            "docstring": null,
            "lineno": 29,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "print_warning",
            "parameters": [
              "text"
            ],
            "docstring": null,
            "lineno": 33,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate_snowflake_url",
            "parameters": [
              "url"
            ],
            "docstring": "Validate Snowflake account URL format",
            "lineno": 37,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate_uuid",
            "parameters": [
              "uuid"
            ],
            "docstring": "Validate UUID format",
            "lineno": 45,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate_url",
            "parameters": [
              "url"
            ],
            "docstring": "Validate general URL format",
            "lineno": 53,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "prompt_with_validation",
            "parameters": [
              "prompt",
              "validator",
              "example"
            ],
            "docstring": "Prompt for input with validation",
            "lineno": 61,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "generate_config_env",
            "parameters": [
              "values"
            ],
            "docstring": "Generate config.env file content",
            "lineno": 82,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": null,
            "lineno": 111,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "RED",
          "GREEN",
          "YELLOW",
          "BLUE",
          "BOLD",
          "END",
          "pattern",
          "pattern",
          "pattern",
          "values",
          "config_content",
          "value",
          "response"
        ],
        "dependencies": [
          "sys",
          "pathlib",
          "re",
          "os"
        ],
        "docstrings": [
          "Snowflake Openflow Setup Wizard\nInteractive setup for Openflow deployment configuration",
          "Validate Snowflake account URL format",
          "Validate UUID format",
          "Validate general URL format",
          "Prompt for input with validation",
          "Generate config.env file content"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "KeyboardInterrupt",
                "lineno": 212
              },
              {
                "type": "Exception",
                "lineno": 215
              }
            ],
            "lineno": 210
          }
        ],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 15,
          "cognitive": 14,
          "nesting": 0,
          "statements": 73
        },
        "nesting_depth": 10,
        "ast_nodes": 808,
        "structure_hash": "321ac6e2644abf495eb3c02da253bf26"
      },
      "complexity_score": 15,
      "structure_hash": "321ac6e2644abf495eb3c02da253bf26",
      "lines_of_code": 218,
      "created_at": "2025-08-03T10:06:02.722417",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/improved_syntax_fix.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/improved_syntax_fix.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import subprocess",
          "from pathlib import Path",
          "from typing import List"
        ],
        "functions": [
          {
            "name": "fix_syntax_safely",
            "parameters": [
              "file_path"
            ],
            "docstring": "Fix syntax errors safely without introducing structural issues",
            "lineno": 11,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "is_inside_function",
            "parameters": [
              "lines",
              "line_index"
            ],
            "docstring": "Check if a line is inside a function definition",
            "lineno": 57,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "needs_indentation",
            "parameters": [
              "line"
            ],
            "docstring": "Check if a line needs indentation",
            "lineno": 88,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "find_python_files",
            "parameters": [],
            "docstring": "Find all Python files in the project",
            "lineno": 128,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[Path]",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Fix syntax errors safely in all Python files",
            "lineno": 138,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "fixes",
          "lines",
          "fixed_lines",
          "has_shebang",
          "stripped",
          "python_files",
          "python_files",
          "total_fixes",
          "fixed_line",
          "fixed_content",
          "line",
          "fixes",
          "result",
          "content",
          "has_shebang",
          "fixed_line"
        ],
        "dependencies": [
          "typing",
          "subprocess",
          "pathlib"
        ],
        "docstrings": [
          "Improved syntax fix script that's more careful about structural integrity",
          "Fix syntax errors safely without introducing structural issues",
          "Check if a line is inside a function definition",
          "Check if a line needs indentation",
          "Find all Python files in the project",
          "Fix syntax errors safely in all Python files"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 18
              }
            ],
            "lineno": 15
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 170
              }
            ],
            "lineno": 161
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 51
              }
            ],
            "lineno": 48
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "fix_syntax_safely",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_syntax_safely",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "is_inside_function",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_inside_function",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "is_inside_function",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "needs_indentation",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "needs_indentation",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "find_python_files",
            "annotation": "List[Path]"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 38,
          "cognitive": 52,
          "nesting": 0,
          "statements": 61
        },
        "nesting_depth": 11,
        "ast_nodes": 778,
        "structure_hash": "8b02f06bac7662140db14056d593e760"
      },
      "complexity_score": 38,
      "structure_hash": "8b02f06bac7662140db14056d593e760",
      "lines_of_code": 176,
      "created_at": "2025-08-03T10:06:02.740233",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/fix_syntax_errors.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/fix_syntax_errors.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import re",
          "import sys",
          "from pathlib import Path"
        ],
        "functions": [
          {
            "name": "fix_file",
            "parameters": [
              "file_path"
            ],
            "docstring": "Fix syntax errors in a file",
            "lineno": 10,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Fix all problematic files",
            "lineno": 68,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "files_to_fix",
          "lines",
          "fixed_lines",
          "indent_level",
          "content",
          "stripped",
          "indent_level",
          "indent_level",
          "indent_level"
        ],
        "dependencies": [
          "pathlib",
          "re",
          "sys"
        ],
        "docstrings": [
          "Fix syntax errors in problematic files",
          "Fix syntax errors in a file",
          "Fix all problematic files"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 64
              }
            ],
            "lineno": 12
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "fix_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_file",
            "parameter": "file_path",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 18,
          "cognitive": 24,
          "nesting": 0,
          "statements": 30
        },
        "nesting_depth": 17,
        "ast_nodes": 496,
        "structure_hash": "644c355dd5948b8de599f3badca57980"
      },
      "complexity_score": 18,
      "structure_hash": "644c355dd5948b8de599f3badca57980",
      "lines_of_code": 86,
      "created_at": "2025-08-03T10:06:02.749323",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/fix_all_syntax_errors.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/fix_all_syntax_errors.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import subprocess",
          "import re",
          "from pathlib import Path",
          "from typing import List"
        ],
        "functions": [
          {
            "name": "fix_file_syntax",
            "parameters": [
              "file_path"
            ],
            "docstring": "Fix syntax errors in a single file",
            "lineno": 12,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "is_after_function_definition",
            "parameters": [
              "lines",
              "line_index"
            ],
            "docstring": "Check if line is after a function definition",
            "lineno": 76,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "is_after_control_flow",
            "parameters": [
              "lines",
              "line_index"
            ],
            "docstring": "Check if line is after a control flow statement",
            "lineno": 90,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "is_after_block_start",
            "parameters": [
              "lines",
              "line_index"
            ],
            "docstring": "Check if line is after a block start",
            "lineno": 112,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "should_be_indented",
            "parameters": [
              "lines",
              "line_index"
            ],
            "docstring": "Check if a line should be indented based on context",
            "lineno": 123,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "needs_indentation_fix",
            "parameters": [
              "line"
            ],
            "docstring": "Check if a line needs indentation fix",
            "lineno": 150,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "find_python_files",
            "parameters": [],
            "docstring": "Find all Python files in the project",
            "lineno": 195,
            "col_offset": 0,
            "decorators": [],
            "returns": "List[Path]",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Fix all remaining syntax errors",
            "lineno": 205,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "fixes",
          "lines",
          "fixed_lines",
          "stripped",
          "python_files",
          "python_files",
          "total_fixes",
          "fixed_line",
          "fixed_content",
          "line",
          "line",
          "line",
          "line",
          "fixes",
          "result",
          "content",
          "fixed_line",
          "fixed_line",
          "fixed_line",
          "fixed_line",
          "fixed_line"
        ],
        "dependencies": [
          "re",
          "typing",
          "subprocess",
          "pathlib"
        ],
        "docstrings": [
          "Comprehensive script to fix all remaining syntax errors",
          "Fix syntax errors in a single file",
          "Check if line is after a function definition",
          "Check if line is after a control flow statement",
          "Check if line is after a block start",
          "Check if a line should be indented based on context",
          "Check if a line needs indentation fix",
          "Find all Python files in the project",
          "Fix all remaining syntax errors"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 19
              }
            ],
            "lineno": 16
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 239
              }
            ],
            "lineno": 228
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 70
              }
            ],
            "lineno": 67
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "fix_file_syntax",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_file_syntax",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "is_after_function_definition",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_function_definition",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_function_definition",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "is_after_control_flow",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_control_flow",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_control_flow",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "is_after_block_start",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_block_start",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "is_after_block_start",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "should_be_indented",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "should_be_indented",
            "parameter": "lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "should_be_indented",
            "parameter": "line_index",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "needs_indentation_fix",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "needs_indentation_fix",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "find_python_files",
            "annotation": "List[Path]"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 52,
          "cognitive": 91,
          "nesting": 0,
          "statements": 79
        },
        "nesting_depth": 11,
        "ast_nodes": 1273,
        "structure_hash": "5ebd0b95d0667e89cafbdeafe0a1d989"
      },
      "complexity_score": 52,
      "structure_hash": "5ebd0b95d0667e89cafbdeafe0a1d989",
      "lines_of_code": 245,
      "created_at": "2025-08-03T10:06:02.807391",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/model_consistency_analyzer.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/model_consistency_analyzer.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import subprocess",
          "import ast",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Tuple",
          "from git_enhanced_ast_fixer import GitEnhancedASTFixer"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test the model consistency analyzer",
            "lineno": 394,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 18,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "analyze_file_consistency",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Analyze model consistency for a file",
            "lineno": 22,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "check_git_history",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check if file has Git history",
            "lineno": 36,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "analyze_with_git_history",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Analyze file that has Git history",
            "lineno": 47,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_new_artifact",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Analyze new artifact with no Git history",
            "lineno": 76,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_current_model",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Extract current model from file",
            "lineno": 100,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_committed_model",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Extract model from most recent committed version",
            "lineno": 118,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "get_persisted_model",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Get persisted model from project_model_registry.json",
            "lineno": 150,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_ast_model",
            "parameters": [
              "self",
              "tree",
              "content"
            ],
            "docstring": "Extract model from AST",
            "lineno": 177,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_interpretation_model",
            "parameters": [
              "self",
              "interpretation",
              "content"
            ],
            "docstring": "Extract model from broken interpreter",
            "lineno": 190,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_basic_model",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Extract basic model from content",
            "lineno": 202,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "extract_functions_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract functions from AST",
            "lineno": 227,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_classes_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract classes from AST",
            "lineno": 240,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_imports_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract imports from AST",
            "lineno": 253,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_variables_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract variables from AST",
            "lineno": 276,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_decorator",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract decorator name from AST",
            "lineno": 290,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "extract_base",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract base class name from AST",
            "lineno": 299,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "extract_class_methods",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract class methods from AST",
            "lineno": 305,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "compare_models",
            "parameters": [
              "self",
              "model1",
              "model2"
            ],
            "docstring": "Compare two models",
            "lineno": 317,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "calculate_structure_similarity",
            "parameters": [
              "self",
              "model1",
              "model2"
            ],
            "docstring": "Calculate structural similarity between models",
            "lineno": 333,
            "col_offset": 4,
            "decorators": [],
            "returns": "float",
            "has_async": false
          },
          {
            "name": "find_pattern_match",
            "parameters": [
              "self",
              "current_model"
            ],
            "docstring": "Find if current model matches any known patterns",
            "lineno": 357,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "generate_recommendations",
            "parameters": [
              "self",
              "current_model",
              "committed_model",
              "persisted_model"
            ],
            "docstring": "Generate recommendations based on model comparison",
            "lineno": 363,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "generate_new_artifact_recommendations",
            "parameters": [
              "self",
              "current_model",
              "persisted_model",
              "pattern_match"
            ],
            "docstring": "Generate recommendations for new artifacts",
            "lineno": 379,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ModelConsistencyAnalyzer",
            "bases": [],
            "docstring": "Analyzes model consistency between current, persisted, and committed models",
            "lineno": 15,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "analyze_file_consistency",
              "check_git_history",
              "analyze_with_git_history",
              "analyze_new_artifact",
              "extract_current_model",
              "extract_committed_model",
              "get_persisted_model",
              "extract_ast_model",
              "extract_interpretation_model",
              "extract_basic_model",
              "extract_functions_from_ast",
              "extract_classes_from_ast",
              "extract_imports_from_ast",
              "extract_variables_from_ast",
              "extract_decorator",
              "extract_base",
              "extract_class_methods",
              "compare_models",
              "calculate_structure_similarity",
              "find_pattern_match",
              "generate_recommendations",
              "generate_new_artifact_recommendations"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "analyzer",
          "test_files",
          "results",
          "has_git_history",
          "current_model",
          "committed_model",
          "persisted_model",
          "consistency_analysis",
          "current_model",
          "persisted_model",
          "pattern_match",
          "consistency_analysis",
          "lines",
          "functions",
          "classes",
          "imports",
          "functions",
          "classes",
          "imports",
          "variables",
          "methods",
          "comparison",
          "total_elements",
          "matching_elements",
          "funcs1",
          "funcs2",
          "classes1",
          "classes2",
          "recommendations",
          "current_vs_committed",
          "current_vs_persisted",
          "recommendations",
          "result",
          "result",
          "stripped",
          "result",
          "content",
          "tree",
          "commit_hash",
          "result",
          "file_name",
          "comparisons",
          "current_vs_committed",
          "similarity",
          "interpretation",
          "content",
          "registry",
          "patterns",
          "tree"
        ],
        "dependencies": [
          "json",
          "ast",
          "typing",
          "git_enhanced_ast_fixer",
          "pathlib",
          "subprocess"
        ],
        "docstrings": [
          "Model Consistency Analyzer\nAnalyzes whether files match persisted models or vary from committed models",
          "Analyzes model consistency between current, persisted, and committed models",
          "Test the model consistency analyzer",
          "Analyze model consistency for a file",
          "Check if file has Git history",
          "Analyze file that has Git history",
          "Analyze new artifact with no Git history",
          "Extract current model from file",
          "Extract model from most recent committed version",
          "Get persisted model from project_model_registry.json",
          "Extract model from AST",
          "Extract model from broken interpreter",
          "Extract basic model from content",
          "Extract functions from AST",
          "Extract classes from AST",
          "Extract imports from AST",
          "Extract variables from AST",
          "Extract decorator name from AST",
          "Extract base class name from AST",
          "Extract class methods from AST",
          "Compare two models",
          "Calculate structural similarity between models",
          "Find if current model matches any known patterns",
          "Generate recommendations based on model comparison",
          "Generate recommendations for new artifacts"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 44
              }
            ],
            "lineno": 38
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 115
              }
            ],
            "lineno": 102
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 147
              }
            ],
            "lineno": 120
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 174
              }
            ],
            "lineno": 152
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 110
              }
            ],
            "lineno": 107
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 141
              }
            ],
            "lineno": 138
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "analyze_file_consistency",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_file_consistency",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "check_git_history",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "check_git_history",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "analyze_with_git_history",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_with_git_history",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "analyze_new_artifact",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_new_artifact",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_current_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_current_model",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_committed_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_committed_model",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "get_persisted_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "get_persisted_model",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_ast_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_ast_model",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_ast_model",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_interpretation_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_interpretation_model",
            "parameter": "interpretation",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_interpretation_model",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_basic_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_basic_model",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_functions_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_functions_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_classes_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_classes_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_imports_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_imports_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_variables_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_variables_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_decorator",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_decorator",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "extract_base",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_base",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "extract_class_methods",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_class_methods",
            "parameter": "node",
            "annotation": "ast.ClassDef"
          },
          {
            "type": "return_annotation",
            "function": "compare_models",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "compare_models",
            "parameter": "model1",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "compare_models",
            "parameter": "model2",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "calculate_structure_similarity",
            "annotation": "float"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_structure_similarity",
            "parameter": "model1",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_structure_similarity",
            "parameter": "model2",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "find_pattern_match",
            "annotation": "Optional[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "find_pattern_match",
            "parameter": "current_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "generate_recommendations",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_recommendations",
            "parameter": "current_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_recommendations",
            "parameter": "committed_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_recommendations",
            "parameter": "persisted_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "generate_new_artifact_recommendations",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_new_artifact_recommendations",
            "parameter": "current_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_new_artifact_recommendations",
            "parameter": "persisted_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_new_artifact_recommendations",
            "parameter": "pattern_match",
            "annotation": "Optional[Dict[unknown]]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 50,
          "cognitive": 50,
          "nesting": 0,
          "statements": 140
        },
        "nesting_depth": 16,
        "ast_nodes": 2623,
        "structure_hash": "df7c964d785ff4d1f40b7d3e821ff0d6"
      },
      "complexity_score": 50,
      "structure_hash": "df7c964d785ff4d1f40b7d3e821ff0d6",
      "lines_of_code": 435,
      "created_at": "2025-08-03T10:06:02.838225",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/comprehensive_indentation_fix.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/comprehensive_indentation_fix.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import re",
          "import ast",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "import shutil"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test the comprehensive indentation fixer",
            "lineno": 154,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "fix_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix all indentation issues in a file",
            "lineno": 16,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_comprehensive_indentation_fixes",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Apply comprehensive indentation fixes",
            "lineno": 35,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "should_be_indented",
            "parameters": [
              "self",
              "stripped",
              "line_num",
              "all_lines"
            ],
            "docstring": "Determine if a line should be indented",
            "lineno": 99,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "validate_fix",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Validate that the fix produces valid Python",
            "lineno": 120,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "fix_multiple_files",
            "parameters": [
              "self",
              "file_paths"
            ],
            "docstring": "Fix multiple files",
            "lineno": 128,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "save_fixed_file",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Save fixed content to file",
            "lineno": 143,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ComprehensiveIndentationFixer",
            "bases": [],
            "docstring": "Comprehensive indentation fixer for broken Python files",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "fix_file",
              "apply_comprehensive_indentation_fixes",
              "should_be_indented",
              "validate_fix",
              "fix_multiple_files",
              "save_fixed_file"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "fixer",
          "test_files",
          "fixed_content",
          "lines",
          "fixed_lines",
          "current_indent_level",
          "in_function",
          "in_class",
          "results",
          "content",
          "stripped",
          "prev_line",
          "backup_path",
          "fixed_content",
          "in_class",
          "in_function",
          "in_function",
          "fixed_content"
        ],
        "dependencies": [
          "ast",
          "typing",
          "pathlib",
          "shutil",
          "re"
        ],
        "docstrings": [
          "Comprehensive Indentation Fixer\nFixes all indentation issues in broken Python files",
          "Comprehensive indentation fixer for broken Python files",
          "Test the comprehensive indentation fixer",
          "Fix all indentation issues in a file",
          "Apply comprehensive indentation fixes",
          "Determine if a line should be indented",
          "Validate that the fix produces valid Python",
          "Fix multiple files",
          "Save fixed content to file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 125
              }
            ],
            "lineno": 122
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 149
              }
            ],
            "lineno": 145
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 137
              }
            ],
            "lineno": 134
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 190
              }
            ],
            "lineno": 187
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "fix_file",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "apply_comprehensive_indentation_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_comprehensive_indentation_fixes",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "should_be_indented",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "should_be_indented",
            "parameter": "stripped",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "should_be_indented",
            "parameter": "line_num",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "should_be_indented",
            "parameter": "all_lines",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "validate_fix",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_fix",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "fix_multiple_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_multiple_files",
            "parameter": "file_paths",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "save_fixed_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "save_fixed_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "save_fixed_file",
            "parameter": "content",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 30,
          "cognitive": 30,
          "nesting": 0,
          "statements": 70
        },
        "nesting_depth": 13,
        "ast_nodes": 813,
        "structure_hash": "0e23169f57244c113ced3c17e16a0796"
      },
      "complexity_score": 30,
      "structure_hash": "0e23169f57244c113ced3c17e16a0796",
      "lines_of_code": 199,
      "created_at": "2025-08-03T10:06:02.832811",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/aggressive_syntax_fixer.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/aggressive_syntax_fixer.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import re",
          "import ast",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "import shutil"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test the aggressive syntax fixer",
            "lineno": 233,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 16,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "fix_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix a broken Python file aggressively",
            "lineno": 39,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_aggressive_fixes",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Apply aggressive syntax fixes",
            "lineno": 58,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_indentation_aggressive",
            "parameters": [
              "self",
              "line",
              "line_num",
              "all_lines"
            ],
            "docstring": "Fix indentation aggressively",
            "lineno": 88,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "is_in_function_context",
            "parameters": [
              "self",
              "line_num",
              "all_lines"
            ],
            "docstring": "Check if we're inside a function or class definition",
            "lineno": 140,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "fix_missing_colons",
            "parameters": [
              "self",
              "line"
            ],
            "docstring": "Fix missing colons",
            "lineno": 150,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_subprocess_calls",
            "parameters": [
              "self",
              "line"
            ],
            "docstring": "Fix subprocess.run calls",
            "lineno": 168,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_incomplete_imports",
            "parameters": [
              "self",
              "line"
            ],
            "docstring": "Fix incomplete imports",
            "lineno": 174,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_variable_assignments",
            "parameters": [
              "self",
              "line",
              "line_num",
              "all_lines"
            ],
            "docstring": "Fix variable assignments",
            "lineno": 183,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "validate_fix",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Validate that the fix produces valid Python",
            "lineno": 199,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "fix_multiple_files",
            "parameters": [
              "self",
              "file_paths"
            ],
            "docstring": "Fix multiple files",
            "lineno": 207,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "save_fixed_file",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Save fixed content to file",
            "lineno": 222,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "AggressiveSyntaxFixer",
            "bases": [],
            "docstring": "Aggressive syntax fixer for severely broken Python files",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "fix_file",
              "apply_aggressive_fixes",
              "fix_indentation_aggressive",
              "is_in_function_context",
              "fix_missing_colons",
              "fix_subprocess_calls",
              "fix_incomplete_imports",
              "fix_variable_assignments",
              "validate_fix",
              "fix_multiple_files",
              "save_fixed_file"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "fixer",
          "test_files",
          "fixed_content",
          "lines",
          "fixed_lines",
          "stripped",
          "stripped",
          "stripped",
          "stripped",
          "results",
          "content",
          "original_line",
          "line",
          "line",
          "line",
          "line",
          "line",
          "line",
          "backup_path",
          "fixed_content",
          "fixed_content"
        ],
        "dependencies": [
          "ast",
          "typing",
          "pathlib",
          "shutil",
          "re"
        ],
        "docstrings": [
          "Aggressive Syntax Fixer\nFixes complex syntax issues in broken Python files",
          "Aggressive syntax fixer for severely broken Python files",
          "Test the aggressive syntax fixer",
          "Fix a broken Python file aggressively",
          "Apply aggressive syntax fixes",
          "Fix indentation aggressively",
          "Check if we're inside a function or class definition",
          "Fix missing colons",
          "Fix subprocess.run calls",
          "Fix incomplete imports",
          "Fix variable assignments",
          "Validate that the fix produces valid Python",
          "Fix multiple files",
          "Save fixed content to file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 204
              }
            ],
            "lineno": 201
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 228
              }
            ],
            "lineno": 224
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 216
              }
            ],
            "lineno": 213
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 269
              }
            ],
            "lineno": 266
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "fix_file",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "apply_aggressive_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_aggressive_fixes",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "fix_indentation_aggressive",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_indentation_aggressive",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_indentation_aggressive",
            "parameter": "line_num",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_indentation_aggressive",
            "parameter": "all_lines",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "is_in_function_context",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_in_function_context",
            "parameter": "line_num",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "is_in_function_context",
            "parameter": "all_lines",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "fix_missing_colons",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_missing_colons",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "fix_subprocess_calls",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_subprocess_calls",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "fix_incomplete_imports",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_incomplete_imports",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "fix_variable_assignments",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_variable_assignments",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_variable_assignments",
            "parameter": "line_num",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_variable_assignments",
            "parameter": "all_lines",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "validate_fix",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_fix",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "fix_multiple_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_multiple_files",
            "parameter": "file_paths",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "save_fixed_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "save_fixed_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "save_fixed_file",
            "parameter": "content",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 42,
          "cognitive": 47,
          "nesting": 0,
          "statements": 93
        },
        "nesting_depth": 13,
        "ast_nodes": 1239,
        "structure_hash": "13a317c34662d9aedd6ea304957470cc"
      },
      "complexity_score": 42,
      "structure_hash": "13a317c34662d9aedd6ea304957470cc",
      "lines_of_code": 278,
      "created_at": "2025-08-03T10:06:02.869984",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/fix_f_strings.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/fix_f_strings.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import re",
          "import sys",
          "from pathlib import Path"
        ],
        "functions": [
          {
            "name": "fix_f_strings_in_file",
            "parameters": [
              "file_path"
            ],
            "docstring": "Fix f-string issues in a single file",
            "lineno": 11,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Fix f-strings in all Python files",
            "lineno": 34,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "replace_f_string",
            "parameters": [
              "match"
            ],
            "docstring": null,
            "lineno": 19,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "pattern",
          "new_content",
          "directories",
          "content",
          "inner_content"
        ],
        "dependencies": [
          "pathlib",
          "re",
          "sys"
        ],
        "docstrings": [
          "Fix f-string issues by converting them to regular strings",
          "Fix f-string issues in a single file",
          "Fix f-strings in all Python files"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "fix_f_strings_in_file",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_f_strings_in_file",
            "parameter": "file_path",
            "annotation": "Path"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 9,
          "cognitive": 7,
          "nesting": 0,
          "statements": 14
        },
        "nesting_depth": 9,
        "ast_nodes": 185,
        "structure_hash": "789d5fb233fbdb20054a84f27d544d8f"
      },
      "complexity_score": 9,
      "structure_hash": "789d5fb233fbdb20054a84f27d544d8f",
      "lines_of_code": 46,
      "created_at": "2025-08-03T10:06:02.844302",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/checkpointed_ast_modeler.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/checkpointed_ast_modeler.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import json",
          "import os",
          "import shutil",
          "from pathlib import Path",
          "from dataclasses import dataclass",
          "from dataclasses import asdict",
          "from typing import Dict",
          "from typing import Any",
          "from typing import List",
          "from typing import Optional",
          "from datetime import datetime"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Model the project with checkpointing",
            "lineno": 309,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "database_file"
            ],
            "docstring": null,
            "lineno": 30,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "load_database",
            "parameters": [
              "self"
            ],
            "docstring": "Load existing database or create new one",
            "lineno": 66,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "save_database",
            "parameters": [
              "self",
              "checkpoint"
            ],
            "docstring": "Save database with optional checkpointing",
            "lineno": 85,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "cleanup_old_checkpoints",
            "parameters": [
              "self",
              "keep_count"
            ],
            "docstring": "Keep only the most recent checkpoints",
            "lineno": 117,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "list_checkpoints",
            "parameters": [
              "self"
            ],
            "docstring": "List available checkpoints",
            "lineno": 127,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "restore_from_checkpoint",
            "parameters": [
              "self",
              "checkpoint_name"
            ],
            "docstring": "Restore database from checkpoint",
            "lineno": 135,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "should_exclude_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check if file should be excluded",
            "lineno": 159,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "find_python_files",
            "parameters": [
              "self",
              "directory"
            ],
            "docstring": "Find Python files to model, excluding generated/temporary files",
            "lineno": 169,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "model_python_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model a Python file using AST",
            "lineno": 179,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "model_directory",
            "parameters": [
              "self",
              "directory",
              "checkpoint_interval"
            ],
            "docstring": "Model all Python files in directory with checkpointing",
            "lineno": 246,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "incremental_update",
            "parameters": [
              "self",
              "directory"
            ],
            "docstring": "Update only files that have changed",
            "lineno": 278,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ASTModel",
            "bases": [],
            "docstring": "AST model for a Python file",
            "lineno": 14,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "CheckpointedASTModeler",
            "bases": [],
            "docstring": "AST modeler with checkpointing and recovery",
            "lineno": 27,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "load_database",
              "save_database",
              "cleanup_old_checkpoints",
              "list_checkpoints",
              "restore_from_checkpoint",
              "should_exclude_file",
              "find_python_files",
              "model_python_file",
              "model_directory",
              "incremental_update"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "modeler",
          "database",
          "checkpoint_files",
          "checkpoint_files",
          "checkpoint_file",
          "file_path_str",
          "python_files",
          "python_files",
          "python_files",
          "updated_count",
          "files_to_delete",
          "size",
          "tree",
          "functions",
          "classes",
          "imports",
          "lines",
          "complexity",
          "docstrings",
          "import_names",
          "model_data",
          "model",
          "model_type",
          "file_stat",
          "file_mtime",
          "existing_model",
          "model",
          "model_dict",
          "timestamp",
          "checkpoint_file",
          "content",
          "last_model_time",
          "docstring",
          "module"
        ],
        "dependencies": [
          "json",
          "ast",
          "typing",
          "pathlib",
          "dataclasses",
          "datetime",
          "shutil",
          "os"
        ],
        "docstrings": [
          "Checkpointed AST Modeler with logging and recovery",
          "AST model for a Python file",
          "AST modeler with checkpointing and recovery",
          "Model the project with checkpointing",
          "Load existing database or create new one",
          "Save database with optional checkpointing",
          "Keep only the most recent checkpoints",
          "List available checkpoints",
          "Restore database from checkpoint",
          "Check if file should be excluded",
          "Find Python files to model, excluding generated/temporary files",
          "Model a Python file using AST",
          "Model all Python files in directory with checkpointing",
          "Update only files that have changed"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 113
              }
            ],
            "lineno": 87
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 155
              }
            ],
            "lineno": 143
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 237
              }
            ],
            "lineno": 181
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 74
              }
            ],
            "lineno": 69
          }
        ],
        "type_hints": [
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "database_file",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "save_database",
            "parameter": "checkpoint",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "cleanup_old_checkpoints",
            "parameter": "keep_count",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "restore_from_checkpoint",
            "parameter": "checkpoint_name",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "should_exclude_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "should_exclude_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "find_python_files",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "find_python_files",
            "parameter": "directory",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "model_python_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "model_python_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "model_directory",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "model_directory",
            "parameter": "directory",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "model_directory",
            "parameter": "checkpoint_interval",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "incremental_update",
            "parameter": "directory",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 36,
          "cognitive": 31,
          "nesting": 0,
          "statements": 112
        },
        "nesting_depth": 15,
        "ast_nodes": 1729,
        "structure_hash": "976fe3ccdd6bce22d10e8422d8594b7a"
      },
      "complexity_score": 36,
      "structure_hash": "976fe3ccdd6bce22d10e8422d8594b7a",
      "lines_of_code": 328,
      "created_at": "2025-08-03T10:06:02.984925",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/debug_modeler.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/debug_modeler.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from comprehensive_ast_modeler import PythonASTModeler",
          "import ast",
          "import traceback"
        ],
        "functions": [
          {
            "name": "test_modeler",
            "parameters": [],
            "docstring": null,
            "lineno": 7,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "modeler",
          "tree",
          "functions",
          "classes",
          "imports",
          "content",
          "model"
        ],
        "dependencies": [
          "ast",
          "traceback",
          "comprehensive_ast_modeler"
        ],
        "docstrings": [
          "Debug script to test PythonASTModeler"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 40
              }
            ],
            "lineno": 27
          }
        ],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 5,
          "cognitive": 3,
          "nesting": 0,
          "statements": 24
        },
        "nesting_depth": 12,
        "ast_nodes": 320,
        "structure_hash": "1d2012b73e5dfe76bec9317dd86f42b3"
      },
      "complexity_score": 5,
      "structure_hash": "1d2012b73e5dfe76bec9317dd86f42b3",
      "lines_of_code": 46,
      "created_at": "2025-08-03T10:06:03.006634",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/focused_ast_modeler.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/focused_ast_modeler.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import json",
          "import os",
          "from pathlib import Path",
          "from dataclasses import dataclass",
          "from dataclasses import asdict",
          "from typing import Dict",
          "from typing import Any",
          "from typing import List",
          "from typing import Optional"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Model the project with focused approach",
            "lineno": 179,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 28,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "should_exclude_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check if file should be excluded",
            "lineno": 52,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "find_python_files",
            "parameters": [
              "self",
              "directory"
            ],
            "docstring": "Find Python files to model, excluding generated/temporary files",
            "lineno": 62,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "model_python_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model a Python file using AST",
            "lineno": 72,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "model_directory",
            "parameters": [
              "self",
              "directory"
            ],
            "docstring": "Model all Python files in directory",
            "lineno": 145,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "save_database",
            "parameters": [
              "self",
              "filename"
            ],
            "docstring": "Save database to JSON file",
            "lineno": 172,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ASTModel",
            "bases": [],
            "docstring": "AST model for a Python file",
            "lineno": 12,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "FocusedASTModeler",
            "bases": [],
            "docstring": "Focused AST modeler that only models essential Python files",
            "lineno": 25,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "should_exclude_file",
              "find_python_files",
              "model_python_file",
              "model_directory",
              "save_database"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "modeler",
          "database",
          "file_path_str",
          "python_files",
          "python_files",
          "tree",
          "functions",
          "classes",
          "imports",
          "lines",
          "complexity",
          "docstrings",
          "import_names",
          "function_names",
          "class_names",
          "model_data",
          "model",
          "model_type",
          "content",
          "docstring",
          "module"
        ],
        "dependencies": [
          "json",
          "ast",
          "typing",
          "pathlib",
          "dataclasses",
          "os"
        ],
        "docstrings": [
          "Focused AST Modeler - Only model essential Python files",
          "AST model for a Python file",
          "Focused AST modeler that only models essential Python files",
          "Model the project with focused approach",
          "Check if file should be excluded",
          "Find Python files to model, excluding generated/temporary files",
          "Model a Python file using AST",
          "Model all Python files in directory",
          "Save database to JSON file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 136
              }
            ],
            "lineno": 74
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "should_exclude_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "should_exclude_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "find_python_files",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "find_python_files",
            "parameter": "directory",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "model_python_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "model_python_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "model_directory",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "model_directory",
            "parameter": "directory",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "save_database",
            "parameter": "filename",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 19,
          "cognitive": 18,
          "nesting": 0,
          "statements": 55
        },
        "nesting_depth": 15,
        "ast_nodes": 1009,
        "structure_hash": "77a6236d8882dbf71b3d2f06c62c1492"
      },
      "complexity_score": 19,
      "structure_hash": "77a6236d8882dbf71b3d2f06c62c1492",
      "lines_of_code": 195,
      "created_at": "2025-08-03T10:06:03.038883",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/comprehensive_ast_modeler.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/comprehensive_ast_modeler.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import json",
          "import os",
          "import re",
          "import hashlib",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Union",
          "from dataclasses import dataclass",
          "from dataclasses import asdict",
          "from datetime import datetime",
          "import subprocess",
          "from concurrent.futures import ThreadPoolExecutor",
          "from concurrent.futures import as_completed",
          "from threading import Lock",
          "import yaml",
          "import xml.etree.ElementTree",
          "from urllib.parse import urlparse",
          "from threading import Lock",
          "import yaml"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function for testing",
            "lineno": 1649,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "model_python_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model Python file using proper AST parsing",
            "lineno": 60,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_extract_imports",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract all imports from AST (like linters do)",
            "lineno": 115,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_extract_functions",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract function definitions with semantic info",
            "lineno": 133,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_classes",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract class definitions with semantic info",
            "lineno": 153,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_variables",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract variable assignments",
            "lineno": 173,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_extract_dependencies",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract external dependencies from imports",
            "lineno": 185,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_extract_docstrings",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract all docstrings",
            "lineno": 199,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_extract_error_handling",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract error handling patterns",
            "lineno": 215,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_extract_type_hints",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract type hints and annotations",
            "lineno": 235,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "_calculate_complexity_metrics",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Calculate complexity metrics like linters do",
            "lineno": 261,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_calculate_nesting_depth",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Calculate maximum nesting depth",
            "lineno": 300,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "_calculate_node_depth",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Calculate depth of a specific node",
            "lineno": 314,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "_get_decorator_name",
            "parameters": [
              "self",
              "decorator"
            ],
            "docstring": "Extract decorator name",
            "lineno": 323,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_get_base_name",
            "parameters": [
              "self",
              "base"
            ],
            "docstring": "Extract base class name",
            "lineno": 332,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_get_exception_type",
            "parameters": [
              "self",
              "exc_type"
            ],
            "docstring": "Extract exception type name",
            "lineno": 340,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_get_annotation_name",
            "parameters": [
              "self",
              "annotation"
            ],
            "docstring": "Extract type annotation name",
            "lineno": 348,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_extract_return_type",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract return type annotation",
            "lineno": 358,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[str]",
            "has_async": false
          },
          {
            "name": "_get_commit_hash",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Get git commit hash for file",
            "lineno": 364,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_create_basic_model",
            "parameters": [
              "self",
              "file_path",
              "error"
            ],
            "docstring": "Create basic model when AST parsing fails",
            "lineno": 375,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "model_mdc_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Create model for MDC file",
            "lineno": 414,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_parse_mdc_content",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Parse MDC content into frontmatter and markdown",
            "lineno": 450,
            "col_offset": 4,
            "decorators": [],
            "returns": "tuple",
            "has_async": false
          },
          {
            "name": "_analyze_markdown",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Analyze markdown content structure",
            "lineno": 483,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_analyze_yaml_structure",
            "parameters": [
              "self",
              "frontmatter"
            ],
            "docstring": "Analyze YAML frontmatter structure",
            "lineno": 504,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_calculate_yaml_depth",
            "parameters": [
              "self",
              "obj",
              "current_depth"
            ],
            "docstring": "Calculate maximum depth of YAML structure",
            "lineno": 514,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "_calculate_content_metrics",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Calculate content metrics",
            "lineno": 529,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_check_rule_compliance",
            "parameters": [
              "self",
              "frontmatter",
              "markdown_content"
            ],
            "docstring": "Check rule compliance",
            "lineno": 540,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_calculate_mdc_complexity",
            "parameters": [
              "self",
              "model_data"
            ],
            "docstring": "Calculate complexity for MDC file",
            "lineno": 550,
            "col_offset": 4,
            "decorators": [],
            "returns": "float",
            "has_async": false
          },
          {
            "name": "_generate_mdc_structure_hash",
            "parameters": [
              "self",
              "model_data"
            ],
            "docstring": "Generate structure hash for MDC file",
            "lineno": 563,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_get_commit_hash",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Get current commit hash for file",
            "lineno": 572,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[str]",
            "has_async": false
          },
          {
            "name": "_create_mdc_basic_model",
            "parameters": [
              "self",
              "file_path",
              "error"
            ],
            "docstring": "Create basic model for broken MDC files",
            "lineno": 583,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "model_markdown_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Create model for Markdown file",
            "lineno": 614,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_analyze_markdown_content",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Analyze markdown content structure",
            "lineno": 645,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_calculate_content_metrics",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Calculate content metrics",
            "lineno": 670,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_assess_documentation_quality",
            "parameters": [
              "self",
              "content"
            ],
            "docstring": "Assess documentation quality",
            "lineno": 681,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_calculate_markdown_complexity",
            "parameters": [
              "self",
              "model_data"
            ],
            "docstring": "Calculate complexity for Markdown file",
            "lineno": 699,
            "col_offset": 4,
            "decorators": [],
            "returns": "float",
            "has_async": false
          },
          {
            "name": "_generate_markdown_structure_hash",
            "parameters": [
              "self",
              "model_data"
            ],
            "docstring": "Generate structure hash for Markdown file",
            "lineno": 712,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_get_commit_hash",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Get current commit hash for file",
            "lineno": 722,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[str]",
            "has_async": false
          },
          {
            "name": "_create_markdown_basic_model",
            "parameters": [
              "self",
              "file_path",
              "error"
            ],
            "docstring": "Create basic model for broken Markdown files",
            "lineno": 733,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 764,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "model_any_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model ANY file type based on extension and content",
            "lineno": 770,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_json_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model JSON files",
            "lineno": 834,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_yaml_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model YAML files",
            "lineno": 862,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_sql_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model SQL files",
            "lineno": 890,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_html_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model HTML files",
            "lineno": 924,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_css_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model CSS files",
            "lineno": 962,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_javascript_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model JavaScript/TypeScript files",
            "lineno": 999,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_terraform_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model Terraform files",
            "lineno": 1040,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_dockerfile",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model Dockerfile",
            "lineno": 1077,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_unknown_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model unknown file types based on content analysis",
            "lineno": 1114,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_text_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model text files",
            "lineno": 1149,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_toml_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model TOML files",
            "lineno": 1181,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_shell_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model shell script files",
            "lineno": 1217,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_xml_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model XML files",
            "lineno": 1254,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_kubernetes_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model Kubernetes YAML files",
            "lineno": 1290,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_cloudformation_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model CloudFormation YAML files",
            "lineno": 1294,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_ini_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model INI files",
            "lineno": 1298,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_env_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model environment files",
            "lineno": 1334,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_model_rst_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model RST files",
            "lineno": 1368,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "_detect_file_type",
            "parameters": [
              "self",
              "content",
              "file_path"
            ],
            "docstring": "Detect file type based on content and path",
            "lineno": 1372,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_extract_json_keys",
            "parameters": [
              "self",
              "data",
              "prefix"
            ],
            "docstring": "Extract all keys from JSON data",
            "lineno": 1403,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_extract_yaml_keys",
            "parameters": [
              "self",
              "data",
              "prefix"
            ],
            "docstring": "Extract all keys from YAML data",
            "lineno": 1415,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "_calculate_json_depth",
            "parameters": [
              "self",
              "data",
              "current_depth"
            ],
            "docstring": "Calculate nesting depth of JSON data",
            "lineno": 1419,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "_calculate_yaml_depth",
            "parameters": [
              "self",
              "data",
              "current_depth"
            ],
            "docstring": "Calculate nesting depth of YAML data",
            "lineno": 1427,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "_create_error_model",
            "parameters": [
              "self",
              "file_path",
              "file_type",
              "error"
            ],
            "docstring": "Create error model for failed parsing",
            "lineno": 1431,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "database_path"
            ],
            "docstring": null,
            "lineno": 1455,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "_load_database",
            "parameters": [
              "self"
            ],
            "docstring": "Load existing database",
            "lineno": 1467,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_save_database",
            "parameters": [
              "self"
            ],
            "docstring": "Save database with frequent commits and thread safety",
            "lineno": 1487,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "_log_operation",
            "parameters": [
              "self",
              "message"
            ],
            "docstring": "Thread-safe logging",
            "lineno": 1499,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "_safe_model_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Thread-safe file modeling with proper error handling",
            "lineno": 1505,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[ASTModel]",
            "has_async": false
          },
          {
            "name": "_commit_changes",
            "parameters": [
              "self"
            ],
            "docstring": "Commit changes to git",
            "lineno": 1515,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "model_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Model ANY file using universal modeler",
            "lineno": 1523,
            "col_offset": 4,
            "decorators": [],
            "returns": "ASTModel",
            "has_async": false
          },
          {
            "name": "model_directory",
            "parameters": [
              "self",
              "directory_path",
              "file_patterns",
              "exclude_patterns"
            ],
            "docstring": "Model ALL files in a directory with universal support",
            "lineno": 1535,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[ASTModel]",
            "has_async": false
          },
          {
            "name": "get_file_model",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Get existing model for a file",
            "lineno": 1586,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[ASTModel]",
            "has_async": false
          },
          {
            "name": "get_similar_files",
            "parameters": [
              "self",
              "structure_hash"
            ],
            "docstring": "Find files with similar structure",
            "lineno": 1594,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "get_evolution_patterns",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Get evolution patterns for a file",
            "lineno": 1602,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[EvolutionPattern]",
            "has_async": false
          },
          {
            "name": "analyze_project",
            "parameters": [
              "self",
              "project_path"
            ],
            "docstring": "Analyze entire project",
            "lineno": 1610,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "visit_node",
            "parameters": [
              "node",
              "depth"
            ],
            "docstring": null,
            "lineno": 304,
            "col_offset": 8,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "model_single_file",
            "parameters": [
              "file_path"
            ],
            "docstring": null,
            "lineno": 1567,
            "col_offset": 8,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ASTModel",
            "bases": [],
            "docstring": "AST model for any file type",
            "lineno": 22,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "EvolutionPattern",
            "bases": [],
            "docstring": "Evolution pattern across commits",
            "lineno": 36,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "ConsistencyCheck",
            "bases": [],
            "docstring": "Model consistency check result",
            "lineno": 46,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "PythonASTModeler",
            "bases": [],
            "docstring": "Proper Python AST modeler using correct AST parsing techniques",
            "lineno": 57,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "model_python_file",
              "_extract_imports",
              "_extract_functions",
              "_extract_classes",
              "_extract_variables",
              "_extract_dependencies",
              "_extract_docstrings",
              "_extract_error_handling",
              "_extract_type_hints",
              "_calculate_complexity_metrics",
              "_calculate_nesting_depth",
              "_calculate_node_depth",
              "_get_decorator_name",
              "_get_base_name",
              "_get_exception_type",
              "_get_annotation_name",
              "_extract_return_type",
              "_get_commit_hash",
              "_create_basic_model"
            ],
            "attributes": []
          },
          {
            "name": "MDCModeler",
            "bases": [],
            "docstring": "Modeler for MDC files (Markdown with YAML frontmatter)",
            "lineno": 411,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "model_mdc_file",
              "_parse_mdc_content",
              "_analyze_markdown",
              "_analyze_yaml_structure",
              "_calculate_yaml_depth",
              "_calculate_content_metrics",
              "_check_rule_compliance",
              "_calculate_mdc_complexity",
              "_generate_mdc_structure_hash",
              "_get_commit_hash",
              "_create_mdc_basic_model"
            ],
            "attributes": []
          },
          {
            "name": "MarkdownModeler",
            "bases": [],
            "docstring": "Modeler for regular Markdown files",
            "lineno": 611,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "model_markdown_file",
              "_analyze_markdown_content",
              "_calculate_content_metrics",
              "_assess_documentation_quality",
              "_calculate_markdown_complexity",
              "_generate_markdown_structure_hash",
              "_get_commit_hash",
              "_create_markdown_basic_model"
            ],
            "attributes": []
          },
          {
            "name": "UniversalArtifactModeler",
            "bases": [],
            "docstring": "Universal artifact modeler for ALL file types",
            "lineno": 761,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "model_any_file",
              "_model_json_file",
              "_model_yaml_file",
              "_model_sql_file",
              "_model_html_file",
              "_model_css_file",
              "_model_javascript_file",
              "_model_terraform_file",
              "_model_dockerfile",
              "_model_unknown_file",
              "_model_text_file",
              "_model_toml_file",
              "_model_shell_file",
              "_model_xml_file",
              "_model_kubernetes_file",
              "_model_cloudformation_file",
              "_model_ini_file",
              "_model_env_file",
              "_model_rst_file",
              "_detect_file_type",
              "_extract_json_keys",
              "_extract_yaml_keys",
              "_calculate_json_depth",
              "_calculate_yaml_depth",
              "_create_error_model"
            ],
            "attributes": []
          },
          {
            "name": "ComprehensiveASTModeler",
            "bases": [],
            "docstring": "Comprehensive AST modeler for ALL file types",
            "lineno": 1452,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "_load_database",
              "_save_database",
              "_log_operation",
              "_safe_model_file",
              "_commit_changes",
              "model_file",
              "model_directory",
              "get_file_model",
              "get_similar_files",
              "get_evolution_patterns",
              "analyze_project"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "modeler",
          "analysis",
          "imports",
          "functions",
          "classes",
          "variables",
          "dependencies",
          "docstrings",
          "error_handling",
          "type_hints",
          "cyclomatic",
          "cognitive",
          "nesting",
          "statements",
          "max_depth",
          "depth",
          "current",
          "lines",
          "end_index",
          "frontmatter_lines",
          "markdown_lines",
          "frontmatter_text",
          "markdown_content",
          "lines",
          "headers",
          "code_blocks",
          "lists",
          "links",
          "emphasis",
          "lines",
          "markdown_analysis",
          "yaml_structure",
          "complexity",
          "structure_elements",
          "model_data",
          "lines",
          "headers",
          "code_blocks",
          "lists",
          "links",
          "emphasis",
          "tables",
          "images",
          "lines",
          "lines",
          "has_toc",
          "has_examples",
          "has_links",
          "has_headers",
          "markdown_analysis",
          "doc_quality",
          "complexity",
          "structure_elements",
          "model_data",
          "file_path",
          "path_lower",
          "content_lower",
          "keys",
          "model_data",
          "file_path",
          "model",
          "models",
          "directory",
          "files_to_model",
          "lock",
          "results",
          "file_path",
          "similar_files",
          "file_path",
          "models",
          "total_files",
          "total_lines",
          "avg_complexity",
          "file_types",
          "analysis",
          "tree",
          "imports",
          "functions",
          "classes",
          "variables",
          "dependencies",
          "docstrings",
          "error_handling",
          "type_hints",
          "complexity_metrics",
          "nesting_depth",
          "structure_hash",
          "max_depth",
          "current",
          "result",
          "model_data",
          "complexity_score",
          "structure_hash",
          "frontmatter",
          "result",
          "model_data",
          "complexity_score",
          "structure_hash",
          "result",
          "model_data",
          "model_data",
          "statements",
          "tables",
          "views",
          "functions",
          "model_data",
          "tags",
          "scripts",
          "styles",
          "rules",
          "selectors",
          "properties",
          "functions",
          "classes",
          "imports",
          "resources",
          "data_sources",
          "variables",
          "instructions",
          "from_images",
          "copy_instructions",
          "file_type",
          "sections",
          "keys",
          "functions",
          "variables",
          "commands",
          "tags",
          "attributes",
          "sections",
          "keys",
          "variables",
          "timestamp",
          "model",
          "file_patterns",
          "exclude_patterns",
          "future_to_file",
          "data",
          "data",
          "file_type",
          "count",
          "content",
          "func_info",
          "class_info",
          "handlers",
          "nesting",
          "content",
          "content",
          "end_index",
          "frontmatter",
          "content",
          "content",
          "content",
          "content",
          "content",
          "data",
          "data",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "result",
          "module",
          "docstring"
        ],
        "dependencies": [
          "subprocess",
          "hashlib",
          "urllib",
          "concurrent",
          "yaml",
          "ast",
          "xml",
          "threading",
          "typing",
          "pathlib",
          "json",
          "dataclasses",
          "datetime",
          "re",
          "os"
        ],
        "docstrings": [
          "Comprehensive AST Modeler for ALL artifact types - Python, MDC, Markdown, SQL, YAML, JSON, XML, HTML, CSS, JS, Docker, K8s, CloudFormation, etc.",
          "AST model for any file type",
          "Evolution pattern across commits",
          "Model consistency check result",
          "Proper Python AST modeler using correct AST parsing techniques",
          "Modeler for MDC files (Markdown with YAML frontmatter)",
          "Modeler for regular Markdown files",
          "Universal artifact modeler for ALL file types",
          "Comprehensive AST modeler for ALL file types",
          "Main function for testing",
          "Model Python file using proper AST parsing",
          "Extract all imports from AST (like linters do)",
          "Extract function definitions with semantic info",
          "Extract class definitions with semantic info",
          "Extract variable assignments",
          "Extract external dependencies from imports",
          "Extract all docstrings",
          "Extract error handling patterns",
          "Extract type hints and annotations",
          "Calculate complexity metrics like linters do",
          "Calculate maximum nesting depth",
          "Calculate depth of a specific node",
          "Extract decorator name",
          "Extract base class name",
          "Extract exception type name",
          "Extract type annotation name",
          "Extract return type annotation",
          "Get git commit hash for file",
          "Create basic model when AST parsing fails",
          "Create model for MDC file",
          "Parse MDC content into frontmatter and markdown",
          "Analyze markdown content structure",
          "Analyze YAML frontmatter structure",
          "Calculate maximum depth of YAML structure",
          "Calculate content metrics",
          "Check rule compliance",
          "Calculate complexity for MDC file",
          "Generate structure hash for MDC file",
          "Get current commit hash for file",
          "Create basic model for broken MDC files",
          "Create model for Markdown file",
          "Analyze markdown content structure",
          "Calculate content metrics",
          "Assess documentation quality",
          "Calculate complexity for Markdown file",
          "Generate structure hash for Markdown file",
          "Get current commit hash for file",
          "Create basic model for broken Markdown files",
          "Model ANY file type based on extension and content",
          "Model JSON files",
          "Model YAML files",
          "Model SQL files",
          "Model HTML files",
          "Model CSS files",
          "Model JavaScript/TypeScript files",
          "Model Terraform files",
          "Model Dockerfile",
          "Model unknown file types based on content analysis",
          "Model text files",
          "Model TOML files",
          "Model shell script files",
          "Model XML files",
          "Model Kubernetes YAML files",
          "Model CloudFormation YAML files",
          "Model INI files",
          "Model environment files",
          "Model RST files",
          "Detect file type based on content and path",
          "Extract all keys from JSON data",
          "Extract all keys from YAML data",
          "Calculate nesting depth of JSON data",
          "Calculate nesting depth of YAML data",
          "Create error model for failed parsing",
          "Load existing database",
          "Save database with frequent commits and thread safety",
          "Thread-safe logging",
          "Thread-safe file modeling with proper error handling",
          "Commit changes to git",
          "Model ANY file using universal modeler",
          "Model ALL files in a directory with universal support",
          "Get existing model for a file",
          "Find files with similar structure",
          "Get evolution patterns for a file",
          "Analyze entire project"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 111
              }
            ],
            "lineno": 62
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 372
              }
            ],
            "lineno": 366
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 397
              }
            ],
            "lineno": 377
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 447
              }
            ],
            "lineno": 416
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 478
              }
            ],
            "lineno": 475
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 580
              }
            ],
            "lineno": 574
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 588
              }
            ],
            "lineno": 585
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 642
              }
            ],
            "lineno": 616
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 730
              }
            ],
            "lineno": 724
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 738
              }
            ],
            "lineno": 735
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 859
              }
            ],
            "lineno": 836
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 887
              }
            ],
            "lineno": 864
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 921
              }
            ],
            "lineno": 892
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 959
              }
            ],
            "lineno": 926
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 996
              }
            ],
            "lineno": 964
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1037
              }
            ],
            "lineno": 1001
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1074
              }
            ],
            "lineno": 1042
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1111
              }
            ],
            "lineno": 1079
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1146
              }
            ],
            "lineno": 1116
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1178
              }
            ],
            "lineno": 1151
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1214
              }
            ],
            "lineno": 1183
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1251
              }
            ],
            "lineno": 1219
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1287
              }
            ],
            "lineno": 1256
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1331
              }
            ],
            "lineno": 1300
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1365
              }
            ],
            "lineno": 1336
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1511
              }
            ],
            "lineno": 1507
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "subprocess.CalledProcessError",
                "lineno": 1520
              }
            ],
            "lineno": 1517
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 1473
              }
            ],
            "lineno": 1470
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 210
              }
            ],
            "lineno": 206
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "model_python_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "model_python_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_extract_imports",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_imports",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_functions",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_functions",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_classes",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_classes",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_variables",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_variables",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_dependencies",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_dependencies",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_docstrings",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_docstrings",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_error_handling",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_error_handling",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_extract_type_hints",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_type_hints",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_complexity_metrics",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_complexity_metrics",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_nesting_depth",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_nesting_depth",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_node_depth",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_node_depth",
            "parameter": "node",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "_get_decorator_name",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_get_decorator_name",
            "parameter": "decorator",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_get_base_name",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_get_base_name",
            "parameter": "base",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_get_exception_type",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_get_exception_type",
            "parameter": "exc_type",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_get_annotation_name",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_get_annotation_name",
            "parameter": "annotation",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "_extract_return_type",
            "annotation": "Optional[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_return_type",
            "parameter": "node",
            "annotation": "ast.FunctionDef"
          },
          {
            "type": "return_annotation",
            "function": "_get_commit_hash",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_get_commit_hash",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_create_basic_model",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_create_basic_model",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_create_basic_model",
            "parameter": "error",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "model_mdc_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "model_mdc_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_parse_mdc_content",
            "annotation": "tuple"
          },
          {
            "type": "parameter_annotation",
            "function": "_parse_mdc_content",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_markdown",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_markdown",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_yaml_structure",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_yaml_structure",
            "parameter": "frontmatter",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_yaml_depth",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_yaml_depth",
            "parameter": "obj",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_yaml_depth",
            "parameter": "current_depth",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_content_metrics",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_content_metrics",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_check_rule_compliance",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_check_rule_compliance",
            "parameter": "frontmatter",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_check_rule_compliance",
            "parameter": "markdown_content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_mdc_complexity",
            "annotation": "float"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_mdc_complexity",
            "parameter": "model_data",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_generate_mdc_structure_hash",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_generate_mdc_structure_hash",
            "parameter": "model_data",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_get_commit_hash",
            "annotation": "Optional[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_get_commit_hash",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_create_mdc_basic_model",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_create_mdc_basic_model",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_create_mdc_basic_model",
            "parameter": "error",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "model_markdown_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "model_markdown_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_analyze_markdown_content",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_analyze_markdown_content",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_content_metrics",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_content_metrics",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_assess_documentation_quality",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_assess_documentation_quality",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_markdown_complexity",
            "annotation": "float"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_markdown_complexity",
            "parameter": "model_data",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_generate_markdown_structure_hash",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_generate_markdown_structure_hash",
            "parameter": "model_data",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_get_commit_hash",
            "annotation": "Optional[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_get_commit_hash",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_create_markdown_basic_model",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_create_markdown_basic_model",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_create_markdown_basic_model",
            "parameter": "error",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "model_any_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "model_any_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_json_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_json_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_yaml_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_yaml_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_sql_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_sql_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_html_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_html_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_css_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_css_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_javascript_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_javascript_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_terraform_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_terraform_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_dockerfile",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_dockerfile",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_unknown_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_unknown_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_text_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_text_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_toml_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_toml_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_shell_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_shell_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_xml_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_xml_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_kubernetes_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_kubernetes_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_cloudformation_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_cloudformation_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_ini_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_ini_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_env_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_env_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_model_rst_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_model_rst_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_detect_file_type",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_detect_file_type",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_detect_file_type",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_extract_json_keys",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_json_keys",
            "parameter": "data",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_json_keys",
            "parameter": "prefix",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_extract_yaml_keys",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_yaml_keys",
            "parameter": "data",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "_extract_yaml_keys",
            "parameter": "prefix",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_json_depth",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_json_depth",
            "parameter": "data",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_json_depth",
            "parameter": "current_depth",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_yaml_depth",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_yaml_depth",
            "parameter": "data",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_yaml_depth",
            "parameter": "current_depth",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "_create_error_model",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "_create_error_model",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_create_error_model",
            "parameter": "file_type",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_create_error_model",
            "parameter": "error",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "database_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_load_database",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_log_operation",
            "parameter": "message",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_safe_model_file",
            "annotation": "Optional[ASTModel]"
          },
          {
            "type": "parameter_annotation",
            "function": "_safe_model_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "model_file",
            "annotation": "ASTModel"
          },
          {
            "type": "parameter_annotation",
            "function": "model_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "model_directory",
            "annotation": "List[ASTModel]"
          },
          {
            "type": "parameter_annotation",
            "function": "model_directory",
            "parameter": "directory_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "model_directory",
            "parameter": "file_patterns",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "model_directory",
            "parameter": "exclude_patterns",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "get_file_model",
            "annotation": "Optional[ASTModel]"
          },
          {
            "type": "parameter_annotation",
            "function": "get_file_model",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "get_similar_files",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "get_similar_files",
            "parameter": "structure_hash",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "get_evolution_patterns",
            "annotation": "Optional[EvolutionPattern]"
          },
          {
            "type": "parameter_annotation",
            "function": "get_evolution_patterns",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "analyze_project",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_project",
            "parameter": "project_path",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 167,
          "cognitive": 159,
          "nesting": 0,
          "statements": 462
        },
        "nesting_depth": 27,
        "ast_nodes": 9131,
        "structure_hash": "315606bf7b3f75bf85c6aa17ad3d53a1"
      },
      "complexity_score": 167,
      "structure_hash": "315606bf7b3f75bf85c6aa17ad3d53a1",
      "lines_of_code": 1672,
      "created_at": "2025-08-03T10:06:03.077912",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/ghostbusters_validation.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ghostbusters_validation.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import subprocess",
          "import sys",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional"
        ],
        "functions": [
          {
            "name": "load_model_registry",
            "parameters": [],
            "docstring": "Load the project model registry",
            "lineno": 186,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "assemble_ghostbusters_team",
            "parameters": [],
            "docstring": "Assemble all available ghostbusters",
            "lineno": 199,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "call_more_ghostbusters",
            "parameters": [
              "model_registry"
            ],
            "docstring": "Call all ghostbusters for validation",
            "lineno": 211,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "generate_delusion_report",
            "parameters": [
              "validation_results"
            ],
            "docstring": "Generate comprehensive delusion detection report",
            "lineno": 231,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "print_ghostbusters_report",
            "parameters": [
              "report"
            ],
            "docstring": "Print the ghostbusters report",
            "lineno": 259,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main ghostbusters validation",
            "lineno": 295,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 17,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate security practices",
            "lineno": 21,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 42,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate model-driven approach",
            "lineno": 46,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 82,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate code quality practices",
            "lineno": 86,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 107,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate testing practices",
            "lineno": 111,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 140,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate architecture",
            "lineno": 144,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 164,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate",
            "parameters": [
              "self",
              "model_registry"
            ],
            "docstring": "Validate heuristic vs deterministic balance",
            "lineno": 168,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "SecurityExpert",
            "bases": [],
            "docstring": "Security Expert Ghostbuster",
            "lineno": 14,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "ModelExpert",
            "bases": [],
            "docstring": "Model Expert Ghostbuster",
            "lineno": 39,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "CodeQualityExpert",
            "bases": [],
            "docstring": "Code Quality Expert Ghostbuster",
            "lineno": 79,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "TestExpert",
            "bases": [],
            "docstring": "Test Expert Ghostbuster",
            "lineno": 104,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "ArchitectureExpert",
            "bases": [],
            "docstring": "Architecture Expert Ghostbuster",
            "lineno": 137,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          },
          {
            "name": "HeuristicExpert",
            "bases": [],
            "docstring": "Heuristic Expert Ghostbuster",
            "lineno": 161,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "team",
          "results",
          "passed_validations",
          "failed_validations",
          "delusions_detected",
          "report",
          "summary",
          "model_registry",
          "validation_results",
          "delusion_report",
          "security_domain",
          "delusions",
          "missing_updates",
          "python_domain",
          "test_domains",
          "test_coverage",
          "file_organization",
          "tool_selection_logic",
          "expert_name",
          "findings",
          "status",
          "domain_config"
        ],
        "dependencies": [
          "json",
          "typing",
          "sys",
          "pathlib",
          "subprocess"
        ],
        "docstrings": [
          "Ghostbusters Validation Script\nMulti-agent validation with deterministic tools",
          "Security Expert Ghostbuster",
          "Model Expert Ghostbuster",
          "Code Quality Expert Ghostbuster",
          "Test Expert Ghostbuster",
          "Architecture Expert Ghostbuster",
          "Heuristic Expert Ghostbuster",
          "Load the project model registry",
          "Assemble all available ghostbusters",
          "Call all ghostbusters for validation",
          "Generate comprehensive delusion detection report",
          "Print the ghostbusters report",
          "Main ghostbusters validation",
          "Validate security practices",
          "Validate model-driven approach",
          "Validate code quality practices",
          "Validate testing practices",
          "Validate architecture",
          "Validate heuristic vs deterministic balance"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 191
              },
              {
                "type": "json.JSONDecodeError",
                "lineno": 194
              }
            ],
            "lineno": 188
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "load_model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "assemble_ghostbusters_team",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "call_more_ghostbusters",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "call_more_ghostbusters",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "generate_delusion_report",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_delusion_report",
            "parameter": "validation_results",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "print_ghostbusters_report",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "print_ghostbusters_report",
            "parameter": "report",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate",
            "parameter": "model_registry",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 20,
          "cognitive": 18,
          "nesting": 0,
          "statements": 98
        },
        "nesting_depth": 12,
        "ast_nodes": 1419,
        "structure_hash": "d8eed63651524b612f2319e2526e24ca"
      },
      "complexity_score": 20,
      "structure_hash": "d8eed63651524b612f2319e2526e24ca",
      "lines_of_code": 322,
      "created_at": "2025-08-03T10:06:03.136516",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/model_driven_reconstructor.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/model_driven_reconstructor.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import ast",
          "import yaml",
          "import re",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Tuple",
          "from dataclasses import asdict",
          "import hashlib",
          "import difflib"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test model-driven reconstruction",
            "lineno": 392,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "models_database"
            ],
            "docstring": null,
            "lineno": 17,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "_load_models",
            "parameters": [
              "self"
            ],
            "docstring": "Load the models database",
            "lineno": 21,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "reconstruct_from_model",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Reconstruct artifact from model only - no peeking at original",
            "lineno": 29,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_reconstruct_python",
            "parameters": [
              "self",
              "model"
            ],
            "docstring": "Reconstruct Python file from model",
            "lineno": 57,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_reconstruct_mdc",
            "parameters": [
              "self",
              "model"
            ],
            "docstring": "Reconstruct MDC file from model",
            "lineno": 119,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_reconstruct_markdown",
            "parameters": [
              "self",
              "model"
            ],
            "docstring": "Reconstruct Markdown file from model",
            "lineno": 146,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_reconstruct_json",
            "parameters": [
              "self",
              "model"
            ],
            "docstring": "Reconstruct JSON file from model",
            "lineno": 172,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_reconstruct_yaml",
            "parameters": [
              "self",
              "model"
            ],
            "docstring": "Reconstruct YAML file from model",
            "lineno": 188,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_reconstruct_sql",
            "parameters": [
              "self",
              "model"
            ],
            "docstring": "Reconstruct SQL file from model",
            "lineno": 204,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_reconstruct_html",
            "parameters": [
              "self",
              "model"
            ],
            "docstring": "Reconstruct HTML file from model",
            "lineno": 221,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_reconstruct_shell",
            "parameters": [
              "self",
              "model"
            ],
            "docstring": "Reconstruct Shell script from model",
            "lineno": 236,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "_reconstruct_generic",
            "parameters": [
              "self",
              "model"
            ],
            "docstring": "Reconstruct generic file from model",
            "lineno": 256,
            "col_offset": 4,
            "decorators": [],
            "returns": "Tuple[unknown]",
            "has_async": false
          },
          {
            "name": "test_semantic_equivalence",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Test semantic equivalence between reconstructed and original",
            "lineno": 264,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_calculate_similarity",
            "parameters": [
              "self",
              "original",
              "reconstructed"
            ],
            "docstring": "Calculate similarity between original and reconstructed content",
            "lineno": 299,
            "col_offset": 4,
            "decorators": [],
            "returns": "float",
            "has_async": false
          },
          {
            "name": "_compare_structure",
            "parameters": [
              "self",
              "original",
              "reconstructed"
            ],
            "docstring": "Compare structural elements",
            "lineno": 305,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_heuristic_analysis",
            "parameters": [
              "self",
              "original",
              "reconstructed",
              "file_path"
            ],
            "docstring": "Heuristic LLM analysis of semantic equivalence",
            "lineno": 316,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "batch_test_equivalence",
            "parameters": [
              "self",
              "file_patterns"
            ],
            "docstring": "Test semantic equivalence for multiple files",
            "lineno": 367,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ModelDrivenReconstructor",
            "bases": [],
            "docstring": "Reconstruct artifacts from model data only - no peeking at originals",
            "lineno": 14,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "_load_models",
              "reconstruct_from_model",
              "_reconstruct_python",
              "_reconstruct_mdc",
              "_reconstruct_markdown",
              "_reconstruct_json",
              "_reconstruct_yaml",
              "_reconstruct_sql",
              "_reconstruct_html",
              "_reconstruct_shell",
              "_reconstruct_generic",
              "test_semantic_equivalence",
              "_calculate_similarity",
              "_compare_structure",
              "_heuristic_analysis",
              "batch_test_equivalence"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "reconstructor",
          "test_files",
          "batch_result",
          "model",
          "file_type",
          "lines",
          "model_data",
          "docstrings",
          "imports",
          "classes",
          "functions",
          "variables",
          "content",
          "metadata",
          "lines",
          "content",
          "metadata",
          "lines",
          "content",
          "metadata",
          "metadata",
          "metadata",
          "lines",
          "content",
          "metadata",
          "metadata",
          "lines",
          "content",
          "metadata",
          "content",
          "metadata",
          "matcher",
          "file_type",
          "analysis",
          "results",
          "successful_reconstructions",
          "total_tested",
          "params",
          "param_str",
          "frontmatter",
          "content",
          "level",
          "text",
          "content",
          "content",
          "content",
          "content",
          "content",
          "content",
          "similarity_score",
          "structural_match",
          "heuristic_analysis",
          "file_patterns",
          "result",
          "original_content",
          "result",
          "struct"
        ],
        "dependencies": [
          "hashlib",
          "json",
          "yaml",
          "ast",
          "typing",
          "pathlib",
          "dataclasses",
          "difflib",
          "re"
        ],
        "docstrings": [
          "Model-Driven Artifact Reconstructor - Rebuild artifacts from models only",
          "Reconstruct artifacts from model data only - no peeking at originals",
          "Test model-driven reconstruction",
          "Load the models database",
          "Reconstruct artifact from model only - no peeking at original",
          "Reconstruct Python file from model",
          "Reconstruct MDC file from model",
          "Reconstruct Markdown file from model",
          "Reconstruct JSON file from model",
          "Reconstruct YAML file from model",
          "Reconstruct SQL file from model",
          "Reconstruct HTML file from model",
          "Reconstruct Shell script from model",
          "Reconstruct generic file from model",
          "Test semantic equivalence between reconstructed and original",
          "Calculate similarity between original and reconstructed content",
          "Compare structural elements",
          "Heuristic LLM analysis of semantic equivalence",
          "Test semantic equivalence for multiple files"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 26
              }
            ],
            "lineno": 23
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 292
              }
            ],
            "lineno": 266
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 335
              }
            ],
            "lineno": 329
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 346
              }
            ],
            "lineno": 341
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 357
              }
            ],
            "lineno": 352
          }
        ],
        "type_hints": [
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "models_database",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_load_models",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "reconstruct_from_model",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "reconstruct_from_model",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_reconstruct_python",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_reconstruct_python",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_reconstruct_mdc",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_reconstruct_mdc",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_reconstruct_markdown",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_reconstruct_markdown",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_reconstruct_json",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_reconstruct_json",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_reconstruct_yaml",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_reconstruct_yaml",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_reconstruct_sql",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_reconstruct_sql",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_reconstruct_html",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_reconstruct_html",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_reconstruct_shell",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_reconstruct_shell",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_reconstruct_generic",
            "annotation": "Tuple[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_reconstruct_generic",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "test_semantic_equivalence",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "test_semantic_equivalence",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_calculate_similarity",
            "annotation": "float"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_similarity",
            "parameter": "original",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_calculate_similarity",
            "parameter": "reconstructed",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_compare_structure",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_compare_structure",
            "parameter": "original",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_compare_structure",
            "parameter": "reconstructed",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_heuristic_analysis",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "_heuristic_analysis",
            "parameter": "original",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_heuristic_analysis",
            "parameter": "reconstructed",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "_heuristic_analysis",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "batch_test_equivalence",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "batch_test_equivalence",
            "parameter": "file_patterns",
            "annotation": "List[str]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 47,
          "cognitive": 44,
          "nesting": 0,
          "statements": 169
        },
        "nesting_depth": 15,
        "ast_nodes": 2504,
        "structure_hash": "7d07d947622b11d3d8a3269e1477458a"
      },
      "complexity_score": 47,
      "structure_hash": "7d07d947622b11d3d8a3269e1477458a",
      "lines_of_code": 428,
      "created_at": "2025-08-03T10:06:03.143371",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/update_model_registry.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/update_model_registry.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import sys",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "load_model_registry",
            "parameters": [],
            "docstring": "Load the project model registry",
            "lineno": 11,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "update_security_domain",
            "parameters": [
              "model"
            ],
            "docstring": "Update security domain with missing requirements",
            "lineno": 24,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "update_type_safety_domain",
            "parameters": [
              "model"
            ],
            "docstring": "Update type safety domain with improved requirements",
            "lineno": 40,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "add_testing_domain",
            "parameters": [
              "model"
            ],
            "docstring": "Add comprehensive testing domain",
            "lineno": 59,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "add_code_quality_model_domain",
            "parameters": [
              "model"
            ],
            "docstring": "Add code quality model domain",
            "lineno": 95,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "update_requirements_traceability",
            "parameters": [
              "model"
            ],
            "docstring": "Update requirements traceability with missing requirements",
            "lineno": 126,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "save_model_registry",
            "parameters": [
              "model"
            ],
            "docstring": "Save the updated model registry",
            "lineno": 171,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Update model registry with ghostbusters findings",
            "lineno": 182,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "security_domain",
          "csrf_requirement",
          "type_safety_domain",
          "updated_requirements",
          "new_requirements",
          "model"
        ],
        "dependencies": [
          "sys",
          "typing",
          "json"
        ],
        "docstrings": [
          "Update Model Registry with Ghostbusters Findings",
          "Load the project model registry",
          "Update security domain with missing requirements",
          "Update type safety domain with improved requirements",
          "Add comprehensive testing domain",
          "Add code quality model domain",
          "Update requirements traceability with missing requirements",
          "Save the updated model registry",
          "Update model registry with ghostbusters findings"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 16
              },
              {
                "type": "json.JSONDecodeError",
                "lineno": 19
              }
            ],
            "lineno": 13
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 177
              }
            ],
            "lineno": 173
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "load_model_registry",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "update_security_domain",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "update_security_domain",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "update_type_safety_domain",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "update_type_safety_domain",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "add_testing_domain",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "add_testing_domain",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "add_code_quality_model_domain",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "add_code_quality_model_domain",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "update_requirements_traceability",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "update_requirements_traceability",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "save_model_registry",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "save_model_registry",
            "parameter": "model",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 13,
          "cognitive": 10,
          "nesting": 0,
          "statements": 51
        },
        "nesting_depth": 9,
        "ast_nodes": 654,
        "structure_hash": "f0fc60eba8dfa9ee5ca94be35fe56b2e"
      },
      "complexity_score": 13,
      "structure_hash": "f0fc60eba8dfa9ee5ca94be35fe56b2e",
      "lines_of_code": 214,
      "created_at": "2025-08-03T10:06:03.169249",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/fix_test_indentation.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/fix_test_indentation.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import re",
          "from pathlib import Path"
        ],
        "functions": [
          {
            "name": "fix_test_file_indentation",
            "parameters": [
              "file_path"
            ],
            "docstring": "Fix indentation issues in test files",
            "lineno": 8,
            "col_offset": 0,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Fix the test file",
            "lineno": 86,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "lines",
          "fixed_lines",
          "current_indent",
          "test_file",
          "fixed_content",
          "content",
          "stripped",
          "original_content",
          "current_indent",
          "current_indent",
          "current_indent"
        ],
        "dependencies": [
          "ast",
          "re",
          "pathlib"
        ],
        "docstrings": [
          "Fix indentation issues in test files using AST-based approach",
          "Fix indentation issues in test files",
          "Fix the test file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 109
              }
            ],
            "lineno": 106
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "fix_test_file_indentation",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_test_file_indentation",
            "parameter": "file_path",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 19,
          "cognitive": 23,
          "nesting": 0,
          "statements": 34
        },
        "nesting_depth": 11,
        "ast_nodes": 515,
        "structure_hash": "93aef40bd761934ea89dde2d16a547be"
      },
      "complexity_score": 19,
      "structure_hash": "93aef40bd761934ea89dde2d16a547be",
      "lines_of_code": 113,
      "created_at": "2025-08-03T10:06:03.159763",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/project_model.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/project_model.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import os",
          "import re",
          "import json",
          "import subprocess",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Optional",
          "from typing import Tuple",
          "from dataclasses import dataclass",
          "from dataclasses import asdict",
          "from dataclasses import field"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test the model-driven tool orchestration",
            "lineno": 277,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "project_root"
            ],
            "docstring": null,
            "lineno": 43,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "_initialize_domains",
            "parameters": [
              "self"
            ],
            "docstring": "Initialize domain configurations",
            "lineno": 48,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_file",
            "parameters": [
              "self",
              "filepath"
            ],
            "docstring": "Analyze a file to determine its domain and tooling needs",
            "lineno": 136,
            "col_offset": 4,
            "decorators": [],
            "returns": "FileAnalysis",
            "has_async": false
          },
          {
            "name": "validate_file",
            "parameters": [
              "self",
              "filepath"
            ],
            "docstring": "Validate a file using the appropriate tools",
            "lineno": 199,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict",
            "has_async": false
          },
          {
            "name": "validate_project",
            "parameters": [
              "self"
            ],
            "docstring": "Validate entire project using model-driven tool selection",
            "lineno": 240,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict",
            "has_async": false
          },
          {
            "name": "generate_tool_config",
            "parameters": [
              "self"
            ],
            "docstring": "Generate tool configurations based on project model",
            "lineno": 262,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "DomainConfig",
            "bases": [],
            "docstring": "Configuration for a specific domain",
            "lineno": 17,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "FileAnalysis",
            "bases": [],
            "docstring": "Analysis of a file's domain and tooling needs",
            "lineno": 30,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "ProjectModel",
            "bases": [],
            "docstring": "Model-driven tool orchestration",
            "lineno": 40,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "_initialize_domains",
              "analyze_file",
              "validate_file",
              "validate_project",
              "generate_tool_config"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "model",
          "result",
          "config",
          "path",
          "domain_scores",
          "best_domain",
          "config",
          "tools",
          "commands",
          "analysis",
          "results",
          "all_files",
          "results",
          "config",
          "score",
          "file_result",
          "result",
          "content",
          "score"
        ],
        "dependencies": [
          "re",
          "typing",
          "pathlib",
          "json",
          "dataclasses",
          "subprocess",
          "os"
        ],
        "docstrings": [
          "Model-Driven Tool Glue Layer\nIntelligent tool selection and orchestration across domains",
          "Configuration for a specific domain",
          "Analysis of a file's domain and tooling needs",
          "Model-driven tool orchestration",
          "Test the model-driven tool orchestration",
          "Initialize domain configurations",
          "Analyze a file to determine its domain and tooling needs",
          "Validate a file using the appropriate tools",
          "Validate entire project using model-driven tool selection",
          "Generate tool configurations based on project model"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 230
              }
            ],
            "lineno": 212
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 160
              }
            ],
            "lineno": 154
          }
        ],
        "type_hints": [
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "project_root",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_initialize_domains",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "analyze_file",
            "annotation": "FileAnalysis"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_file",
            "parameter": "filepath",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_file",
            "annotation": "Dict"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_file",
            "parameter": "filepath",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_project",
            "annotation": "Dict"
          },
          {
            "type": "return_annotation",
            "function": "generate_tool_config",
            "annotation": "Dict"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 26,
          "cognitive": 26,
          "nesting": 0,
          "statements": 56
        },
        "nesting_depth": 15,
        "ast_nodes": 1164,
        "structure_hash": "415107c06b2f7d73871f5bbf706e2ca8"
      },
      "complexity_score": 26,
      "structure_hash": "415107c06b2f7d73871f5bbf706e2ca8",
      "lines_of_code": 294,
      "created_at": "2025-08-03T10:06:03.208048",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/test_functional_equivalence.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/test_functional_equivalence.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import subprocess",
          "import tempfile",
          "import os",
          "import sys",
          "from pathlib import Path",
          "from model_driven_reconstructor import ModelDrivenReconstructor"
        ],
        "functions": [
          {
            "name": "test_functional_equivalence",
            "parameters": [
              "file_path",
              "test_file_path"
            ],
            "docstring": "Test functional equivalence using unit tests",
            "lineno": 11,
            "col_offset": 0,
            "decorators": [],
            "returns": "dict",
            "has_async": false
          },
          {
            "name": "run_tests",
            "parameters": [
              "module_file",
              "test_file"
            ],
            "docstring": "Run pytest on a test file",
            "lineno": 75,
            "col_offset": 0,
            "decorators": [],
            "returns": "dict",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test functional equivalence for key files",
            "lineno": 112,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "reconstructor",
          "test_cases",
          "file_name",
          "possible_test_files",
          "temp_dir_path",
          "test_content",
          "temp_test_file",
          "original_result",
          "reconstructed_file",
          "reconstructed_result",
          "module_dir",
          "test_dir",
          "result",
          "result",
          "orig",
          "recon",
          "test_file_path"
        ],
        "dependencies": [
          "tempfile",
          "sys",
          "pathlib",
          "model_driven_reconstructor",
          "subprocess",
          "os"
        ],
        "docstrings": [
          "Test functional equivalence between original and reconstructed Python files",
          "Test functional equivalence using unit tests",
          "Run pytest on a test file",
          "Test functional equivalence for key files"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 40
              }
            ],
            "lineno": 38
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 103
              }
            ],
            "lineno": 77
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_functional_equivalence",
            "annotation": "dict"
          },
          {
            "type": "parameter_annotation",
            "function": "test_functional_equivalence",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "test_functional_equivalence",
            "parameter": "test_file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "run_tests",
            "annotation": "dict"
          },
          {
            "type": "parameter_annotation",
            "function": "run_tests",
            "parameter": "module_file",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "run_tests",
            "parameter": "test_file",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 15,
          "cognitive": 14,
          "nesting": 0,
          "statements": 39
        },
        "nesting_depth": 13,
        "ast_nodes": 672,
        "structure_hash": "a04951102a3a3a86f4457b7004047d2c"
      },
      "complexity_score": 15,
      "structure_hash": "a04951102a3a3a86f4457b7004047d2c",
      "lines_of_code": 153,
      "created_at": "2025-08-03T10:06:03.225001",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/update_pacifier.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/update_pacifier.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from update_progress import ProgressUpdater"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": null,
            "lineno": 8,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "u"
        ],
        "dependencies": [
          "update_progress"
        ],
        "docstrings": [
          "Quick pacifier updater to avoid bash history expansion issues"
        ],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 2,
          "cognitive": 1,
          "nesting": 0,
          "statements": 5
        },
        "nesting_depth": 6,
        "ast_nodes": 37,
        "structure_hash": "155d7de6176772f4218033c535cae06d"
      },
      "complexity_score": 2,
      "structure_hash": "155d7de6176772f4218033c535cae06d",
      "lines_of_code": 18,
      "created_at": "2025-08-03T10:06:03.212616",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/update_progress.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/update_progress.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import os",
          "import sys",
          "import argparse",
          "from datetime import datetime",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Handle command-line arguments and update progress",
            "lineno": 102,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "data_file"
            ],
            "docstring": null,
            "lineno": 18,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "load_data",
            "parameters": [
              "self"
            ],
            "docstring": "Load existing progress data",
            "lineno": 22,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "save_data",
            "parameters": [
              "self"
            ],
            "docstring": "Save progress data to JSON file",
            "lineno": 49,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "update_current_file",
            "parameters": [
              "self",
              "filename",
              "hypothesis",
              "action"
            ],
            "docstring": "Update current file being worked on",
            "lineno": 55,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "update_validation_results",
            "parameters": [
              "self",
              "results"
            ],
            "docstring": "Update validation results",
            "lineno": 64,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "file_fixed",
            "parameters": [
              "self",
              "filename"
            ],
            "docstring": "Mark a file as fixed",
            "lineno": 69,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "file_failed",
            "parameters": [
              "self",
              "filename",
              "error"
            ],
            "docstring": "Mark a file as failed",
            "lineno": 77,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "add_activity",
            "parameters": [
              "self",
              "message"
            ],
            "docstring": "Add activity to the log",
            "lineno": 82,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "update_checkpoints",
            "parameters": [
              "self",
              "count"
            ],
            "docstring": "Update checkpoint count",
            "lineno": 96,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ProgressUpdater",
            "bases": [],
            "docstring": "Updates live progress data for the HTML pacifier",
            "lineno": 15,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "load_data",
              "save_data",
              "update_current_file",
              "update_validation_results",
              "file_fixed",
              "file_failed",
              "add_activity",
              "update_checkpoints"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "parser",
          "args",
          "updater",
          "timestamp"
        ],
        "dependencies": [
          "argparse",
          "typing",
          "sys",
          "json",
          "datetime",
          "os"
        ],
        "docstrings": [
          "Live Progress Updater for AST Level Up Process\nUpdates live_progress_data.json with real-time progress",
          "Updates live progress data for the HTML pacifier",
          "Handle command-line arguments and update progress",
          "Load existing progress data",
          "Save progress data to JSON file",
          "Update current file being worked on",
          "Update validation results",
          "Mark a file as fixed",
          "Mark a file as failed",
          "Add activity to the log",
          "Update checkpoint count"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 28
              }
            ],
            "lineno": 25
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "data_file",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "load_data",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "save_data",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "update_current_file",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "update_current_file",
            "parameter": "filename",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "update_current_file",
            "parameter": "hypothesis",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "update_current_file",
            "parameter": "action",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "update_validation_results",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "update_validation_results",
            "parameter": "results",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "file_fixed",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "file_fixed",
            "parameter": "filename",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "file_failed",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "file_failed",
            "parameter": "filename",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "file_failed",
            "parameter": "error",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "add_activity",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "add_activity",
            "parameter": "message",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "update_checkpoints",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "update_checkpoints",
            "parameter": "count",
            "annotation": "int"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 13,
          "cognitive": 10,
          "nesting": 0,
          "statements": 62
        },
        "nesting_depth": 14,
        "ast_nodes": 816,
        "structure_hash": "5ba3ad02e9688b4f729fbdb5c354ab94"
      },
      "complexity_score": 13,
      "structure_hash": "5ba3ad02e9688b4f729fbdb5c354ab94",
      "lines_of_code": 157,
      "created_at": "2025-08-03T10:06:03.252489",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/git_enhanced_ast_fixer.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/git_enhanced_ast_fixer.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import subprocess",
          "import tempfile",
          "import os",
          "import ast",
          "import shutil",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from typing import Optional",
          "from typing import Tuple",
          "from broken_python_interpreter import BrokenPythonInterpreter",
          "import re",
          "import re",
          "from semantic_reconstructor import SemanticReconstructor",
          "import shutil"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Test the Git-enhanced AST fixer",
            "lineno": 456,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 20,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "fix_file_with_git_history",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix a broken file using Git history to guide reconstruction",
            "lineno": 24,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "find_previous_working_version",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Find the most recent working version of a file in Git history",
            "lineno": 66,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "restore_to_temp",
            "parameters": [
              "self",
              "file_path",
              "commit_hash"
            ],
            "docstring": "Restore a file from a specific commit to a temporary location",
            "lineno": 110,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[str]",
            "has_async": false
          },
          {
            "name": "parse_previous_version",
            "parameters": [
              "self",
              "temp_file"
            ],
            "docstring": "Parse the previous working version with AST",
            "lineno": 138,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_functions_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract functions from AST",
            "lineno": 161,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_classes_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract classes from AST",
            "lineno": 175,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_imports_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract imports from AST",
            "lineno": 189,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_variables_from_ast",
            "parameters": [
              "self",
              "tree"
            ],
            "docstring": "Extract variables from AST",
            "lineno": 212,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "extract_decorator",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract decorator name from AST",
            "lineno": 226,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "extract_base",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract base class name from AST",
            "lineno": 235,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "extract_class_methods",
            "parameters": [
              "self",
              "node"
            ],
            "docstring": "Extract class methods from AST",
            "lineno": 241,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict[unknown]]",
            "has_async": false
          },
          {
            "name": "is_valid_python_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check if a file is valid Python",
            "lineno": 254,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "reconstruct_with_guidance",
            "parameters": [
              "self",
              "file_path",
              "current_interpretation",
              "previous_ast"
            ],
            "docstring": "Reconstruct file using previous AST as guidance",
            "lineno": 264,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_guided_reconstruction",
            "parameters": [
              "self",
              "current_content",
              "previous_content",
              "current_interpretation",
              "previous_ast"
            ],
            "docstring": "Apply guided reconstruction using previous version as reference",
            "lineno": 282,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "apply_structure_based_fixes",
            "parameters": [
              "self",
              "current_content",
              "previous_ast",
              "current_interpretation"
            ],
            "docstring": "Apply fixes based on previous structure",
            "lineno": 318,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_import_based_on_previous",
            "parameters": [
              "self",
              "line",
              "previous_imports"
            ],
            "docstring": "Fix import based on previous version",
            "lineno": 356,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_function_based_on_previous",
            "parameters": [
              "self",
              "line",
              "previous_functions"
            ],
            "docstring": "Fix function definition based on previous version",
            "lineno": 369,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_class_based_on_previous",
            "parameters": [
              "self",
              "line",
              "previous_classes"
            ],
            "docstring": "Fix class definition based on previous version",
            "lineno": 389,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_indentation_based_on_previous",
            "parameters": [
              "self",
              "line",
              "line_num",
              "all_lines",
              "previous_ast"
            ],
            "docstring": "Fix indentation based on previous structure",
            "lineno": 410,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "is_in_function_context",
            "parameters": [
              "self",
              "line_num",
              "all_lines"
            ],
            "docstring": "Check if we're inside a function or class definition",
            "lineno": 420,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "fix_without_git_history",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fallback to standard AST fixer when Git history is not available",
            "lineno": 430,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "cleanup_temp_file",
            "parameters": [
              "self",
              "temp_file"
            ],
            "docstring": "Clean up temporary file",
            "lineno": 439,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "cleanup_temp_dir",
            "parameters": [
              "self"
            ],
            "docstring": "Clean up temporary directory",
            "lineno": 447,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "GitEnhancedASTFixer",
            "bases": [],
            "docstring": "Git-enhanced AST fixer that uses previous working commits to guide reconstruction",
            "lineno": 17,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "fix_file_with_git_history",
              "find_previous_working_version",
              "restore_to_temp",
              "parse_previous_version",
              "extract_functions_from_ast",
              "extract_classes_from_ast",
              "extract_imports_from_ast",
              "extract_variables_from_ast",
              "extract_decorator",
              "extract_base",
              "extract_class_methods",
              "is_valid_python_file",
              "reconstruct_with_guidance",
              "apply_guided_reconstruction",
              "apply_structure_based_fixes",
              "fix_import_based_on_previous",
              "fix_function_based_on_previous",
              "fix_class_based_on_previous",
              "fix_indentation_based_on_previous",
              "is_in_function_context",
              "fix_without_git_history",
              "cleanup_temp_file",
              "cleanup_temp_dir"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "fixer",
          "test_files",
          "previous_working",
          "temp_file",
          "previous_ast",
          "current_interpretation",
          "reconstructed_content",
          "functions",
          "classes",
          "imports",
          "variables",
          "methods",
          "previous_content",
          "reconstructed",
          "reconstructed_lines",
          "current_functions",
          "current_classes",
          "current_imports",
          "previous_functions",
          "previous_classes",
          "previous_imports",
          "fixed_content",
          "lines",
          "fixed_lines",
          "previous_imports",
          "previous_functions",
          "previous_classes",
          "match",
          "match",
          "reconstructor",
          "result",
          "commits",
          "result",
          "temp_file",
          "tree",
          "current_content",
          "stripped",
          "func_name",
          "line",
          "class_name",
          "line",
          "line",
          "backup_path",
          "fixed_content",
          "commit_hash",
          "temp_file",
          "content",
          "content",
          "line",
          "prev_func",
          "args",
          "prev_class",
          "bases",
          "line",
          "line",
          "line"
        ],
        "dependencies": [
          "semantic_reconstructor",
          "re",
          "tempfile",
          "ast",
          "typing",
          "pathlib",
          "shutil",
          "broken_python_interpreter",
          "subprocess",
          "os"
        ],
        "docstrings": [
          "Git-Enhanced AST Fixer\nUses Git history to restore previous working versions and guide AST-based reconstruction",
          "Git-enhanced AST fixer that uses previous working commits to guide reconstruction",
          "Test the Git-enhanced AST fixer",
          "Fix a broken file using Git history to guide reconstruction",
          "Find the most recent working version of a file in Git history",
          "Restore a file from a specific commit to a temporary location",
          "Parse the previous working version with AST",
          "Extract functions from AST",
          "Extract classes from AST",
          "Extract imports from AST",
          "Extract variables from AST",
          "Extract decorator name from AST",
          "Extract base class name from AST",
          "Extract class methods from AST",
          "Check if a file is valid Python",
          "Reconstruct file using previous AST as guidance",
          "Apply guided reconstruction using previous version as reference",
          "Apply fixes based on previous structure",
          "Fix import based on previous version",
          "Fix function definition based on previous version",
          "Fix class definition based on previous version",
          "Fix indentation based on previous structure",
          "Check if we're inside a function or class definition",
          "Fallback to standard AST fixer when Git history is not available",
          "Clean up temporary file",
          "Clean up temporary directory"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 106
              }
            ],
            "lineno": 68
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 134
              }
            ],
            "lineno": 112
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 157
              }
            ],
            "lineno": 140
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 261
              }
            ],
            "lineno": 256
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 444
              }
            ],
            "lineno": 441
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 452
              }
            ],
            "lineno": 449
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 495
              }
            ],
            "lineno": 484
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 493
              }
            ],
            "lineno": 490
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "fix_file_with_git_history",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_file_with_git_history",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "find_previous_working_version",
            "annotation": "Optional[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "find_previous_working_version",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "restore_to_temp",
            "annotation": "Optional[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "restore_to_temp",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "restore_to_temp",
            "parameter": "commit_hash",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "parse_previous_version",
            "annotation": "Optional[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "parse_previous_version",
            "parameter": "temp_file",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "extract_functions_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_functions_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_classes_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_classes_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_imports_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_imports_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_variables_from_ast",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_variables_from_ast",
            "parameter": "tree",
            "annotation": "ast.AST"
          },
          {
            "type": "return_annotation",
            "function": "extract_decorator",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_decorator",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "extract_base",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_base",
            "parameter": "node",
            "annotation": "ast.expr"
          },
          {
            "type": "return_annotation",
            "function": "extract_class_methods",
            "annotation": "List[Dict[unknown]]"
          },
          {
            "type": "parameter_annotation",
            "function": "extract_class_methods",
            "parameter": "node",
            "annotation": "ast.ClassDef"
          },
          {
            "type": "return_annotation",
            "function": "is_valid_python_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_valid_python_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "reconstruct_with_guidance",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "reconstruct_with_guidance",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "reconstruct_with_guidance",
            "parameter": "current_interpretation",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "reconstruct_with_guidance",
            "parameter": "previous_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "apply_guided_reconstruction",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_guided_reconstruction",
            "parameter": "current_content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_guided_reconstruction",
            "parameter": "previous_content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_guided_reconstruction",
            "parameter": "current_interpretation",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_guided_reconstruction",
            "parameter": "previous_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "apply_structure_based_fixes",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_structure_based_fixes",
            "parameter": "current_content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_structure_based_fixes",
            "parameter": "previous_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "apply_structure_based_fixes",
            "parameter": "current_interpretation",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "fix_import_based_on_previous",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_import_based_on_previous",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_import_based_on_previous",
            "parameter": "previous_imports",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "fix_function_based_on_previous",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_function_based_on_previous",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_function_based_on_previous",
            "parameter": "previous_functions",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "fix_class_based_on_previous",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_class_based_on_previous",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_class_based_on_previous",
            "parameter": "previous_classes",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "fix_indentation_based_on_previous",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_indentation_based_on_previous",
            "parameter": "line",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_indentation_based_on_previous",
            "parameter": "line_num",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_indentation_based_on_previous",
            "parameter": "all_lines",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_indentation_based_on_previous",
            "parameter": "previous_ast",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "is_in_function_context",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "is_in_function_context",
            "parameter": "line_num",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "is_in_function_context",
            "parameter": "all_lines",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "fix_without_git_history",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_without_git_history",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "cleanup_temp_file",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "cleanup_temp_file",
            "parameter": "temp_file",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "cleanup_temp_dir",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 71,
          "cognitive": 72,
          "nesting": 0,
          "statements": 180
        },
        "nesting_depth": 14,
        "ast_nodes": 2697,
        "structure_hash": "6710ab776f7968ec55e4d3aad5cdd1a0"
      },
      "complexity_score": 71,
      "structure_hash": "6710ab776f7968ec55e4d3aad5cdd1a0",
      "lines_of_code": 505,
      "created_at": "2025-08-03T10:06:03.303240",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/healthcare_cdc_domain_model.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/healthcare_cdc_domain_model.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from dataclasses import dataclass",
          "from dataclasses import field",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Optional",
          "from typing import Any",
          "from enum import Enum",
          "from datetime import datetime",
          "import json",
          "import re",
          "import os",
          "from uuid import UUID"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function to demonstrate the domain model",
            "lineno": 588,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "to_json",
            "parameters": [
              "self"
            ],
            "docstring": "Convert to JSON for DynamoDB stream",
            "lineno": 114,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "add_processor",
            "parameters": [
              "self",
              "processor_type",
              "config"
            ],
            "docstring": "Add a processor to the pipeline",
            "lineno": 189,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "sql_template_path"
            ],
            "docstring": null,
            "lineno": 197,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "_setup_pipeline",
            "parameters": [
              "self"
            ],
            "docstring": "Setup the Openflow pipeline configuration",
            "lineno": 203,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "_get_merge_sql",
            "parameters": [
              "self"
            ],
            "docstring": "Get the SQL merge statement for CDC operations",
            "lineno": 303,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "generate_cloudformation_template",
            "parameters": [
              "self"
            ],
            "docstring": "Generate CloudFormation template for the healthcare CDC infrastructure",
            "lineno": 330,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "generate_snowflake_schema",
            "parameters": [
              "self"
            ],
            "docstring": "Generate Snowflake schema creation SQL",
            "lineno": 463,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "EventType",
            "bases": [
              "Enum"
            ],
            "docstring": "CDC Event Types",
            "lineno": 21,
            "col_offset": 0,
            "decorators": [],
            "methods": [],
            "attributes": [
              "INSERT",
              "MODIFY",
              "REMOVE"
            ]
          },
          {
            "name": "ClaimStatus",
            "bases": [
              "Enum"
            ],
            "docstring": "Healthcare Claim Status",
            "lineno": 29,
            "col_offset": 0,
            "decorators": [],
            "methods": [],
            "attributes": [
              "PENDING",
              "IN_REVIEW",
              "APPROVED",
              "REJECTED",
              "PAID"
            ]
          },
          {
            "name": "PaymentStatus",
            "bases": [
              "Enum"
            ],
            "docstring": "Payment Status",
            "lineno": 39,
            "col_offset": 0,
            "decorators": [],
            "methods": [],
            "attributes": [
              "PENDING",
              "PROCESSING",
              "COMPLETED",
              "FAILED"
            ]
          },
          {
            "name": "PatientInfo",
            "bases": [],
            "docstring": "Patient Information",
            "lineno": 49,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "ProviderInfo",
            "bases": [],
            "docstring": "Healthcare Provider Information",
            "lineno": 66,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "PayerInfo",
            "bases": [],
            "docstring": "Insurance Payer Information",
            "lineno": 78,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "HealthcareClaim",
            "bases": [],
            "docstring": "Healthcare Insurance Claim",
            "lineno": 87,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "CDCEvent",
            "bases": [],
            "docstring": "Change Data Capture Event",
            "lineno": 107,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [
              "to_json"
            ],
            "attributes": []
          },
          {
            "name": "InfrastructureComponents",
            "bases": [],
            "docstring": "Infrastructure Components for Healthcare CDC",
            "lineno": 155,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "PipelineConfiguration",
            "bases": [],
            "docstring": "Openflow Pipeline Configuration",
            "lineno": 183,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [
              "add_processor"
            ],
            "attributes": []
          },
          {
            "name": "HealthcareCDCDomainModel",
            "bases": [],
            "docstring": "Domain Model for Healthcare CDC System",
            "lineno": 194,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "_setup_pipeline",
              "_get_merge_sql",
              "generate_cloudformation_template",
              "generate_snowflake_schema"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "INSERT",
          "MODIFY",
          "REMOVE",
          "PENDING",
          "IN_REVIEW",
          "APPROVED",
          "REJECTED",
          "PAID",
          "PENDING",
          "PROCESSING",
          "COMPLETED",
          "FAILED",
          "model",
          "patient",
          "provider",
          "payer",
          "claim",
          "cdc_event",
          "sql_file_path",
          "sql_file_path",
          "sql_template"
        ],
        "dependencies": [
          "json",
          "typing",
          "enum",
          "pathlib",
          "dataclasses",
          "datetime",
          "uuid",
          "re",
          "os"
        ],
        "docstrings": [
          "Healthcare CDC Domain Model\nModel-driven implementation of Snowflake Healthcare CDC with DynamoDB and Openflow\n\nBased on: https://quickstarts.snowflake.com/guide/Streamline_Healthcare_CDC_DDB_And_Openflow/\nOriginal Contributors: Snowflake Inc.",
          "CDC Event Types",
          "Healthcare Claim Status",
          "Payment Status",
          "Patient Information",
          "Healthcare Provider Information",
          "Insurance Payer Information",
          "Healthcare Insurance Claim",
          "Change Data Capture Event",
          "Infrastructure Components for Healthcare CDC",
          "Openflow Pipeline Configuration",
          "Domain Model for Healthcare CDC System",
          "Main function to demonstrate the domain model",
          "Convert to JSON for DynamoDB stream",
          "Add a processor to the pipeline",
          "Setup the Openflow pipeline configuration",
          "Get the SQL merge statement for CDC operations",
          "Generate CloudFormation template for the healthcare CDC infrastructure",
          "Generate Snowflake schema creation SQL"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 318
              },
              {
                "type": "Exception",
                "lineno": 325
              },
              {
                "type": "Exception",
                "lineno": 327
              }
            ],
            "lineno": 310
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "to_json",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "add_processor",
            "parameter": "processor_type",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "add_processor",
            "parameter": "config",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "sql_template_path",
            "annotation": "Optional[str]"
          },
          {
            "type": "return_annotation",
            "function": "_get_merge_sql",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "generate_cloudformation_template",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "generate_snowflake_schema",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 7,
          "cognitive": 5,
          "nesting": 0,
          "statements": 71
        },
        "nesting_depth": 13,
        "ast_nodes": 1761,
        "structure_hash": "49b5557c97b474dc7b8ffc0b69ea4d79"
      },
      "complexity_score": 7,
      "structure_hash": "49b5557c97b474dc7b8ffc0b69ea4d79",
      "lines_of_code": 659,
      "created_at": "2025-08-03T10:06:03.347392",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/__init__.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from healthcare_cdc_domain_model import HealthcareCDCDomainModel",
          "from healthcare_cdc_domain_model import HealthcareClaim",
          "from healthcare_cdc_domain_model import PatientInfo",
          "from healthcare_cdc_domain_model import ProviderInfo",
          "from healthcare_cdc_domain_model import PayerInfo",
          "from healthcare_cdc_domain_model import CDCEvent",
          "from healthcare_cdc_domain_model import EventType",
          "from healthcare_cdc_domain_model import ClaimStatus",
          "from healthcare_cdc_domain_model import PaymentStatus"
        ],
        "functions": [],
        "classes": [],
        "variables": [
          "__version__",
          "__author__",
          "__description__",
          "__all__"
        ],
        "dependencies": [
          "healthcare_cdc_domain_model"
        ],
        "docstrings": [
          "Healthcare CDC Package\nModel-driven implementation of Snowflake Healthcare CDC with DynamoDB and Openflow\n\nBased on: https://quickstarts.snowflake.com/guide/Streamline_Healthcare_CDC_DDB_And_Openflow/\nOriginal Contributors: Snowflake Inc.\nEnhanced by: OpenFlow Playground Team"
        ],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 5
        },
        "nesting_depth": 3,
        "ast_nodes": 39,
        "structure_hash": "390de6bd515ebf1780781a3123d6d780"
      },
      "complexity_score": 1,
      "structure_hash": "390de6bd515ebf1780781a3123d6d780",
      "lines_of_code": 38,
      "created_at": "2025-08-03T10:06:03.342217",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/data/cost_analysis.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/data/cost_analysis.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import os",
          "from pathlib import Path"
        ],
        "functions": [
          {
            "name": "estimate_tokens",
            "parameters": [
              "text"
            ],
            "docstring": "Rough estimate of tokens (4 characters per token)",
            "lineno": 19,
            "col_offset": 0,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "analyze_multi_dimensional_costs",
            "parameters": [],
            "docstring": "Analyze costs from multi-dimensional smoke test",
            "lineno": 24,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "analyze_langgraph_costs",
            "parameters": [],
            "docstring": "Analyze costs from LangGraph diversity orchestrator",
            "lineno": 95,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "analyze_synthesis_costs",
            "parameters": [],
            "docstring": "Analyze costs from synthesis orchestrator",
            "lineno": 173,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Calculate total costs for diversity hypothesis testing",
            "lineno": 266,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "INPUT_COST_PER_1M_TOKENS",
          "OUTPUT_COST_PER_1M_TOKENS",
          "total_input_tokens",
          "total_output_tokens",
          "successful_calls",
          "input_cost",
          "output_cost",
          "total_cost",
          "analysis_file",
          "total_input_tokens",
          "total_output_tokens",
          "successful_calls",
          "input_cost",
          "output_cost",
          "total_cost",
          "synthesis_file",
          "system_message",
          "findings_text",
          "user_message",
          "input_text",
          "input_tokens",
          "output_text",
          "output_tokens",
          "input_cost",
          "output_cost",
          "total_cost",
          "multi_dimensional",
          "langgraph",
          "synthesis",
          "total_calls",
          "total_input_tokens",
          "total_output_tokens",
          "total_cost",
          "total_findings",
          "cost_per_finding",
          "data",
          "data",
          "data",
          "system_message",
          "user_message",
          "input_text",
          "input_tokens",
          "output_text",
          "output_tokens",
          "agent_name",
          "system_message",
          "user_message",
          "input_text",
          "input_tokens",
          "output_text",
          "output_tokens"
        ],
        "dependencies": [
          "os",
          "pathlib",
          "json"
        ],
        "docstrings": [
          "\ud83d\udcb0 COST ANALYSIS FOR DIVERSITY HYPOTHESIS TESTING\n\nCalculate total tokens and costs for our multi-agent diversity analysis.",
          "Rough estimate of tokens (4 characters per token)",
          "Analyze costs from multi-dimensional smoke test",
          "Analyze costs from LangGraph diversity orchestrator",
          "Analyze costs from synthesis orchestrator",
          "Calculate total costs for diversity hypothesis testing"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "estimate_tokens",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "estimate_tokens",
            "parameter": "text",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 13,
          "cognitive": 10,
          "nesting": 0,
          "statements": 117
        },
        "nesting_depth": 10,
        "ast_nodes": 1350,
        "structure_hash": "55fba8148a3d7260c1c99f2982b43813"
      },
      "complexity_score": 13,
      "structure_hash": "55fba8148a3d7260c1c99f2982b43813",
      "lines_of_code": 336,
      "created_at": "2025-08-03T10:06:03.343693",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/test_healthcare_cdc_domain_model.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/test_healthcare_cdc_domain_model.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import pytest",
          "import json",
          "from datetime import datetime",
          "import re",
          "from healthcare_cdc_domain_model import HealthcareCDCDomainModel",
          "from healthcare_cdc_domain_model import HealthcareClaim",
          "from healthcare_cdc_domain_model import PatientInfo",
          "from healthcare_cdc_domain_model import ProviderInfo",
          "from healthcare_cdc_domain_model import PayerInfo",
          "from healthcare_cdc_domain_model import CDCEvent",
          "from healthcare_cdc_domain_model import EventType",
          "from healthcare_cdc_domain_model import ClaimStatus",
          "from healthcare_cdc_domain_model import PaymentStatus"
        ],
        "functions": [
          {
            "name": "test_integration",
            "parameters": [],
            "docstring": "Integration test for the complete domain model",
            "lineno": 346,
            "col_offset": 0,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_domain_model_initialization",
            "parameters": [
              "self"
            ],
            "docstring": "Test domain model initialization",
            "lineno": 26,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_pipeline_configuration",
            "parameters": [
              "self"
            ],
            "docstring": "Test pipeline configuration setup",
            "lineno": 41,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_merge_sql_generation",
            "parameters": [
              "self"
            ],
            "docstring": "Test SQL merge statement generation",
            "lineno": 58,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_cloudformation_template_generation",
            "parameters": [
              "self"
            ],
            "docstring": "Test CloudFormation template generation",
            "lineno": 73,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_snowflake_schema_generation",
            "parameters": [
              "self"
            ],
            "docstring": "Test Snowflake schema generation",
            "lineno": 97,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_claim_creation",
            "parameters": [
              "self"
            ],
            "docstring": "Test creating a healthcare claim",
            "lineno": 114,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_cdc_event_creation",
            "parameters": [
              "self"
            ],
            "docstring": "Test creating a CDC event",
            "lineno": 180,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_cdc_event_json_serialization",
            "parameters": [
              "self"
            ],
            "docstring": "Test CDC event JSON serialization",
            "lineno": 241,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_event_types",
            "parameters": [
              "self"
            ],
            "docstring": "Test event type enum values",
            "lineno": 324,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_claim_status",
            "parameters": [
              "self"
            ],
            "docstring": "Test claim status enum values",
            "lineno": 330,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_payment_status",
            "parameters": [
              "self"
            ],
            "docstring": "Test payment status enum values",
            "lineno": 338,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestHealthcareCDCDomainModel",
            "bases": [],
            "docstring": "Test the healthcare CDC domain model",
            "lineno": 23,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_domain_model_initialization",
              "test_pipeline_configuration",
              "test_merge_sql_generation",
              "test_cloudformation_template_generation",
              "test_snowflake_schema_generation"
            ],
            "attributes": []
          },
          {
            "name": "TestHealthcareClaim",
            "bases": [],
            "docstring": "Test healthcare claim data structure",
            "lineno": 111,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_claim_creation"
            ],
            "attributes": []
          },
          {
            "name": "TestCDCEvent",
            "bases": [],
            "docstring": "Test CDC event data structure",
            "lineno": 177,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_cdc_event_creation",
              "test_cdc_event_json_serialization"
            ],
            "attributes": []
          },
          {
            "name": "TestEnums",
            "bases": [],
            "docstring": "Test enum values",
            "lineno": 321,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_event_types",
              "test_claim_status",
              "test_payment_status"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "model",
          "merge_sql",
          "template",
          "schema_sql",
          "model",
          "model",
          "processor_types",
          "model",
          "merge_sql",
          "model",
          "template",
          "resources",
          "outputs",
          "model",
          "schema_sql",
          "patient",
          "provider",
          "payer",
          "claim",
          "patient",
          "provider",
          "payer",
          "claim",
          "cdc_event",
          "patient",
          "provider",
          "payer",
          "claim",
          "cdc_event",
          "json_data",
          "parsed_data"
        ],
        "dependencies": [
          "pytest",
          "json",
          "datetime",
          "re",
          "healthcare_cdc_domain_model"
        ],
        "docstrings": [
          "Tests for Healthcare CDC Domain Model",
          "Test the healthcare CDC domain model",
          "Test healthcare claim data structure",
          "Test CDC event data structure",
          "Test enum values",
          "Integration test for the complete domain model",
          "Test domain model initialization",
          "Test pipeline configuration setup",
          "Test SQL merge statement generation",
          "Test CloudFormation template generation",
          "Test Snowflake schema generation",
          "Test creating a healthcare claim",
          "Test creating a CDC event",
          "Test CDC event JSON serialization",
          "Test event type enum values",
          "Test claim status enum values",
          "Test payment status enum values"
        ],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 133
        },
        "nesting_depth": 13,
        "ast_nodes": 1306,
        "structure_hash": "47e1a4a4df380e4a27dd1b4de08d7056"
      },
      "complexity_score": 1,
      "structure_hash": "47e1a4a4df380e4a27dd1b4de08d7056",
      "lines_of_code": 371,
      "created_at": "2025-08-03T10:06:03.390825",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_data_fresh_cline_plan.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_data_fresh_cline_plan.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [],
        "functions": [],
        "classes": [],
        "variables": [],
        "dependencies": [],
        "docstrings": [
          "Test data for fresh Cline's healthcare CDC plan\nExtracted from test to improve maintainability"
        ],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 1
        },
        "nesting_depth": 3,
        "ast_nodes": 9,
        "structure_hash": "56f891b3105635d29b0fbebfb76c76be"
      },
      "complexity_score": 1,
      "structure_hash": "56f891b3105635d29b0fbebfb76c76be",
      "lines_of_code": 132,
      "created_at": "2025-08-03T10:06:03.446689",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_file_organization.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_file_organization.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Any",
          "import pytest",
          "import os",
          "import json",
          "from pathlib import Path",
          "import sys",
          "from streamlit import OpenFlowQuickstartApp"
        ],
        "functions": [
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 18,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_src_directory_structure",
            "parameters": [
              "self"
            ],
            "docstring": "Test src directory structure",
            "lineno": 28,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_streamlit_domain_files",
            "parameters": [
              "self"
            ],
            "docstring": "Test streamlit domain files",
            "lineno": 42,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_security_first_domain_files",
            "parameters": [
              "self"
            ],
            "docstring": "Test security-first domain files",
            "lineno": 54,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_multi_agent_testing_domain_files",
            "parameters": [
              "self"
            ],
            "docstring": "Test multi-agent testing domain files",
            "lineno": 66,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_tests_directory_structure",
            "parameters": [
              "self"
            ],
            "docstring": "Test tests directory structure",
            "lineno": 80,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirements_files",
            "parameters": [
              "self"
            ],
            "docstring": "Test requirements files",
            "lineno": 96,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_documentation_files",
            "parameters": [
              "self"
            ],
            "docstring": "Test that documentation files are properly organized",
            "lineno": 108,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_model_registry_file_organization",
            "parameters": [
              "self"
            ],
            "docstring": "Test that model registry file organization is correct",
            "lineno": 119,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_domain_patterns_updated",
            "parameters": [
              "self"
            ],
            "docstring": "Test that domain patterns reflect new file organization",
            "lineno": 142,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_package_imports_work",
            "parameters": [
              "self"
            ],
            "docstring": "Test that package imports work correctly",
            "lineno": 162,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_no_orphaned_files",
            "parameters": [
              "self"
            ],
            "docstring": "Test that no files are left in old locations",
            "lineno": 179,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_file_permissions",
            "parameters": [
              "self"
            ],
            "docstring": "Test that files have appropriate permissions",
            "lineno": 207,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_directory_structure_consistency",
            "parameters": [
              "self"
            ],
            "docstring": "Test that directory structure is consistent",
            "lineno": 224,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestFileOrganization",
            "bases": [],
            "docstring": "Test file organization according to project model domains",
            "lineno": 15,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_src_directory_structure",
              "test_streamlit_domain_files",
              "test_security_first_domain_files",
              "test_multi_agent_testing_domain_files",
              "test_tests_directory_structure",
              "test_requirements_files",
              "test_documentation_files",
              "test_model_registry_file_organization",
              "test_domain_patterns_updated",
              "test_package_imports_work",
              "test_no_orphaned_files",
              "test_file_permissions",
              "test_directory_structure_consistency"
            ],
            "attributes": []
          }
        ],
        "variables": [],
        "dependencies": [
          "pytest",
          "json",
          "streamlit",
          "typing",
          "sys",
          "pathlib",
          "os"
        ],
        "docstrings": [
          "\ud83e\uddea File Organization Test\n\nTest suite to validate the new domain-based file organization structure.",
          "Test file organization according to project model domains",
          "Setup test environment",
          "Test src directory structure",
          "Test streamlit domain files",
          "Test security-first domain files",
          "Test multi-agent testing domain files",
          "Test tests directory structure",
          "Test requirements files",
          "Test that documentation files are properly organized",
          "Test that model registry file organization is correct",
          "Test that domain patterns reflect new file organization",
          "Test that package imports work correctly",
          "Test that no files are left in old locations",
          "Test that files have appropriate permissions",
          "Test that directory structure is consistent"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "ImportError",
                "lineno": 176
              }
            ],
            "lineno": 169
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "setup_method",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_src_directory_structure",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_src_directory_structure",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_streamlit_domain_files",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_streamlit_domain_files",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_security_first_domain_files",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_security_first_domain_files",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_multi_agent_testing_domain_files",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_multi_agent_testing_domain_files",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_tests_directory_structure",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_tests_directory_structure",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirements_files",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirements_files",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_documentation_files",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_documentation_files",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_model_registry_file_organization",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_model_registry_file_organization",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_domain_patterns_updated",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_domain_patterns_updated",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_package_imports_work",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_package_imports_work",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_no_orphaned_files",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_no_orphaned_files",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_file_permissions",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_file_permissions",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_directory_structure_consistency",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_directory_structure_consistency",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 14,
          "cognitive": 11,
          "nesting": 0,
          "statements": 49
        },
        "nesting_depth": 10,
        "ast_nodes": 962,
        "structure_hash": "54604cd75f6858e6319a0ecea9841499"
      },
      "complexity_score": 14,
      "structure_hash": "54604cd75f6858e6319a0ecea9841499",
      "lines_of_code": 243,
      "created_at": "2025-08-03T10:06:03.441909",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_rule_compliance.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_rule_compliance.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import subprocess",
          "import tempfile",
          "import os",
          "import sys",
          "import json",
          "from pathlib import Path"
        ],
        "functions": [
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 20,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_valid_mdc_file",
            "parameters": [
              "self"
            ],
            "docstring": "Test that linter accepts valid .mdc file",
            "lineno": 25,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_invalid_mdc_file_missing_frontmatter",
            "parameters": [
              "self"
            ],
            "docstring": "Test that linter rejects .mdc file without frontmatter",
            "lineno": 57,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_invalid_mdc_file_missing_fields",
            "parameters": [
              "self"
            ],
            "docstring": "Test that linter rejects .mdc file with missing required fields",
            "lineno": 81,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 113,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_plugin_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that Cursor IDE plugin exists and is executable",
            "lineno": 120,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_plugin_check_file_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test that plugin can check file compliance",
            "lineno": 127,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 152,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_all_mdc_files_comply",
            "parameters": [
              "self"
            ],
            "docstring": "Test that all .mdc files in the project comply with rules",
            "lineno": 156,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_rule_compliance_system_completeness",
            "parameters": [
              "self"
            ],
            "docstring": "Test that rule compliance system is complete",
            "lineno": 183,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestMDCLinter",
            "bases": [],
            "docstring": "Test MDC linter functionality",
            "lineno": 17,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_valid_mdc_file",
              "test_invalid_mdc_file_missing_frontmatter",
              "test_invalid_mdc_file_missing_fields"
            ],
            "attributes": []
          },
          {
            "name": "TestCursorPlugin",
            "bases": [],
            "docstring": "Test Cursor IDE plugin functionality",
            "lineno": 110,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_plugin_exists",
              "test_plugin_check_file_compliance"
            ],
            "attributes": []
          },
          {
            "name": "TestRuleComplianceSystem",
            "bases": [],
            "docstring": "Test the complete rule compliance system",
            "lineno": 149,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_all_mdc_files_comply",
              "test_rule_compliance_system_completeness"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "valid_content",
          "invalid_content",
          "invalid_content",
          "test_file",
          "test_content",
          "mdc_files",
          "components",
          "model_path",
          "test_file",
          "result",
          "test_file",
          "result",
          "test_file",
          "result",
          "result",
          "lines",
          "model",
          "content"
        ],
        "dependencies": [
          "tempfile",
          "sys",
          "pathlib",
          "json",
          "subprocess",
          "os"
        ],
        "docstrings": [
          "\ud83e\uddea Rule Compliance Test Suite\n\nTests for rule compliance enforcement system including MDC linter,\nCursor IDE plugin, and pre-commit hooks.",
          "Test MDC linter functionality",
          "Test Cursor IDE plugin functionality",
          "Test the complete rule compliance system",
          "Setup test environment",
          "Test that linter accepts valid .mdc file",
          "Test that linter rejects .mdc file without frontmatter",
          "Test that linter rejects .mdc file with missing required fields",
          "Setup test environment",
          "Test that Cursor IDE plugin exists and is executable",
          "Test that plugin can check file compliance",
          "Setup test environment",
          "Test that all .mdc files in the project comply with rules",
          "Test that rule compliance system is complete"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 43
          },
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 69
          },
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 97
          },
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 136
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_valid_mdc_file",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_invalid_mdc_file_missing_frontmatter",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_invalid_mdc_file_missing_fields",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_plugin_exists",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_plugin_check_file_compliance",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_all_mdc_files_comply",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_rule_compliance_system_completeness",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 10,
          "cognitive": 3,
          "nesting": 0,
          "statements": 57
        },
        "nesting_depth": 10,
        "ast_nodes": 750,
        "structure_hash": "140914171abcb2f140c7913521bc4fe7"
      },
      "complexity_score": 10,
      "structure_hash": "140914171abcb2f140c7913521bc4fe7",
      "lines_of_code": 203,
      "created_at": "2025-08-03T10:06:03.444017",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_cline_plan_blind_spots.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_cline_plan_blind_spots.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from dataclasses import dataclass",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run the blind spot analysis",
            "lineno": 320,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 25,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "security_expert_analysis",
            "parameters": [
              "self"
            ],
            "docstring": "Security Expert Agent Analysis",
            "lineno": 28,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpotFinding]",
            "has_async": false
          },
          {
            "name": "devops_engineer_analysis",
            "parameters": [
              "self"
            ],
            "docstring": "DevOps Engineer Agent Analysis",
            "lineno": 73,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpotFinding]",
            "has_async": false
          },
          {
            "name": "code_quality_expert_analysis",
            "parameters": [
              "self"
            ],
            "docstring": "Code Quality Expert Agent Analysis",
            "lineno": 115,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpotFinding]",
            "has_async": false
          },
          {
            "name": "user_experience_advocate_analysis",
            "parameters": [
              "self"
            ],
            "docstring": "User Experience Advocate Agent Analysis",
            "lineno": 157,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpotFinding]",
            "has_async": false
          },
          {
            "name": "performance_engineer_analysis",
            "parameters": [
              "self"
            ],
            "docstring": "Performance Engineer Agent Analysis",
            "lineno": 199,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpotFinding]",
            "has_async": false
          },
          {
            "name": "run_blind_spot_analysis",
            "parameters": [
              "self"
            ],
            "docstring": "Run complete blind spot analysis",
            "lineno": 241,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "print_analysis_results",
            "parameters": [
              "self",
              "summary"
            ],
            "docstring": "Print analysis results",
            "lineno": 287,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "BlindSpotFinding",
            "bases": [],
            "docstring": "Represents a blind spot finding",
            "lineno": 11,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "HealthcareCDCMultiAgentBlindSpotTest",
            "bases": [],
            "docstring": "Multi-agent blind spot detection for healthcare CDC implementation",
            "lineno": 22,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "security_expert_analysis",
              "devops_engineer_analysis",
              "code_quality_expert_analysis",
              "user_experience_advocate_analysis",
              "performance_engineer_analysis",
              "run_blind_spot_analysis",
              "print_analysis_results"
            ],
            "attributes": []
          }
        ],
        "variables": [],
        "dependencies": [
          "dataclasses",
          "typing"
        ],
        "docstrings": [
          "Multi-Agent Blind Spot Test for Cline's Healthcare CDC Plan",
          "Represents a blind spot finding",
          "Multi-agent blind spot detection for healthcare CDC implementation",
          "Run the blind spot analysis",
          "Security Expert Agent Analysis",
          "DevOps Engineer Agent Analysis",
          "Code Quality Expert Agent Analysis",
          "User Experience Advocate Agent Analysis",
          "Performance Engineer Agent Analysis",
          "Run complete blind spot analysis",
          "Print analysis results"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "security_expert_analysis",
            "annotation": "List[BlindSpotFinding]"
          },
          {
            "type": "parameter_annotation",
            "function": "security_expert_analysis",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "devops_engineer_analysis",
            "annotation": "List[BlindSpotFinding]"
          },
          {
            "type": "parameter_annotation",
            "function": "devops_engineer_analysis",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "code_quality_expert_analysis",
            "annotation": "List[BlindSpotFinding]"
          },
          {
            "type": "parameter_annotation",
            "function": "code_quality_expert_analysis",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "user_experience_advocate_analysis",
            "annotation": "List[BlindSpotFinding]"
          },
          {
            "type": "parameter_annotation",
            "function": "user_experience_advocate_analysis",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "performance_engineer_analysis",
            "annotation": "List[BlindSpotFinding]"
          },
          {
            "type": "parameter_annotation",
            "function": "performance_engineer_analysis",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "run_blind_spot_analysis",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "run_blind_spot_analysis",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "print_analysis_results",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "print_analysis_results",
            "parameter": "summary",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 7,
          "cognitive": 6,
          "nesting": 0,
          "statements": 53
        },
        "nesting_depth": 11,
        "ast_nodes": 1062,
        "structure_hash": "02b5d625eb1eb6565861652730edf22e"
      },
      "complexity_score": 7,
      "structure_hash": "02b5d625eb1eb6565861652730edf22e",
      "lines_of_code": 329,
      "created_at": "2025-08-03T10:06:03.445887",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_gemini_2_5_flash_lite_pr_review.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_gemini_2_5_flash_lite_pr_review.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import time",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "load_pr_review_prompt",
            "parameters": [],
            "docstring": "Load the PR review prompt.",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "simulate_gemini_2_5_flash_lite_response",
            "parameters": [],
            "docstring": "Simulate the expected response from Gemini 2.5 Flash Lite.\nThis would normally be an API call to Gemini.",
            "lineno": 22,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run the Gemini 2.5 Flash Lite PR review test.",
            "lineno": 132,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [],
        "dependencies": [
          "typing",
          "time",
          "pathlib",
          "json"
        ],
        "docstrings": [
          "Test script for Gemini 2.5 Flash Lite PR review.\nCaptures response and cost for comparison with other models.",
          "Load the PR review prompt.",
          "Simulate the expected response from Gemini 2.5 Flash Lite.\nThis would normally be an API call to Gemini.",
          "Run the Gemini 2.5 Flash Lite PR review test."
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "load_pr_review_prompt",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "simulate_gemini_2_5_flash_lite_response",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 10,
          "cognitive": 7,
          "nesting": 0,
          "statements": 35
        },
        "nesting_depth": 12,
        "ast_nodes": 676,
        "structure_hash": "9aa8f52bad53909f0ade30e8a6495299"
      },
      "complexity_score": 10,
      "structure_hash": "9aa8f52bad53909f0ade30e8a6495299",
      "lines_of_code": 199,
      "created_at": "2025-08-03T10:06:03.474754",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_mdc_generator.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_mdc_generator.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import sys",
          "import pytest",
          "import tempfile",
          "import yaml",
          "from pathlib import Path",
          "from typing import Any",
          "from mdc_generator import MDCFile",
          "from mdc_generator import MDCFrontmatter",
          "from mdc_generator import MDCGenerator"
        ],
        "functions": [
          {
            "name": "test_integration",
            "parameters": [],
            "docstring": "Test full integration workflow",
            "lineno": 181,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_mdc_generator_static_type_checking",
            "parameters": [],
            "docstring": "Test that MDC generator components have proper type annotations",
            "lineno": 196,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_frontmatter_creation",
            "parameters": [
              "self"
            ],
            "docstring": "Test creating frontmatter",
            "lineno": 22,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_frontmatter_to_yaml",
            "parameters": [
              "self"
            ],
            "docstring": "Test frontmatter to YAML conversion",
            "lineno": 32,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_mdc_file_creation",
            "parameters": [
              "self"
            ],
            "docstring": "Test creating MDC file",
            "lineno": 49,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_mdc_file_to_content",
            "parameters": [
              "self"
            ],
            "docstring": "Test MDC file to content conversion",
            "lineno": 62,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_mdc_file_from_file",
            "parameters": [
              "self"
            ],
            "docstring": "Test loading MDC file from disk",
            "lineno": 83,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_mdc_file_create_rule",
            "parameters": [
              "self"
            ],
            "docstring": "Test creating a rule from MDC file",
            "lineno": 110,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_generator_creation",
            "parameters": [
              "self"
            ],
            "docstring": "Test creating generator",
            "lineno": 130,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_generate_all_rules",
            "parameters": [
              "self"
            ],
            "docstring": "Test generating all rules",
            "lineno": 137,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_mdc_file",
            "parameters": [
              "self"
            ],
            "docstring": "Test validating a valid MDC file",
            "lineno": 152,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_invalid_mdc_file",
            "parameters": [
              "self"
            ],
            "docstring": "Test validating an invalid MDC file",
            "lineno": 165,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestMDCFrontmatter",
            "bases": [],
            "docstring": "Test MDC frontmatter functionality",
            "lineno": 19,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_frontmatter_creation",
              "test_frontmatter_to_yaml"
            ],
            "attributes": []
          },
          {
            "name": "TestMDCFile",
            "bases": [],
            "docstring": "Test MDC file functionality",
            "lineno": 46,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_mdc_file_creation",
              "test_mdc_file_to_content",
              "test_mdc_file_from_file",
              "test_mdc_file_create_rule"
            ],
            "attributes": []
          },
          {
            "name": "TestMDCGenerator",
            "bases": [],
            "docstring": "Test MDC generator functionality",
            "lineno": 127,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_generator_creation",
              "test_generate_all_rules",
              "test_validate_mdc_file",
              "test_validate_invalid_mdc_file"
            ],
            "attributes": []
          }
        ],
        "variables": [],
        "dependencies": [
          "pytest",
          "mdc_generator",
          "yaml",
          "typing",
          "sys",
          "pathlib",
          "tempfile"
        ],
        "docstrings": [
          "Tests for MDC Generator",
          "Test MDC frontmatter functionality",
          "Test MDC file functionality",
          "Test MDC generator functionality",
          "Test full integration workflow",
          "Test that MDC generator components have proper type annotations",
          "Test creating frontmatter",
          "Test frontmatter to YAML conversion",
          "Test creating MDC file",
          "Test MDC file to content conversion",
          "Test loading MDC file from disk",
          "Test creating a rule from MDC file",
          "Test creating generator",
          "Test generating all rules",
          "Test validating a valid MDC file",
          "Test validating an invalid MDC file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 100
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_integration",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_mdc_generator_static_type_checking",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_frontmatter_creation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_frontmatter_creation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_frontmatter_to_yaml",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_frontmatter_to_yaml",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_mdc_file_creation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_mdc_file_creation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_mdc_file_to_content",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_mdc_file_to_content",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_mdc_file_from_file",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_mdc_file_from_file",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_mdc_file_create_rule",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_mdc_file_create_rule",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_generator_creation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_generator_creation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_generate_all_rules",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_generate_all_rules",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_mdc_file",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_mdc_file",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_invalid_mdc_file",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_invalid_mdc_file",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 8,
          "cognitive": 1,
          "nesting": 0,
          "statements": 56
        },
        "nesting_depth": 10,
        "ast_nodes": 972,
        "structure_hash": "7ca88cd526b7eac40827a398b421dd91"
      },
      "complexity_score": 8,
      "structure_hash": "7ca88cd526b7eac40827a398b421dd91",
      "lines_of_code": 217,
      "created_at": "2025-08-03T10:06:03.531405",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_code_quality_comprehensive.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_code_quality_comprehensive.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import re",
          "import sys",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run comprehensive code quality validation",
            "lineno": 214,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 17,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "check_duplicate_imports",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check for duplicate imports in a Python file",
            "lineno": 21,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "check_unused_imports",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check for unused imports in a Python file",
            "lineno": 60,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "check_sys_path_duplication",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check for duplicate sys.path.insert calls",
            "lineno": 108,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "check_large_strings",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check for very large multi-line strings",
            "lineno": 129,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "validate_all_test_files",
            "parameters": [
              "self"
            ],
            "docstring": "Validate all test files for code quality issues",
            "lineno": 164,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "ComprehensiveCodeQualityValidator",
            "bases": [],
            "docstring": "Validates code quality comprehensively",
            "lineno": 14,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "check_duplicate_imports",
              "check_unused_imports",
              "check_sys_path_duplication",
              "check_large_strings",
              "validate_all_test_files"
            ],
            "attributes": []
          }
        ],
        "variables": [],
        "dependencies": [
          "ast",
          "typing",
          "sys",
          "pathlib",
          "re"
        ],
        "docstrings": [
          "Comprehensive Code Quality Tests\nTests that will catch the issues Copilot is finding",
          "Validates code quality comprehensively",
          "Run comprehensive code quality validation",
          "Check for duplicate imports in a Python file",
          "Check for unused imports in a Python file",
          "Check for duplicate sys.path.insert calls",
          "Check for very large multi-line strings",
          "Validate all test files for code quality issues"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 55
              }
            ],
            "lineno": 25
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 103
              }
            ],
            "lineno": 64
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 124
              }
            ],
            "lineno": 112
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 159
              }
            ],
            "lineno": 133
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "check_duplicate_imports",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_duplicate_imports",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "check_unused_imports",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_unused_imports",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "check_sys_path_duplication",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_sys_path_duplication",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "check_large_strings",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_large_strings",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "validate_all_test_files",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_all_test_files",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 39,
          "cognitive": 37,
          "nesting": 0,
          "statements": 52
        },
        "nesting_depth": 16,
        "ast_nodes": 1175,
        "structure_hash": "4ffe4e0555a1d991d33d578ddea785b1"
      },
      "complexity_score": 39,
      "structure_hash": "4ffe4e0555a1d991d33d578ddea785b1",
      "lines_of_code": 223,
      "created_at": "2025-08-03T10:06:03.535061",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/validate_healthcare_cdc_simple.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/validate_healthcare_cdc_simple.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import Any",
          "from typing import List"
        ],
        "functions": [
          {
            "name": "load_project_model",
            "parameters": [],
            "docstring": "Load project model registry.",
            "lineno": 12,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "test_requirement_27_hipaa_compliance_validation",
            "parameters": [],
            "docstring": "Test HIPAA compliance validation requirement.",
            "lineno": 20,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_28_phi_detection_validation",
            "parameters": [],
            "docstring": "Test PHI detection and validation requirement.",
            "lineno": 64,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_29_immutable_audit_logging",
            "parameters": [],
            "docstring": "Test immutable audit logging requirement.",
            "lineno": 96,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_30_healthcare_data_encryption",
            "parameters": [],
            "docstring": "Test healthcare data encryption requirement.",
            "lineno": 126,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_31_healthcare_access_control",
            "parameters": [],
            "docstring": "Test healthcare access control and authentication requirement.",
            "lineno": 151,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_32_healthcare_cdc_cicd_integration",
            "parameters": [],
            "docstring": "Test healthcare CDC CI/CD integration requirement.",
            "lineno": 176,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_healthcare_cdc_domain_completeness",
            "parameters": [],
            "docstring": "Test that healthcare CDC domain is complete and well-structured.",
            "lineno": 225,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all healthcare CDC requirement tests.",
            "lineno": 283,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [],
        "dependencies": [
          "typing",
          "pathlib",
          "json"
        ],
        "docstrings": [
          "Simple validation script for Healthcare CDC requirements (27-32).\nBased on GA Gemini 2.5 Pro implementation plan.",
          "Load project model registry.",
          "Test HIPAA compliance validation requirement.",
          "Test PHI detection and validation requirement.",
          "Test immutable audit logging requirement.",
          "Test healthcare data encryption requirement.",
          "Test healthcare access control and authentication requirement.",
          "Test healthcare CDC CI/CD integration requirement.",
          "Test that healthcare CDC domain is complete and well-structured.",
          "Run all healthcare CDC requirement tests."
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "AssertionError",
                "lineno": 300
              },
              {
                "type": "Exception",
                "lineno": 303
              }
            ],
            "lineno": 288
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "load_project_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_27_hipaa_compliance_validation",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_28_phi_detection_validation",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_29_immutable_audit_logging",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_30_healthcare_data_encryption",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_31_healthcare_access_control",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_32_healthcare_cdc_cicd_integration",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_healthcare_cdc_domain_completeness",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 23,
          "cognitive": 22,
          "nesting": 0,
          "statements": 84
        },
        "nesting_depth": 11,
        "ast_nodes": 1358,
        "structure_hash": "05e7d630f1ab09d34b4a454b9101fc24"
      },
      "complexity_score": 23,
      "structure_hash": "05e7d630f1ab09d34b4a454b9101fc24",
      "lines_of_code": 312,
      "created_at": "2025-08-03T10:06:03.539030",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_file_existence.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_file_existence.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from pathlib import Path",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "test_all_required_files_exist",
            "parameters": [],
            "docstring": "Test that all required security files exist and are properly structured",
            "lineno": 187,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_project_structure",
            "parameters": [],
            "docstring": "Test that the project has the expected directory structure",
            "lineno": 201,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_security_first_directory",
            "parameters": [],
            "docstring": "Test that the security_first directory exists and contains expected modules",
            "lineno": 234,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 14,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_rate_limiting_module_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that rate_limiting.py exists and is properly structured",
            "lineno": 17,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_https_enforcement_module_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that https_enforcement.py exists and is properly structured",
            "lineno": 53,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_csrf_protection_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that CSRF protection is implemented",
            "lineno": 87,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_security_manager_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that security_manager.py exists and is properly structured",
            "lineno": 120,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_input_validator_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that input_validator.py exists and is properly structured",
            "lineno": 153,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "FileExistenceValidator",
            "bases": [],
            "docstring": "Validates that expected files exist and are properly structured",
            "lineno": 11,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "test_rate_limiting_module_exists",
              "test_https_enforcement_module_exists",
              "test_csrf_protection_exists",
              "test_security_manager_exists",
              "test_input_validator_exists"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "validator",
          "project_root",
          "required_dirs",
          "required_files",
          "project_root",
          "security_dir",
          "expected_modules",
          "dir_path",
          "file_path",
          "module_path"
        ],
        "dependencies": [
          "typing",
          "pathlib"
        ],
        "docstrings": [
          "File Existence and Structure Validation Tests\nTests that all expected files exist and are properly structured",
          "Validates that expected files exist and are properly structured",
          "Test that all required security files exist and are properly structured",
          "Test that the project has the expected directory structure",
          "Test that the security_first directory exists and contains expected modules",
          "Test that rate_limiting.py exists and is properly structured",
          "Test that https_enforcement.py exists and is properly structured",
          "Test that CSRF protection is implemented",
          "Test that security_manager.py exists and is properly structured",
          "Test that input_validator.py exists and is properly structured"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_all_required_files_exist",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_project_structure",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_security_first_directory",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_rate_limiting_module_exists",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_rate_limiting_module_exists",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_https_enforcement_module_exists",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_https_enforcement_module_exists",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_csrf_protection_exists",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_csrf_protection_exists",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_security_manager_exists",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_security_manager_exists",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_input_validator_exists",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_input_validator_exists",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 14,
          "cognitive": 8,
          "nesting": 0,
          "statements": 62
        },
        "nesting_depth": 9,
        "ast_nodes": 800,
        "structure_hash": "e13a26284be76da58cc74133d1744bc0"
      },
      "complexity_score": 14,
      "structure_hash": "e13a26284be76da58cc74133d1744bc0",
      "lines_of_code": 256,
      "created_at": "2025-08-03T10:06:03.559762",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_security_enhancements.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_security_enhancements.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import sys",
          "from pathlib import Path",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "load_project_model",
            "parameters": [],
            "docstring": "Load the project model registry.",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "returns": "Any",
            "has_async": false
          },
          {
            "name": "test_requirement_33_https_enforcement",
            "parameters": [],
            "docstring": "Test HTTPS enforcement requirement.",
            "lineno": 23,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_34_rate_limiting",
            "parameters": [],
            "docstring": "Test rate limiting requirement.",
            "lineno": 63,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_35_csrf_protection",
            "parameters": [],
            "docstring": "Test CSRF protection requirement.",
            "lineno": 100,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_security_enhancements_completeness",
            "parameters": [],
            "docstring": "Test that all security enhancements are properly implemented.",
            "lineno": 134,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all security enhancement tests.",
            "lineno": 179,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [],
        "dependencies": [
          "typing",
          "sys",
          "pathlib",
          "json"
        ],
        "docstrings": [
          "Test Security Enhancements\nValidates the security blind spot fixes implemented based on Gemini 2.5 Flash Lite recommendations.",
          "Load the project model registry.",
          "Test HTTPS enforcement requirement.",
          "Test rate limiting requirement.",
          "Test CSRF protection requirement.",
          "Test that all security enhancements are properly implemented.",
          "Run all security enhancement tests."
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 18
              }
            ],
            "lineno": 15
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "load_project_model",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_33_https_enforcement",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_34_rate_limiting",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_35_csrf_protection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_security_enhancements_completeness",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 14,
          "cognitive": 12,
          "nesting": 0,
          "statements": 58
        },
        "nesting_depth": 8,
        "ast_nodes": 757,
        "structure_hash": "11864bacac3685fc6efb1f0b9483b412"
      },
      "complexity_score": 14,
      "structure_hash": "11864bacac3685fc6efb1f0b9483b412",
      "lines_of_code": 194,
      "created_at": "2025-08-03T10:06:03.579154",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_basic_validation_simple.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_basic_validation_simple.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import sys",
          "import os",
          "from pathlib import Path",
          "from unittest.mock import Mock",
          "from unittest.mock import patch",
          "from typing import Any",
          "import importlib.util"
        ],
        "functions": [
          {
            "name": "setup_mocks",
            "parameters": [],
            "docstring": "Setup mocks for external dependencies",
            "lineno": 17,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_security_manager_initialization",
            "parameters": [],
            "docstring": "Test SecurityManager initialization",
            "lineno": 78,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_input_validator_methods",
            "parameters": [],
            "docstring": "Test InputValidator methods",
            "lineno": 97,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_deployment_manager_initialization",
            "parameters": [],
            "docstring": "Test DeploymentManager initialization",
            "lineno": 119,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_monitoring_dashboard_initialization",
            "parameters": [],
            "docstring": "Test MonitoringDashboard initialization",
            "lineno": 131,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_openflow_app_initialization",
            "parameters": [],
            "docstring": "Test OpenFlowQuickstartApp initialization",
            "lineno": 143,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_config_classes",
            "parameters": [],
            "docstring": "Test configuration classes",
            "lineno": 155,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_security_config",
            "parameters": [],
            "docstring": "Test security configuration",
            "lineno": 186,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all basic validation tests",
            "lineno": 199,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "tests",
          "passed",
          "total",
          "success",
          "validator",
          "test_uuid",
          "result",
          "test_url",
          "result",
          "manager",
          "dashboard",
          "app",
          "snowflake_config",
          "openflow_config"
        ],
        "dependencies": [
          "typing",
          "unittest",
          "sys",
          "pathlib",
          "importlib",
          "os"
        ],
        "docstrings": [
          "Simplified Basic Validation Tests\nTests core functionality without pytest dependency",
          "Setup mocks for external dependencies",
          "Test SecurityManager initialization",
          "Test InputValidator methods",
          "Test DeploymentManager initialization",
          "Test MonitoringDashboard initialization",
          "Test OpenFlowQuickstartApp initialization",
          "Test configuration classes",
          "Test security configuration",
          "Run all basic validation tests"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 73
              }
            ],
            "lineno": 47
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 92
              }
            ],
            "lineno": 80
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 114
              }
            ],
            "lineno": 99
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 126
              }
            ],
            "lineno": 121
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 138
              }
            ],
            "lineno": 133
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 150
              }
            ],
            "lineno": 145
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 181
              }
            ],
            "lineno": 157
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 194
              }
            ],
            "lineno": 188
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 222
              }
            ],
            "lineno": 218
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "setup_mocks",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_security_manager_initialization",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_input_validator_methods",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_deployment_manager_initialization",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_monitoring_dashboard_initialization",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_openflow_app_initialization",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_config_classes",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_security_config",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 17,
          "cognitive": 15,
          "nesting": 0,
          "statements": 102
        },
        "nesting_depth": 10,
        "ast_nodes": 949,
        "structure_hash": "fe0914161e6d12fd216d57777c7a6604"
      },
      "complexity_score": 17,
      "structure_hash": "fe0914161e6d12fd216d57777c7a6604",
      "lines_of_code": 240,
      "created_at": "2025-08-03T10:06:03.614912",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_code_quality_system.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_code_quality_system.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import pytest",
          "import tempfile",
          "import shutil",
          "from pathlib import Path",
          "from typing import Any",
          "from src.code_quality_system.quality_model import CodeQualityModel",
          "from src.code_quality_system.quality_model import LintingRule"
        ],
        "functions": [
          {
            "name": "test_code_quality_integration",
            "parameters": [],
            "docstring": "Test integration of code quality system",
            "lineno": 276,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_code_quality_performance",
            "parameters": [],
            "docstring": "Test performance of code quality system",
            "lineno": 307,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Set up test fixtures",
            "lineno": 17,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "teardown_method",
            "parameters": [
              "self"
            ],
            "docstring": "Clean up test fixtures",
            "lineno": 22,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_model_initialization",
            "parameters": [
              "self"
            ],
            "docstring": "Test that the model initializes correctly",
            "lineno": 26,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_rules_definition",
            "parameters": [
              "self"
            ],
            "docstring": "Test that all rules are properly defined",
            "lineno": 34,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_fixers_definition",
            "parameters": [
              "self"
            ],
            "docstring": "Test that all fixers are properly defined",
            "lineno": 45,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "create_test_file",
            "parameters": [
              "self",
              "content",
              "filename"
            ],
            "docstring": "Create a test file with given content",
            "lineno": 53,
            "col_offset": 4,
            "decorators": [],
            "returns": "Path",
            "has_async": false
          },
          {
            "name": "test_fix_unused_imports",
            "parameters": [
              "self"
            ],
            "docstring": "Test fixing unused imports",
            "lineno": 60,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_fix_f_strings",
            "parameters": [
              "self"
            ],
            "docstring": "Test fixing f-strings without placeholders",
            "lineno": 85,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_fix_trailing_whitespace",
            "parameters": [
              "self"
            ],
            "docstring": "Test fixing trailing whitespace",
            "lineno": 109,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_fix_bare_except",
            "parameters": [
              "self"
            ],
            "docstring": "Test fixing bare except clauses",
            "lineno": 131,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_analyze_file",
            "parameters": [
              "self"
            ],
            "docstring": "Test file analysis",
            "lineno": 153,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_fix_file",
            "parameters": [
              "self"
            ],
            "docstring": "Test fixing a single file",
            "lineno": 172,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_fix_all_files",
            "parameters": [
              "self"
            ],
            "docstring": "Test fixing all files in a directory",
            "lineno": 191,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_linting_rule_creation",
            "parameters": [
              "self"
            ],
            "docstring": "Test creating a linting rule",
            "lineno": 222,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_linting_rule_application",
            "parameters": [
              "self"
            ],
            "docstring": "Test applying a linting rule",
            "lineno": 239,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "dummy_fix",
            "parameters": [
              "file_path"
            ],
            "docstring": null,
            "lineno": 225,
            "col_offset": 8,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_fix",
            "parameters": [
              "file_path"
            ],
            "docstring": null,
            "lineno": 248,
            "col_offset": 12,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestCodeQualityModel",
            "bases": [],
            "docstring": "Test the code quality model",
            "lineno": 14,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "teardown_method",
              "test_model_initialization",
              "test_rules_definition",
              "test_fixers_definition",
              "create_test_file",
              "test_fix_unused_imports",
              "test_fix_f_strings",
              "test_fix_trailing_whitespace",
              "test_fix_bare_except",
              "test_analyze_file",
              "test_fix_file",
              "test_fix_all_files"
            ],
            "attributes": []
          },
          {
            "name": "TestLintingRule",
            "bases": [],
            "docstring": "Test the LintingRule dataclass",
            "lineno": 219,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_linting_rule_creation",
              "test_linting_rule_application"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "model",
          "test_dir",
          "model",
          "test_dir",
          "test_dir",
          "test_file",
          "analysis",
          "result",
          "result",
          "test_file",
          "rule",
          "result",
          "test_file",
          "content",
          "content"
        ],
        "dependencies": [
          "pytest",
          "src",
          "typing",
          "pathlib",
          "shutil",
          "tempfile"
        ],
        "docstrings": [
          "Tests for the Code Quality System",
          "Test the code quality model",
          "Test the LintingRule dataclass",
          "Test integration of code quality system",
          "Test performance of code quality system",
          "Set up test fixtures",
          "Clean up test fixtures",
          "Test that the model initializes correctly",
          "Test that all rules are properly defined",
          "Test that all fixers are properly defined",
          "Create a test file with given content",
          "Test fixing unused imports",
          "Test fixing f-strings without placeholders",
          "Test fixing trailing whitespace",
          "Test fixing bare except clauses",
          "Test file analysis",
          "Test fixing a single file",
          "Test fixing all files in a directory",
          "Test creating a linting rule",
          "Test applying a linting rule"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 282
          },
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 313
          },
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 242
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_code_quality_integration",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_code_quality_performance",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "setup_method",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "teardown_method",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "teardown_method",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_model_initialization",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_model_initialization",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_rules_definition",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_rules_definition",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_fixers_definition",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_fixers_definition",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "create_test_file",
            "annotation": "Path"
          },
          {
            "type": "parameter_annotation",
            "function": "create_test_file",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "create_test_file",
            "parameter": "filename",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "test_fix_unused_imports",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_fix_unused_imports",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_fix_f_strings",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_fix_f_strings",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_fix_trailing_whitespace",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_fix_trailing_whitespace",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_fix_bare_except",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_fix_bare_except",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_analyze_file",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_analyze_file",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_fix_file",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_fix_file",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_fix_all_files",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_fix_all_files",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_linting_rule_creation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_linting_rule_creation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_linting_rule_application",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_linting_rule_application",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "dummy_fix",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "dummy_fix",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "test_fix",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "test_fix",
            "parameter": "file_path",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 15,
          "cognitive": 3,
          "nesting": 0,
          "statements": 104
        },
        "nesting_depth": 10,
        "ast_nodes": 1354,
        "structure_hash": "ec7d05ebe3b08286cebc3121b59dd669"
      },
      "complexity_score": 15,
      "structure_hash": "ec7d05ebe3b08286cebc3121b59dd669",
      "lines_of_code": 331,
      "created_at": "2025-08-03T10:06:03.623858",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_uv_package_management.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_uv_package_management.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import subprocess",
          "import sys",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all UV package management tests.",
            "lineno": 239,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": "Initialize test environment",
            "lineno": 17,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "load_project_model",
            "parameters": [
              "self"
            ],
            "docstring": "Load the project model registry",
            "lineno": 21,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "test_requirement_36_uv_package_management",
            "parameters": [
              "self"
            ],
            "docstring": "Test UV package management enforcement requirement.",
            "lineno": 27,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_37_streamlit_dependencies_uv",
            "parameters": [
              "self"
            ],
            "docstring": "Test Streamlit app dependencies with UV requirement.",
            "lineno": 69,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_38_security_dependencies_uv",
            "parameters": [
              "self"
            ],
            "docstring": "Test security-first dependencies with UV requirement.",
            "lineno": 110,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_39_dev_dependencies_uv",
            "parameters": [
              "self"
            ],
            "docstring": "Test development dependencies with UV requirement.",
            "lineno": 148,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_uv_rule_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that UV rule exists in the project model.",
            "lineno": 187,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_uv_commands_work",
            "parameters": [
              "self"
            ],
            "docstring": "Test that UV commands work correctly.",
            "lineno": 210,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestUVPackageManagement",
            "bases": [],
            "docstring": "Test UV package management requirements",
            "lineno": 14,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "load_project_model",
              "test_requirement_36_uv_package_management",
              "test_requirement_37_streamlit_dependencies_uv",
              "test_requirement_38_security_dependencies_uv",
              "test_requirement_39_dev_dependencies_uv",
              "test_uv_rule_exists",
              "test_uv_commands_work"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "tester",
          "tests",
          "passed",
          "total",
          "success",
          "result",
          "pyproject_file",
          "uv_lock_file"
        ],
        "dependencies": [
          "json",
          "typing",
          "sys",
          "pathlib",
          "subprocess"
        ],
        "docstrings": [
          "Tests for UV Package Management Requirements\nTests that UV is properly configured and all dependencies are managed correctly",
          "Test UV package management requirements",
          "Run all UV package management tests.",
          "Initialize test environment",
          "Load the project model registry",
          "Test UV package management enforcement requirement.",
          "Test Streamlit app dependencies with UV requirement.",
          "Test security-first dependencies with UV requirement.",
          "Test development dependencies with UV requirement.",
          "Test that UV rule exists in the project model.",
          "Test that UV commands work correctly."
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 232
              }
            ],
            "lineno": 215
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 263
              }
            ],
            "lineno": 259
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "load_project_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "load_project_model",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_36_uv_package_management",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_36_uv_package_management",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_37_streamlit_dependencies_uv",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_37_streamlit_dependencies_uv",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_38_security_dependencies_uv",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_38_security_dependencies_uv",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_39_dev_dependencies_uv",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_39_dev_dependencies_uv",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_uv_rule_exists",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_uv_rule_exists",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_uv_commands_work",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_uv_commands_work",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 26,
          "cognitive": 21,
          "nesting": 0,
          "statements": 82
        },
        "nesting_depth": 10,
        "ast_nodes": 1133,
        "structure_hash": "8feffcf21e5824b90ad7378ff6416f08"
      },
      "complexity_score": 26,
      "structure_hash": "8feffcf21e5824b90ad7378ff6416f08",
      "lines_of_code": 281,
      "created_at": "2025-08-03T10:06:03.674551",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_basic_validation_pytest.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_basic_validation_pytest.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import pytest",
          "import sys",
          "from pathlib import Path",
          "from unittest.mock import Mock",
          "from unittest.mock import patch",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "setup_mocks",
            "parameters": [],
            "docstring": "Setup mocks for external dependencies",
            "lineno": 17,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_test_environment",
            "parameters": [],
            "docstring": "Setup test environment with mocks",
            "lineno": 35,
            "col_offset": 0,
            "decorators": [
              "unknown"
            ],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 43,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_credential_encryption_decryption",
            "parameters": [
              "self"
            ],
            "docstring": "Test credential encryption and decryption",
            "lineno": 52,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_secure_credential_storage",
            "parameters": [
              "self"
            ],
            "docstring": "Test secure credential storage",
            "lineno": 72,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_session_token_creation",
            "parameters": [
              "self"
            ],
            "docstring": "Test JWT session token creation",
            "lineno": 93,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_session_validation",
            "parameters": [
              "self"
            ],
            "docstring": "Test session token validation",
            "lineno": 106,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 121,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_snowflake_url_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid Snowflake URL validation",
            "lineno": 127,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_snowflake_url_invalid",
            "parameters": [
              "self"
            ],
            "docstring": "Test invalid Snowflake URL validation",
            "lineno": 143,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_uuid_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid UUID validation",
            "lineno": 161,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_uuid_invalid",
            "parameters": [
              "self"
            ],
            "docstring": "Test invalid UUID validation",
            "lineno": 177,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_sanitize_input",
            "parameters": [
              "self"
            ],
            "docstring": "Test input sanitization",
            "lineno": 194,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_oauth_credentials_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid OAuth credential validation",
            "lineno": 211,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_oauth_credentials_invalid",
            "parameters": [
              "self"
            ],
            "docstring": "Test invalid OAuth credential validation",
            "lineno": 233,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 258,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_deploy_stack_success",
            "parameters": [
              "self"
            ],
            "docstring": "Test successful stack deployment",
            "lineno": 264,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_deploy_stack_failure",
            "parameters": [
              "self"
            ],
            "docstring": "Test failed stack deployment",
            "lineno": 279,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_get_stack_status",
            "parameters": [
              "self"
            ],
            "docstring": "Test getting stack status",
            "lineno": 295,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_get_stack_events",
            "parameters": [
              "self"
            ],
            "docstring": "Test getting stack events",
            "lineno": 304,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 321,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_create_deployment_timeline",
            "parameters": [
              "self"
            ],
            "docstring": "Test deployment timeline creation",
            "lineno": 328,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_create_resource_status_matrix",
            "parameters": [
              "self"
            ],
            "docstring": "Test resource status matrix creation",
            "lineno": 340,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 358,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_app_initialization",
            "parameters": [
              "self"
            ],
            "docstring": "Test application initialization",
            "lineno": 364,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_credentials_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid credential validation",
            "lineno": 369,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_credentials_invalid",
            "parameters": [
              "self"
            ],
            "docstring": "Test invalid credential validation",
            "lineno": 378,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_snowflake_config_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid SnowflakeConfig validation",
            "lineno": 391,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_openflow_config_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid OpenFlowConfig validation",
            "lineno": 400,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_secure_session_configuration",
            "parameters": [
              "self"
            ],
            "docstring": "Test secure session configuration",
            "lineno": 413,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_input_validation_coverage",
            "parameters": [
              "self"
            ],
            "docstring": "Test input validation coverage",
            "lineno": 427,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_color_contrast_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test color contrast compliance",
            "lineno": 446,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_keyboard_navigation",
            "parameters": [
              "self"
            ],
            "docstring": "Test keyboard navigation support",
            "lineno": 451,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_screen_reader_support",
            "parameters": [
              "self"
            ],
            "docstring": "Test screen reader support",
            "lineno": 456,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_caching_implementation",
            "parameters": [
              "self"
            ],
            "docstring": "Test caching implementation",
            "lineno": 465,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_memory_management",
            "parameters": [
              "self"
            ],
            "docstring": "Test memory management",
            "lineno": 470,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_parallel_processing",
            "parameters": [
              "self"
            ],
            "docstring": "Test parallel processing",
            "lineno": 475,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestSecurityManager",
            "bases": [],
            "docstring": "Test security-first credential and session management",
            "lineno": 40,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_credential_encryption_decryption",
              "test_secure_credential_storage",
              "test_session_token_creation",
              "test_session_validation"
            ],
            "attributes": []
          },
          {
            "name": "TestInputValidator",
            "bases": [],
            "docstring": "Test comprehensive input validation and sanitization",
            "lineno": 118,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_validate_snowflake_url_valid",
              "test_validate_snowflake_url_invalid",
              "test_validate_uuid_valid",
              "test_validate_uuid_invalid",
              "test_sanitize_input",
              "test_validate_oauth_credentials_valid",
              "test_validate_oauth_credentials_invalid"
            ],
            "attributes": []
          },
          {
            "name": "TestDeploymentManager",
            "bases": [],
            "docstring": "Test AWS CloudFormation deployment management",
            "lineno": 255,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_deploy_stack_success",
              "test_deploy_stack_failure",
              "test_get_stack_status",
              "test_get_stack_events"
            ],
            "attributes": []
          },
          {
            "name": "TestMonitoringDashboard",
            "bases": [],
            "docstring": "Test real-time monitoring and visualization dashboard",
            "lineno": 318,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_create_deployment_timeline",
              "test_create_resource_status_matrix"
            ],
            "attributes": []
          },
          {
            "name": "TestOpenFlowQuickstartApp",
            "bases": [],
            "docstring": "Test OpenFlow Quickstart Streamlit application",
            "lineno": 355,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_app_initialization",
              "test_validate_credentials_valid",
              "test_validate_credentials_invalid"
            ],
            "attributes": []
          },
          {
            "name": "TestPydanticModels",
            "bases": [],
            "docstring": "Test Pydantic model validation",
            "lineno": 388,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_snowflake_config_valid",
              "test_openflow_config_valid"
            ],
            "attributes": []
          },
          {
            "name": "TestSecurityFirstArchitecture",
            "bases": [],
            "docstring": "Test security-first architecture principles",
            "lineno": 410,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_secure_session_configuration",
              "test_input_validation_coverage"
            ],
            "attributes": []
          },
          {
            "name": "TestAccessibilityCompliance",
            "bases": [],
            "docstring": "Test accessibility compliance features",
            "lineno": 443,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_color_contrast_compliance",
              "test_keyboard_navigation",
              "test_screen_reader_support"
            ],
            "attributes": []
          },
          {
            "name": "TestPerformanceOptimization",
            "bases": [],
            "docstring": "Test performance optimization features",
            "lineno": 462,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_caching_implementation",
              "test_memory_management",
              "test_parallel_processing"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "validator"
        ],
        "dependencies": [
          "pytest",
          "typing",
          "unittest",
          "sys",
          "pathlib"
        ],
        "docstrings": [
          "Pytest-compatible Basic Validation Tests\nTests core functionality with proper mocking",
          "Setup mocks for external dependencies",
          "Setup test environment with mocks",
          "Test security-first credential and session management",
          "Test comprehensive input validation and sanitization",
          "Test AWS CloudFormation deployment management",
          "Test real-time monitoring and visualization dashboard",
          "Test OpenFlow Quickstart Streamlit application",
          "Test Pydantic model validation",
          "Test security-first architecture principles",
          "Test accessibility compliance features",
          "Test performance optimization features",
          "Setup test environment",
          "Test credential encryption and decryption",
          "Test secure credential storage",
          "Test JWT session token creation",
          "Test session token validation",
          "Setup test environment",
          "Test valid Snowflake URL validation",
          "Test invalid Snowflake URL validation",
          "Test valid UUID validation",
          "Test invalid UUID validation",
          "Test input sanitization",
          "Test valid OAuth credential validation",
          "Test invalid OAuth credential validation",
          "Setup test environment",
          "Test successful stack deployment",
          "Test failed stack deployment",
          "Test getting stack status",
          "Test getting stack events",
          "Setup test environment",
          "Test deployment timeline creation",
          "Test resource status matrix creation",
          "Setup test environment",
          "Test application initialization",
          "Test valid credential validation",
          "Test invalid credential validation",
          "Test valid SnowflakeConfig validation",
          "Test valid OpenFlowConfig validation",
          "Test secure session configuration",
          "Test input validation coverage",
          "Test color contrast compliance",
          "Test keyboard navigation support",
          "Test screen reader support",
          "Test caching implementation",
          "Test memory management",
          "Test parallel processing"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "setup_mocks",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "setup_test_environment",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "setup_method",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_credential_encryption_decryption",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_credential_encryption_decryption",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_secure_credential_storage",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_secure_credential_storage",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_session_token_creation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_session_token_creation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_session_validation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_session_validation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "setup_method",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_snowflake_url_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_snowflake_url_valid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_snowflake_url_invalid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_snowflake_url_invalid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_uuid_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_uuid_valid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_uuid_invalid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_uuid_invalid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_sanitize_input",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_sanitize_input",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_oauth_credentials_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_oauth_credentials_valid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_oauth_credentials_invalid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_oauth_credentials_invalid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "setup_method",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_deploy_stack_success",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_deploy_stack_success",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_deploy_stack_failure",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_deploy_stack_failure",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_get_stack_status",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_get_stack_status",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_get_stack_events",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_get_stack_events",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "setup_method",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_create_deployment_timeline",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_create_deployment_timeline",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_create_resource_status_matrix",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_create_resource_status_matrix",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "setup_method",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_app_initialization",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_app_initialization",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_credentials_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_credentials_valid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_credentials_invalid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_credentials_invalid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_snowflake_config_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_snowflake_config_valid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_openflow_config_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_openflow_config_valid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_secure_session_configuration",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_secure_session_configuration",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_input_validation_coverage",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_input_validation_coverage",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_color_contrast_compliance",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_color_contrast_compliance",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_keyboard_navigation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_keyboard_navigation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_screen_reader_support",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_screen_reader_support",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_caching_implementation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_caching_implementation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_memory_management",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_memory_management",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_parallel_processing",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_parallel_processing",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 30,
          "cognitive": 8,
          "nesting": 0,
          "statements": 140
        },
        "nesting_depth": 10,
        "ast_nodes": 1864,
        "structure_hash": "d009df1c4a31de288e13364ec172486d"
      },
      "complexity_score": 30,
      "structure_hash": "d009df1c4a31de288e13364ec172486d",
      "lines_of_code": 479,
      "created_at": "2025-08-03T10:06:03.680628",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_makefile_integration.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_makefile_integration.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import subprocess",
          "import sys",
          "import re",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all Makefile integration tests",
            "lineno": 234,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": "Initialize test environment",
            "lineno": 18,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "load_project_model",
            "parameters": [
              "self"
            ],
            "docstring": "Load the project model registry",
            "lineno": 24,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "test_makefile_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that Makefile exists and is properly structured.",
            "lineno": 29,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_makefile_domains_match_model",
            "parameters": [
              "self"
            ],
            "docstring": "Test that Makefile domains match the model registry.",
            "lineno": 57,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_makefile_help_works",
            "parameters": [
              "self"
            ],
            "docstring": "Test that make help works and shows proper information.",
            "lineno": 82,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_makefile_show_domains_works",
            "parameters": [
              "self"
            ],
            "docstring": "Test that make show-domains works and shows domain information.",
            "lineno": 105,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_makefile_show_rules_works",
            "parameters": [
              "self"
            ],
            "docstring": "Test that make show-rules works and shows rule information.",
            "lineno": 128,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_makefile_validate_model_works",
            "parameters": [
              "self"
            ],
            "docstring": "Test that make validate-model works and validates the model.",
            "lineno": 150,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_makefile_targets_are_sensible",
            "parameters": [
              "self"
            ],
            "docstring": "Test that Makefile targets are sensible and well-structured.",
            "lineno": 172,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_makefile_leverages_model_driven_approach",
            "parameters": [
              "self"
            ],
            "docstring": "Test that Makefile properly leverages the model-driven approach.",
            "lineno": 202,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestMakefileIntegration",
            "bases": [],
            "docstring": "Test Makefile integration with model-driven approach",
            "lineno": 15,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "load_project_model",
              "test_makefile_exists",
              "test_makefile_domains_match_model",
              "test_makefile_help_works",
              "test_makefile_show_domains_works",
              "test_makefile_show_rules_works",
              "test_makefile_validate_model_works",
              "test_makefile_targets_are_sensible",
              "test_makefile_leverages_model_driven_approach"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "tester",
          "tests",
          "passed",
          "total",
          "success",
          "model_domains",
          "install_targets",
          "makefile_domains",
          "key_domains",
          "essential_targets",
          "domains",
          "result",
          "help_output",
          "result",
          "output",
          "result",
          "output",
          "result",
          "output"
        ],
        "dependencies": [
          "subprocess",
          "json",
          "typing",
          "sys",
          "pathlib",
          "re"
        ],
        "docstrings": [
          "Tests for Makefile Integration with Model-Driven Approach\nTests that the Makefile properly leverages the project_model_registry.json",
          "Test Makefile integration with model-driven approach",
          "Run all Makefile integration tests",
          "Initialize test environment",
          "Load the project model registry",
          "Test that Makefile exists and is properly structured.",
          "Test that Makefile domains match the model registry.",
          "Test that make help works and shows proper information.",
          "Test that make show-domains works and shows domain information.",
          "Test that make show-rules works and shows rule information.",
          "Test that make validate-model works and validates the model.",
          "Test that Makefile targets are sensible and well-structured.",
          "Test that Makefile properly leverages the model-driven approach."
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 99
              }
            ],
            "lineno": 86
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 122
              }
            ],
            "lineno": 109
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 144
              }
            ],
            "lineno": 132
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 166
              }
            ],
            "lineno": 154
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 260
              }
            ],
            "lineno": 256
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "load_project_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "load_project_model",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_makefile_exists",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_makefile_exists",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_makefile_domains_match_model",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_makefile_domains_match_model",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_makefile_help_works",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_makefile_help_works",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_makefile_show_domains_works",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_makefile_show_domains_works",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_makefile_show_rules_works",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_makefile_show_rules_works",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_makefile_validate_model_works",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_makefile_validate_model_works",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_makefile_targets_are_sensible",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_makefile_targets_are_sensible",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_makefile_leverages_model_driven_approach",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_makefile_leverages_model_driven_approach",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 18,
          "cognitive": 13,
          "nesting": 0,
          "statements": 115
        },
        "nesting_depth": 10,
        "ast_nodes": 1156,
        "structure_hash": "85ca294564fbecb30941fa4d6002c237"
      },
      "complexity_score": 18,
      "structure_hash": "85ca294564fbecb30941fa4d6002c237",
      "lines_of_code": 278,
      "created_at": "2025-08-03T10:06:03.725428",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_type_safety.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_type_safety.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import subprocess",
          "import sys",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "import pytest"
        ],
        "functions": [
          {
            "name": "test_type_safety_enforcement",
            "parameters": [],
            "docstring": "Test that type safety is properly enforced",
            "lineno": 136,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_mypy_configuration",
            "parameters": [],
            "docstring": "Test that mypy is properly configured",
            "lineno": 163,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_type_annotation_coverage",
            "parameters": [],
            "docstring": "Test that type annotations are properly covered",
            "lineno": 193,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all type safety tests",
            "lineno": 218,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": "Initialize the validator",
            "lineno": 18,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "find_python_files",
            "parameters": [
              "self"
            ],
            "docstring": "Find all Python files in the project",
            "lineno": 24,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Path]",
            "has_async": false
          },
          {
            "name": "validate_file_type_annotations",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Validate type annotations in a single file",
            "lineno": 38,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "run_mypy_check",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Run mypy on a single file",
            "lineno": 81,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "validate_all_files",
            "parameters": [
              "self"
            ],
            "docstring": "Validate type safety across all Python files",
            "lineno": 98,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "generate_type_safety_report",
            "parameters": [
              "self"
            ],
            "docstring": "Generate a comprehensive type safety report",
            "lineno": 119,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TypeSafetyValidator",
            "bases": [],
            "docstring": "Validates type safety across the codebase",
            "lineno": 15,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "find_python_files",
              "validate_file_type_annotations",
              "run_mypy_check",
              "validate_all_files",
              "generate_type_safety_report"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "validator",
          "report",
          "compliance_rate",
          "validator",
          "python_files",
          "test_files",
          "total_annotation_errors",
          "tests",
          "passed",
          "total",
          "success",
          "all_errors",
          "total_files",
          "files_with_errors",
          "total_errors",
          "result",
          "test_file",
          "validator",
          "errors",
          "errors",
          "result",
          "annotation_errors",
          "mypy_errors"
        ],
        "dependencies": [
          "pytest",
          "ast",
          "typing",
          "sys",
          "pathlib",
          "subprocess"
        ],
        "docstrings": [
          "Type Safety Test Suite\nValidates that all Python files have proper type annotations",
          "Validates type safety across the codebase",
          "Test that type safety is properly enforced",
          "Test that mypy is properly configured",
          "Test that type annotations are properly covered",
          "Run all type safety tests",
          "Initialize the validator",
          "Find all Python files in the project",
          "Validate type annotations in a single file",
          "Run mypy on a single file",
          "Validate type safety across all Python files",
          "Generate a comprehensive type safety report"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 186
              }
            ],
            "lineno": 168
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 77
              }
            ],
            "lineno": 41
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 94
              }
            ],
            "lineno": 84
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 237
              }
            ],
            "lineno": 233
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_type_safety_enforcement",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_mypy_configuration",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_type_annotation_coverage",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "find_python_files",
            "annotation": "List[Path]"
          },
          {
            "type": "parameter_annotation",
            "function": "find_python_files",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "validate_file_type_annotations",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_file_type_annotations",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "run_mypy_check",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "run_mypy_check",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "validate_all_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_all_files",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "generate_type_safety_report",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_type_safety_report",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 29,
          "cognitive": 30,
          "nesting": 0,
          "statements": 89
        },
        "nesting_depth": 15,
        "ast_nodes": 1283,
        "structure_hash": "0f5f96c95b94cbe640935621c7684b3d"
      },
      "complexity_score": 29,
      "structure_hash": "0f5f96c95b94cbe640935621c7684b3d",
      "lines_of_code": 255,
      "created_at": "2025-08-03T10:06:03.738833",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_gemini_2_5_preview_pr_review.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_gemini_2_5_preview_pr_review.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import time",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "load_pr_review_prompt",
            "parameters": [],
            "docstring": "Load the PR review prompt.",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "simulate_gemini_2_5_preview_response",
            "parameters": [],
            "docstring": "Simulate the expected response from Gemini 2.5 Preview.\nThis would normally be an API call to Gemini.",
            "lineno": 22,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "test_gemini_2_5_preview_pr_review",
            "parameters": [],
            "docstring": "Test Gemini 2.5 Preview PR review functionality.",
            "lineno": 136,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_cost_analysis",
            "parameters": [],
            "docstring": "Test cost analysis functionality.",
            "lineno": 189,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_performance_metrics",
            "parameters": [],
            "docstring": "Test performance metrics functionality.",
            "lineno": 208,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all Gemini 2.5 Preview PR review tests.",
            "lineno": 228,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "prompt_path",
          "start_time",
          "response",
          "response",
          "review",
          "blind_spots",
          "expected_categories",
          "recommendations",
          "metrics",
          "response",
          "cost_analysis",
          "priority_order",
          "response",
          "metrics",
          "tests",
          "passed",
          "total",
          "success",
          "prompt",
          "prompt"
        ],
        "dependencies": [
          "typing",
          "time",
          "pathlib",
          "json"
        ],
        "docstrings": [
          "Test script for Gemini 2.5 Preview PR review.\nCaptures response and cost for comparison with other models.",
          "Load the PR review prompt.",
          "Simulate the expected response from Gemini 2.5 Preview.\nThis would normally be an API call to Gemini.",
          "Test Gemini 2.5 Preview PR review functionality.",
          "Test cost analysis functionality.",
          "Test performance metrics functionality.",
          "Run all Gemini 2.5 Preview PR review tests."
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "FileNotFoundError",
                "lineno": 145
              }
            ],
            "lineno": 141
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 247
              }
            ],
            "lineno": 243
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "load_pr_review_prompt",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "simulate_gemini_2_5_preview_response",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "test_gemini_2_5_preview_pr_review",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_cost_analysis",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_performance_metrics",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 9,
          "cognitive": 7,
          "nesting": 0,
          "statements": 78
        },
        "nesting_depth": 10,
        "ast_nodes": 747,
        "structure_hash": "e9a0a128cb16a4de9f0bb806647a292c"
      },
      "complexity_score": 9,
      "structure_hash": "e9a0a128cb16a4de9f0bb806647a292c",
      "lines_of_code": 265,
      "created_at": "2025-08-03T10:06:03.738457",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_healthcare_cdc_requirements.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_healthcare_cdc_requirements.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import pytest",
          "import json",
          "import fnmatch",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import Any",
          "from typing import List",
          "import sys"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all healthcare CDC requirement tests.",
            "lineno": 266,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment.",
            "lineno": 17,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "load_project_model",
            "parameters": [
              "self"
            ],
            "docstring": "Load project model registry.",
            "lineno": 23,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "test_requirement_27_hipaa_compliance_validation",
            "parameters": [
              "self"
            ],
            "docstring": "Test HIPAA compliance validation requirement.",
            "lineno": 29,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_28_phi_detection_validation",
            "parameters": [
              "self"
            ],
            "docstring": "Test PHI detection and validation requirement.",
            "lineno": 63,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_29_immutable_audit_logging",
            "parameters": [
              "self"
            ],
            "docstring": "Test immutable audit logging requirement.",
            "lineno": 91,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_30_healthcare_data_encryption",
            "parameters": [
              "self"
            ],
            "docstring": "Test healthcare data encryption requirement.",
            "lineno": 119,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_31_healthcare_access_control",
            "parameters": [
              "self"
            ],
            "docstring": "Test healthcare access control requirement.",
            "lineno": 147,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_requirement_32_healthcare_cdc_cicd_integration",
            "parameters": [
              "self"
            ],
            "docstring": "Test healthcare CDC CI/CD integration requirement.",
            "lineno": 175,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_healthcare_cdc_domain_completeness",
            "parameters": [
              "self"
            ],
            "docstring": "Test that healthcare CDC domain is complete.",
            "lineno": 203,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_healthcare_cdc_file_organization",
            "parameters": [
              "self"
            ],
            "docstring": "Test healthcare CDC file organization.",
            "lineno": 239,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestHealthcareCDCRequirements",
            "bases": [],
            "docstring": "Test suite for Healthcare CDC domain requirements.",
            "lineno": 14,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "load_project_model",
              "test_requirement_27_hipaa_compliance_validation",
              "test_requirement_28_phi_detection_validation",
              "test_requirement_29_immutable_audit_logging",
              "test_requirement_30_healthcare_data_encryption",
              "test_requirement_31_healthcare_access_control",
              "test_requirement_32_healthcare_cdc_cicd_integration",
              "test_healthcare_cdc_domain_completeness",
              "test_healthcare_cdc_file_organization"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "tester",
          "tests",
          "passed",
          "total",
          "success",
          "file_path",
          "found",
          "found",
          "found",
          "found",
          "found"
        ],
        "dependencies": [
          "pytest",
          "fnmatch",
          "json",
          "typing",
          "sys",
          "pathlib"
        ],
        "docstrings": [
          "Test suite for Healthcare CDC requirements (27-32).\nBased on GA Gemini 2.5 Pro implementation plan.",
          "Test suite for Healthcare CDC domain requirements.",
          "Run all healthcare CDC requirement tests.",
          "Setup test environment.",
          "Load project model registry.",
          "Test HIPAA compliance validation requirement.",
          "Test PHI detection and validation requirement.",
          "Test immutable audit logging requirement.",
          "Test healthcare data encryption requirement.",
          "Test healthcare access control requirement.",
          "Test healthcare CDC CI/CD integration requirement.",
          "Test that healthcare CDC domain is complete.",
          "Test healthcare CDC file organization."
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 292
              }
            ],
            "lineno": 288
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "setup_method",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "load_project_model",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "load_project_model",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_27_hipaa_compliance_validation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_27_hipaa_compliance_validation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_28_phi_detection_validation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_28_phi_detection_validation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_29_immutable_audit_logging",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_29_immutable_audit_logging",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_30_healthcare_data_encryption",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_30_healthcare_data_encryption",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_31_healthcare_access_control",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_31_healthcare_access_control",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_requirement_32_healthcare_cdc_cicd_integration",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_requirement_32_healthcare_cdc_cicd_integration",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_healthcare_cdc_domain_completeness",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_healthcare_cdc_domain_completeness",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_healthcare_cdc_file_organization",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_healthcare_cdc_file_organization",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 30,
          "cognitive": 28,
          "nesting": 0,
          "statements": 89
        },
        "nesting_depth": 11,
        "ast_nodes": 1372,
        "structure_hash": "324c62884ba8e394e010ebec9a2663fd"
      },
      "complexity_score": 30,
      "structure_hash": "324c62884ba8e394e010ebec9a2663fd",
      "lines_of_code": 311,
      "created_at": "2025-08-03T10:06:03.816076",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_code_quality.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_code_quality.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ast",
          "import re",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "test_import_cleanliness",
            "parameters": [],
            "docstring": "Test that imports are clean and organized",
            "lineno": 185,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_file_maintainability",
            "parameters": [],
            "docstring": "Test that files are maintainable",
            "lineno": 213,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_specific_issues_fixed",
            "parameters": [],
            "docstring": "Test that specific code quality issues have been addressed",
            "lineno": 243,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all code quality tests",
            "lineno": 266,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": "Initialize the validator",
            "lineno": 16,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "check_duplicate_imports",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check for duplicate imports in a Python file",
            "lineno": 20,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "check_missing_imports",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check for missing imports (basic check for common patterns)",
            "lineno": 53,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "check_file_length",
            "parameters": [
              "self",
              "file_path",
              "max_lines"
            ],
            "docstring": "Check if file is too long",
            "lineno": 81,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "check_long_strings",
            "parameters": [
              "self",
              "file_path",
              "max_string_lines"
            ],
            "docstring": "Check for very long multi-line strings",
            "lineno": 97,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "check_function_complexity",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check for overly complex functions",
            "lineno": 130,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "validate_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Validate a single file for code quality issues",
            "lineno": 155,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "validate_all_files",
            "parameters": [
              "self"
            ],
            "docstring": "Validate all Python files in the project",
            "lineno": 166,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "CodeQualityValidator",
            "bases": [],
            "docstring": "Validates code quality including imports, structure, and maintainability",
            "lineno": 13,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "check_duplicate_imports",
              "check_missing_imports",
              "check_file_length",
              "check_long_strings",
              "check_function_complexity",
              "validate_file",
              "validate_all_files"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "validator",
          "all_issues",
          "duplicate_import_issues",
          "missing_import_issues",
          "validator",
          "all_issues",
          "long_file_issues",
          "long_string_issues",
          "complex_function_issues",
          "validator",
          "test_files",
          "tests",
          "passed",
          "total",
          "success",
          "issues",
          "python_files",
          "file_path",
          "patterns",
          "lines",
          "in_string",
          "string_start",
          "file_issues",
          "issues",
          "total_issues",
          "lines",
          "in_string",
          "string_start",
          "in_string",
          "string_length",
          "function_lines"
        ],
        "dependencies": [
          "ast",
          "typing",
          "re",
          "pathlib"
        ],
        "docstrings": [
          "Code Quality Validation Tests\nTests for import cleanliness, code organization, and maintainability",
          "Validates code quality including imports, structure, and maintainability",
          "Test that imports are clean and organized",
          "Test that files are maintainable",
          "Test that specific code quality issues have been addressed",
          "Run all code quality tests",
          "Initialize the validator",
          "Check for duplicate imports in a Python file",
          "Check for missing imports (basic check for common patterns)",
          "Check if file is too long",
          "Check for very long multi-line strings",
          "Check for overly complex functions",
          "Validate a single file for code quality issues",
          "Validate all Python files in the project"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 48
              }
            ],
            "lineno": 24
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 76
              }
            ],
            "lineno": 57
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 92
              }
            ],
            "lineno": 85
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 125
              }
            ],
            "lineno": 103
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 150
              }
            ],
            "lineno": 134
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 285
              }
            ],
            "lineno": 281
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_import_cleanliness",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_file_maintainability",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_specific_issues_fixed",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "check_duplicate_imports",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_duplicate_imports",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "check_missing_imports",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_missing_imports",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "check_file_length",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_file_length",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "parameter_annotation",
            "function": "check_file_length",
            "parameter": "max_lines",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "check_long_strings",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_long_strings",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "parameter_annotation",
            "function": "check_long_strings",
            "parameter": "max_string_lines",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "check_function_complexity",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_function_complexity",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "validate_file",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_file",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "validate_all_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_all_files",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 41,
          "cognitive": 38,
          "nesting": 0,
          "statements": 97
        },
        "nesting_depth": 14,
        "ast_nodes": 1496,
        "structure_hash": "19aec51eb09263fc999365e881d87212"
      },
      "complexity_score": 41,
      "structure_hash": "19aec51eb09263fc999365e881d87212",
      "lines_of_code": 303,
      "created_at": "2025-08-03T10:06:03.851481",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_core_concepts.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_core_concepts.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import pytest",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "import sys"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all core concepts tests",
            "lineno": 382,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_credential_encryption_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test credential encryption concept",
            "lineno": 15,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_session_management_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test session management concept",
            "lineno": 28,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_input_validation_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test input validation concept",
            "lineno": 45,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_is_valid_uuid",
            "parameters": [
              "self",
              "uuid_str"
            ],
            "docstring": "Helper function to validate UUID format.",
            "lineno": 71,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "test_uuid_validation_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test UUID validation concept",
            "lineno": 89,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_oauth_credential_validation_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test OAuth credential validation concept",
            "lineno": 108,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_multi_user_rbac_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test multi-user RBAC concept",
            "lineno": 132,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_error_handling_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test error handling concept",
            "lineno": 158,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_monitoring_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test monitoring concept",
            "lineno": 171,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_color_contrast_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test color contrast concept",
            "lineno": 188,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_mobile_responsiveness_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test mobile responsiveness concept",
            "lineno": 203,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_progressive_disclosure_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test progressive disclosure concept",
            "lineno": 215,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_caching_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test caching concept",
            "lineno": 232,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_real_time_updates_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test real-time updates concept",
            "lineno": 252,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_security_blind_spots_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test security blind spots concept",
            "lineno": 270,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_devops_blind_spots_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test DevOps blind spots concept",
            "lineno": 298,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_ux_blind_spots_concept",
            "parameters": [
              "self"
            ],
            "docstring": "Test UX blind spots concept",
            "lineno": 319,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_blind_spot_coverage_calculation",
            "parameters": [
              "self"
            ],
            "docstring": "Test blind spot coverage calculation",
            "lineno": 342,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_confidence_score_distribution",
            "parameters": [
              "self"
            ],
            "docstring": "Test confidence score distribution",
            "lineno": 357,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_recommendation_quality",
            "parameters": [
              "self"
            ],
            "docstring": "Test recommendation quality assessment",
            "lineno": 369,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestSecurityFirstArchitecture",
            "bases": [],
            "docstring": "Test security-first architecture concepts",
            "lineno": 12,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_credential_encryption_concept",
              "test_session_management_concept",
              "test_input_validation_concept",
              "_is_valid_uuid",
              "test_uuid_validation_concept",
              "test_oauth_credential_validation_concept",
              "test_multi_user_rbac_concept",
              "test_error_handling_concept",
              "test_monitoring_concept"
            ],
            "attributes": []
          },
          {
            "name": "TestAccessibilityCompliance",
            "bases": [],
            "docstring": "Test accessibility compliance concepts",
            "lineno": 185,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_color_contrast_concept",
              "test_mobile_responsiveness_concept",
              "test_progressive_disclosure_concept"
            ],
            "attributes": []
          },
          {
            "name": "TestPerformanceOptimization",
            "bases": [],
            "docstring": "Test performance optimization concepts",
            "lineno": 229,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_caching_concept",
              "test_real_time_updates_concept"
            ],
            "attributes": []
          },
          {
            "name": "TestMultiAgentBlindSpotDetection",
            "bases": [],
            "docstring": "Test multi-agent blind spot detection concepts",
            "lineno": 267,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_security_blind_spots_concept",
              "test_devops_blind_spots_concept",
              "test_ux_blind_spots_concept"
            ],
            "attributes": []
          },
          {
            "name": "TestCoverageAnalysis",
            "bases": [],
            "docstring": "Test coverage analysis concepts",
            "lineno": 339,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_blind_spot_coverage_calculation",
              "test_confidence_score_distribution",
              "test_recommendation_quality"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "security_tester",
          "accessibility_tester",
          "performance_tester",
          "blind_spot_tester",
          "coverage_tester",
          "tests",
          "passed",
          "total",
          "success",
          "expiration",
          "admin_permissions",
          "user_permissions",
          "viewer_permissions"
        ],
        "dependencies": [
          "pytest",
          "typing",
          "sys"
        ],
        "docstrings": [
          "\ud83e\uddea Core Concepts Test for Streamlit App\n\nTest suite that validates core concepts and architecture without external dependencies.",
          "Test security-first architecture concepts",
          "Test accessibility compliance concepts",
          "Test performance optimization concepts",
          "Test multi-agent blind spot detection concepts",
          "Test coverage analysis concepts",
          "Run all core concepts tests",
          "Test credential encryption concept",
          "Test session management concept",
          "Test input validation concept",
          "Helper function to validate UUID format.",
          "Test UUID validation concept",
          "Test OAuth credential validation concept",
          "Test multi-user RBAC concept",
          "Test error handling concept",
          "Test monitoring concept",
          "Test color contrast concept",
          "Test mobile responsiveness concept",
          "Test progressive disclosure concept",
          "Test caching concept",
          "Test real-time updates concept",
          "Test security blind spots concept",
          "Test DevOps blind spots concept",
          "Test UX blind spots concept",
          "Test blind spot coverage calculation",
          "Test confidence score distribution",
          "Test recommendation quality assessment"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 86
              }
            ],
            "lineno": 76
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 424
              }
            ],
            "lineno": 420
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_credential_encryption_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_credential_encryption_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_session_management_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_session_management_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_input_validation_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_input_validation_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "_is_valid_uuid",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_is_valid_uuid",
            "parameter": "uuid_str",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "test_uuid_validation_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_uuid_validation_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_oauth_credential_validation_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_oauth_credential_validation_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_multi_user_rbac_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_multi_user_rbac_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_error_handling_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_error_handling_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_monitoring_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_monitoring_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_color_contrast_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_color_contrast_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_mobile_responsiveness_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_mobile_responsiveness_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_progressive_disclosure_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_progressive_disclosure_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_caching_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_caching_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_real_time_updates_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_real_time_updates_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_security_blind_spots_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_security_blind_spots_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_devops_blind_spots_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_devops_blind_spots_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_ux_blind_spots_concept",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_ux_blind_spots_concept",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_blind_spot_coverage_calculation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_blind_spot_coverage_calculation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_confidence_score_distribution",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_confidence_score_distribution",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_recommendation_quality",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_recommendation_quality",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 27,
          "cognitive": 37,
          "nesting": 0,
          "statements": 102
        },
        "nesting_depth": 11,
        "ast_nodes": 1810,
        "structure_hash": "69d23dd3edb2299ec3813a75aaf7d07e"
      },
      "complexity_score": 27,
      "structure_hash": "69d23dd3edb2299ec3813a75aaf7d07e",
      "lines_of_code": 443,
      "created_at": "2025-08-03T10:06:03.850494",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_rule_compliance_enforcement.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_rule_compliance_enforcement.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import pytest",
          "import subprocess",
          "import tempfile",
          "import os",
          "import sys",
          "import yaml",
          "import json",
          "import fnmatch",
          "from pathlib import Path",
          "from unittest.mock import patch"
        ],
        "functions": [
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 23,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_rule_compliance_checker_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that rule compliance checker exists and is executable",
            "lineno": 29,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_mdc_linter_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that MDC linter exists and is executable",
            "lineno": 35,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_cursor_plugin_exists",
            "parameters": [
              "self"
            ],
            "docstring": "Test that Cursor IDE plugin exists and is executable",
            "lineno": 41,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_pre_commit_config_updated",
            "parameters": [
              "self"
            ],
            "docstring": "Test that pre-commit config includes rule compliance hooks",
            "lineno": 47,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_rule_compliance_script_runs",
            "parameters": [
              "self"
            ],
            "docstring": "Test that rule compliance script runs without errors",
            "lineno": 59,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_mdc_linter_validates_structure",
            "parameters": [
              "self"
            ],
            "docstring": "Test that MDC linter validates file structure",
            "lineno": 78,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_mdc_linter_rejects_invalid_structure",
            "parameters": [
              "self"
            ],
            "docstring": "Test that MDC linter rejects invalid file structure",
            "lineno": 111,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_cursor_plugin_interface",
            "parameters": [
              "self",
              "mock_run"
            ],
            "docstring": "Test that Cursor IDE plugin has proper interface",
            "lineno": 144,
            "col_offset": 4,
            "decorators": [
              "patch"
            ],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_deterministic_editing_rule_enforcement",
            "parameters": [
              "self"
            ],
            "docstring": "Test that deterministic editing rules are enforced",
            "lineno": 163,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_project_model_includes_rule_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test that project model includes rule compliance",
            "lineno": 180,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_requirements_traceability_includes_rule_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test that requirements traceability includes rule compliance",
            "lineno": 197,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment",
            "lineno": 222,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_all_mdc_files_comply_with_rules",
            "parameters": [
              "self"
            ],
            "docstring": "Test that all MDC files comply with established rules",
            "lineno": 227,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_rule_compliance_system_completeness",
            "parameters": [
              "self"
            ],
            "docstring": "Test that rule compliance system is complete",
            "lineno": 251,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestRuleComplianceEnforcement",
            "bases": [],
            "docstring": "Test the rule compliance enforcement system",
            "lineno": 20,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_rule_compliance_checker_exists",
              "test_mdc_linter_exists",
              "test_cursor_plugin_exists",
              "test_pre_commit_config_updated",
              "test_rule_compliance_script_runs",
              "test_mdc_linter_validates_structure",
              "test_mdc_linter_rejects_invalid_structure",
              "test_cursor_plugin_interface",
              "test_deterministic_editing_rule_enforcement",
              "test_project_model_includes_rule_compliance",
              "test_requirements_traceability_includes_rule_compliance"
            ],
            "attributes": []
          },
          {
            "name": "TestMDCFileCompliance",
            "bases": [],
            "docstring": "Test that all MDC files comply with rules",
            "lineno": 219,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_all_mdc_files_comply_with_rules",
              "test_rule_compliance_system_completeness"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "script_path",
          "linter_path",
          "plugin_path",
          "config_path",
          "script_path",
          "linter_path",
          "valid_content",
          "linter_path",
          "invalid_content",
          "plugin_path",
          "result",
          "deterministic_files",
          "model_file",
          "model_file",
          "linter_path",
          "required_components",
          "content",
          "result",
          "temp_file",
          "result",
          "temp_file",
          "result",
          "file_path",
          "requirements",
          "rule_compliance_requirements",
          "requirements",
          "rule_compliance_found",
          "component_path",
          "model_data",
          "model_data",
          "requirement_text",
          "result",
          "content",
          "rule_compliance_found"
        ],
        "dependencies": [
          "pytest",
          "fnmatch",
          "tempfile",
          "yaml",
          "unittest",
          "sys",
          "pathlib",
          "json",
          "subprocess",
          "os"
        ],
        "docstrings": [
          "\ud83e\uddea Test Rule Compliance Enforcement System\n\nTests the pre-commit hooks, IDE plugins, and automated linting",
          "Test the rule compliance enforcement system",
          "Test that all MDC files comply with rules",
          "Setup test environment",
          "Test that rule compliance checker exists and is executable",
          "Test that MDC linter exists and is executable",
          "Test that Cursor IDE plugin exists and is executable",
          "Test that pre-commit config includes rule compliance hooks",
          "Test that rule compliance script runs without errors",
          "Test that MDC linter validates file structure",
          "Test that MDC linter rejects invalid file structure",
          "Test that Cursor IDE plugin has proper interface",
          "Test that deterministic editing rules are enforced",
          "Test that project model includes rule compliance",
          "Test that requirements traceability includes rule compliance",
          "Setup test environment",
          "Test that all MDC files comply with established rules",
          "Test that rule compliance system is complete"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "subprocess.TimeoutExpired",
                "lineno": 73
              },
              {
                "type": "Exception",
                "lineno": 75
              }
            ],
            "lineno": 63
          },
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 98
          },
          {
            "type": "try_except",
            "handlers": [],
            "lineno": 130
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "subprocess.TimeoutExpired",
                "lineno": 246
              },
              {
                "type": "Exception",
                "lineno": 248
              }
            ],
            "lineno": 235
          }
        ],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 20,
          "cognitive": 15,
          "nesting": 0,
          "statements": 87
        },
        "nesting_depth": 14,
        "ast_nodes": 1077,
        "structure_hash": "29ebcc60f791b7a540826c29d0c828e6"
      },
      "complexity_score": 20,
      "structure_hash": "29ebcc60f791b7a540826c29d0c828e6",
      "lines_of_code": 263,
      "created_at": "2025-08-03T10:06:03.818791",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_cline_fresh_plan_blind_spots.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_cline_fresh_plan_blind_spots.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "from dataclasses import dataclass",
          "import sys"
        ],
        "functions": [
          {
            "name": "test_fresh_cline_plan_blind_spots",
            "parameters": [],
            "docstring": "Test blind spot detection for Fresh Cline's plan",
            "lineno": 320,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Run all blind spot detection tests",
            "lineno": 360,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": "Initialize the multi-agent blind spot detector",
            "lineno": 20,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "security_expert_analysis",
            "parameters": [
              "self",
              "plan"
            ],
            "docstring": "Security-focused blind spot detection",
            "lineno": 31,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpot]",
            "has_async": false
          },
          {
            "name": "devops_engineer_analysis",
            "parameters": [
              "self",
              "plan"
            ],
            "docstring": "DevOps-focused blind spot detection",
            "lineno": 73,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpot]",
            "has_async": false
          },
          {
            "name": "code_quality_expert_analysis",
            "parameters": [
              "self",
              "plan"
            ],
            "docstring": "Code quality-focused blind spot detection",
            "lineno": 115,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpot]",
            "has_async": false
          },
          {
            "name": "ux_advocate_analysis",
            "parameters": [
              "self",
              "plan"
            ],
            "docstring": "UX-focused blind spot detection",
            "lineno": 157,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpot]",
            "has_async": false
          },
          {
            "name": "performance_engineer_analysis",
            "parameters": [
              "self",
              "plan"
            ],
            "docstring": "Performance-focused blind spot detection",
            "lineno": 187,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpot]",
            "has_async": false
          },
          {
            "name": "rule_compliance_expert_analysis",
            "parameters": [
              "self",
              "plan"
            ],
            "docstring": "Rule compliance-focused blind spot detection",
            "lineno": 217,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[BlindSpot]",
            "has_async": false
          },
          {
            "name": "detect_blind_spots",
            "parameters": [
              "self",
              "plan"
            ],
            "docstring": "Detect blind spots using all agents",
            "lineno": 259,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "generate_report",
            "parameters": [
              "self",
              "blind_spots"
            ],
            "docstring": "Generate a comprehensive blind spot report",
            "lineno": 268,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "BlindSpot",
            "bases": [],
            "docstring": null,
            "lineno": 11,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "MultiAgentBlindSpotDetector",
            "bases": [],
            "docstring": null,
            "lineno": 19,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "security_expert_analysis",
              "devops_engineer_analysis",
              "code_quality_expert_analysis",
              "ux_advocate_analysis",
              "performance_engineer_analysis",
              "rule_compliance_expert_analysis",
              "detect_blind_spots",
              "generate_report"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "sample_plan",
          "detector",
          "blind_spots",
          "total_spots",
          "expected_categories",
          "found_categories",
          "report",
          "tests",
          "passed",
          "total",
          "success",
          "total_blind_spots",
          "critical_count",
          "high_count",
          "medium_count",
          "severity_emoji"
        ],
        "dependencies": [
          "dataclasses",
          "typing",
          "sys"
        ],
        "docstrings": [
          "Multi-Agent Blind Spot Detection for Fresh Cline's Healthcare CDC Plan",
          "Test blind spot detection for Fresh Cline's plan",
          "Run all blind spot detection tests",
          "Initialize the multi-agent blind spot detector",
          "Security-focused blind spot detection",
          "DevOps-focused blind spot detection",
          "Code quality-focused blind spot detection",
          "UX-focused blind spot detection",
          "Performance-focused blind spot detection",
          "Rule compliance-focused blind spot detection",
          "Detect blind spots using all agents",
          "Generate a comprehensive blind spot report"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 377
              }
            ],
            "lineno": 373
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_fresh_cline_plan_blind_spots",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "security_expert_analysis",
            "annotation": "List[BlindSpot]"
          },
          {
            "type": "parameter_annotation",
            "function": "security_expert_analysis",
            "parameter": "plan",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "devops_engineer_analysis",
            "annotation": "List[BlindSpot]"
          },
          {
            "type": "parameter_annotation",
            "function": "devops_engineer_analysis",
            "parameter": "plan",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "code_quality_expert_analysis",
            "annotation": "List[BlindSpot]"
          },
          {
            "type": "parameter_annotation",
            "function": "code_quality_expert_analysis",
            "parameter": "plan",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "ux_advocate_analysis",
            "annotation": "List[BlindSpot]"
          },
          {
            "type": "parameter_annotation",
            "function": "ux_advocate_analysis",
            "parameter": "plan",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "performance_engineer_analysis",
            "annotation": "List[BlindSpot]"
          },
          {
            "type": "parameter_annotation",
            "function": "performance_engineer_analysis",
            "parameter": "plan",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "rule_compliance_expert_analysis",
            "annotation": "List[BlindSpot]"
          },
          {
            "type": "parameter_annotation",
            "function": "rule_compliance_expert_analysis",
            "parameter": "plan",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "detect_blind_spots",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "detect_blind_spots",
            "parameter": "plan",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "generate_report",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_report",
            "parameter": "blind_spots",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 33,
          "cognitive": 47,
          "nesting": 0,
          "statements": 89
        },
        "nesting_depth": 12,
        "ast_nodes": 1509,
        "structure_hash": "bff78b3018da2df912acd99c02608f1a"
      },
      "complexity_score": 33,
      "structure_hash": "bff78b3018da2df912acd99c02608f1a",
      "lines_of_code": 396,
      "created_at": "2025-08-03T10:06:03.903008",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/__init__.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [],
        "functions": [],
        "classes": [],
        "variables": [],
        "dependencies": [],
        "docstrings": [
          "OpenFlow Playground Source Package\n\nThis package contains the main application components organized by domain:\n- streamlit: Streamlit application components\n- security_first: Security-first architecture components\n- multi_agent_testing: Multi-agent testing framework components"
        ],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 1
        },
        "nesting_depth": 3,
        "ast_nodes": 15,
        "structure_hash": "6daaf7ed18b06d730dff7f6f954d77a4"
      },
      "complexity_score": 1,
      "structure_hash": "6daaf7ed18b06d730dff7f6f954d77a4",
      "lines_of_code": 12,
      "created_at": "2025-08-03T10:06:03.909198",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/test_basic_validation.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/test_basic_validation.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "import pytest",
          "from unittest.mock import Mock",
          "from unittest.mock import patch",
          "import sys",
          "import os",
          "import importlib.util",
          "from pathlib import Path",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "setup_mocks",
            "parameters": [],
            "docstring": "Setup mocks for external dependencies",
            "lineno": 19,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "security_manager",
            "parameters": [],
            "docstring": "Fixture for SecurityManager",
            "lineno": 79,
            "col_offset": 0,
            "decorators": [
              "unknown"
            ],
            "returns": "Any",
            "has_async": false
          },
          {
            "name": "input_validator",
            "parameters": [],
            "docstring": "Fixture for InputValidator",
            "lineno": 85,
            "col_offset": 0,
            "decorators": [
              "unknown"
            ],
            "returns": "Any",
            "has_async": false
          },
          {
            "name": "deployment_manager",
            "parameters": [],
            "docstring": "Fixture for DeploymentManager",
            "lineno": 91,
            "col_offset": 0,
            "decorators": [
              "unknown"
            ],
            "returns": "Any",
            "has_async": false
          },
          {
            "name": "monitoring_dashboard",
            "parameters": [],
            "docstring": "Fixture for MonitoringDashboard",
            "lineno": 97,
            "col_offset": 0,
            "decorators": [
              "unknown"
            ],
            "returns": "Any",
            "has_async": false
          },
          {
            "name": "test_credential_encryption_decryption",
            "parameters": [
              "self",
              "security_manager"
            ],
            "docstring": "Test credential encryption and decryption",
            "lineno": 106,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_secure_credential_storage",
            "parameters": [
              "self",
              "security_manager"
            ],
            "docstring": "Test secure credential storage",
            "lineno": 122,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_session_token_creation",
            "parameters": [
              "self",
              "security_manager"
            ],
            "docstring": "Test session token creation",
            "lineno": 138,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_session_validation",
            "parameters": [
              "self",
              "security_manager"
            ],
            "docstring": "Test session validation",
            "lineno": 145,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_snowflake_url_valid",
            "parameters": [
              "self",
              "input_validator"
            ],
            "docstring": "Test valid Snowflake URL validation",
            "lineno": 156,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_snowflake_url_invalid",
            "parameters": [
              "self",
              "input_validator"
            ],
            "docstring": "Test invalid Snowflake URL validation",
            "lineno": 161,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_uuid_valid",
            "parameters": [
              "self",
              "input_validator"
            ],
            "docstring": "Test valid UUID validation",
            "lineno": 166,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_uuid_invalid",
            "parameters": [
              "self",
              "input_validator"
            ],
            "docstring": "Test invalid UUID validation",
            "lineno": 171,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_sanitize_input",
            "parameters": [
              "self",
              "input_validator"
            ],
            "docstring": "Test input sanitization",
            "lineno": 176,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_oauth_credentials_valid",
            "parameters": [
              "self",
              "input_validator"
            ],
            "docstring": "Test valid OAuth credentials validation",
            "lineno": 182,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_oauth_credentials_invalid",
            "parameters": [
              "self",
              "input_validator"
            ],
            "docstring": "Test invalid OAuth credentials validation",
            "lineno": 187,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_deploy_stack_success",
            "parameters": [
              "self",
              "deployment_manager"
            ],
            "docstring": "Test successful stack deployment",
            "lineno": 196,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_deploy_stack_failure",
            "parameters": [
              "self",
              "deployment_manager"
            ],
            "docstring": "Test failed stack deployment",
            "lineno": 210,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_get_stack_status",
            "parameters": [
              "self",
              "deployment_manager"
            ],
            "docstring": "Test getting stack status",
            "lineno": 224,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_get_stack_events",
            "parameters": [
              "self",
              "deployment_manager"
            ],
            "docstring": "Test getting stack events",
            "lineno": 237,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_create_deployment_timeline",
            "parameters": [
              "self",
              "monitoring_dashboard"
            ],
            "docstring": "Test deployment timeline creation",
            "lineno": 261,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_create_resource_status_matrix",
            "parameters": [
              "self",
              "monitoring_dashboard"
            ],
            "docstring": "Test resource status matrix creation",
            "lineno": 280,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__getattr__",
            "parameters": [
              "self",
              "name"
            ],
            "docstring": null,
            "lineno": 295,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__setattr__",
            "parameters": [
              "self",
              "name",
              "value"
            ],
            "docstring": null,
            "lineno": 298,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_app_initialization",
            "parameters": [
              "self"
            ],
            "docstring": "Test app initialization",
            "lineno": 305,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_credentials_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid credential validation",
            "lineno": 315,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_validate_credentials_invalid",
            "parameters": [
              "self"
            ],
            "docstring": "Test invalid credential validation",
            "lineno": 327,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_snowflake_config_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid SnowflakeConfig",
            "lineno": 343,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_openflow_config_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid OpenFlowConfig",
            "lineno": 354,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_secure_session_configuration",
            "parameters": [
              "self"
            ],
            "docstring": "Test secure session configuration",
            "lineno": 369,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_input_validation_coverage",
            "parameters": [
              "self"
            ],
            "docstring": "Test input validation coverage",
            "lineno": 375,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_color_contrast_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test color contrast compliance",
            "lineno": 388,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_keyboard_navigation",
            "parameters": [
              "self"
            ],
            "docstring": "Test keyboard navigation support",
            "lineno": 393,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_screen_reader_support",
            "parameters": [
              "self"
            ],
            "docstring": "Test screen reader support",
            "lineno": 398,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_caching_implementation",
            "parameters": [
              "self"
            ],
            "docstring": "Test caching implementation",
            "lineno": 407,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_memory_management",
            "parameters": [
              "self"
            ],
            "docstring": "Test memory management",
            "lineno": 412,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_parallel_processing",
            "parameters": [
              "self"
            ],
            "docstring": "Test parallel processing capabilities",
            "lineno": 417,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestSecurityManager",
            "bases": [],
            "docstring": "Test security-first credential and session management",
            "lineno": 103,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_credential_encryption_decryption",
              "test_secure_credential_storage",
              "test_session_token_creation",
              "test_session_validation"
            ],
            "attributes": []
          },
          {
            "name": "TestInputValidator",
            "bases": [],
            "docstring": "Test input validation functionality",
            "lineno": 153,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_validate_snowflake_url_valid",
              "test_validate_snowflake_url_invalid",
              "test_validate_uuid_valid",
              "test_validate_uuid_invalid",
              "test_sanitize_input",
              "test_validate_oauth_credentials_valid",
              "test_validate_oauth_credentials_invalid"
            ],
            "attributes": []
          },
          {
            "name": "TestDeploymentManager",
            "bases": [],
            "docstring": "Test deployment management functionality",
            "lineno": 193,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_deploy_stack_success",
              "test_deploy_stack_failure",
              "test_get_stack_status",
              "test_get_stack_events"
            ],
            "attributes": []
          },
          {
            "name": "TestMonitoringDashboard",
            "bases": [],
            "docstring": "Test monitoring dashboard functionality",
            "lineno": 258,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_create_deployment_timeline",
              "test_create_resource_status_matrix"
            ],
            "attributes": []
          },
          {
            "name": "MockSessionState",
            "bases": [
              "dict"
            ],
            "docstring": "Mock session state for testing",
            "lineno": 292,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__getattr__",
              "__setattr__"
            ],
            "attributes": []
          },
          {
            "name": "TestOpenFlowQuickstartApp",
            "bases": [],
            "docstring": "Test OpenFlow Quickstart App functionality",
            "lineno": 302,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_app_initialization",
              "test_validate_credentials_valid",
              "test_validate_credentials_invalid"
            ],
            "attributes": []
          },
          {
            "name": "TestPydanticModels",
            "bases": [],
            "docstring": "Test Pydantic model validation",
            "lineno": 340,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_snowflake_config_valid",
              "test_openflow_config_valid"
            ],
            "attributes": []
          },
          {
            "name": "TestSecurityFirstArchitecture",
            "bases": [],
            "docstring": "Test security-first architecture compliance",
            "lineno": 366,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_secure_session_configuration",
              "test_input_validation_coverage"
            ],
            "attributes": []
          },
          {
            "name": "TestAccessibilityCompliance",
            "bases": [],
            "docstring": "Test accessibility compliance",
            "lineno": 385,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_color_contrast_compliance",
              "test_keyboard_navigation",
              "test_screen_reader_support"
            ],
            "attributes": []
          },
          {
            "name": "TestPerformanceOptimization",
            "bases": [],
            "docstring": "Test performance optimization features",
            "lineno": 404,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_caching_implementation",
              "test_memory_management",
              "test_parallel_processing"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "valid_url",
          "invalid_url",
          "valid_uuid",
          "invalid_uuid",
          "dirty_input",
          "clean_input",
          "valid_creds",
          "invalid_creds",
          "mock_events",
          "timeline",
          "mock_resources",
          "matrix",
          "config",
          "config",
          "token",
          "is_valid",
          "status",
          "events",
          "encrypted",
          "decrypted",
          "result",
          "retrieved"
        ],
        "dependencies": [
          "pytest",
          "typing",
          "unittest",
          "sys",
          "pathlib",
          "importlib",
          "os"
        ],
        "docstrings": [
          "Setup mocks for external dependencies",
          "Fixture for SecurityManager",
          "Fixture for InputValidator",
          "Fixture for DeploymentManager",
          "Fixture for MonitoringDashboard",
          "Test security-first credential and session management",
          "Test input validation functionality",
          "Test deployment management functionality",
          "Test monitoring dashboard functionality",
          "Mock session state for testing",
          "Test OpenFlow Quickstart App functionality",
          "Test Pydantic model validation",
          "Test security-first architecture compliance",
          "Test accessibility compliance",
          "Test performance optimization features",
          "Test credential encryption and decryption",
          "Test secure credential storage",
          "Test session token creation",
          "Test session validation",
          "Test valid Snowflake URL validation",
          "Test invalid Snowflake URL validation",
          "Test valid UUID validation",
          "Test invalid UUID validation",
          "Test input sanitization",
          "Test valid OAuth credentials validation",
          "Test invalid OAuth credentials validation",
          "Test successful stack deployment",
          "Test failed stack deployment",
          "Test getting stack status",
          "Test getting stack events",
          "Test deployment timeline creation",
          "Test resource status matrix creation",
          "Test app initialization",
          "Test valid credential validation",
          "Test invalid credential validation",
          "Test valid SnowflakeConfig",
          "Test valid OpenFlowConfig",
          "Test secure session configuration",
          "Test input validation coverage",
          "Test color contrast compliance",
          "Test keyboard navigation support",
          "Test screen reader support",
          "Test caching implementation",
          "Test memory management",
          "Test parallel processing capabilities"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 74
              }
            ],
            "lineno": 53
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "setup_mocks",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "security_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "input_validator",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "deployment_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "monitoring_dashboard",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_credential_encryption_decryption",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_credential_encryption_decryption",
            "parameter": "security_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_secure_credential_storage",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_secure_credential_storage",
            "parameter": "security_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_session_token_creation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_session_token_creation",
            "parameter": "security_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_session_validation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_session_validation",
            "parameter": "security_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_snowflake_url_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_snowflake_url_valid",
            "parameter": "input_validator",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_snowflake_url_invalid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_snowflake_url_invalid",
            "parameter": "input_validator",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_uuid_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_uuid_valid",
            "parameter": "input_validator",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_uuid_invalid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_uuid_invalid",
            "parameter": "input_validator",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_sanitize_input",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_sanitize_input",
            "parameter": "input_validator",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_oauth_credentials_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_oauth_credentials_valid",
            "parameter": "input_validator",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_oauth_credentials_invalid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_oauth_credentials_invalid",
            "parameter": "input_validator",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_deploy_stack_success",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_deploy_stack_success",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "test_deploy_stack_success",
            "parameter": "deployment_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_deploy_stack_failure",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_deploy_stack_failure",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "test_deploy_stack_failure",
            "parameter": "deployment_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_get_stack_status",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_get_stack_status",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "test_get_stack_status",
            "parameter": "deployment_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_get_stack_events",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_get_stack_events",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "test_get_stack_events",
            "parameter": "deployment_manager",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_create_deployment_timeline",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_create_deployment_timeline",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "test_create_deployment_timeline",
            "parameter": "monitoring_dashboard",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_create_resource_status_matrix",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_create_resource_status_matrix",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "test_create_resource_status_matrix",
            "parameter": "monitoring_dashboard",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "__getattr__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__getattr__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "__getattr__",
            "parameter": "name",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "__setattr__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__setattr__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "__setattr__",
            "parameter": "name",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "__setattr__",
            "parameter": "value",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_app_initialization",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_app_initialization",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_credentials_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_credentials_valid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_validate_credentials_invalid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_validate_credentials_invalid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_snowflake_config_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_snowflake_config_valid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_openflow_config_valid",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_openflow_config_valid",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_secure_session_configuration",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_secure_session_configuration",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_input_validation_coverage",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_input_validation_coverage",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_color_contrast_compliance",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_color_contrast_compliance",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_keyboard_navigation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_keyboard_navigation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_screen_reader_support",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_screen_reader_support",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_caching_implementation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_caching_implementation",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_memory_management",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_memory_management",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "test_parallel_processing",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "test_parallel_processing",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 18,
          "cognitive": 3,
          "nesting": 0,
          "statements": 158
        },
        "nesting_depth": 10,
        "ast_nodes": 1753,
        "structure_hash": "61e32cd21162736258adce6269c3f307"
      },
      "complexity_score": 18,
      "structure_hash": "61e32cd21162736258adce6269c3f307",
      "lines_of_code": 421,
      "created_at": "2025-08-03T10:06:03.932611",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/regenerate_mdc_files.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/regenerate_mdc_files.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "import sys",
          "from pathlib import Path",
          "from mdc_generator import MDCGenerator"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Regenerate all .mdc files",
            "lineno": 17,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [],
        "dependencies": [
          "pathlib",
          "mdc_generator",
          "typing",
          "sys"
        ],
        "docstrings": [
          "Regenerate all .mdc files"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 4,
          "cognitive": 3,
          "nesting": 0,
          "statements": 13
        },
        "nesting_depth": 9,
        "ast_nodes": 215,
        "structure_hash": "0a88b6a10f9bca4fd56ea49ced83c040"
      },
      "complexity_score": 4,
      "structure_hash": "0a88b6a10f9bca4fd56ea49ced83c040",
      "lines_of_code": 45,
      "created_at": "2025-08-03T10:06:03.961321",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/fix_mypy_issues.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/fix_mypy_issues.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import re",
          "import subprocess",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "add_missing_type_annotations",
            "parameters": [
              "file_path"
            ],
            "docstring": "Add missing type annotations to a file",
            "lineno": 12,
            "col_offset": 0,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "infer_parameter_type",
            "parameters": [
              "param_name"
            ],
            "docstring": "Infer parameter type based on name",
            "lineno": 118,
            "col_offset": 0,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "infer_variable_type",
            "parameters": [
              "value"
            ],
            "docstring": "Infer variable type from assignment value",
            "lineno": 150,
            "col_offset": 0,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "fix_mypy_issues",
            "parameters": [
              "directories"
            ],
            "docstring": "Fix mypy issues in all files",
            "lineno": 189,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function",
            "lineno": 211,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [],
        "dependencies": [
          "typing",
          "pathlib",
          "re",
          "subprocess"
        ],
        "docstrings": [
          "Comprehensive Mypy Issue Fixer",
          "Add missing type annotations to a file",
          "Infer parameter type based on name",
          "Infer variable type from assignment value",
          "Fix mypy issues in all files",
          "Main function"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 113
              }
            ],
            "lineno": 14
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 205
              }
            ],
            "lineno": 201
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "add_missing_type_annotations",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "add_missing_type_annotations",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "infer_parameter_type",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "infer_parameter_type",
            "parameter": "param_name",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "infer_variable_type",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "infer_variable_type",
            "parameter": "value",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "fix_mypy_issues",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_mypy_issues",
            "parameter": "directories",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 47,
          "cognitive": 54,
          "nesting": 0,
          "statements": 43
        },
        "nesting_depth": 15,
        "ast_nodes": 1121,
        "structure_hash": "b00e5bccdf42f1766ca412b6d57042e5"
      },
      "complexity_score": 47,
      "structure_hash": "b00e5bccdf42f1766ca412b6d57042e5",
      "lines_of_code": 229,
      "created_at": "2025-08-03T10:06:03.972428",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/mdc-linter.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/mdc-linter.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import sys",
          "import yaml",
          "import re",
          "from pathlib import Path",
          "from typing import List",
          "import argparse"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function",
            "lineno": 229,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 15,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "log_violation",
            "parameters": [
              "self",
              "file_path",
              "message"
            ],
            "docstring": "Log a violation",
            "lineno": 20,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "log_warning",
            "parameters": [
              "self",
              "file_path",
              "message"
            ],
            "docstring": "Log a warning",
            "lineno": 24,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "validate_yaml_frontmatter",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Validate YAML frontmatter structure",
            "lineno": 28,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "validate_markdown_content",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Validate markdown content structure",
            "lineno": 90,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "validate_file_organization",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Validate file organization and naming",
            "lineno": 118,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "validate_deterministic_editing_compliance",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Validate deterministic editing compliance",
            "lineno": 135,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "lint_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Lint a single .mdc file",
            "lineno": 154,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "lint_directory",
            "parameters": [
              "self",
              "directory"
            ],
            "docstring": "Lint all .mdc files in a directory",
            "lineno": 185,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "MDCLinter",
            "bases": [],
            "docstring": "Linter for .mdc files with YAML frontmatter",
            "lineno": 12,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "log_violation",
              "log_warning",
              "validate_yaml_frontmatter",
              "validate_markdown_content",
              "validate_file_organization",
              "validate_deterministic_editing_compliance",
              "lint_file",
              "lint_directory"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "parser",
          "args",
          "linter",
          "exit_code",
          "lines",
          "delimiter_count",
          "lines",
          "path",
          "credential_patterns",
          "path",
          "mdc_files",
          "valid_files",
          "frontmatter_start",
          "frontmatter_end",
          "frontmatter_lines",
          "frontmatter_text",
          "frontmatter",
          "required_fields",
          "frontmatter_start",
          "frontmatter_end",
          "content_after_frontmatter",
          "has_headers",
          "is_valid",
          "content",
          "is_valid",
          "is_valid",
          "is_valid",
          "is_valid"
        ],
        "dependencies": [
          "argparse",
          "yaml",
          "typing",
          "sys",
          "pathlib",
          "re"
        ],
        "docstrings": [
          "MDC Linter for .mdc files with YAML frontmatter",
          "Linter for .mdc files with YAML frontmatter",
          "Main function",
          "Log a violation",
          "Log a warning",
          "Validate YAML frontmatter structure",
          "Validate markdown content structure",
          "Validate file organization and naming",
          "Validate deterministic editing compliance",
          "Lint a single .mdc file",
          "Lint all .mdc files in a directory"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 86
              }
            ],
            "lineno": 46
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "ValueError",
                "lineno": 114
              }
            ],
            "lineno": 95
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 181
              }
            ],
            "lineno": 156
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "log_violation",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "log_violation",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "log_violation",
            "parameter": "message",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "log_warning",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "log_warning",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "log_warning",
            "parameter": "message",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_yaml_frontmatter",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_yaml_frontmatter",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_yaml_frontmatter",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_markdown_content",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_markdown_content",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_markdown_content",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_file_organization",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_file_organization",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_deterministic_editing_compliance",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_deterministic_editing_compliance",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_deterministic_editing_compliance",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "lint_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "lint_file",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "lint_directory",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "lint_directory",
            "parameter": "directory",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 36,
          "cognitive": 34,
          "nesting": 0,
          "statements": 94
        },
        "nesting_depth": 11,
        "ast_nodes": 1095,
        "structure_hash": "11864bacac3685fc6efb1f0b9483b412"
      },
      "complexity_score": 36,
      "structure_hash": "11864bacac3685fc6efb1f0b9483b412",
      "lines_of_code": 242,
      "created_at": "2025-08-03T10:06:03.944615",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/fix_code_quality.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/fix_code_quality.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "import sys",
          "import json",
          "from pathlib import Path",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "from code_quality_system.quality_model import CodeQualityModel",
          "import argparse"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function for the code quality fixer",
            "lineno": 19,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "analyze_all_files",
            "parameters": [
              "model",
              "directories",
              "verbose"
            ],
            "docstring": "Analyze all files for linting issues",
            "lineno": 60,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "fix_all_files",
            "parameters": [
              "model",
              "directories",
              "verbose"
            ],
            "docstring": "Fix all files",
            "lineno": 95,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_and_fix_all_files",
            "parameters": [
              "model",
              "directories",
              "verbose"
            ],
            "docstring": "Analyze, fix, and re-analyze all files",
            "lineno": 102,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "print_summary",
            "parameters": [
              "results"
            ],
            "docstring": "Print a summary of the results",
            "lineno": 131,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "parser",
          "args",
          "model",
          "results",
          "before_results",
          "fix_results",
          "after_results",
          "results",
          "before",
          "after",
          "improvement",
          "results",
          "results",
          "analysis",
          "issue_code"
        ],
        "dependencies": [
          "argparse",
          "json",
          "code_quality_system",
          "typing",
          "sys",
          "pathlib"
        ],
        "docstrings": [
          "Main function for the code quality fixer",
          "Analyze all files for linting issues",
          "Fix all files",
          "Analyze, fix, and re-analyze all files",
          "Print a summary of the results"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "analyze_all_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_all_files",
            "parameter": "model",
            "annotation": "CodeQualityModel"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_all_files",
            "parameter": "directories",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_all_files",
            "parameter": "verbose",
            "annotation": "bool"
          },
          {
            "type": "return_annotation",
            "function": "fix_all_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_all_files",
            "parameter": "model",
            "annotation": "CodeQualityModel"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_all_files",
            "parameter": "directories",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_all_files",
            "parameter": "verbose",
            "annotation": "bool"
          },
          {
            "type": "return_annotation",
            "function": "analyze_and_fix_all_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_and_fix_all_files",
            "parameter": "model",
            "annotation": "CodeQualityModel"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_and_fix_all_files",
            "parameter": "directories",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_and_fix_all_files",
            "parameter": "verbose",
            "annotation": "bool"
          },
          {
            "type": "return_annotation",
            "function": "print_summary",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "print_summary",
            "parameter": "results",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 21,
          "cognitive": 19,
          "nesting": 0,
          "statements": 67
        },
        "nesting_depth": 13,
        "ast_nodes": 979,
        "structure_hash": "4ea1a6b05af46ae6b486e11e56db60f3"
      },
      "complexity_score": 21,
      "structure_hash": "4ea1a6b05af46ae6b486e11e56db60f3",
      "lines_of_code": 187,
      "created_at": "2025-08-03T10:06:03.990854",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/plugins/rule-compliance-checker.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/plugins/rule-compliance-checker.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import sys",
          "import json",
          "import subprocess",
          "import re",
          "from pathlib import Path",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "import yaml",
          "import argparse"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function for testing",
            "lineno": 138,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 17,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "check_file_compliance",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check compliance for a single file.",
            "lineno": 22,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "check_mdc_compliance",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Check .mdc file compliance specifically",
            "lineno": 47,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "get_rule_summary",
            "parameters": [
              "self"
            ],
            "docstring": "Get a summary of all rules",
            "lineno": 72,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "validate_deterministic_editing",
            "parameters": [
              "self",
              "file_path",
              "content"
            ],
            "docstring": "Validate deterministic editing compliance",
            "lineno": 94,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "provide_immediate_feedback",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Provide immediate feedback for a file",
            "lineno": 108,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "RuleComplianceChecker",
            "bases": [],
            "docstring": "Cursor IDE plugin for rule compliance checking.",
            "lineno": 14,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "check_file_compliance",
              "check_mdc_compliance",
              "get_rule_summary",
              "validate_deterministic_editing",
              "provide_immediate_feedback"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "parser",
          "args",
          "checker",
          "feedback",
          "rules",
          "violations",
          "non_deterministic_patterns",
          "compliance_result",
          "result",
          "result",
          "mdc_result",
          "violations",
          "lines",
          "content",
          "content",
          "frontmatter_end",
          "frontmatter_text",
          "frontmatter"
        ],
        "dependencies": [
          "subprocess",
          "argparse",
          "yaml",
          "typing",
          "sys",
          "pathlib",
          "json",
          "re"
        ],
        "docstrings": [
          "Cursor IDE plugin for rule compliance checking",
          "Cursor IDE plugin for rule compliance checking.",
          "Main function for testing",
          "Check compliance for a single file.",
          "Check .mdc file compliance specifically",
          "Get a summary of all rules",
          "Validate deterministic editing compliance",
          "Provide immediate feedback for a file"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 39
              }
            ],
            "lineno": 24
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 64
              }
            ],
            "lineno": 49
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 132
              }
            ],
            "lineno": 126
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 90
              }
            ],
            "lineno": 76
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "check_file_compliance",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_file_compliance",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "check_mdc_compliance",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "check_mdc_compliance",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "get_rule_summary",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate_deterministic_editing",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_deterministic_editing",
            "parameter": "file_path",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_deterministic_editing",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "provide_immediate_feedback",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "provide_immediate_feedback",
            "parameter": "file_path",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 14,
          "cognitive": 11,
          "nesting": 0,
          "statements": 46
        },
        "nesting_depth": 11,
        "ast_nodes": 736,
        "structure_hash": "09ef2f80c4c958bb16df2d0120594ce2"
      },
      "complexity_score": 14,
      "structure_hash": "09ef2f80c4c958bb16df2d0120594ce2",
      "lines_of_code": 152,
      "created_at": "2025-08-03T10:06:04.011790",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/security_first/rate_limiting.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/security_first/rate_limiting.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "unexpected indent (<unknown>, line 20)",
        "file_size": 3603,
        "lines_of_code": 101,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 101,
      "created_at": "2025-08-03T10:06:04.073348",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/security_first/test_streamlit_security_first.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/security_first/test_streamlit_security_first.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "unexpected indent (<unknown>, line 43)",
        "file_size": 22410,
        "lines_of_code": 559,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 559,
      "created_at": "2025-08-03T10:06:04.075946",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/security_first/test_security_model.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/security_first/test_security_model.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "expected an indented block after 'for' statement on line 31 (<unknown>, line 32)",
        "file_size": 2976,
        "lines_of_code": 89,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 89,
      "created_at": "2025-08-03T10:06:04.076804",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/security_first/test_https_enforcement.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/security_first/test_https_enforcement.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import pytest",
          "import unittest.mock",
          "from unittest.mock import MagicMock",
          "import ssl",
          "from https_enforcement import HTTPSEnforcement",
          "from https_enforcement import RateLimiting",
          "from https_enforcement import CSRFProtection",
          "from https_enforcement import SecurityManager"
        ],
        "functions": [
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment.",
            "lineno": 23,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_validate_https_url_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test validation of valid HTTPS URLs.",
            "lineno": 27,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_validate_https_url_invalid",
            "parameters": [
              "self"
            ],
            "docstring": "Test validation of invalid HTTP URLs.",
            "lineno": 39,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_enforce_https_redirect",
            "parameters": [
              "self"
            ],
            "docstring": "Test HTTPS redirect enforcement.",
            "lineno": 50,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_ssl_context_configuration",
            "parameters": [
              "self"
            ],
            "docstring": "Test SSL context configuration.",
            "lineno": 62,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_validate_ssl_certificate_success",
            "parameters": [
              "self",
              "mock_socket"
            ],
            "docstring": "Test successful SSL certificate validation.",
            "lineno": 76,
            "col_offset": 4,
            "decorators": [
              "unknown"
            ],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_validate_ssl_certificate_failure",
            "parameters": [
              "self",
              "mock_socket"
            ],
            "docstring": "Test SSL certificate validation failure.",
            "lineno": 88,
            "col_offset": 4,
            "decorators": [
              "unknown"
            ],
            "returns": null,
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment.",
            "lineno": 102,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_check_rate_limit_first_request",
            "parameters": [
              "self"
            ],
            "docstring": "Test rate limit check for first request.",
            "lineno": 107,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_check_rate_limit_under_limit",
            "parameters": [
              "self"
            ],
            "docstring": "Test rate limit check when under limit.",
            "lineno": 116,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_check_rate_limit_over_limit",
            "parameters": [
              "self"
            ],
            "docstring": "Test rate limit check when over limit.",
            "lineno": 125,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_get_remaining_requests",
            "parameters": [
              "self"
            ],
            "docstring": "Test getting remaining requests.",
            "lineno": 134,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment.",
            "lineno": 146,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_generate_csrf_token",
            "parameters": [
              "self"
            ],
            "docstring": "Test CSRF token generation.",
            "lineno": 151,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_validate_csrf_token_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test valid CSRF token validation.",
            "lineno": 160,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_validate_csrf_token_invalid",
            "parameters": [
              "self"
            ],
            "docstring": "Test invalid CSRF token validation.",
            "lineno": 169,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test environment.",
            "lineno": 182,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_validate_request_all_valid",
            "parameters": [
              "self"
            ],
            "docstring": "Test request validation with all security checks passing.",
            "lineno": 188,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_validate_request_https_invalid",
            "parameters": [
              "self"
            ],
            "docstring": "Test request validation with invalid HTTPS.",
            "lineno": 203,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_validate_request_rate_limit_exceeded",
            "parameters": [
              "self"
            ],
            "docstring": "Test request validation with rate limit exceeded.",
            "lineno": 213,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_get_security_headers",
            "parameters": [
              "self"
            ],
            "docstring": "Test security headers generation.",
            "lineno": 226,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "test_security_manager_integration",
            "parameters": [
              "self"
            ],
            "docstring": "Test integration of all security components.",
            "lineno": 246,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "TestHTTPSEnforcement",
            "bases": [],
            "docstring": "Test HTTPS enforcement functionality.",
            "lineno": 20,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_validate_https_url_valid",
              "test_validate_https_url_invalid",
              "test_enforce_https_redirect",
              "test_ssl_context_configuration",
              "test_validate_ssl_certificate_success",
              "test_validate_ssl_certificate_failure"
            ],
            "attributes": []
          },
          {
            "name": "TestRateLimiting",
            "bases": [],
            "docstring": "Test rate limiting functionality.",
            "lineno": 99,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_check_rate_limit_first_request",
              "test_check_rate_limit_under_limit",
              "test_check_rate_limit_over_limit",
              "test_get_remaining_requests"
            ],
            "attributes": []
          },
          {
            "name": "TestCSRFProtection",
            "bases": [],
            "docstring": "Test CSRF protection functionality.",
            "lineno": 143,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_generate_csrf_token",
              "test_validate_csrf_token_valid",
              "test_validate_csrf_token_invalid"
            ],
            "attributes": []
          },
          {
            "name": "TestSecurityManager",
            "bases": [],
            "docstring": "Test comprehensive security manager.",
            "lineno": 179,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_validate_request_all_valid",
              "test_validate_request_https_invalid",
              "test_validate_request_rate_limit_exceeded",
              "test_get_security_headers"
            ],
            "attributes": []
          },
          {
            "name": "TestIntegration",
            "bases": [],
            "docstring": "Integration tests for security components.",
            "lineno": 243,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_security_manager_integration"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "valid_urls",
          "invalid_urls",
          "test_cases",
          "context",
          "result",
          "result",
          "result",
          "result",
          "result",
          "remaining",
          "session_id",
          "token",
          "session_id",
          "token",
          "result",
          "session_id",
          "invalid_token",
          "result",
          "user_id",
          "endpoint",
          "url",
          "result",
          "user_id",
          "endpoint",
          "url",
          "result",
          "user_id",
          "endpoint",
          "url",
          "result",
          "headers",
          "required_headers",
          "mock_redis",
          "secret_key",
          "security_manager",
          "user_id",
          "endpoint",
          "url",
          "session_id",
          "result",
          "result"
        ],
        "dependencies": [
          "pytest",
          "https_enforcement",
          "ssl",
          "unittest"
        ],
        "docstrings": [
          "Tests for HTTPS Enforcement Module\nValidates critical security blind spot fixes identified by multi-agent analysis.",
          "Test HTTPS enforcement functionality.",
          "Test rate limiting functionality.",
          "Test CSRF protection functionality.",
          "Test comprehensive security manager.",
          "Integration tests for security components.",
          "Setup test environment.",
          "Test validation of valid HTTPS URLs.",
          "Test validation of invalid HTTP URLs.",
          "Test HTTPS redirect enforcement.",
          "Test SSL context configuration.",
          "Test successful SSL certificate validation.",
          "Test SSL certificate validation failure.",
          "Setup test environment.",
          "Test rate limit check for first request.",
          "Test rate limit check when under limit.",
          "Test rate limit check when over limit.",
          "Test getting remaining requests.",
          "Setup test environment.",
          "Test CSRF token generation.",
          "Test valid CSRF token validation.",
          "Test invalid CSRF token validation.",
          "Setup test environment.",
          "Test request validation with all security checks passing.",
          "Test request validation with invalid HTTPS.",
          "Test request validation with rate limit exceeded.",
          "Test security headers generation.",
          "Test integration of all security components."
        ],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 5,
          "cognitive": 4,
          "nesting": 0,
          "statements": 117
        },
        "nesting_depth": 10,
        "ast_nodes": 966,
        "structure_hash": "8840f0a0a7643599430011377d791088"
      },
      "complexity_score": 5,
      "structure_hash": "8840f0a0a7643599430011377d791088",
      "lines_of_code": 268,
      "created_at": "2025-08-03T10:06:04.063669",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/security_first/__init__.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/security_first/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "from https_enforcement import HTTPSEnforcement",
          "from https_enforcement import RateLimiting",
          "from https_enforcement import CSRFProtection",
          "from https_enforcement import SecurityManager"
        ],
        "functions": [],
        "classes": [],
        "variables": [],
        "dependencies": [
          "https_enforcement",
          "typing"
        ],
        "docstrings": [],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 1
        },
        "nesting_depth": 4,
        "ast_nodes": 30,
        "structure_hash": "fd6e97a74bdd41db92bdaa06a8c88077"
      },
      "complexity_score": 1,
      "structure_hash": "fd6e97a74bdd41db92bdaa06a8c88077",
      "lines_of_code": 22,
      "created_at": "2025-08-03T10:06:04.077858",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/code_quality_system/quality_model.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/code_quality_system/quality_model.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "from dataclasses import dataclass",
          "from dataclasses import field",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "from typing import Callable",
          "from pathlib import Path",
          "import re",
          "import subprocess"
        ],
        "functions": [
          {
            "name": "__post_init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 31,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_define_rules",
            "parameters": [
              "self"
            ],
            "docstring": "Define all linting rules with their fixes",
            "lineno": 35,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_define_fixers",
            "parameters": [
              "self"
            ],
            "docstring": "Define automated fixers for each rule type",
            "lineno": 88,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "_run_autoflake",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Run autoflake to fix unused imports and variables",
            "lineno": 96,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_run_black",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Run black to format code",
            "lineno": 116,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_apply_custom_fixes",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Apply custom fixes for specific issues",
            "lineno": 126,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_fix_unused_imports",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix unused imports",
            "lineno": 167,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_fix_f_strings",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix f-string issues",
            "lineno": 171,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_fix_trailing_whitespace",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix trailing whitespace",
            "lineno": 175,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_fix_bare_except",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix bare except clauses",
            "lineno": 179,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_fix_import_order",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix import order issues",
            "lineno": 183,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "_fix_unused_variables",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix unused variables",
            "lineno": 188,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "analyze_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Analyze a single file for all linting issues",
            "lineno": 192,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "fix_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Fix all issues in a file",
            "lineno": 219,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "fix_all_files",
            "parameters": [
              "self",
              "directories"
            ],
            "docstring": "Fix all files in the project",
            "lineno": 235,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "LintingRule",
            "bases": [],
            "docstring": "Defines a linting rule and its fix",
            "lineno": 16,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "CodeQualityModel",
            "bases": [],
            "docstring": "Model-driven code quality system",
            "lineno": 28,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [
              "__post_init__",
              "_define_rules",
              "_define_fixers",
              "_run_autoflake",
              "_run_black",
              "_apply_custom_fixes",
              "_fix_unused_imports",
              "_fix_f_strings",
              "_fix_trailing_whitespace",
              "_fix_bare_except",
              "_fix_import_order",
              "_fix_unused_variables",
              "analyze_file",
              "fix_file",
              "fix_all_files"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "results",
          "result",
          "result",
          "content",
          "content",
          "content",
          "content",
          "result",
          "content",
          "parts"
        ],
        "dependencies": [
          "re",
          "typing",
          "pathlib",
          "dataclasses",
          "subprocess"
        ],
        "docstrings": [
          "Defines a linting rule and its fix",
          "Model-driven code quality system",
          "Define all linting rules with their fixes",
          "Define automated fixers for each rule type",
          "Run autoflake to fix unused imports and variables",
          "Run black to format code",
          "Apply custom fixes for specific issues",
          "Fix unused imports",
          "Fix f-string issues",
          "Fix trailing whitespace",
          "Fix bare except clauses",
          "Fix import order issues",
          "Fix unused variables",
          "Analyze a single file for all linting issues",
          "Fix all issues in a file",
          "Fix all files in the project"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 113
              }
            ],
            "lineno": 98
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 123
              }
            ],
            "lineno": 118
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 164
              }
            ],
            "lineno": 128
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 214
              }
            ],
            "lineno": 197
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 230
              }
            ],
            "lineno": 225
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "__post_init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__post_init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "_define_rules",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_define_fixers",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "_run_autoflake",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_run_autoflake",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_run_black",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_run_black",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_apply_custom_fixes",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_apply_custom_fixes",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_fix_unused_imports",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_unused_imports",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_fix_f_strings",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_f_strings",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_fix_trailing_whitespace",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_trailing_whitespace",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_fix_bare_except",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_bare_except",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_fix_import_order",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_import_order",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "_fix_unused_variables",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "_fix_unused_variables",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "analyze_file",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_file",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "fix_file",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_file",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "fix_all_files",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "fix_all_files",
            "parameter": "directories",
            "annotation": "List[str]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 18,
          "cognitive": 17,
          "nesting": 0,
          "statements": 53
        },
        "nesting_depth": 15,
        "ast_nodes": 1178,
        "structure_hash": "47d3ee37e514a30bd19d58c3e87f990e"
      },
      "complexity_score": 18,
      "structure_hash": "47d3ee37e514a30bd19d58c3e87f990e",
      "lines_of_code": 271,
      "created_at": "2025-08-03T10:06:04.042796",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/security_first/https_enforcement.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/security_first/https_enforcement.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import ssl",
          "import socket",
          "import logging",
          "import hashlib",
          "import time",
          "from urllib.parse import urlparse",
          "from typing import Dict",
          "from typing import Any",
          "from typing import Optional",
          "import certifi",
          "import requests"
        ],
        "functions": [
          {
            "name": "test_https_enforcement",
            "parameters": [],
            "docstring": "Test HTTPS enforcement functionality",
            "lineno": 178,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 21,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_create_ssl_context",
            "parameters": [
              "self"
            ],
            "docstring": "Create secure SSL context with modern TLS configuration.",
            "lineno": 26,
            "col_offset": 4,
            "decorators": [],
            "returns": "ssl.SSLContext",
            "has_async": false
          },
          {
            "name": "validate_https_url",
            "parameters": [
              "self",
              "url"
            ],
            "docstring": "Validate that URL uses HTTPS protocol.",
            "lineno": 34,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "enforce_https_redirect",
            "parameters": [
              "self",
              "url"
            ],
            "docstring": "Enforce HTTPS redirect for HTTP URLs.",
            "lineno": 39,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "validate_ssl_certificate",
            "parameters": [
              "self",
              "hostname",
              "port"
            ],
            "docstring": "Validate SSL certificate for given hostname.",
            "lineno": 47,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "configure_secure_requests_session",
            "parameters": [
              "self"
            ],
            "docstring": "Configure requests session with secure SSL settings.",
            "lineno": 72,
            "col_offset": 4,
            "decorators": [],
            "returns": "requests.Session",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "redis_client"
            ],
            "docstring": null,
            "lineno": 83,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "check_rate_limit",
            "parameters": [
              "self",
              "user_id",
              "endpoint"
            ],
            "docstring": "Check if user has exceeded rate limit for endpoint.",
            "lineno": 88,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "get_remaining_requests",
            "parameters": [
              "self",
              "user_id",
              "endpoint"
            ],
            "docstring": "Get remaining requests for user on endpoint.",
            "lineno": 104,
            "col_offset": 4,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "secret_key"
            ],
            "docstring": null,
            "lineno": 118,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "generate_csrf_token",
            "parameters": [
              "self",
              "session_id"
            ],
            "docstring": "Generate CSRF token for session.",
            "lineno": 121,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "validate_csrf_token",
            "parameters": [
              "self",
              "token",
              "session_id"
            ],
            "docstring": "Validate CSRF token for session.",
            "lineno": 126,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "redis_client",
              "secret_key"
            ],
            "docstring": null,
            "lineno": 135,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "validate_request",
            "parameters": [
              "self",
              "user_id",
              "endpoint",
              "url",
              "csrf_token",
              "session_id"
            ],
            "docstring": "Comprehensive request validation.",
            "lineno": 140,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "get_security_headers",
            "parameters": [
              "self"
            ],
            "docstring": "Get security headers for responses.",
            "lineno": 166,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "HTTPSEnforcement",
            "bases": [],
            "docstring": "HTTPS enforcement and SSL/TLS configuration for security-first architecture.",
            "lineno": 18,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "_create_ssl_context",
              "validate_https_url",
              "enforce_https_redirect",
              "validate_ssl_certificate",
              "configure_secure_requests_session"
            ],
            "attributes": []
          },
          {
            "name": "RateLimiting",
            "bases": [],
            "docstring": "Rate limiting implementation to prevent abuse.",
            "lineno": 80,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "check_rate_limit",
              "get_remaining_requests"
            ],
            "attributes": []
          },
          {
            "name": "CSRFProtection",
            "bases": [],
            "docstring": "CSRF protection implementation.",
            "lineno": 115,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "generate_csrf_token",
              "validate_csrf_token"
            ],
            "attributes": []
          },
          {
            "name": "SecurityManager",
            "bases": [],
            "docstring": "Comprehensive security manager implementing all critical blind spots.",
            "lineno": 132,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "validate_request",
              "get_security_headers"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "logger",
          "enforcement",
          "test_urls",
          "http_url",
          "https_url",
          "context",
          "parsed",
          "session",
          "key",
          "current",
          "count",
          "key",
          "current",
          "data",
          "expected_token",
          "results",
          "is_valid",
          "cert"
        ],
        "dependencies": [
          "hashlib",
          "socket",
          "urllib",
          "certifi",
          "typing",
          "ssl",
          "requests",
          "time",
          "logging"
        ],
        "docstrings": [
          "HTTPS enforcement and SSL/TLS configuration for security-first architecture",
          "HTTPS enforcement and SSL/TLS configuration for security-first architecture.",
          "Rate limiting implementation to prevent abuse.",
          "CSRF protection implementation.",
          "Comprehensive security manager implementing all critical blind spots.",
          "Test HTTPS enforcement functionality",
          "Create secure SSL context with modern TLS configuration.",
          "Validate that URL uses HTTPS protocol.",
          "Enforce HTTPS redirect for HTTP URLs.",
          "Validate SSL certificate for given hostname.",
          "Configure requests session with secure SSL settings.",
          "Check if user has exceeded rate limit for endpoint.",
          "Get remaining requests for user on endpoint.",
          "Generate CSRF token for session.",
          "Validate CSRF token for session.",
          "Comprehensive request validation.",
          "Get security headers for responses."
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 68
              }
            ],
            "lineno": 51
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_https_enforcement",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_create_ssl_context",
            "annotation": "ssl.SSLContext"
          },
          {
            "type": "return_annotation",
            "function": "validate_https_url",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_https_url",
            "parameter": "url",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "enforce_https_redirect",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "enforce_https_redirect",
            "parameter": "url",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_ssl_certificate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_ssl_certificate",
            "parameter": "hostname",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_ssl_certificate",
            "parameter": "port",
            "annotation": "int"
          },
          {
            "type": "return_annotation",
            "function": "configure_secure_requests_session",
            "annotation": "requests.Session"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "redis_client",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "check_rate_limit",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "check_rate_limit",
            "parameter": "user_id",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "check_rate_limit",
            "parameter": "endpoint",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "get_remaining_requests",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "get_remaining_requests",
            "parameter": "user_id",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "get_remaining_requests",
            "parameter": "endpoint",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "secret_key",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "generate_csrf_token",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_csrf_token",
            "parameter": "session_id",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_csrf_token",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_csrf_token",
            "parameter": "token",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_csrf_token",
            "parameter": "session_id",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "redis_client",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "secret_key",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_request",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_request",
            "parameter": "user_id",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_request",
            "parameter": "endpoint",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_request",
            "parameter": "url",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_request",
            "parameter": "csrf_token",
            "annotation": "Optional[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_request",
            "parameter": "session_id",
            "annotation": "Optional[str]"
          },
          {
            "type": "return_annotation",
            "function": "get_security_headers",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 13,
          "cognitive": 11,
          "nesting": 0,
          "statements": 77
        },
        "nesting_depth": 11,
        "ast_nodes": 939,
        "structure_hash": "eeede1c61196b060764e96b77d92a50c"
      },
      "complexity_score": 13,
      "structure_hash": "eeede1c61196b060764e96b77d92a50c",
      "lines_of_code": 204,
      "created_at": "2025-08-03T10:06:04.064870",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_anthropic_simple.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_anthropic_simple.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "invalid syntax (<unknown>, line 86)",
        "file_size": 3755,
        "lines_of_code": 98,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 98,
      "created_at": "2025-08-03T10:06:04.151204",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/mdc_generator/mdc_model.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/mdc_generator/mdc_model.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "import yaml",
          "from dataclasses import dataclass",
          "from typing import List",
          "from typing import Dict",
          "from typing import Any",
          "from typing import Optional",
          "from pathlib import Path",
          "import argparse"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function for command-line usage",
            "lineno": 364,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "to_yaml",
            "parameters": [
              "self"
            ],
            "docstring": "Convert to YAML string",
            "lineno": 23,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "to_mdc_content",
            "parameters": [
              "self"
            ],
            "docstring": "Generate complete .mdc file content",
            "lineno": 41,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "save",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Save .mdc file",
            "lineno": 46,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "from_file",
            "parameters": [
              "cls",
              "file_path"
            ],
            "docstring": "Load .mdc file from disk",
            "lineno": 57,
            "col_offset": 4,
            "decorators": [
              "classmethod"
            ],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "create_rule",
            "parameters": [
              "cls",
              "description",
              "globs",
              "content",
              "file_path",
              "always_apply"
            ],
            "docstring": "Create a new MDC rule file",
            "lineno": 95,
            "col_offset": 4,
            "decorators": [
              "classmethod"
            ],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "base_dir"
            ],
            "docstring": null,
            "lineno": 114,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "generate_all_rules",
            "parameters": [
              "self"
            ],
            "docstring": "Generate all standard .mdc rules",
            "lineno": 118,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_get_standard_rules",
            "parameters": [
              "self"
            ],
            "docstring": "Get standard rule definitions",
            "lineno": 134,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "validate_mdc_file",
            "parameters": [
              "self",
              "file_path"
            ],
            "docstring": "Validate a single .mdc file",
            "lineno": 347,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "validate_all_mdc_files",
            "parameters": [
              "self"
            ],
            "docstring": "Validate all .mdc files in the project",
            "lineno": 356,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "MDCFrontmatter",
            "bases": [],
            "docstring": "Model for MDC file YAML frontmatter",
            "lineno": 16,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [
              "to_yaml"
            ],
            "attributes": []
          },
          {
            "name": "MDCFile",
            "bases": [],
            "docstring": "Complete MDC file model",
            "lineno": 34,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [
              "to_mdc_content",
              "save",
              "from_file",
              "create_rule"
            ],
            "attributes": []
          },
          {
            "name": "MDCGenerator",
            "bases": [],
            "docstring": "Generator for MDC files",
            "lineno": 111,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "generate_all_rules",
              "_get_standard_rules",
              "validate_mdc_file",
              "validate_all_mdc_files"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "parser",
          "args",
          "generator",
          "data",
          "yaml_content",
          "target_path",
          "lines",
          "frontmatter_end",
          "frontmatter_text",
          "frontmatter_data",
          "content_lines",
          "content",
          "frontmatter",
          "frontmatter",
          "rules",
          "results",
          "results",
          "valid_files",
          "invalid_files",
          "content",
          "file_path",
          "mdc_file",
          "frontmatter_end"
        ],
        "dependencies": [
          "argparse",
          "yaml",
          "typing",
          "pathlib",
          "dataclasses"
        ],
        "docstrings": [
          "Model for MDC file YAML frontmatter",
          "Complete MDC file model",
          "Generator for MDC files",
          "Main function for command-line usage",
          "Convert to YAML string",
          "Generate complete .mdc file content",
          "Save .mdc file",
          "Load .mdc file from disk",
          "Create a new MDC rule file",
          "Generate all standard .mdc rules",
          "Get standard rule definitions",
          "Validate a single .mdc file",
          "Validate all .mdc files in the project"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 352
              }
            ],
            "lineno": 349
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "to_yaml",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "to_mdc_content",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "save",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "save",
            "parameter": "file_path",
            "annotation": "Optional[Path]"
          },
          {
            "type": "return_annotation",
            "function": "from_file",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "from_file",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "create_rule",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "create_rule",
            "parameter": "description",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "create_rule",
            "parameter": "globs",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_rule",
            "parameter": "content",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "create_rule",
            "parameter": "file_path",
            "annotation": "Optional[Path]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_rule",
            "parameter": "always_apply",
            "annotation": "bool"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "base_dir",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "generate_all_rules",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "_get_standard_rules",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "validate_mdc_file",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_mdc_file",
            "parameter": "file_path",
            "annotation": "Path"
          },
          {
            "type": "return_annotation",
            "function": "validate_all_mdc_files",
            "annotation": "Dict[unknown]"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 17,
          "cognitive": 16,
          "nesting": 0,
          "statements": 70
        },
        "nesting_depth": 10,
        "ast_nodes": 975,
        "structure_hash": "186b7203defc6f7914f88228b628aaf3"
      },
      "complexity_score": 17,
      "structure_hash": "186b7203defc6f7914f88228b628aaf3",
      "lines_of_code": 409,
      "created_at": "2025-08-03T10:06:04.128145",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/mdc_generator/__init__.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/mdc_generator/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "from mdc_model import MDCFile",
          "from mdc_model import MDCFrontmatter",
          "from mdc_model import MDCGenerator"
        ],
        "functions": [],
        "classes": [],
        "variables": [],
        "dependencies": [
          "typing",
          "mdc_model"
        ],
        "docstrings": [],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 1
        },
        "nesting_depth": 4,
        "ast_nodes": 34,
        "structure_hash": "c252051f9e473d4d8f2418409f15c422"
      },
      "complexity_score": 1,
      "structure_hash": "c252051f9e473d4d8f2418409f15c422",
      "lines_of_code": 12,
      "created_at": "2025-08-03T10:06:04.128883",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_diversity_hypothesis.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_diversity_hypothesis.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "unexpected indent (<unknown>, line 30)",
        "file_size": 20783,
        "lines_of_code": 538,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 538,
      "created_at": "2025-08-03T10:06:04.223595",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_multi_agent_blind_spot_detection.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_multi_agent_blind_spot_detection.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from dataclasses import dataclass",
          "from typing import Dict",
          "from typing import List",
          "from unittest.mock import patch"
        ],
        "functions": [
          {
            "name": "__init__",
            "parameters": [
              "self",
              "name",
              "role",
              "focus",
              "perspective",
              "model",
              "temperature",
              "api_key_env"
            ],
            "docstring": null,
            "lineno": 24,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "analyze",
            "parameters": [
              "self",
              "context"
            ],
            "docstring": "Analyze context for blind spots",
            "lineno": 42,
            "col_offset": 4,
            "decorators": [],
            "returns": "BlindSpotTestResult",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 58,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "analyze_security_blind_spots",
            "parameters": [
              "self"
            ],
            "docstring": "Analyze security blind spots",
            "lineno": 107,
            "col_offset": 4,
            "decorators": [],
            "returns": "BlindSpotTestResult",
            "has_async": false
          },
          {
            "name": "analyze_devops_blind_spots",
            "parameters": [
              "self"
            ],
            "docstring": "Analyze DevOps blind spots",
            "lineno": 140,
            "col_offset": 4,
            "decorators": [],
            "returns": "BlindSpotTestResult",
            "has_async": false
          },
          {
            "name": "analyze_code_quality_blind_spots",
            "parameters": [
              "self"
            ],
            "docstring": "Analyze code quality blind spots",
            "lineno": 173,
            "col_offset": 4,
            "decorators": [],
            "returns": "BlindSpotTestResult",
            "has_async": false
          },
          {
            "name": "analyze_ux_blind_spots",
            "parameters": [
              "self"
            ],
            "docstring": "Analyze UX blind spots",
            "lineno": 206,
            "col_offset": 4,
            "decorators": [],
            "returns": "BlindSpotTestResult",
            "has_async": false
          },
          {
            "name": "analyze_performance_blind_spots",
            "parameters": [
              "self"
            ],
            "docstring": "Analyze performance blind spots",
            "lineno": 239,
            "col_offset": 4,
            "decorators": [],
            "returns": "BlindSpotTestResult",
            "has_async": false
          },
          {
            "name": "run_complete_analysis",
            "parameters": [
              "self"
            ],
            "docstring": "Run complete multi-agent analysis",
            "lineno": 272,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test method",
            "lineno": 286,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_security_blind_spot_detection",
            "parameters": [
              "self"
            ],
            "docstring": "Test security blind spot detection",
            "lineno": 290,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_devops_blind_spot_detection",
            "parameters": [
              "self"
            ],
            "docstring": "Test DevOps blind spot detection",
            "lineno": 301,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_code_quality_blind_spot_detection",
            "parameters": [
              "self"
            ],
            "docstring": "Test code quality blind spot detection",
            "lineno": 312,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_ux_blind_spot_detection",
            "parameters": [
              "self"
            ],
            "docstring": "Test UX blind spot detection",
            "lineno": 323,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_performance_blind_spot_detection",
            "parameters": [
              "self"
            ],
            "docstring": "Test performance blind spot detection",
            "lineno": 334,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_complete_multi_agent_analysis",
            "parameters": [
              "self"
            ],
            "docstring": "Test complete multi-agent analysis",
            "lineno": 345,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_blind_spot_coverage",
            "parameters": [
              "self"
            ],
            "docstring": "Test blind spot coverage across all agents",
            "lineno": 358,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_confidence_score_distribution",
            "parameters": [
              "self"
            ],
            "docstring": "Test confidence score distribution",
            "lineno": 370,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_recommendation_quality",
            "parameters": [
              "self"
            ],
            "docstring": "Test recommendation quality",
            "lineno": 379,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_method",
            "parameters": [
              "self"
            ],
            "docstring": "Setup test method",
            "lineno": 390,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_security_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test security compliance",
            "lineno": 394,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_devops_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test DevOps compliance",
            "lineno": 414,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_code_quality_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test code quality compliance",
            "lineno": 434,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_ux_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test UX compliance",
            "lineno": 450,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_performance_compliance",
            "parameters": [
              "self"
            ],
            "docstring": "Test performance compliance",
            "lineno": 464,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_blind_spot_to_implementation_mapping",
            "parameters": [
              "self"
            ],
            "docstring": "Test that blind spots map to actual implementations",
            "lineno": 490,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_remaining_blind_spots_prioritization",
            "parameters": [
              "self"
            ],
            "docstring": "Test prioritization of remaining blind spots",
            "lineno": 524,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "BlindSpotTestResult",
            "bases": [],
            "docstring": "Result of blind spot detection test",
            "lineno": 10,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "DiversityAgent",
            "bases": [],
            "docstring": "Diversity agent for blind spot detection",
            "lineno": 21,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "analyze"
            ],
            "attributes": []
          },
          {
            "name": "MultiAgentBlindSpotDetector",
            "bases": [],
            "docstring": "Multi-agent blind spot detection system",
            "lineno": 55,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "analyze_security_blind_spots",
              "analyze_devops_blind_spots",
              "analyze_code_quality_blind_spots",
              "analyze_ux_blind_spots",
              "analyze_performance_blind_spots",
              "run_complete_analysis"
            ],
            "attributes": []
          },
          {
            "name": "TestMultiAgentBlindSpotDetection",
            "bases": [],
            "docstring": "Test multi-agent blind spot detection",
            "lineno": 283,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_security_blind_spot_detection",
              "test_devops_blind_spot_detection",
              "test_code_quality_blind_spot_detection",
              "test_ux_blind_spot_detection",
              "test_performance_blind_spot_detection",
              "test_complete_multi_agent_analysis",
              "test_blind_spot_coverage",
              "test_confidence_score_distribution",
              "test_recommendation_quality"
            ],
            "attributes": []
          },
          {
            "name": "TestBlindSpotDetectionCompliance",
            "bases": [],
            "docstring": "Test compliance with blind spot detection requirements",
            "lineno": 387,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "setup_method",
              "test_security_compliance",
              "test_devops_compliance",
              "test_code_quality_compliance",
              "test_ux_compliance",
              "test_performance_compliance"
            ],
            "attributes": []
          },
          {
            "name": "TestBlindSpotDetectionIntegration",
            "bases": [],
            "docstring": "Test integration between blind spot detection and Streamlit app",
            "lineno": 487,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "test_blind_spot_to_implementation_mapping",
              "test_remaining_blind_spots_prioritization"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "detector",
          "results",
          "blind_spots_found",
          "blind_spots_addressed",
          "blind_spots_missing",
          "blind_spots_found",
          "blind_spots_addressed",
          "blind_spots_missing",
          "blind_spots_found",
          "blind_spots_addressed",
          "blind_spots_missing",
          "blind_spots_found",
          "blind_spots_addressed",
          "blind_spots_missing",
          "blind_spots_found",
          "blind_spots_addressed",
          "blind_spots_missing",
          "result",
          "result",
          "result",
          "result",
          "result",
          "results",
          "results",
          "total_blind_spots",
          "results",
          "results",
          "result",
          "security_keywords",
          "found_keywords",
          "result",
          "devops_keywords",
          "found_keywords",
          "result",
          "quality_keywords",
          "found_keywords",
          "result",
          "ux_keywords",
          "found_keywords",
          "result",
          "performance_keywords",
          "found_keywords",
          "detector",
          "detector",
          "results",
          "all_missing",
          "high_impact_keywords",
          "high_impact_found",
          "results",
          "security_result",
          "security_implementations",
          "recommendation_lower",
          "implementation_found"
        ],
        "dependencies": [
          "dataclasses",
          "typing",
          "unittest"
        ],
        "docstrings": [
          "Multi-agent blind spot detection testing",
          "Result of blind spot detection test",
          "Diversity agent for blind spot detection",
          "Multi-agent blind spot detection system",
          "Test multi-agent blind spot detection",
          "Test compliance with blind spot detection requirements",
          "Test integration between blind spot detection and Streamlit app",
          "Analyze context for blind spots",
          "Analyze security blind spots",
          "Analyze DevOps blind spots",
          "Analyze code quality blind spots",
          "Analyze UX blind spots",
          "Analyze performance blind spots",
          "Run complete multi-agent analysis",
          "Setup test method",
          "Test security blind spot detection",
          "Test DevOps blind spot detection",
          "Test code quality blind spot detection",
          "Test UX blind spot detection",
          "Test performance blind spot detection",
          "Test complete multi-agent analysis",
          "Test blind spot coverage across all agents",
          "Test confidence score distribution",
          "Test recommendation quality",
          "Setup test method",
          "Test security compliance",
          "Test DevOps compliance",
          "Test code quality compliance",
          "Test UX compliance",
          "Test performance compliance",
          "Test that blind spots map to actual implementations",
          "Test prioritization of remaining blind spots"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "name",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "role",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "focus",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "perspective",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "model",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "temperature",
            "annotation": "float"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "api_key_env",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "analyze",
            "annotation": "BlindSpotTestResult"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze",
            "parameter": "context",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "analyze_security_blind_spots",
            "annotation": "BlindSpotTestResult"
          },
          {
            "type": "return_annotation",
            "function": "analyze_devops_blind_spots",
            "annotation": "BlindSpotTestResult"
          },
          {
            "type": "return_annotation",
            "function": "analyze_code_quality_blind_spots",
            "annotation": "BlindSpotTestResult"
          },
          {
            "type": "return_annotation",
            "function": "analyze_ux_blind_spots",
            "annotation": "BlindSpotTestResult"
          },
          {
            "type": "return_annotation",
            "function": "analyze_performance_blind_spots",
            "annotation": "BlindSpotTestResult"
          },
          {
            "type": "return_annotation",
            "function": "run_complete_analysis",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_security_blind_spot_detection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_devops_blind_spot_detection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_code_quality_blind_spot_detection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_ux_blind_spot_detection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_performance_blind_spot_detection",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_complete_multi_agent_analysis",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_blind_spot_coverage",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_confidence_score_distribution",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_recommendation_quality",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "setup_method",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_security_compliance",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_devops_compliance",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_code_quality_compliance",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_ux_compliance",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_performance_compliance",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_blind_spot_to_implementation_mapping",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_remaining_blind_spots_prioritization",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 9,
          "cognitive": 7,
          "nesting": 0,
          "statements": 159
        },
        "nesting_depth": 12,
        "ast_nodes": 1853,
        "structure_hash": "609ecde3743324881fc024d98eb885b1"
      },
      "complexity_score": 9,
      "structure_hash": "609ecde3743324881fc024d98eb885b1",
      "lines_of_code": 569,
      "created_at": "2025-08-03T10:06:04.215310",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/diversity_synthesis_orchestrator.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/diversity_synthesis_orchestrator.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "import json",
          "import os",
          "from dataclasses import dataclass",
          "from dataclasses import asdict",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "from pathlib import Path",
          "from langchain_core.messages import HumanMessage",
          "from langchain_core.messages import SystemMessage",
          "from langchain_openai import ChatOpenAI",
          "from pydantic import BaseModel",
          "from pydantic import Field",
          "import matplotlib.pyplot",
          "import seaborn",
          "import pandas",
          "import numpy"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function to run synthesis",
            "lineno": 542,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 60,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "create_llm_client",
            "parameters": [
              "self"
            ],
            "docstring": "Create LLM client for synthesis",
            "lineno": 102,
            "col_offset": 4,
            "decorators": [],
            "returns": "ChatOpenAI",
            "has_async": false
          },
          {
            "name": "load_diversity_findings",
            "parameters": [
              "self",
              "analysis_file"
            ],
            "docstring": "Load findings from diversity analysis",
            "lineno": 110,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "synthesize_fixes",
            "parameters": [
              "self",
              "findings_data"
            ],
            "docstring": "Synthesize diverse findings into prioritized fixes",
            "lineno": 116,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[FixSynthesis]",
            "has_async": false
          },
          {
            "name": "calculate_stakeholder_impact_matrix",
            "parameters": [
              "self",
              "fixes"
            ],
            "docstring": "Calculate stakeholder impact matrix",
            "lineno": 203,
            "col_offset": 4,
            "decorators": [],
            "returns": "pd.DataFrame",
            "has_async": false
          },
          {
            "name": "create_synthesis_visualizations",
            "parameters": [
              "self",
              "fixes",
              "impact_matrix"
            ],
            "docstring": "Create visualizations for synthesis results",
            "lineno": 232,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "generate_prioritized_report",
            "parameters": [
              "self",
              "fixes",
              "impact_matrix"
            ],
            "docstring": "Generate prioritized implementation report",
            "lineno": 349,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "run_synthesis",
            "parameters": [
              "self",
              "analysis_file"
            ],
            "docstring": "Run complete synthesis analysis",
            "lineno": 488,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "Stakeholder",
            "bases": [],
            "docstring": null,
            "lineno": 26,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "SynthesizedFix",
            "bases": [],
            "docstring": null,
            "lineno": 35,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "FixSynthesis",
            "bases": [
              "BaseModel"
            ],
            "docstring": null,
            "lineno": 45,
            "col_offset": 0,
            "decorators": [],
            "methods": [],
            "attributes": []
          },
          {
            "name": "DiversitySynthesisOrchestrator",
            "bases": [],
            "docstring": null,
            "lineno": 59,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "create_llm_client",
              "load_diversity_findings",
              "synthesize_fixes",
              "calculate_stakeholder_impact_matrix",
              "create_synthesis_visualizations",
              "generate_prioritized_report",
              "run_synthesis"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "orchestrator",
          "analysis_file",
          "results",
          "api_key",
          "llm",
          "all_findings",
          "synthesis_prompt",
          "messages",
          "response",
          "stakeholders",
          "impact_matrix",
          "roi_mapping",
          "effort_mapping",
          "priorities",
          "rois",
          "efforts",
          "scatter",
          "all_categories",
          "category_counts",
          "categories",
          "counts",
          "bars",
          "timeline_mapping",
          "timelines",
          "timeline_labels",
          "bars",
          "sorted_fixes",
          "report",
          "findings_data",
          "fixes",
          "impact_matrix",
          "report",
          "sorted_fixes",
          "data",
          "agent_name",
          "content",
          "fixes_data",
          "fixes",
          "row",
          "count",
          "json_start",
          "json_end",
          "json_content",
          "json_content",
          "fixes_data",
          "impact",
          "score",
          "score",
          "score",
          "score"
        ],
        "dependencies": [
          "json",
          "pandas",
          "langchain_core",
          "seaborn",
          "typing",
          "langchain_openai",
          "pydantic",
          "numpy",
          "pathlib",
          "dataclasses",
          "matplotlib",
          "os"
        ],
        "docstrings": [
          "Main function to run synthesis",
          "Create LLM client for synthesis",
          "Load findings from diversity analysis",
          "Synthesize diverse findings into prioritized fixes",
          "Calculate stakeholder impact matrix",
          "Create visualizations for synthesis results",
          "Generate prioritized implementation report",
          "Run complete synthesis analysis"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 199
              }
            ],
            "lineno": 182
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "create_llm_client",
            "annotation": "ChatOpenAI"
          },
          {
            "type": "return_annotation",
            "function": "load_diversity_findings",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "load_diversity_findings",
            "parameter": "analysis_file",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "synthesize_fixes",
            "annotation": "List[FixSynthesis]"
          },
          {
            "type": "parameter_annotation",
            "function": "synthesize_fixes",
            "parameter": "findings_data",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "calculate_stakeholder_impact_matrix",
            "annotation": "pd.DataFrame"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_stakeholder_impact_matrix",
            "parameter": "fixes",
            "annotation": "List[FixSynthesis]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_synthesis_visualizations",
            "parameter": "fixes",
            "annotation": "List[FixSynthesis]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_synthesis_visualizations",
            "parameter": "impact_matrix",
            "annotation": "pd.DataFrame"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_prioritized_report",
            "parameter": "fixes",
            "annotation": "List[FixSynthesis]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_prioritized_report",
            "parameter": "impact_matrix",
            "annotation": "pd.DataFrame"
          },
          {
            "type": "return_annotation",
            "function": "run_synthesis",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "run_synthesis",
            "parameter": "analysis_file",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 34,
          "cognitive": 34,
          "nesting": 0,
          "statements": 122
        },
        "nesting_depth": 13,
        "ast_nodes": 2434,
        "structure_hash": "fda62d0181a82081a32d18111826554b"
      },
      "complexity_score": 34,
      "structure_hash": "fda62d0181a82081a32d18111826554b",
      "lines_of_code": 582,
      "created_at": "2025-08-03T10:06:04.213081",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/debug_anthropic_api.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/debug_anthropic_api.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import os",
          "import requests"
        ],
        "functions": [
          {
            "name": "test_anthropic_api",
            "parameters": [],
            "docstring": "Test Anthropic API with different configurations",
            "lineno": 10,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "api_key",
          "configs",
          "response",
          "result"
        ],
        "dependencies": [
          "requests",
          "os"
        ],
        "docstrings": [
          "Debug Anthropic API Issues",
          "Test Anthropic API with different configurations"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 100
              }
            ],
            "lineno": 83
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_anthropic_api",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 6,
          "cognitive": 5,
          "nesting": 0,
          "statements": 19
        },
        "nesting_depth": 11,
        "ast_nodes": 337,
        "structure_hash": "55260e9afad07b845eb5e126b25c9cc9"
      },
      "complexity_score": 6,
      "structure_hash": "55260e9afad07b845eb5e126b25c9cc9",
      "lines_of_code": 106,
      "created_at": "2025-08-03T10:06:04.222809",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_live_smoke_test.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_live_smoke_test.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "unexpected indent (<unknown>, line 66)",
        "file_size": 3536,
        "lines_of_code": 98,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 98,
      "created_at": "2025-08-03T10:06:04.242173",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_model_traceability.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_model_traceability.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "unexpected indent (<unknown>, line 13)",
        "file_size": 6810,
        "lines_of_code": 194,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 194,
      "created_at": "2025-08-03T10:06:04.244327",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/multi_dimensional_smoke_test.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/multi_dimensional_smoke_test.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "expected an indented block after class definition on line 16 (<unknown>, line 17)",
        "file_size": 27263,
        "lines_of_code": 677,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 677,
      "created_at": "2025-08-03T10:06:04.244707",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/meta_cognitive_orchestrator.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/meta_cognitive_orchestrator.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Any"
        ],
        "functions": [
          {
            "name": "test_meta_cognitive_orchestrator",
            "parameters": [],
            "docstring": "Test the meta-cognitive orchestrator",
            "lineno": 136,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "confidence_threshold"
            ],
            "docstring": null,
            "lineno": 10,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "detect_assumptions",
            "parameters": [
              "self",
              "context"
            ],
            "docstring": "Detect when I'm making assumptions or missing information",
            "lineno": 23,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "generate_jeopardy_question",
            "parameters": [
              "self",
              "context"
            ],
            "docstring": "Generate Jeopardy-style question for partner LLM",
            "lineno": 33,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "simulate_partner_investigation",
            "parameters": [
              "self",
              "context"
            ],
            "docstring": "Simulate partner LLM investigation with Jeopardy-style questions",
            "lineno": 44,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "identify_blind_spots",
            "parameters": [
              "self",
              "partner_questions"
            ],
            "docstring": "Analyze partner LLM feedback and identify blind spots",
            "lineno": 71,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[str]",
            "has_async": false
          },
          {
            "name": "calculate_confidence",
            "parameters": [
              "self",
              "assumptions",
              "blind_spots"
            ],
            "docstring": "Calculate confidence based on detected issues",
            "lineno": 87,
            "col_offset": 4,
            "decorators": [],
            "returns": "float",
            "has_async": false
          },
          {
            "name": "make_decision",
            "parameters": [
              "self",
              "confidence",
              "blind_spots"
            ],
            "docstring": "Make final decision based on confidence and blind spots",
            "lineno": 97,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "orchestrate",
            "parameters": [
              "self",
              "context"
            ],
            "docstring": "Orchestrate meta-cognitive awareness for a given context",
            "lineno": 106,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "MetaCognitiveOrchestrator",
            "bases": [],
            "docstring": "Orchestrates meta-cognitive awareness through partner LLM questioning",
            "lineno": 7,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "detect_assumptions",
              "generate_jeopardy_question",
              "simulate_partner_investigation",
              "identify_blind_spots",
              "calculate_confidence",
              "make_decision",
              "orchestrate"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "orchestrator",
          "test_contexts",
          "detected_assumptions",
          "partner_questions",
          "blind_spots",
          "confidence",
          "assumptions",
          "jeopardy_question",
          "partner_questions",
          "blind_spots",
          "confidence",
          "final_decision",
          "result"
        ],
        "dependencies": [
          "typing"
        ],
        "docstrings": [
          "Meta-Cognitive Orchestrator for LLM self-awareness",
          "Orchestrates meta-cognitive awareness through partner LLM questioning",
          "Test the meta-cognitive orchestrator",
          "Detect when I'm making assumptions or missing information",
          "Generate Jeopardy-style question for partner LLM",
          "Simulate partner LLM investigation with Jeopardy-style questions",
          "Analyze partner LLM feedback and identify blind spots",
          "Calculate confidence based on detected issues",
          "Make final decision based on confidence and blind spots",
          "Orchestrate meta-cognitive awareness for a given context"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_meta_cognitive_orchestrator",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "confidence_threshold",
            "annotation": "float"
          },
          {
            "type": "return_annotation",
            "function": "detect_assumptions",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "detect_assumptions",
            "parameter": "context",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "generate_jeopardy_question",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_jeopardy_question",
            "parameter": "context",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "simulate_partner_investigation",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "simulate_partner_investigation",
            "parameter": "context",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "identify_blind_spots",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "identify_blind_spots",
            "parameter": "partner_questions",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "calculate_confidence",
            "annotation": "float"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_confidence",
            "parameter": "assumptions",
            "annotation": "List[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_confidence",
            "parameter": "blind_spots",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "make_decision",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "make_decision",
            "parameter": "confidence",
            "annotation": "float"
          },
          {
            "type": "parameter_annotation",
            "function": "make_decision",
            "parameter": "blind_spots",
            "annotation": "List[str]"
          },
          {
            "type": "return_annotation",
            "function": "orchestrate",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "orchestrate",
            "parameter": "context",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 16,
          "cognitive": 18,
          "nesting": 0,
          "statements": 49
        },
        "nesting_depth": 10,
        "ast_nodes": 590,
        "structure_hash": "478065830819255878131ce5c7688c78"
      },
      "complexity_score": 16,
      "structure_hash": "478065830819255878131ce5c7688c78",
      "lines_of_code": 158,
      "created_at": "2025-08-03T10:06:04.234227",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_meta_cognitive_orchestrator.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/test_meta_cognitive_orchestrator.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "unexpected indent (<unknown>, line 14)",
        "file_size": 12085,
        "lines_of_code": 346,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 346,
      "created_at": "2025-08-03T10:06:04.255992",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/diversity_hypothesis_demo.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/diversity_hypothesis_demo.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "import json",
          "from typing import Dict",
          "from typing import Any",
          "from dataclasses import dataclass"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": null,
            "lineno": 261,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 25,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "simulate_ai_review",
            "parameters": [
              "self",
              "reviewer"
            ],
            "docstring": "Simulate an AI reviewer's analysis based on their perspective",
            "lineno": 74,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "analyze_diversity_impact",
            "parameters": [
              "self"
            ],
            "docstring": "Analyze how diversity improves blind spot detection",
            "lineno": 129,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "compare_with_github_copilot",
            "parameters": [
              "self"
            ],
            "docstring": "Compare our diverse AI reviewers with GitHub Copilot findings",
            "lineno": 157,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "run_demo",
            "parameters": [
              "self"
            ],
            "docstring": "Run the complete diversity hypothesis demonstration",
            "lineno": 184,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "AIReviewer",
            "bases": [],
            "docstring": null,
            "lineno": 17,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "DiversityHypothesisDemo",
            "bases": [],
            "docstring": null,
            "lineno": 24,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "simulate_ai_review",
              "analyze_diversity_impact",
              "compare_with_github_copilot",
              "run_demo"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "findings",
          "findings",
          "findings",
          "findings",
          "findings"
        ],
        "dependencies": [
          "dataclasses",
          "typing",
          "json"
        ],
        "docstrings": [
          "Simulate an AI reviewer's analysis based on their perspective",
          "Analyze how diversity improves blind spot detection",
          "Compare our diverse AI reviewers with GitHub Copilot findings",
          "Run the complete diversity hypothesis demonstration"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "simulate_ai_review",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "simulate_ai_review",
            "parameter": "reviewer",
            "annotation": "AIReviewer"
          },
          {
            "type": "return_annotation",
            "function": "analyze_diversity_impact",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_diversity_impact",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "compare_with_github_copilot",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "compare_with_github_copilot",
            "parameter": "self",
            "annotation": "Any"
          },
          {
            "type": "return_annotation",
            "function": "run_demo",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "run_demo",
            "parameter": "self",
            "annotation": "Any"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 14,
          "cognitive": 12,
          "nesting": 0,
          "statements": 65
        },
        "nesting_depth": 13,
        "ast_nodes": 1139,
        "structure_hash": "409ccb5856b841967137e610aae54ada"
      },
      "complexity_score": 14,
      "structure_hash": "409ccb5856b841967137e610aae54ada",
      "lines_of_code": 274,
      "created_at": "2025-08-03T10:06:04.310943",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/live_smoke_test_langchain.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/live_smoke_test_langchain.py",
      "file_type": "python",
      "model_type": "basic",
      "model_data": {
        "basic_error": "invalid syntax (<unknown>, line 43)",
        "file_size": 10436,
        "lines_of_code": 279,
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 0
        }
      },
      "complexity_score": 1,
      "structure_hash": "",
      "lines_of_code": 279,
      "created_at": "2025-08-03T10:06:04.384680",
      "commit_hash": "unknown"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/cost_analysis.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/cost_analysis.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import json",
          "import os"
        ],
        "functions": [
          {
            "name": "estimate_tokens",
            "parameters": [
              "text"
            ],
            "docstring": "Rough estimate of tokens (4 characters per token)",
            "lineno": 18,
            "col_offset": 0,
            "decorators": [],
            "returns": "int",
            "has_async": false
          },
          {
            "name": "analyze_multi_dimensional_costs",
            "parameters": [],
            "docstring": "Analyze costs from multi-dimensional smoke test",
            "lineno": 23,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "analyze_langgraph_costs",
            "parameters": [],
            "docstring": "Analyze costs from LangGraph diversity orchestrator",
            "lineno": 94,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "analyze_synthesis_costs",
            "parameters": [],
            "docstring": "Analyze costs from synthesis orchestrator",
            "lineno": 172,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "main",
            "parameters": [],
            "docstring": "Calculate total costs for diversity hypothesis testing",
            "lineno": 265,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [],
        "variables": [
          "total_input_tokens",
          "total_output_tokens",
          "successful_calls",
          "input_cost",
          "output_cost",
          "total_cost",
          "analysis_file",
          "total_input_tokens",
          "total_output_tokens",
          "successful_calls",
          "input_cost",
          "output_cost",
          "total_cost",
          "synthesis_file",
          "system_message",
          "findings_text",
          "user_message",
          "input_text",
          "input_tokens",
          "output_text",
          "output_tokens",
          "input_cost",
          "output_cost",
          "total_cost",
          "multi_dimensional",
          "langgraph",
          "synthesis",
          "total_calls",
          "total_input_tokens",
          "total_output_tokens",
          "total_cost",
          "total_findings",
          "cost_per_finding",
          "data",
          "data",
          "data",
          "system_message",
          "user_message",
          "input_text",
          "input_tokens",
          "output_text",
          "output_tokens",
          "agent_name",
          "system_message",
          "user_message",
          "input_text",
          "input_tokens",
          "output_text",
          "output_tokens"
        ],
        "dependencies": [
          "os",
          "json"
        ],
        "docstrings": [
          "\ud83d\udcb0 COST ANALYSIS FOR DIVERSITY HYPOTHESIS TESTING\n\nCalculate total tokens and costs for our multi-agent diversity analysis.",
          "Rough estimate of tokens (4 characters per token)",
          "Analyze costs from multi-dimensional smoke test",
          "Analyze costs from LangGraph diversity orchestrator",
          "Analyze costs from synthesis orchestrator",
          "Calculate total costs for diversity hypothesis testing"
        ],
        "error_handling": [],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "estimate_tokens",
            "annotation": "int"
          },
          {
            "type": "parameter_annotation",
            "function": "estimate_tokens",
            "parameter": "text",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "analyze_multi_dimensional_costs",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "analyze_langgraph_costs",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "analyze_synthesis_costs",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 13,
          "cognitive": 10,
          "nesting": 0,
          "statements": 116
        },
        "nesting_depth": 10,
        "ast_nodes": 1302,
        "structure_hash": "b7c7f1231d168b58974342a6e8332981"
      },
      "complexity_score": 13,
      "structure_hash": "b7c7f1231d168b58974342a6e8332981",
      "lines_of_code": 336,
      "created_at": "2025-08-03T10:06:04.321761",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/live_smoke_test.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/live_smoke_test.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import os",
          "import json",
          "import requests",
          "from typing import Dict",
          "from typing import Any",
          "from typing import Optional"
        ],
        "functions": [
          {
            "name": "test_live_scenario_1",
            "parameters": [],
            "docstring": "Test live LLM with PR workflow scenario",
            "lineno": 113,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_live_scenario_2",
            "parameters": [],
            "docstring": "Test live LLM with security scenario",
            "lineno": 132,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "test_live_edge_case",
            "parameters": [],
            "docstring": "Test live LLM with edge case scenario",
            "lineno": 150,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "compare_live_results",
            "parameters": [
              "our_result",
              "live_result"
            ],
            "docstring": "Compare our analysis with live LLM results",
            "lineno": 166,
            "col_offset": 0,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "api_key",
              "provider"
            ],
            "docstring": null,
            "lineno": 13,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "_get_base_url",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 19,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "_get_model",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 27,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "call_live_llm",
            "parameters": [
              "self",
              "context",
              "jeopardy_question"
            ],
            "docstring": "Call live LLM API for real second opinion",
            "lineno": 35,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "LiveLLMOrchestrator",
            "bases": [],
            "docstring": "Live LLM integration for real smoke testing",
            "lineno": 10,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "_get_base_url",
              "_get_model",
              "call_live_llm"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "orchestrator",
          "context",
          "jeopardy_question",
          "result",
          "orchestrator",
          "context",
          "jeopardy_question",
          "result",
          "orchestrator",
          "context",
          "jeopardy_question",
          "result",
          "comparison",
          "our_conf",
          "live_conf",
          "prompt",
          "response",
          "result",
          "response",
          "content",
          "content"
        ],
        "dependencies": [
          "json",
          "typing",
          "requests",
          "os"
        ],
        "docstrings": [
          "Live LLM integration for real smoke testing",
          "Live LLM integration for real smoke testing",
          "Test live LLM with PR workflow scenario",
          "Test live LLM with security scenario",
          "Test live LLM with edge case scenario",
          "Compare our analysis with live LLM results",
          "Call live LLM API for real second opinion"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 109
              }
            ],
            "lineno": 63
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "json.JSONDecodeError",
                "lineno": 104
              }
            ],
            "lineno": 102
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "test_live_scenario_1",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_live_scenario_2",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "test_live_edge_case",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "compare_live_results",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "compare_live_results",
            "parameter": "our_result",
            "annotation": "Dict"
          },
          {
            "type": "parameter_annotation",
            "function": "compare_live_results",
            "parameter": "live_result",
            "annotation": "Dict"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "api_key",
            "annotation": "Optional[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "provider",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_get_base_url",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "_get_model",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "call_live_llm",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "call_live_llm",
            "parameter": "context",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "call_live_llm",
            "parameter": "jeopardy_question",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 16,
          "cognitive": 17,
          "nesting": 0,
          "statements": 60
        },
        "nesting_depth": 13,
        "ast_nodes": 759,
        "structure_hash": "6541a009bff9a4417381c789cab56675"
      },
      "complexity_score": 16,
      "structure_hash": "6541a009bff9a4417381c789cab56675",
      "lines_of_code": 201,
      "created_at": "2025-08-03T10:06:04.350034",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/__init__.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "from test_multi_agent_blind_spot_detection import MultiAgentBlindSpotDetector"
        ],
        "functions": [],
        "classes": [],
        "variables": [],
        "dependencies": [
          "typing",
          "test_multi_agent_blind_spot_detection"
        ],
        "docstrings": [],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 1
        },
        "nesting_depth": 4,
        "ast_nodes": 24,
        "structure_hash": "dd4fa748005b3fde173f26b4e235b06e"
      },
      "complexity_score": 1,
      "structure_hash": "dd4fa748005b3fde173f26b4e235b06e",
      "lines_of_code": 16,
      "created_at": "2025-08-03T10:06:04.413976",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/langgraph_diversity_orchestrator.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/langgraph_diversity_orchestrator.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any",
          "import json",
          "import os",
          "from concurrent.futures import ThreadPoolExecutor",
          "from concurrent.futures import as_completed",
          "from dataclasses import dataclass",
          "from datetime import datetime",
          "from typing import Dict",
          "from typing import List",
          "from typing import Any",
          "import matplotlib.pyplot",
          "import seaborn",
          "import pandas",
          "import numpy",
          "from pathlib import Path",
          "from langchain_core.messages import HumanMessage",
          "from langchain_core.messages import SystemMessage",
          "from langchain_openai import ChatOpenAI",
          "from langchain_anthropic import ChatAnthropic",
          "from langchain_core.output_parsers import JsonOutputParser",
          "from pydantic import BaseModel",
          "from pydantic import Field",
          "import networkx",
          "from reportlab.lib.pagesizes import letter",
          "from reportlab.platypus import SimpleDocTemplate",
          "from reportlab.platypus import Paragraph",
          "from reportlab.platypus import Spacer",
          "from reportlab.platypus import Table",
          "from reportlab.platypus import TableStyle",
          "from reportlab.lib.styles import getSampleStyleSheet",
          "from reportlab.lib.styles import ParagraphStyle",
          "from reportlab.lib import colors",
          "import markdown",
          "from jinja2 import Template"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function to run the diversity analysis",
            "lineno": 843,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 66,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "create_llm_client",
            "parameters": [
              "self",
              "agent"
            ],
            "docstring": "Create LLM client based on agent configuration",
            "lineno": 122,
            "col_offset": 4,
            "decorators": [],
            "returns": "Any",
            "has_async": false
          },
          {
            "name": "analyze_with_agent",
            "parameters": [
              "self",
              "agent",
              "context"
            ],
            "docstring": "Analyze context with a specific agent",
            "lineno": 139,
            "col_offset": 4,
            "decorators": [],
            "returns": "DiversityAnalysis",
            "has_async": false
          },
          {
            "name": "run_multi_threaded_analysis",
            "parameters": [
              "self",
              "context"
            ],
            "docstring": "Run analysis with all agents in parallel",
            "lineno": 234,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[DiversityAnalysis]",
            "has_async": false
          },
          {
            "name": "calculate_diversity_metrics",
            "parameters": [
              "self",
              "analyses"
            ],
            "docstring": "Calculate comprehensive diversity metrics",
            "lineno": 266,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          },
          {
            "name": "create_visualizations",
            "parameters": [
              "self",
              "analyses",
              "metrics"
            ],
            "docstring": "Create comprehensive visualizations",
            "lineno": 319,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "create_network_graph",
            "parameters": [
              "self",
              "analyses"
            ],
            "docstring": "Create network graph showing agent relationships and findings overlap",
            "lineno": 424,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "create_findings_analysis",
            "parameters": [
              "self",
              "analyses",
              "metrics"
            ],
            "docstring": "Create detailed findings analysis visualization",
            "lineno": 499,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "generate_pdf_report",
            "parameters": [
              "self",
              "analyses",
              "metrics",
              "context"
            ],
            "docstring": "Generate comprehensive PDF report",
            "lineno": 592,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "generate_markdown_report",
            "parameters": [
              "self",
              "analyses",
              "metrics",
              "context"
            ],
            "docstring": "Generate comprehensive Markdown report",
            "lineno": 689,
            "col_offset": 4,
            "decorators": [],
            "returns": null,
            "has_async": false
          },
          {
            "name": "run_complete_analysis",
            "parameters": [
              "self",
              "context"
            ],
            "docstring": "Run complete diversity analysis with all outputs",
            "lineno": 797,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict[unknown]",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "DiversityAgent",
            "bases": [],
            "docstring": null,
            "lineno": 37,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "BlindSpotFinding",
            "bases": [
              "BaseModel"
            ],
            "docstring": null,
            "lineno": 47,
            "col_offset": 0,
            "decorators": [],
            "methods": [],
            "attributes": []
          },
          {
            "name": "DiversityAnalysis",
            "bases": [
              "BaseModel"
            ],
            "docstring": null,
            "lineno": 57,
            "col_offset": 0,
            "decorators": [],
            "methods": [],
            "attributes": []
          },
          {
            "name": "LangGraphDiversityOrchestrator",
            "bases": [],
            "docstring": null,
            "lineno": 65,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "create_llm_client",
              "analyze_with_agent",
              "run_multi_threaded_analysis",
              "calculate_diversity_metrics",
              "create_visualizations",
              "create_network_graph",
              "create_findings_analysis",
              "generate_pdf_report",
              "generate_markdown_report",
              "run_complete_analysis"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "context",
          "orchestrator",
          "results",
          "api_key",
          "total_findings",
          "unique_categories",
          "agent_coverage",
          "all_questions",
          "unique_questions",
          "overlap_rate",
          "diversity_score",
          "agent_names",
          "findings_counts",
          "confidence_scores",
          "bars1",
          "bars2",
          "G",
          "pos",
          "node_sizes",
          "node_colors",
          "edge_labels",
          "sm",
          "cbar",
          "df",
          "pivot_table",
          "confidence_mapping",
          "category_confidence",
          "bars",
          "agent_counts",
          "colors_agent",
          "category_counts",
          "colors_cat",
          "doc",
          "styles",
          "title_style",
          "summary_text",
          "agent_table",
          "template",
          "jinja_template",
          "markdown_content",
          "html_content",
          "analyses",
          "metrics",
          "llm",
          "parser",
          "prompt",
          "messages",
          "response",
          "future_to_agent",
          "agent",
          "categories",
          "category_counts",
          "colors_cat",
          "conf_levels",
          "conf_counts",
          "colors_conf",
          "bars3",
          "content",
          "findings_data",
          "total_findings",
          "confidence_scores",
          "avg_confidence",
          "result",
          "json_start",
          "json_end",
          "json_content",
          "json_content",
          "findings_data",
          "categories1",
          "categories2",
          "overlap",
          "finding_text"
        ],
        "dependencies": [
          "langchain_core",
          "seaborn",
          "json",
          "concurrent",
          "langchain_anthropic",
          "networkx",
          "pathlib",
          "jinja2",
          "typing",
          "reportlab",
          "matplotlib",
          "pydantic",
          "dataclasses",
          "os",
          "pandas",
          "langchain_openai",
          "markdown",
          "numpy",
          "datetime"
        ],
        "docstrings": [
          "Main function to run the diversity analysis",
          "Create LLM client based on agent configuration",
          "Analyze context with a specific agent",
          "Run analysis with all agents in parallel",
          "Calculate comprehensive diversity metrics",
          "Create comprehensive visualizations",
          "Create network graph showing agent relationships and findings overlap",
          "Create detailed findings analysis visualization",
          "Generate comprehensive PDF report",
          "Generate comprehensive Markdown report",
          "Run complete diversity analysis with all outputs"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 224
              }
            ],
            "lineno": 143
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 214
              }
            ],
            "lineno": 177
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "Exception",
                "lineno": 252
              }
            ],
            "lineno": 248
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "create_llm_client",
            "annotation": "Any"
          },
          {
            "type": "parameter_annotation",
            "function": "create_llm_client",
            "parameter": "agent",
            "annotation": "DiversityAgent"
          },
          {
            "type": "return_annotation",
            "function": "analyze_with_agent",
            "annotation": "DiversityAnalysis"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_with_agent",
            "parameter": "agent",
            "annotation": "DiversityAgent"
          },
          {
            "type": "parameter_annotation",
            "function": "analyze_with_agent",
            "parameter": "context",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "run_multi_threaded_analysis",
            "annotation": "List[DiversityAnalysis]"
          },
          {
            "type": "parameter_annotation",
            "function": "run_multi_threaded_analysis",
            "parameter": "context",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "calculate_diversity_metrics",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "calculate_diversity_metrics",
            "parameter": "analyses",
            "annotation": "List[DiversityAnalysis]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_visualizations",
            "parameter": "analyses",
            "annotation": "List[DiversityAnalysis]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_visualizations",
            "parameter": "metrics",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "return_annotation",
            "function": "create_network_graph",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "create_network_graph",
            "parameter": "analyses",
            "annotation": "List[DiversityAnalysis]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_findings_analysis",
            "parameter": "analyses",
            "annotation": "List[DiversityAnalysis]"
          },
          {
            "type": "parameter_annotation",
            "function": "create_findings_analysis",
            "parameter": "metrics",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_pdf_report",
            "parameter": "analyses",
            "annotation": "List[DiversityAnalysis]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_pdf_report",
            "parameter": "metrics",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_pdf_report",
            "parameter": "context",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_markdown_report",
            "parameter": "analyses",
            "annotation": "List[DiversityAnalysis]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_markdown_report",
            "parameter": "metrics",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "generate_markdown_report",
            "parameter": "context",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "run_complete_analysis",
            "annotation": "Dict[unknown]"
          },
          {
            "type": "parameter_annotation",
            "function": "run_complete_analysis",
            "parameter": "context",
            "annotation": "str"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 37,
          "cognitive": 33,
          "nesting": 0,
          "statements": 201
        },
        "nesting_depth": 14,
        "ast_nodes": 3807,
        "structure_hash": "180129454271ff233ccb3542f46ff345"
      },
      "complexity_score": 37,
      "structure_hash": "180129454271ff233ccb3542f46ff345",
      "lines_of_code": 875,
      "created_at": "2025-08-03T10:06:04.413132",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/streamlit/__init__.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/streamlit/__init__.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "from typing import List",
          "from typing import Dict",
          "from typing import Tuple",
          "from typing import Optional",
          "from typing import Union",
          "from typing import Any"
        ],
        "functions": [],
        "classes": [],
        "variables": [],
        "dependencies": [
          "typing"
        ],
        "docstrings": [],
        "error_handling": [],
        "type_hints": [],
        "complexity_metrics": {
          "cyclomatic": 1,
          "cognitive": 0,
          "nesting": 0,
          "statements": 1
        },
        "nesting_depth": 4,
        "ast_nodes": 21,
        "structure_hash": "9f83c2cec6ee6d714bf580444fd4cc2d"
      },
      "complexity_score": 1,
      "structure_hash": "9f83c2cec6ee6d714bf580444fd4cc2d",
      "lines_of_code": 14,
      "created_at": "2025-08-03T10:06:04.448869",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/streamlit/openflow_quickstart_app.py": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/streamlit/openflow_quickstart_app.py",
      "file_type": "python",
      "model_type": "ast",
      "model_data": {
        "imports": [
          "import os",
          "import time",
          "import redis",
          "import jwt",
          "import streamlit",
          "import plotly.graph_objects",
          "from datetime import datetime",
          "from datetime import timezone",
          "from datetime import timedelta",
          "from dataclasses import dataclass",
          "from typing import Dict",
          "from typing import Optional",
          "from typing import List",
          "from pydantic import BaseModel",
          "from pydantic import Field",
          "from pydantic import validator",
          "from cryptography.fernet import Fernet",
          "import boto3",
          "from botocore.exceptions import ClientError",
          "import re",
          "import re",
          "import html"
        ],
        "functions": [
          {
            "name": "main",
            "parameters": [],
            "docstring": "Main function",
            "lineno": 600,
            "col_offset": 0,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "validate_account_url",
            "parameters": [
              "cls",
              "v"
            ],
            "docstring": null,
            "lineno": 44,
            "col_offset": 4,
            "decorators": [
              "validator"
            ],
            "returns": null,
            "has_async": false
          },
          {
            "name": "validate_uuid",
            "parameters": [
              "cls",
              "v"
            ],
            "docstring": null,
            "lineno": 58,
            "col_offset": 4,
            "decorators": [
              "validator"
            ],
            "returns": null,
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 81,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "encrypt_credential",
            "parameters": [
              "self",
              "credential"
            ],
            "docstring": "Encrypt sensitive credentials",
            "lineno": 85,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "decrypt_credential",
            "parameters": [
              "self",
              "encrypted_credential"
            ],
            "docstring": "Decrypt sensitive credentials",
            "lineno": 89,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "store_credential_secure",
            "parameters": [
              "self",
              "key",
              "value"
            ],
            "docstring": "Store credential securely in Redis with encryption",
            "lineno": 93,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "get_credential_secure",
            "parameters": [
              "self",
              "key"
            ],
            "docstring": "Retrieve credential securely from Redis",
            "lineno": 100,
            "col_offset": 4,
            "decorators": [],
            "returns": "Optional[str]",
            "has_async": false
          },
          {
            "name": "validate_session",
            "parameters": [
              "self",
              "session_token"
            ],
            "docstring": "Validate JWT session token",
            "lineno": 107,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "create_session_token",
            "parameters": [
              "self",
              "user_id",
              "role"
            ],
            "docstring": "Create JWT session token",
            "lineno": 117,
            "col_offset": 4,
            "decorators": [],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "validate_snowflake_url",
            "parameters": [
              "url"
            ],
            "docstring": "Validate Snowflake account URL format",
            "lineno": 135,
            "col_offset": 4,
            "decorators": [
              "staticmethod"
            ],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "validate_uuid",
            "parameters": [
              "uuid_str"
            ],
            "docstring": "Validate UUID format",
            "lineno": 140,
            "col_offset": 4,
            "decorators": [
              "staticmethod"
            ],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "sanitize_input",
            "parameters": [
              "input_str"
            ],
            "docstring": "Sanitize user input to prevent injection attacks",
            "lineno": 148,
            "col_offset": 4,
            "decorators": [
              "staticmethod"
            ],
            "returns": "str",
            "has_async": false
          },
          {
            "name": "validate_oauth_credentials",
            "parameters": [
              "client_id",
              "client_secret"
            ],
            "docstring": "Validate OAuth credentials format",
            "lineno": 155,
            "col_offset": 4,
            "decorators": [
              "staticmethod"
            ],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "region"
            ],
            "docstring": null,
            "lineno": 163,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "create_stack",
            "parameters": [
              "self",
              "stack_name",
              "template_body",
              "parameters"
            ],
            "docstring": "Create CloudFormation stack",
            "lineno": 171,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict",
            "has_async": false
          },
          {
            "name": "update_stack",
            "parameters": [
              "self",
              "stack_name",
              "template_body",
              "parameters"
            ],
            "docstring": "Update CloudFormation stack",
            "lineno": 186,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict",
            "has_async": false
          },
          {
            "name": "delete_stack",
            "parameters": [
              "self",
              "stack_name"
            ],
            "docstring": "Delete CloudFormation stack",
            "lineno": 201,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict",
            "has_async": false
          },
          {
            "name": "get_stack_status",
            "parameters": [
              "self",
              "stack_name"
            ],
            "docstring": "Get stack status",
            "lineno": 209,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict",
            "has_async": false
          },
          {
            "name": "get_stack_events",
            "parameters": [
              "self",
              "stack_name"
            ],
            "docstring": "Get stack events for monitoring",
            "lineno": 222,
            "col_offset": 4,
            "decorators": [],
            "returns": "List[Dict]",
            "has_async": false
          },
          {
            "name": "rollback_stack",
            "parameters": [
              "self",
              "stack_name"
            ],
            "docstring": "Rollback stack to previous state",
            "lineno": 230,
            "col_offset": 4,
            "decorators": [],
            "returns": "Dict",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self",
              "deployment_manager"
            ],
            "docstring": null,
            "lineno": 242,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "create_deployment_timeline",
            "parameters": [
              "self",
              "stack_name"
            ],
            "docstring": "Create deployment timeline visualization",
            "lineno": 245,
            "col_offset": 4,
            "decorators": [],
            "returns": "go.Figure",
            "has_async": false
          },
          {
            "name": "create_resource_status_matrix",
            "parameters": [
              "self",
              "stack_name"
            ],
            "docstring": "Create resource status matrix visualization",
            "lineno": 274,
            "col_offset": 4,
            "decorators": [],
            "returns": "go.Figure",
            "has_async": false
          },
          {
            "name": "__init__",
            "parameters": [
              "self"
            ],
            "docstring": null,
            "lineno": 342,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "setup_page_config",
            "parameters": [
              "self"
            ],
            "docstring": "Setup Streamlit page configuration",
            "lineno": 348,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "login_page",
            "parameters": [
              "self"
            ],
            "docstring": "Login page with security validation",
            "lineno": 357,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "validate_credentials",
            "parameters": [
              "self",
              "username",
              "password"
            ],
            "docstring": "Validate user credentials (demo implementation)",
            "lineno": 379,
            "col_offset": 4,
            "decorators": [],
            "returns": "bool",
            "has_async": false
          },
          {
            "name": "main_dashboard",
            "parameters": [
              "self"
            ],
            "docstring": "Main dashboard with role-based access",
            "lineno": 389,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "viewer_dashboard",
            "parameters": [
              "self"
            ],
            "docstring": "Viewer dashboard with read-only access",
            "lineno": 400,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "operator_dashboard",
            "parameters": [
              "self"
            ],
            "docstring": "Operator dashboard with deployment management",
            "lineno": 405,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "admin_dashboard",
            "parameters": [
              "self"
            ],
            "docstring": "Admin dashboard with full access",
            "lineno": 410,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "configuration_section",
            "parameters": [
              "self"
            ],
            "docstring": "Configuration management section",
            "lineno": 437,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "deployment_section",
            "parameters": [
              "self"
            ],
            "docstring": "Deployment management section",
            "lineno": 493,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "new_deployment",
            "parameters": [
              "self"
            ],
            "docstring": "Create new deployment",
            "lineno": 511,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "update_deployment",
            "parameters": [
              "self"
            ],
            "docstring": "Update existing deployment",
            "lineno": 529,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "rollback_deployment",
            "parameters": [
              "self"
            ],
            "docstring": "Rollback deployment",
            "lineno": 534,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "monitoring_section",
            "parameters": [
              "self"
            ],
            "docstring": "Monitoring and visualization section",
            "lineno": 539,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "security_section",
            "parameters": [
              "self"
            ],
            "docstring": "Security management section",
            "lineno": 562,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "user_management_section",
            "parameters": [
              "self"
            ],
            "docstring": "User management section",
            "lineno": 577,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          },
          {
            "name": "run",
            "parameters": [
              "self"
            ],
            "docstring": "Run the Streamlit application",
            "lineno": 582,
            "col_offset": 4,
            "decorators": [],
            "returns": "unknown",
            "has_async": false
          }
        ],
        "classes": [
          {
            "name": "SnowflakeConfig",
            "bases": [
              "BaseModel"
            ],
            "docstring": null,
            "lineno": 35,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "validate_account_url"
            ],
            "attributes": []
          },
          {
            "name": "OpenFlowConfig",
            "bases": [
              "BaseModel"
            ],
            "docstring": null,
            "lineno": 50,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "validate_uuid"
            ],
            "attributes": []
          },
          {
            "name": "DeploymentStatus",
            "bases": [],
            "docstring": null,
            "lineno": 68,
            "col_offset": 0,
            "decorators": [
              "dataclass"
            ],
            "methods": [],
            "attributes": []
          },
          {
            "name": "SecurityManager",
            "bases": [],
            "docstring": "Security-first credential and session management",
            "lineno": 78,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "encrypt_credential",
              "decrypt_credential",
              "store_credential_secure",
              "get_credential_secure",
              "validate_session",
              "create_session_token"
            ],
            "attributes": []
          },
          {
            "name": "InputValidator",
            "bases": [],
            "docstring": "Input validation and sanitization",
            "lineno": 131,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "validate_snowflake_url",
              "validate_uuid",
              "sanitize_input",
              "validate_oauth_credentials"
            ],
            "attributes": []
          },
          {
            "name": "DeploymentManager",
            "bases": [],
            "docstring": "AWS CloudFormation deployment management",
            "lineno": 160,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "create_stack",
              "update_stack",
              "delete_stack",
              "get_stack_status",
              "get_stack_events",
              "rollback_stack"
            ],
            "attributes": []
          },
          {
            "name": "MonitoringDashboard",
            "bases": [],
            "docstring": "Real-time monitoring and visualization dashboard",
            "lineno": 239,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "create_deployment_timeline",
              "create_resource_status_matrix"
            ],
            "attributes": []
          },
          {
            "name": "OpenFlowQuickstartApp",
            "bases": [],
            "docstring": "Main Streamlit application",
            "lineno": 339,
            "col_offset": 0,
            "decorators": [],
            "methods": [
              "__init__",
              "setup_page_config",
              "login_page",
              "validate_credentials",
              "main_dashboard",
              "viewer_dashboard",
              "operator_dashboard",
              "admin_dashboard",
              "configuration_section",
              "deployment_section",
              "new_deployment",
              "update_deployment",
              "rollback_deployment",
              "monitoring_section",
              "security_section",
              "user_management_section",
              "run"
            ],
            "attributes": []
          }
        ],
        "variables": [
          "SECURITY_CONFIG",
          "AWS_CONFIG",
          "app",
          "uuid_pattern",
          "encrypted_value",
          "encrypted_value",
          "timeout_minutes",
          "payload",
          "uuid_pattern",
          "events",
          "fig",
          "events",
          "resource_status",
          "resources",
          "statuses",
          "status_matrix",
          "fig",
          "valid_users",
          "user_role",
          "page",
          "stack_name",
          "payload",
          "response",
          "response",
          "response",
          "stack",
          "response",
          "timestamps",
          "statuses",
          "resources",
          "fig",
          "resource",
          "status",
          "timestamp",
          "latest_status",
          "row",
          "username",
          "password",
          "submit_button",
          "stack_name",
          "template_body",
          "session_valid",
          "session_token",
          "account_url",
          "_organization",
          "_account",
          "_oauth_integration",
          "oauth_client_id",
          "oauth_client_secret",
          "_data_plane_url",
          "data_plane_uuid",
          "data_plane_key",
          "_telemetry_url",
          "_control_plane_url",
          "timeline_fig",
          "matrix_fig",
          "session_token",
          "result"
        ],
        "dependencies": [
          "botocore",
          "boto3",
          "plotly",
          "redis",
          "streamlit",
          "typing",
          "pydantic",
          "os",
          "time",
          "cryptography",
          "dataclasses",
          "datetime",
          "html",
          "re",
          "jwt"
        ],
        "docstrings": [
          "OpenFlow Quickstart Application - Security-first Streamlit dashboard",
          "Security-first credential and session management",
          "Input validation and sanitization",
          "AWS CloudFormation deployment management",
          "Real-time monitoring and visualization dashboard",
          "Main Streamlit application",
          "Main function",
          "Encrypt sensitive credentials",
          "Decrypt sensitive credentials",
          "Store credential securely in Redis with encryption",
          "Retrieve credential securely from Redis",
          "Validate JWT session token",
          "Create JWT session token",
          "Validate Snowflake account URL format",
          "Validate UUID format",
          "Sanitize user input to prevent injection attacks",
          "Validate OAuth credentials format",
          "Create CloudFormation stack",
          "Update CloudFormation stack",
          "Delete CloudFormation stack",
          "Get stack status",
          "Get stack events for monitoring",
          "Rollback stack to previous state",
          "Create deployment timeline visualization",
          "Create resource status matrix visualization",
          "Setup Streamlit page configuration",
          "Login page with security validation",
          "Validate user credentials (demo implementation)",
          "Main dashboard with role-based access",
          "Viewer dashboard with read-only access",
          "Operator dashboard with deployment management",
          "Admin dashboard with full access",
          "Configuration management section",
          "Deployment management section",
          "Create new deployment",
          "Update existing deployment",
          "Rollback deployment",
          "Monitoring and visualization section",
          "Security management section",
          "User management section",
          "Run the Streamlit application"
        ],
        "error_handling": [
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "jwt.InvalidTokenError",
                "lineno": 114
              }
            ],
            "lineno": 109
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "ClientError",
                "lineno": 183
              }
            ],
            "lineno": 175
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "ClientError",
                "lineno": 198
              }
            ],
            "lineno": 190
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "ClientError",
                "lineno": 206
              }
            ],
            "lineno": 203
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "ClientError",
                "lineno": 219
              }
            ],
            "lineno": 211
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "ClientError",
                "lineno": 227
              }
            ],
            "lineno": 224
          },
          {
            "type": "try_except",
            "handlers": [
              {
                "type": "ClientError",
                "lineno": 235
              }
            ],
            "lineno": 232
          }
        ],
        "type_hints": [
          {
            "type": "return_annotation",
            "function": "main",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "encrypt_credential",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "encrypt_credential",
            "parameter": "credential",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "decrypt_credential",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "decrypt_credential",
            "parameter": "encrypted_credential",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "store_credential_secure",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "store_credential_secure",
            "parameter": "key",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "store_credential_secure",
            "parameter": "value",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "get_credential_secure",
            "annotation": "Optional[str]"
          },
          {
            "type": "parameter_annotation",
            "function": "get_credential_secure",
            "parameter": "key",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_session",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_session",
            "parameter": "session_token",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "create_session_token",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "create_session_token",
            "parameter": "user_id",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "create_session_token",
            "parameter": "role",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_snowflake_url",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_snowflake_url",
            "parameter": "url",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_uuid",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_uuid",
            "parameter": "uuid_str",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "sanitize_input",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "sanitize_input",
            "parameter": "input_str",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "validate_oauth_credentials",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_oauth_credentials",
            "parameter": "client_id",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_oauth_credentials",
            "parameter": "client_secret",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "region",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "create_stack",
            "annotation": "Dict"
          },
          {
            "type": "parameter_annotation",
            "function": "create_stack",
            "parameter": "stack_name",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "create_stack",
            "parameter": "template_body",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "create_stack",
            "parameter": "parameters",
            "annotation": "List[Dict]"
          },
          {
            "type": "return_annotation",
            "function": "update_stack",
            "annotation": "Dict"
          },
          {
            "type": "parameter_annotation",
            "function": "update_stack",
            "parameter": "stack_name",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "update_stack",
            "parameter": "template_body",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "update_stack",
            "parameter": "parameters",
            "annotation": "List[Dict]"
          },
          {
            "type": "return_annotation",
            "function": "delete_stack",
            "annotation": "Dict"
          },
          {
            "type": "parameter_annotation",
            "function": "delete_stack",
            "parameter": "stack_name",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "get_stack_status",
            "annotation": "Dict"
          },
          {
            "type": "parameter_annotation",
            "function": "get_stack_status",
            "parameter": "stack_name",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "get_stack_events",
            "annotation": "List[Dict]"
          },
          {
            "type": "parameter_annotation",
            "function": "get_stack_events",
            "parameter": "stack_name",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "rollback_stack",
            "annotation": "Dict"
          },
          {
            "type": "parameter_annotation",
            "function": "rollback_stack",
            "parameter": "stack_name",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "parameter_annotation",
            "function": "__init__",
            "parameter": "deployment_manager",
            "annotation": "DeploymentManager"
          },
          {
            "type": "return_annotation",
            "function": "create_deployment_timeline",
            "annotation": "go.Figure"
          },
          {
            "type": "parameter_annotation",
            "function": "create_deployment_timeline",
            "parameter": "stack_name",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "create_resource_status_matrix",
            "annotation": "go.Figure"
          },
          {
            "type": "parameter_annotation",
            "function": "create_resource_status_matrix",
            "parameter": "stack_name",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "__init__",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "setup_page_config",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "login_page",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "validate_credentials",
            "annotation": "bool"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_credentials",
            "parameter": "username",
            "annotation": "str"
          },
          {
            "type": "parameter_annotation",
            "function": "validate_credentials",
            "parameter": "password",
            "annotation": "str"
          },
          {
            "type": "return_annotation",
            "function": "main_dashboard",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "viewer_dashboard",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "operator_dashboard",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "admin_dashboard",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "configuration_section",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "deployment_section",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "new_deployment",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "update_deployment",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "rollback_deployment",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "monitoring_section",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "security_section",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "user_management_section",
            "annotation": "unknown"
          },
          {
            "type": "return_annotation",
            "function": "run",
            "annotation": "unknown"
          }
        ],
        "complexity_metrics": {
          "cyclomatic": 52,
          "cognitive": 46,
          "nesting": 0,
          "statements": 216
        },
        "nesting_depth": 13,
        "ast_nodes": 2747,
        "structure_hash": "3067c5443a18dddf18c3cbdd59a60c58"
      },
      "complexity_score": 52,
      "structure_hash": "3067c5443a18dddf18c3cbdd59a60c58",
      "lines_of_code": 608,
      "created_at": "2025-08-03T10:06:04.470677",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/model-driven-orchestration.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/model-driven-orchestration.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Model-driven tool orchestration",
          "globs": [
            "**/*"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 18,
          "code_blocks": 6,
          "lists": 11,
          "links": 0,
          "emphasis": 28,
          "total_lines": 83,
          "non_empty_lines": 67
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 3419,
          "total_lines": 88,
          "non_empty_lines": 72,
          "avg_line_length": 37.86363636363637,
          "max_line_length": 179
        },
        "lines_of_code": 88,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": true
        }
      },
      "complexity_score": 8.5,
      "structure_hash": "a67dbd9f9a4ea945",
      "lines_of_code": 88,
      "created_at": "2025-08-03T10:06:04.477787",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/dont-break-the-fixer.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/dont-break-the-fixer.mdc",
      "file_type": "mdc",
      "model_type": "basic",
      "model_data": {
        "basic_error": "max() iterable argument is empty",
        "file_size": 7046,
        "lines_of_code": 226,
        "markdown_analysis": {
          "headers": 0,
          "code_blocks": 0,
          "lists": 0,
          "links": 0,
          "emphasis": 0
        },
        "yaml_structure": {
          "keys": [],
          "depth": 0,
          "has_description": false,
          "has_globs": false,
          "has_always_apply": false
        }
      },
      "complexity_score": 1.0,
      "structure_hash": "67fab9b6376a6fbd",
      "lines_of_code": 226,
      "created_at": "2025-08-03T10:06:04.496610",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/no-bash-oneliners.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/no-bash-oneliners.mdc",
      "file_type": "mdc",
      "model_type": "basic",
      "model_data": {
        "basic_error": "max() iterable argument is empty",
        "file_size": 9049,
        "lines_of_code": 310,
        "markdown_analysis": {
          "headers": 0,
          "code_blocks": 0,
          "lists": 0,
          "links": 0,
          "emphasis": 0
        },
        "yaml_structure": {
          "keys": [],
          "depth": 0,
          "has_description": false,
          "has_globs": false,
          "has_always_apply": false
        }
      },
      "complexity_score": 1.0,
      "structure_hash": "866a7521538bb136",
      "lines_of_code": 310,
      "created_at": "2025-08-03T10:06:04.497583",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/security-credentials.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/security-credentials.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Security rules for credentials and sensitive data",
          "globs": [
            "**/*.yaml",
            "**/*.yml",
            "**/*.json",
            "**/*.env*",
            "**/*.sh",
            "**/*.py",
            "**/*.md",
            "**/*.txt",
            "**/*.properties",
            "**/*.ini",
            "**/*.cfg",
            "**/*.toml"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 6,
          "code_blocks": 0,
          "lists": 22,
          "links": 0,
          "emphasis": 0,
          "total_lines": 38,
          "non_empty_lines": 31
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1431,
          "total_lines": 43,
          "non_empty_lines": 36,
          "avg_line_length": 32.27906976744186,
          "max_line_length": 159
        },
        "lines_of_code": 43,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.1000000000000005,
      "structure_hash": "ace614efd43fa605",
      "lines_of_code": 43,
      "created_at": "2025-08-03T10:06:04.479052",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/investigation-analysis.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/investigation-analysis.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Ask better questions and investigate before answering",
          "globs": [
            "**/*"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 6,
          "code_blocks": 0,
          "lists": 15,
          "links": 0,
          "emphasis": 12,
          "total_lines": 36,
          "non_empty_lines": 30
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1441,
          "total_lines": 41,
          "non_empty_lines": 35,
          "avg_line_length": 34.170731707317074,
          "max_line_length": 66
        },
        "lines_of_code": 41,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.1000000000000005,
      "structure_hash": "ace614efd43fa605",
      "lines_of_code": 41,
      "created_at": "2025-08-03T10:06:04.486019",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/call-more-ghostbusters.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/call-more-ghostbusters.mdc",
      "file_type": "mdc",
      "model_type": "basic",
      "model_data": {
        "basic_error": "max() iterable argument is empty",
        "file_size": 7544,
        "lines_of_code": 233,
        "markdown_analysis": {
          "headers": 0,
          "code_blocks": 0,
          "lists": 0,
          "links": 0,
          "emphasis": 0
        },
        "yaml_structure": {
          "keys": [],
          "depth": 0,
          "has_description": false,
          "has_globs": false,
          "has_always_apply": false
        }
      },
      "complexity_score": 1.0,
      "structure_hash": "dda99322f4989e05",
      "lines_of_code": 233,
      "created_at": "2025-08-03T10:06:04.512637",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/security.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/security.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Security guidelines and credential management",
          "globs": [
            "**/*"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 6,
          "code_blocks": 0,
          "lists": 22,
          "links": 0,
          "emphasis": 0,
          "total_lines": 37,
          "non_empty_lines": 31
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1262,
          "total_lines": 43,
          "non_empty_lines": 37,
          "avg_line_length": 28.372093023255815,
          "max_line_length": 58
        },
        "lines_of_code": 43,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.1000000000000005,
      "structure_hash": "ace614efd43fa605",
      "lines_of_code": 43,
      "created_at": "2025-08-03T10:06:04.490778",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/intelligent-policy.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/intelligent-policy.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Intelligent policy over rigid tools",
          "globs": [
            "**/*"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 20,
          "code_blocks": 12,
          "lists": 12,
          "links": 0,
          "emphasis": 39,
          "total_lines": 84,
          "non_empty_lines": 69
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 2631,
          "total_lines": 89,
          "non_empty_lines": 74,
          "avg_line_length": 28.573033707865168,
          "max_line_length": 142
        },
        "lines_of_code": 89,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": true
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "09eb1c430c98717e",
      "lines_of_code": 89,
      "created_at": "2025-08-03T10:06:04.498670",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/llm-architect.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/llm-architect.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Leverage statelessness and stochastic nature as architectural advantages",
          "globs": [
            "**/*"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 7,
          "code_blocks": 0,
          "lists": 17,
          "links": 0,
          "emphasis": 13,
          "total_lines": 34,
          "non_empty_lines": 27
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1616,
          "total_lines": 39,
          "non_empty_lines": 32,
          "avg_line_length": 40.46153846153846,
          "max_line_length": 85
        },
        "lines_of_code": 39,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.3000000000000007,
      "structure_hash": "36d25885b93624d7",
      "lines_of_code": 39,
      "created_at": "2025-08-03T10:06:04.511590",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/yaml-type-specific.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/yaml-type-specific.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "YAML file type-specific rules and validation strategies",
          "globs": [
            "**/*.yaml",
            "**/*.yml"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 23,
          "code_blocks": 2,
          "lists": 14,
          "links": 0,
          "emphasis": 39,
          "total_lines": 102,
          "non_empty_lines": 75
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 3994,
          "total_lines": 109,
          "non_empty_lines": 82,
          "avg_line_length": 35.65137614678899,
          "max_line_length": 143
        },
        "lines_of_code": 109,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": true
        }
      },
      "complexity_score": 7.5,
      "structure_hash": "4337ddc58d3e8c9b",
      "lines_of_code": 109,
      "created_at": "2025-08-03T10:06:04.515672",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/prevention-architecture.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/prevention-architecture.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Model-driven, test-driven prevention architecture",
          "globs": [
            "**/*"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 28,
          "code_blocks": 22,
          "lists": 4,
          "links": 0,
          "emphasis": 20,
          "total_lines": 184,
          "non_empty_lines": 155
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 5275,
          "total_lines": 189,
          "non_empty_lines": 160,
          "avg_line_length": 26.915343915343914,
          "max_line_length": 146
        },
        "lines_of_code": 189,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": true
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "b034257582462815",
      "lines_of_code": 189,
      "created_at": "2025-08-03T10:06:04.519452",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/deterministic-editing.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/deterministic-editing.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Use deterministic tools for file editing",
          "globs": [
            "**/*.yaml",
            "**/*.yml",
            "**/*.json",
            "**/*.toml",
            "**/*.ini",
            "**/*.cfg",
            "**/*.mdc",
            "**/*.py",
            "**/*.xml",
            "**/*.properties",
            "**/*.env"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 10,
          "code_blocks": 0,
          "lists": 23,
          "links": 0,
          "emphasis": 0,
          "total_lines": 45,
          "non_empty_lines": 35
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1546,
          "total_lines": 61,
          "non_empty_lines": 51,
          "avg_line_length": 24.360655737704917,
          "max_line_length": 116
        },
        "lines_of_code": 61,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.9000000000000004,
      "structure_hash": "206101e1e3f57011",
      "lines_of_code": 61,
      "created_at": "2025-08-03T10:06:04.525088",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/cloudformation-linting.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/cloudformation-linting.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "CloudFormation linting rules and validation strategies",
          "globs": [
            "**/*cloudformation*.yaml",
            "**/*cloudformation*.yml",
            "models/*.yaml"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 6,
          "code_blocks": 0,
          "lists": 18,
          "links": 0,
          "emphasis": 2,
          "total_lines": 31,
          "non_empty_lines": 25
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1101,
          "total_lines": 36,
          "non_empty_lines": 30,
          "avg_line_length": 29.583333333333332,
          "max_line_length": 79
        },
        "lines_of_code": 36,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.1000000000000005,
      "structure_hash": "ace614efd43fa605",
      "lines_of_code": 36,
      "created_at": "2025-08-03T10:06:04.527603",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/package-management-uv.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.cursor/rules/package-management-uv.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "UV Package Management Rules",
          "globs": [
            "pyproject.toml",
            "requirements*.txt",
            "uv.lock",
            "*.py"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 39,
          "code_blocks": 22,
          "lists": 27,
          "links": 0,
          "emphasis": 22,
          "total_lines": 201,
          "non_empty_lines": 159
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 4702,
          "total_lines": 206,
          "non_empty_lines": 164,
          "avg_line_length": 21.825242718446603,
          "max_line_length": 144
        },
        "lines_of_code": 206,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": true
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "dd9f03317f35ebf1",
      "lines_of_code": 206,
      "created_at": "2025-08-03T10:06:04.531855",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/config/.cursor/rules/configuration.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/config/.cursor/rules/configuration.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Configuration management rules and guidelines",
          "globs": [
            "config/*.yaml",
            "config/*.yml",
            "config/*.json",
            "config/*.env"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 7,
          "code_blocks": 0,
          "lists": 20,
          "links": 0,
          "emphasis": 20,
          "total_lines": 34,
          "non_empty_lines": 27
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1442,
          "total_lines": 39,
          "non_empty_lines": 32,
          "avg_line_length": 35.97435897435897,
          "max_line_length": 73
        },
        "lines_of_code": 39,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.3000000000000007,
      "structure_hash": "36d25885b93624d7",
      "lines_of_code": 39,
      "created_at": "2025-08-03T10:06:04.538951",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/.cursor/rules/bash-scripting.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/.cursor/rules/bash-scripting.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Bash scripting rules and development guidelines",
          "globs": [
            "scripts/*.sh",
            "*.sh",
            "*.bash"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 8,
          "code_blocks": 0,
          "lists": 24,
          "links": 0,
          "emphasis": 24,
          "total_lines": 40,
          "non_empty_lines": 32
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1534,
          "total_lines": 45,
          "non_empty_lines": 37,
          "avg_line_length": 33.08888888888889,
          "max_line_length": 60
        },
        "lines_of_code": 45,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.5,
      "structure_hash": "33f9aa67cb23fea8",
      "lines_of_code": 45,
      "created_at": "2025-08-03T10:06:04.550791",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/streamlit/.cursor/rules/streamlit-development.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/streamlit/.cursor/rules/streamlit-development.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Streamlit development guidelines and best practices",
          "globs": [
            "src/streamlit/**/*.py",
            "**/*streamlit*.py",
            "app.py",
            "pages/*.py"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 7,
          "code_blocks": 0,
          "lists": 20,
          "links": 0,
          "emphasis": 20,
          "total_lines": 34,
          "non_empty_lines": 27
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1600,
          "total_lines": 39,
          "non_empty_lines": 32,
          "avg_line_length": 40.02564102564103,
          "max_line_length": 78
        },
        "lines_of_code": 39,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.3000000000000007,
      "structure_hash": "36d25885b93624d7",
      "lines_of_code": 39,
      "created_at": "2025-08-03T10:06:04.555052",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/security_first/.cursor/rules/security-first.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/security_first/.cursor/rules/security-first.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Security-first development rules and architecture guidelines",
          "globs": [
            "src/security_first/**/*.py",
            "src/security_first/**/*.sh",
            "src/security_first/**/*.json"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 8,
          "code_blocks": 0,
          "lists": 24,
          "links": 0,
          "emphasis": 24,
          "total_lines": 40,
          "non_empty_lines": 32
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1754,
          "total_lines": 45,
          "non_empty_lines": 37,
          "avg_line_length": 37.977777777777774,
          "max_line_length": 99
        },
        "lines_of_code": 45,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.5,
      "structure_hash": "33f9aa67cb23fea8",
      "lines_of_code": 45,
      "created_at": "2025-08-03T10:06:04.569183",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/.cursor/rules/multi-agent-testing.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/multi_agent_testing/.cursor/rules/multi-agent-testing.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Multi-agent testing rules and guidelines",
          "globs": [
            "src/multi_agent_testing/**/*.py",
            "*diversity*.py",
            "*agent*.py",
            "*orchestrator*.py"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 7,
          "code_blocks": 0,
          "lists": 21,
          "links": 0,
          "emphasis": 21,
          "total_lines": 35,
          "non_empty_lines": 28
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1547,
          "total_lines": 40,
          "non_empty_lines": 33,
          "avg_line_length": 37.675,
          "max_line_length": 95
        },
        "lines_of_code": 40,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.3000000000000007,
      "structure_hash": "36d25885b93624d7",
      "lines_of_code": 40,
      "created_at": "2025-08-03T10:06:04.561275",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/.cursor/rules/infrastructure-patterns.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/.cursor/rules/infrastructure-patterns.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Healthcare CDC infrastructure patterns for CloudFormation and Snowflake",
          "globs": [
            "healthcare-cdc/**/*.yaml",
            "healthcare-cdc/**/*.sql",
            "healthcare-cdc/**/*.py"
          ],
          "alwaysApply": false
        },
        "markdown_analysis": {
          "headers": 41,
          "code_blocks": 28,
          "lists": 60,
          "links": 0,
          "emphasis": 46,
          "total_lines": 308,
          "non_empty_lines": 259
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 8120,
          "total_lines": 313,
          "non_empty_lines": 264,
          "avg_line_length": 24.942492012779553,
          "max_line_length": 190
        },
        "lines_of_code": 313,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": true
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "9c68536fb6fb76b8",
      "lines_of_code": 313,
      "created_at": "2025-08-03T10:06:04.580751",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/.cursor/rules/testing-patterns.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/.cursor/rules/testing-patterns.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Healthcare CDC testing patterns and requirements",
          "globs": [
            "healthcare-cdc/**/*.py",
            "healthcare-cdc/**/*.md"
          ],
          "alwaysApply": false
        },
        "markdown_analysis": {
          "headers": 31,
          "code_blocks": 26,
          "lists": 27,
          "links": 0,
          "emphasis": 17,
          "total_lines": 422,
          "non_empty_lines": 362
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 13179,
          "total_lines": 427,
          "non_empty_lines": 367,
          "avg_line_length": 29.866510538641688,
          "max_line_length": 192
        },
        "lines_of_code": 427,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": true
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "7912bef0474ba33c",
      "lines_of_code": 427,
      "created_at": "2025-08-03T10:06:04.579322",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/.cursor/rules/attribution-requirements.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/.cursor/rules/attribution-requirements.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Healthcare CDC attribution requirements and patterns",
          "globs": [
            "healthcare-cdc/**/*.py",
            "healthcare-cdc/**/*.md"
          ],
          "alwaysApply": false
        },
        "markdown_analysis": {
          "headers": 30,
          "code_blocks": 14,
          "lists": 75,
          "links": 2,
          "emphasis": 22,
          "total_lines": 190,
          "non_empty_lines": 154
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 6178,
          "total_lines": 195,
          "non_empty_lines": 159,
          "avg_line_length": 30.682051282051283,
          "max_line_length": 218
        },
        "lines_of_code": 195,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": true
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "fbdf6768a85deede",
      "lines_of_code": 195,
      "created_at": "2025-08-03T10:06:04.593048",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/.cursor/rules/healthcare-cdc-domain-model.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/.cursor/rules/healthcare-cdc-domain-model.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Healthcare CDC domain model patterns and coding standards",
          "globs": [
            "healthcare-cdc/**/*.py",
            "healthcare-cdc/**/*.md"
          ],
          "alwaysApply": false
        },
        "markdown_analysis": {
          "headers": 30,
          "code_blocks": 14,
          "lists": 73,
          "links": 0,
          "emphasis": 3,
          "total_lines": 198,
          "non_empty_lines": 167
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 6080,
          "total_lines": 203,
          "non_empty_lines": 172,
          "avg_line_length": 28.950738916256157,
          "max_line_length": 259
        },
        "lines_of_code": 203,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": true
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "fbdf6768a85deede",
      "lines_of_code": 203,
      "created_at": "2025-08-03T10:06:04.597098",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/.cursor/rules/documentation.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/.cursor/rules/documentation.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Documentation development rules and guidelines",
          "globs": [
            "docs/*.md",
            "*.md"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 7,
          "code_blocks": 0,
          "lists": 20,
          "links": 0,
          "emphasis": 20,
          "total_lines": 34,
          "non_empty_lines": 27
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1382,
          "total_lines": 39,
          "non_empty_lines": 32,
          "avg_line_length": 34.43589743589744,
          "max_line_length": 66
        },
        "lines_of_code": 39,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.3000000000000007,
      "structure_hash": "36d25885b93624d7",
      "lines_of_code": 39,
      "created_at": "2025-08-03T10:06:04.605650",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/data/.cursor/rules/data-management.mdc": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/data/.cursor/rules/data-management.mdc",
      "file_type": "mdc",
      "model_type": "ast",
      "model_data": {
        "frontmatter": {
          "description": "Data management rules and guidelines",
          "globs": [
            "data/*.json",
            "data/*.py",
            "data/*.csv",
            "data/*.yaml",
            "data/*.html"
          ],
          "alwaysApply": true
        },
        "markdown_analysis": {
          "headers": 6,
          "code_blocks": 0,
          "lists": 16,
          "links": 0,
          "emphasis": 16,
          "total_lines": 28,
          "non_empty_lines": 22
        },
        "yaml_structure": {
          "keys": [
            "description",
            "globs",
            "alwaysApply"
          ],
          "depth": 2,
          "has_description": true,
          "has_globs": true,
          "has_always_apply": true
        },
        "content_metrics": {
          "total_chars": 1157,
          "total_lines": 33,
          "non_empty_lines": 27,
          "avg_line_length": 34.06060606060606,
          "max_line_length": 79
        },
        "lines_of_code": 33,
        "rule_compliance": {
          "has_description": true,
          "has_globs": true,
          "has_content": true,
          "has_headers": true,
          "has_code_blocks": false
        }
      },
      "complexity_score": 3.1000000000000005,
      "structure_hash": "ace614efd43fa605",
      "lines_of_code": 33,
      "created_at": "2025-08-03T10:06:04.608109",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/ENHANCED_AST_LEVEL_UP_SUMMARY.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ENHANCED_AST_LEVEL_UP_SUMMARY.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 43,
          "code_blocks": 12,
          "lists": 62,
          "links": 0,
          "emphasis": 117,
          "tables": 0,
          "images": 0,
          "total_lines": 283,
          "non_empty_lines": 221
        },
        "content_metrics": {
          "total_chars": 9623,
          "total_lines": 283,
          "non_empty_lines": 221,
          "avg_line_length": 33.00706713780919,
          "max_line_length": 183
        },
        "lines_of_code": 283,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "11be768a02feecab",
      "lines_of_code": 283,
      "created_at": "2025-08-03T10:06:04.620980",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/PR_10_PYTHON_TEST_FIXES.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/PR_10_PYTHON_TEST_FIXES.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 32,
          "code_blocks": 0,
          "lists": 63,
          "links": 0,
          "emphasis": 52,
          "tables": 0,
          "images": 0,
          "total_lines": 141,
          "non_empty_lines": 105
        },
        "content_metrics": {
          "total_chars": 4179,
          "total_lines": 141,
          "non_empty_lines": 105,
          "avg_line_length": 28.645390070921987,
          "max_line_length": 131
        },
        "lines_of_code": 141,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": false,
          "has_links": false,
          "has_headers": true,
          "structure_score": 1
        }
      },
      "complexity_score": 7.6000000000000005,
      "structure_hash": "333f4d2e5fa505c4",
      "lines_of_code": 141,
      "created_at": "2025-08-03T10:06:04.623188",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/QUICKSTART.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/QUICKSTART.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 28,
          "code_blocks": 16,
          "lists": 29,
          "links": 2,
          "emphasis": 28,
          "tables": 0,
          "images": 0,
          "total_lines": 171,
          "non_empty_lines": 120
        },
        "content_metrics": {
          "total_chars": 4767,
          "total_lines": 171,
          "non_empty_lines": 120,
          "avg_line_length": 26.883040935672515,
          "max_line_length": 142
        },
        "lines_of_code": 171,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": true,
          "has_headers": true,
          "structure_score": 3
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "02de471b114dd41f",
      "lines_of_code": 171,
      "created_at": "2025-08-03T10:06:04.629115",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/HEURISTIC_VS_DETERMINISTIC_PRINCIPLE.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/HEURISTIC_VS_DETERMINISTIC_PRINCIPLE.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 52,
          "code_blocks": 12,
          "lists": 46,
          "links": 0,
          "emphasis": 132,
          "tables": 0,
          "images": 0,
          "total_lines": 229,
          "non_empty_lines": 167
        },
        "content_metrics": {
          "total_chars": 8527,
          "total_lines": 229,
          "non_empty_lines": 167,
          "avg_line_length": 36.24017467248908,
          "max_line_length": 224
        },
        "lines_of_code": 229,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "6a213799d894ada1",
      "lines_of_code": 229,
      "created_at": "2025-08-03T10:06:04.631515",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/README.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/README.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 42,
          "code_blocks": 12,
          "lists": 48,
          "links": 0,
          "emphasis": 51,
          "tables": 0,
          "images": 0,
          "total_lines": 189,
          "non_empty_lines": 145
        },
        "content_metrics": {
          "total_chars": 5485,
          "total_lines": 189,
          "non_empty_lines": 145,
          "avg_line_length": 28.021164021164022,
          "max_line_length": 139
        },
        "lines_of_code": 189,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "83c400124c8b14f9",
      "lines_of_code": 189,
      "created_at": "2025-08-03T10:06:04.641398",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/SYNTAX_FIX_SUMMARY.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/SYNTAX_FIX_SUMMARY.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 24,
          "code_blocks": 2,
          "lists": 12,
          "links": 0,
          "emphasis": 57,
          "tables": 0,
          "images": 0,
          "total_lines": 126,
          "non_empty_lines": 97
        },
        "content_metrics": {
          "total_chars": 6508,
          "total_lines": 126,
          "non_empty_lines": 97,
          "avg_line_length": 50.65873015873016,
          "max_line_length": 336
        },
        "lines_of_code": 126,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 6.800000000000001,
      "structure_hash": "172b5ebdb4f743a1",
      "lines_of_code": 126,
      "created_at": "2025-08-03T10:06:04.643764",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/CALL_MORE_GHOSTBUSTERS_RULE.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/CALL_MORE_GHOSTBUSTERS_RULE.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 35,
          "code_blocks": 16,
          "lists": 47,
          "links": 0,
          "emphasis": 76,
          "tables": 0,
          "images": 0,
          "total_lines": 229,
          "non_empty_lines": 181
        },
        "content_metrics": {
          "total_chars": 7501,
          "total_lines": 229,
          "non_empty_lines": 181,
          "avg_line_length": 31.759825327510917,
          "max_line_length": 138
        },
        "lines_of_code": 229,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "35d641058c65c8f8",
      "lines_of_code": 229,
      "created_at": "2025-08-03T10:06:04.653510",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/GIT_ENHANCED_AST_LEVEL_UP.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/GIT_ENHANCED_AST_LEVEL_UP.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 30,
          "code_blocks": 14,
          "lists": 44,
          "links": 0,
          "emphasis": 72,
          "tables": 0,
          "images": 0,
          "total_lines": 229,
          "non_empty_lines": 178
        },
        "content_metrics": {
          "total_chars": 8799,
          "total_lines": 229,
          "non_empty_lines": 178,
          "avg_line_length": 37.427947598253276,
          "max_line_length": 188
        },
        "lines_of_code": 229,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "5c52615ab64e85f1",
      "lines_of_code": 229,
      "created_at": "2025-08-03T10:06:04.656895",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/AST_LEVEL_UP_PLAN.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/AST_LEVEL_UP_PLAN.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 35,
          "code_blocks": 18,
          "lists": 36,
          "links": 0,
          "emphasis": 72,
          "tables": 0,
          "images": 0,
          "total_lines": 401,
          "non_empty_lines": 306
        },
        "content_metrics": {
          "total_chars": 15330,
          "total_lines": 401,
          "non_empty_lines": 306,
          "avg_line_length": 37.231920199501246,
          "max_line_length": 206
        },
        "lines_of_code": 401,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "482f2e67e89ca49f",
      "lines_of_code": 401,
      "created_at": "2025-08-03T10:06:04.662036",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/data/diversity_analysis_report.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/data/diversity_analysis_report.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 16,
          "code_blocks": 0,
          "lists": 117,
          "links": 0,
          "emphasis": 139,
          "tables": 7,
          "images": 0,
          "total_lines": 310,
          "non_empty_lines": 173
        },
        "content_metrics": {
          "total_chars": 15637,
          "total_lines": 310,
          "non_empty_lines": 173,
          "avg_line_length": 49.44516129032258,
          "max_line_length": 220
        },
        "lines_of_code": 310,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": false,
          "has_links": false,
          "has_headers": true,
          "structure_score": 1
        }
      },
      "complexity_score": 7.9,
      "structure_hash": "a37c46fda0502d53",
      "lines_of_code": 310,
      "created_at": "2025-08-03T10:06:04.677101",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_6_healthcare_cdc_implementation.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_6_healthcare_cdc_implementation.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 46,
          "code_blocks": 18,
          "lists": 83,
          "links": 2,
          "emphasis": 54,
          "tables": 0,
          "images": 0,
          "total_lines": 272,
          "non_empty_lines": 219
        },
        "content_metrics": {
          "total_chars": 8585,
          "total_lines": 272,
          "non_empty_lines": 219,
          "avg_line_length": 30.566176470588236,
          "max_line_length": 352
        },
        "lines_of_code": 272,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": true,
          "has_headers": true,
          "structure_score": 3
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "923e947a4756aa5d",
      "lines_of_code": 272,
      "created_at": "2025-08-03T10:06:04.688399",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/AST_LEVEL_UP_PROGRESS.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/AST_LEVEL_UP_PROGRESS.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 34,
          "code_blocks": 6,
          "lists": 51,
          "links": 0,
          "emphasis": 80,
          "tables": 0,
          "images": 0,
          "total_lines": 164,
          "non_empty_lines": 128
        },
        "content_metrics": {
          "total_chars": 6211,
          "total_lines": 164,
          "non_empty_lines": 128,
          "avg_line_length": 36.8780487804878,
          "max_line_length": 109
        },
        "lines_of_code": 164,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "0579ab1bca003b8f",
      "lines_of_code": 164,
      "created_at": "2025-08-03T10:06:04.664198",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/HEALTHCARE_CDC_IMPLEMENTATION_PLAN.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/HEALTHCARE_CDC_IMPLEMENTATION_PLAN.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 39,
          "code_blocks": 4,
          "lists": 85,
          "links": 0,
          "emphasis": 91,
          "tables": 5,
          "images": 0,
          "total_lines": 236,
          "non_empty_lines": 190
        },
        "content_metrics": {
          "total_chars": 8447,
          "total_lines": 236,
          "non_empty_lines": 190,
          "avg_line_length": 34.79661016949152,
          "max_line_length": 258
        },
        "lines_of_code": 236,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "1233234f00ab7c20",
      "lines_of_code": 236,
      "created_at": "2025-08-03T10:06:04.699118",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_1_security_cleanup.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_1_security_cleanup.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 30,
          "code_blocks": 16,
          "lists": 21,
          "links": 0,
          "emphasis": 31,
          "tables": 0,
          "images": 0,
          "total_lines": 162,
          "non_empty_lines": 129
        },
        "content_metrics": {
          "total_chars": 4263,
          "total_lines": 162,
          "non_empty_lines": 129,
          "avg_line_length": 25.320987654320987,
          "max_line_length": 156
        },
        "lines_of_code": 162,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "0471d405b137e2aa",
      "lines_of_code": 162,
      "created_at": "2025-08-03T10:06:04.706970",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_3_model_driven_orchestration.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_3_model_driven_orchestration.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 40,
          "code_blocks": 30,
          "lists": 16,
          "links": 0,
          "emphasis": 29,
          "tables": 0,
          "images": 0,
          "total_lines": 321,
          "non_empty_lines": 265
        },
        "content_metrics": {
          "total_chars": 7926,
          "total_lines": 321,
          "non_empty_lines": 265,
          "avg_line_length": 23.694704049844237,
          "max_line_length": 187
        },
        "lines_of_code": 321,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "b1848b19487c3ae8",
      "lines_of_code": 321,
      "created_at": "2025-08-03T10:06:04.711078",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_4_OPENFLOW_STREAMLIT_APP_IMPLEMENTATION.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_4_OPENFLOW_STREAMLIT_APP_IMPLEMENTATION.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 90,
          "code_blocks": 40,
          "lists": 191,
          "links": 0,
          "emphasis": 155,
          "tables": 7,
          "images": 0,
          "total_lines": 570,
          "non_empty_lines": 470
        },
        "content_metrics": {
          "total_chars": 18164,
          "total_lines": 570,
          "non_empty_lines": 470,
          "avg_line_length": 30.86842105263158,
          "max_line_length": 317
        },
        "lines_of_code": 570,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "4abcf219e3679220",
      "lines_of_code": 570,
      "created_at": "2025-08-03T10:06:04.714716",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/pr1_healthcare_cdc_context.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/pr1_healthcare_cdc_context.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 34,
          "code_blocks": 14,
          "lists": 45,
          "links": 0,
          "emphasis": 56,
          "tables": 0,
          "images": 0,
          "total_lines": 220,
          "non_empty_lines": 176
        },
        "content_metrics": {
          "total_chars": 7946,
          "total_lines": 220,
          "non_empty_lines": 176,
          "avg_line_length": 35.122727272727275,
          "max_line_length": 265
        },
        "lines_of_code": 220,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "1dad7bc926f38757",
      "lines_of_code": 220,
      "created_at": "2025-08-03T10:06:04.722011",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/SECURITY_FIXES.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/SECURITY_FIXES.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 34,
          "code_blocks": 12,
          "lists": 40,
          "links": 0,
          "emphasis": 49,
          "tables": 0,
          "images": 0,
          "total_lines": 148,
          "non_empty_lines": 113
        },
        "content_metrics": {
          "total_chars": 4441,
          "total_lines": 148,
          "non_empty_lines": 113,
          "avg_line_length": 29.013513513513512,
          "max_line_length": 211
        },
        "lines_of_code": 148,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "7d175ee901956078",
      "lines_of_code": 148,
      "created_at": "2025-08-03T10:06:04.726822",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/DIVERSITY_HYPOTHESIS_SUMMARY.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/DIVERSITY_HYPOTHESIS_SUMMARY.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 40,
          "code_blocks": 0,
          "lists": 102,
          "links": 0,
          "emphasis": 102,
          "tables": 13,
          "images": 0,
          "total_lines": 264,
          "non_empty_lines": 199
        },
        "content_metrics": {
          "total_chars": 9284,
          "total_lines": 264,
          "non_empty_lines": 199,
          "avg_line_length": 34.17045454545455,
          "max_line_length": 206
        },
        "lines_of_code": 264,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": false,
          "has_links": false,
          "has_headers": true,
          "structure_score": 1
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "a30f69740090eeaf",
      "lines_of_code": 264,
      "created_at": "2025-08-03T10:06:04.738597",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/GIT_WORKFLOW_SUMMARY.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/GIT_WORKFLOW_SUMMARY.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 18,
          "code_blocks": 2,
          "lists": 44,
          "links": 0,
          "emphasis": 46,
          "tables": 0,
          "images": 0,
          "total_lines": 127,
          "non_empty_lines": 95
        },
        "content_metrics": {
          "total_chars": 4664,
          "total_lines": 127,
          "non_empty_lines": 95,
          "avg_line_length": 35.732283464566926,
          "max_line_length": 192
        },
        "lines_of_code": 127,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 5.6,
      "structure_hash": "c28c9f552f401b4d",
      "lines_of_code": 127,
      "created_at": "2025-08-03T10:06:04.741193",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/SECURITY_SUMMARY.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/SECURITY_SUMMARY.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 27,
          "code_blocks": 12,
          "lists": 43,
          "links": 0,
          "emphasis": 58,
          "tables": 0,
          "images": 0,
          "total_lines": 147,
          "non_empty_lines": 114
        },
        "content_metrics": {
          "total_chars": 4604,
          "total_lines": 147,
          "non_empty_lines": 114,
          "avg_line_length": 30.3265306122449,
          "max_line_length": 175
        },
        "lines_of_code": 147,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "176a9f202c5823fd",
      "lines_of_code": 147,
      "created_at": "2025-08-03T10:06:04.747893",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/README.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/README.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 46,
          "code_blocks": 16,
          "lists": 85,
          "links": 0,
          "emphasis": 81,
          "tables": 20,
          "images": 0,
          "total_lines": 347,
          "non_empty_lines": 267
        },
        "content_metrics": {
          "total_chars": 10821,
          "total_lines": 347,
          "non_empty_lines": 267,
          "avg_line_length": 30.187319884726225,
          "max_line_length": 208
        },
        "lines_of_code": 347,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "d8c940a60e307e08",
      "lines_of_code": 347,
      "created_at": "2025-08-03T10:06:04.758385",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/DIVERSITY_HYPOTHESIS_ORGANIZATION.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/DIVERSITY_HYPOTHESIS_ORGANIZATION.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 52,
          "code_blocks": 20,
          "lists": 66,
          "links": 0,
          "emphasis": 85,
          "tables": 20,
          "images": 0,
          "total_lines": 350,
          "non_empty_lines": 270
        },
        "content_metrics": {
          "total_chars": 10819,
          "total_lines": 350,
          "non_empty_lines": 270,
          "avg_line_length": 29.914285714285715,
          "max_line_length": 180
        },
        "lines_of_code": 350,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "669770382e65d4e3",
      "lines_of_code": 350,
      "created_at": "2025-08-03T10:06:04.761995",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/pr1_diversity_vs_copilot_comparison.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/pr1_diversity_vs_copilot_comparison.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 54,
          "code_blocks": 0,
          "lists": 92,
          "links": 0,
          "emphasis": 167,
          "tables": 6,
          "images": 0,
          "total_lines": 278,
          "non_empty_lines": 210
        },
        "content_metrics": {
          "total_chars": 9724,
          "total_lines": 278,
          "non_empty_lines": 210,
          "avg_line_length": 33.98201438848921,
          "max_line_length": 304
        },
        "lines_of_code": 278,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": false,
          "has_links": false,
          "has_headers": true,
          "structure_score": 1
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "01711e9822518d04",
      "lines_of_code": 278,
      "created_at": "2025-08-03T10:06:04.770028",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_4_cursor_rules.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_4_cursor_rules.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 73,
          "code_blocks": 40,
          "lists": 64,
          "links": 0,
          "emphasis": 104,
          "tables": 0,
          "images": 0,
          "total_lines": 457,
          "non_empty_lines": 384
        },
        "content_metrics": {
          "total_chars": 12425,
          "total_lines": 457,
          "non_empty_lines": 384,
          "avg_line_length": 26.190371991247265,
          "max_line_length": 182
        },
        "lines_of_code": 457,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "b960a11596a11db0",
      "lines_of_code": 457,
      "created_at": "2025-08-03T10:06:04.767671",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_1_COMPREHENSIVE_IMPLEMENTATION_PLAN.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_1_COMPREHENSIVE_IMPLEMENTATION_PLAN.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 48,
          "code_blocks": 0,
          "lists": 166,
          "links": 0,
          "emphasis": 219,
          "tables": 15,
          "images": 0,
          "total_lines": 419,
          "non_empty_lines": 329
        },
        "content_metrics": {
          "total_chars": 15899,
          "total_lines": 419,
          "non_empty_lines": 329,
          "avg_line_length": 36.94749403341289,
          "max_line_length": 309
        },
        "lines_of_code": 419,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": false,
          "has_links": false,
          "has_headers": true,
          "structure_score": 1
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "97d02b3419f206bb",
      "lines_of_code": 419,
      "created_at": "2025-08-03T10:06:04.778214",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/DOCUMENTATION_INDEX.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/DOCUMENTATION_INDEX.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 37,
          "code_blocks": 20,
          "lists": 33,
          "links": 0,
          "emphasis": 85,
          "tables": 0,
          "images": 0,
          "total_lines": 214,
          "non_empty_lines": 176
        },
        "content_metrics": {
          "total_chars": 8133,
          "total_lines": 214,
          "non_empty_lines": 176,
          "avg_line_length": 37.00934579439252,
          "max_line_length": 184
        },
        "lines_of_code": 214,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "47757ebcdc50f449",
      "lines_of_code": 214,
      "created_at": "2025-08-03T10:06:04.787857",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/ORGANIZATION_SUMMARY.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/ORGANIZATION_SUMMARY.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 29,
          "code_blocks": 14,
          "lists": 57,
          "links": 0,
          "emphasis": 92,
          "tables": 0,
          "images": 0,
          "total_lines": 242,
          "non_empty_lines": 212
        },
        "content_metrics": {
          "total_chars": 9085,
          "total_lines": 242,
          "non_empty_lines": 212,
          "avg_line_length": 36.54545454545455,
          "max_line_length": 138
        },
        "lines_of_code": 242,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "0fda136274fdd0f8",
      "lines_of_code": 242,
      "created_at": "2025-08-03T10:06:04.793813",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_8_diversity_hypothesis_applied_to_pr1.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_8_diversity_hypothesis_applied_to_pr1.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 65,
          "code_blocks": 0,
          "lists": 111,
          "links": 1,
          "emphasis": 177,
          "tables": 6,
          "images": 0,
          "total_lines": 350,
          "non_empty_lines": 261
        },
        "content_metrics": {
          "total_chars": 12560,
          "total_lines": 350,
          "non_empty_lines": 261,
          "avg_line_length": 34.88857142857143,
          "max_line_length": 374
        },
        "lines_of_code": 350,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": false,
          "has_links": true,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "668d7e823285742e",
      "lines_of_code": 350,
      "created_at": "2025-08-03T10:06:04.801310",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_9_OPENFLOW_STREAMLIT_APP_IMPLEMENTATION.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_9_OPENFLOW_STREAMLIT_APP_IMPLEMENTATION.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 90,
          "code_blocks": 40,
          "lists": 191,
          "links": 0,
          "emphasis": 155,
          "tables": 7,
          "images": 0,
          "total_lines": 570,
          "non_empty_lines": 470
        },
        "content_metrics": {
          "total_chars": 18164,
          "total_lines": 570,
          "non_empty_lines": 470,
          "avg_line_length": 30.86842105263158,
          "max_line_length": 317
        },
        "lines_of_code": 570,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "4abcf219e3679220",
      "lines_of_code": 570,
      "created_at": "2025-08-03T10:06:04.807809",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/LANGCHAIN_MIGRATION_SUMMARY.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/LANGCHAIN_MIGRATION_SUMMARY.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 18,
          "code_blocks": 8,
          "lists": 13,
          "links": 0,
          "emphasis": 49,
          "tables": 9,
          "images": 0,
          "total_lines": 125,
          "non_empty_lines": 100
        },
        "content_metrics": {
          "total_chars": 4337,
          "total_lines": 125,
          "non_empty_lines": 100,
          "avg_line_length": 33.704,
          "max_line_length": 164
        },
        "lines_of_code": 125,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "7fa32b7d0cbf822d",
      "lines_of_code": 125,
      "created_at": "2025-08-03T10:06:04.813593",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_5_model_persistence.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_5_model_persistence.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 26,
          "code_blocks": 10,
          "lists": 35,
          "links": 0,
          "emphasis": 48,
          "tables": 4,
          "images": 0,
          "total_lines": 211,
          "non_empty_lines": 169
        },
        "content_metrics": {
          "total_chars": 6458,
          "total_lines": 211,
          "non_empty_lines": 169,
          "avg_line_length": 29.61137440758294,
          "max_line_length": 181
        },
        "lines_of_code": 211,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "debf3dee424e0587",
      "lines_of_code": 211,
      "created_at": "2025-08-03T10:06:04.821038",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_CREATION_SUMMARY.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_CREATION_SUMMARY.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 34,
          "code_blocks": 4,
          "lists": 47,
          "links": 0,
          "emphasis": 84,
          "tables": 25,
          "images": 0,
          "total_lines": 209,
          "non_empty_lines": 155
        },
        "content_metrics": {
          "total_chars": 6970,
          "total_lines": 209,
          "non_empty_lines": 155,
          "avg_line_length": 32.354066985645936,
          "max_line_length": 157
        },
        "lines_of_code": 209,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "34f211ab619c2377",
      "lines_of_code": 209,
      "created_at": "2025-08-03T10:06:04.836325",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/prioritized_implementation_plan.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/prioritized_implementation_plan.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 16,
          "code_blocks": 2,
          "lists": 39,
          "links": 0,
          "emphasis": 91,
          "tables": 0,
          "images": 0,
          "total_lines": 177,
          "non_empty_lines": 124
        },
        "content_metrics": {
          "total_chars": 7747,
          "total_lines": 177,
          "non_empty_lines": 124,
          "avg_line_length": 42.76836158192091,
          "max_line_length": 249
        },
        "lines_of_code": 177,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 5.2,
      "structure_hash": "ae6284efe3aff38c",
      "lines_of_code": 177,
      "created_at": "2025-08-03T10:06:04.835092",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_7_diversity_hypothesis_proven.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_7_diversity_hypothesis_proven.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 50,
          "code_blocks": 4,
          "lists": 169,
          "links": 0,
          "emphasis": 205,
          "tables": 47,
          "images": 0,
          "total_lines": 520,
          "non_empty_lines": 383
        },
        "content_metrics": {
          "total_chars": 17259,
          "total_lines": 520,
          "non_empty_lines": 383,
          "avg_line_length": 32.19230769230769,
          "max_line_length": 285
        },
        "lines_of_code": 520,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "db537f2985f257d9",
      "lines_of_code": 520,
      "created_at": "2025-08-03T10:06:04.843120",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/docs/PR_2_automated_security_checks.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/docs/PR_2_automated_security_checks.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 44,
          "code_blocks": 28,
          "lists": 18,
          "links": 0,
          "emphasis": 26,
          "tables": 0,
          "images": 0,
          "total_lines": 260,
          "non_empty_lines": 213
        },
        "content_metrics": {
          "total_chars": 5862,
          "total_lines": 260,
          "non_empty_lines": 213,
          "avg_line_length": 21.55,
          "max_line_length": 154
        },
        "lines_of_code": 260,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "ef2d474c506837e6",
      "lines_of_code": 260,
      "created_at": "2025-08-03T10:06:04.845734",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/README.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/README.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 16,
          "code_blocks": 10,
          "lists": 14,
          "links": 2,
          "emphasis": 9,
          "tables": 0,
          "images": 0,
          "total_lines": 90,
          "non_empty_lines": 68
        },
        "content_metrics": {
          "total_chars": 2656,
          "total_lines": 90,
          "non_empty_lines": 68,
          "avg_line_length": 28.522222222222222,
          "max_line_length": 225
        },
        "lines_of_code": 90,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": true,
          "has_headers": true,
          "structure_score": 3
        }
      },
      "complexity_score": 7.800000000000001,
      "structure_hash": "e3d1ea544002e884",
      "lines_of_code": 90,
      "created_at": "2025-08-03T10:06:04.855636",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/src/README.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/README.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 19,
          "code_blocks": 8,
          "lists": 23,
          "links": 0,
          "emphasis": 16,
          "tables": 0,
          "images": 0,
          "total_lines": 112,
          "non_empty_lines": 88
        },
        "content_metrics": {
          "total_chars": 3730,
          "total_lines": 112,
          "non_empty_lines": 88,
          "avg_line_length": 32.3125,
          "max_line_length": 100
        },
        "lines_of_code": 112,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": false,
          "has_headers": true,
          "structure_score": 2
        }
      },
      "complexity_score": 7.600000000000001,
      "structure_hash": "2c181de4900675be",
      "lines_of_code": 112,
      "created_at": "2025-08-03T10:06:04.862067",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/prompts/gemini_2_5_preview_pr_review_actual.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/prompts/gemini_2_5_preview_pr_review_actual.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 20,
          "code_blocks": 0,
          "lists": 45,
          "links": 0,
          "emphasis": 28,
          "tables": 0,
          "images": 0,
          "total_lines": 116,
          "non_empty_lines": 87
        },
        "content_metrics": {
          "total_chars": 4650,
          "total_lines": 116,
          "non_empty_lines": 87,
          "avg_line_length": 39.0948275862069,
          "max_line_length": 192
        },
        "lines_of_code": 116,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": false,
          "has_links": false,
          "has_headers": true,
          "structure_score": 1
        }
      },
      "complexity_score": 5.2,
      "structure_hash": "aa3216957c426dad",
      "lines_of_code": 116,
      "created_at": "2025-08-03T10:06:04.869936",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/ast_model_gap_report.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ast_model_gap_report.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 8030,
        "json_keys": [
          "current_models",
          "ast_models",
          "model_gaps",
          "bridging_benefits",
          "recommendations",
          "implementation_strategy"
        ],
        "json_depth": 5,
        "json_keys_list": [
          "current_models",
          "current_models.syntax_patterns",
          "current_models.line_level_analysis",
          "current_models.fix_strategies",
          "current_models.limitations",
          "ast_models",
          "ast_models.structural_models",
          "ast_models.structural_models.function_signatures",
          "ast_models.structural_models.function_signatures.description",
          "ast_models.structural_models.function_signatures.capabilities",
          "ast_models.structural_models.function_signatures.example",
          "ast_models.structural_models.class_hierarchies",
          "ast_models.structural_models.class_hierarchies.description",
          "ast_models.structural_models.class_hierarchies.capabilities",
          "ast_models.structural_models.class_hierarchies.example",
          "ast_models.structural_models.import_dependency_graphs",
          "ast_models.structural_models.import_dependency_graphs.description",
          "ast_models.structural_models.import_dependency_graphs.capabilities",
          "ast_models.structural_models.import_dependency_graphs.example",
          "ast_models.semantic_models",
          "ast_models.semantic_models.type_system",
          "ast_models.semantic_models.type_system.description",
          "ast_models.semantic_models.type_system.capabilities",
          "ast_models.semantic_models.type_system.example",
          "ast_models.semantic_models.control_flow",
          "ast_models.semantic_models.control_flow.description",
          "ast_models.semantic_models.control_flow.capabilities",
          "ast_models.semantic_models.control_flow.example",
          "ast_models.semantic_models.expression_trees",
          "ast_models.semantic_models.expression_trees.description",
          "ast_models.semantic_models.expression_trees.capabilities",
          "ast_models.semantic_models.expression_trees.example",
          "ast_models.context_models",
          "ast_models.context_models.scope_analysis",
          "ast_models.context_models.scope_analysis.description",
          "ast_models.context_models.scope_analysis.capabilities",
          "ast_models.context_models.scope_analysis.example",
          "ast_models.context_models.name_binding",
          "ast_models.context_models.name_binding.description",
          "ast_models.context_models.name_binding.capabilities",
          "ast_models.context_models.name_binding.example",
          "ast_models.pattern_models",
          "ast_models.pattern_models.design_patterns",
          "ast_models.pattern_models.design_patterns.description",
          "ast_models.pattern_models.design_patterns.capabilities",
          "ast_models.pattern_models.design_patterns.example",
          "ast_models.pattern_models.code_patterns",
          "ast_models.pattern_models.code_patterns.description",
          "ast_models.pattern_models.code_patterns.capabilities",
          "ast_models.pattern_models.code_patterns.example",
          "model_gaps",
          "model_gaps.structural_gaps",
          "model_gaps.structural_gaps.function_analysis",
          "model_gaps.structural_gaps.function_analysis.current",
          "model_gaps.structural_gaps.function_analysis.ast_capability",
          "model_gaps.structural_gaps.function_analysis.gap",
          "model_gaps.structural_gaps.function_analysis.impact",
          "model_gaps.structural_gaps.class_analysis",
          "model_gaps.structural_gaps.class_analysis.current",
          "model_gaps.structural_gaps.class_analysis.ast_capability",
          "model_gaps.structural_gaps.class_analysis.gap",
          "model_gaps.structural_gaps.class_analysis.impact",
          "model_gaps.structural_gaps.import_analysis",
          "model_gaps.structural_gaps.import_analysis.current",
          "model_gaps.structural_gaps.import_analysis.ast_capability",
          "model_gaps.structural_gaps.import_analysis.gap",
          "model_gaps.structural_gaps.import_analysis.impact",
          "model_gaps.semantic_gaps",
          "model_gaps.semantic_gaps.type_system",
          "model_gaps.semantic_gaps.type_system.current",
          "model_gaps.semantic_gaps.type_system.ast_capability",
          "model_gaps.semantic_gaps.type_system.gap",
          "model_gaps.semantic_gaps.type_system.impact",
          "model_gaps.semantic_gaps.control_flow",
          "model_gaps.semantic_gaps.control_flow.current",
          "model_gaps.semantic_gaps.control_flow.ast_capability",
          "model_gaps.semantic_gaps.control_flow.gap",
          "model_gaps.semantic_gaps.control_flow.impact",
          "model_gaps.semantic_gaps.expression_analysis",
          "model_gaps.semantic_gaps.expression_analysis.current",
          "model_gaps.semantic_gaps.expression_analysis.ast_capability",
          "model_gaps.semantic_gaps.expression_analysis.gap",
          "model_gaps.semantic_gaps.expression_analysis.impact",
          "model_gaps.context_gaps",
          "model_gaps.context_gaps.scope_analysis",
          "model_gaps.context_gaps.scope_analysis.current",
          "model_gaps.context_gaps.scope_analysis.ast_capability",
          "model_gaps.context_gaps.scope_analysis.gap",
          "model_gaps.context_gaps.scope_analysis.impact",
          "model_gaps.context_gaps.name_binding",
          "model_gaps.context_gaps.name_binding.current",
          "model_gaps.context_gaps.name_binding.ast_capability",
          "model_gaps.context_gaps.name_binding.gap",
          "model_gaps.context_gaps.name_binding.impact",
          "bridging_benefits",
          "bridging_benefits.projection_capabilities",
          "bridging_benefits.projection_capabilities.function_signature_projection",
          "bridging_benefits.projection_capabilities.function_signature_projection.description",
          "bridging_benefits.projection_capabilities.function_signature_projection.example",
          "bridging_benefits.projection_capabilities.function_signature_projection.benefit",
          "bridging_benefits.projection_capabilities.class_structure_projection",
          "bridging_benefits.projection_capabilities.class_structure_projection.description",
          "bridging_benefits.projection_capabilities.class_structure_projection.example",
          "bridging_benefits.projection_capabilities.class_structure_projection.benefit",
          "bridging_benefits.projection_capabilities.import_structure_projection",
          "bridging_benefits.projection_capabilities.import_structure_projection.description",
          "bridging_benefits.projection_capabilities.import_structure_projection.example",
          "bridging_benefits.projection_capabilities.import_structure_projection.benefit",
          "bridging_benefits.projection_capabilities.expression_structure_projection",
          "bridging_benefits.projection_capabilities.expression_structure_projection.description",
          "bridging_benefits.projection_capabilities.expression_structure_projection.example",
          "bridging_benefits.projection_capabilities.expression_structure_projection.benefit",
          "bridging_benefits.context_aware_fixing",
          "bridging_benefits.context_aware_fixing.scope_aware_fixes",
          "bridging_benefits.context_aware_fixing.scope_aware_fixes.description",
          "bridging_benefits.context_aware_fixing.scope_aware_fixes.example",
          "bridging_benefits.context_aware_fixing.scope_aware_fixes.benefit",
          "bridging_benefits.context_aware_fixing.type_aware_fixes",
          "bridging_benefits.context_aware_fixing.type_aware_fixes.description",
          "bridging_benefits.context_aware_fixing.type_aware_fixes.example",
          "bridging_benefits.context_aware_fixing.type_aware_fixes.benefit",
          "bridging_benefits.context_aware_fixing.pattern_aware_fixes",
          "bridging_benefits.context_aware_fixing.pattern_aware_fixes.description",
          "bridging_benefits.context_aware_fixing.pattern_aware_fixes.example",
          "bridging_benefits.context_aware_fixing.pattern_aware_fixes.benefit",
          "bridging_benefits.intelligent_reconstruction",
          "bridging_benefits.intelligent_reconstruction.semantic_reconstruction",
          "bridging_benefits.intelligent_reconstruction.semantic_reconstruction.description",
          "bridging_benefits.intelligent_reconstruction.semantic_reconstruction.example",
          "bridging_benefits.intelligent_reconstruction.semantic_reconstruction.benefit",
          "bridging_benefits.intelligent_reconstruction.dependency_reconstruction",
          "bridging_benefits.intelligent_reconstruction.dependency_reconstruction.description",
          "bridging_benefits.intelligent_reconstruction.dependency_reconstruction.example",
          "bridging_benefits.intelligent_reconstruction.dependency_reconstruction.benefit",
          "bridging_benefits.intelligent_reconstruction.structure_reconstruction",
          "bridging_benefits.intelligent_reconstruction.structure_reconstruction.description",
          "bridging_benefits.intelligent_reconstruction.structure_reconstruction.example",
          "bridging_benefits.intelligent_reconstruction.structure_reconstruction.benefit",
          "recommendations",
          "implementation_strategy",
          "implementation_strategy.phase_1",
          "implementation_strategy.phase_2",
          "implementation_strategy.phase_3",
          "implementation_strategy.phase_4"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "3e692880853796e22f415087184ca9d6",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.888504",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/prompts/gemini_2_5_flash_lite_pr_review.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/prompts/gemini_2_5_flash_lite_pr_review.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 20,
          "code_blocks": 0,
          "lists": 45,
          "links": 0,
          "emphasis": 28,
          "tables": 0,
          "images": 0,
          "total_lines": 116,
          "non_empty_lines": 87
        },
        "content_metrics": {
          "total_chars": 4645,
          "total_lines": 116,
          "non_empty_lines": 87,
          "avg_line_length": 39.05172413793103,
          "max_line_length": 192
        },
        "lines_of_code": 116,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": false,
          "has_links": false,
          "has_headers": true,
          "structure_score": 1
        }
      },
      "complexity_score": 5.2,
      "structure_hash": "aa3216957c426dad",
      "lines_of_code": 116,
      "created_at": "2025-08-03T10:06:04.879963",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/ast_models_focused.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ast_models_focused.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 107166,
        "json_keys": [
          "file_models",
          "summary"
        ],
        "json_depth": 6,
        "json_keys_list": [
          "file_models",
          "file_models.fix_test_rule_compliance_indentation.py",
          "file_models.fix_test_rule_compliance_indentation.py.file_path",
          "file_models.fix_test_rule_compliance_indentation.py.file_type",
          "file_models.fix_test_rule_compliance_indentation.py.model_type",
          "file_models.fix_test_rule_compliance_indentation.py.complexity_score",
          "file_models.fix_test_rule_compliance_indentation.py.line_count",
          "file_models.fix_test_rule_compliance_indentation.py.function_count",
          "file_models.fix_test_rule_compliance_indentation.py.class_count",
          "file_models.fix_test_rule_compliance_indentation.py.import_count",
          "file_models.fix_test_rule_compliance_indentation.py.error_count",
          "file_models.fix_test_rule_compliance_indentation.py.model_data",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.docstrings",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.imports",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[0].name",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[1].name",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.classes",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.variables",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.line_count",
          "file_models.final_syntax_fix.py",
          "file_models.final_syntax_fix.py.file_path",
          "file_models.final_syntax_fix.py.file_type",
          "file_models.final_syntax_fix.py.model_type",
          "file_models.final_syntax_fix.py.complexity_score",
          "file_models.final_syntax_fix.py.line_count",
          "file_models.final_syntax_fix.py.function_count",
          "file_models.final_syntax_fix.py.class_count",
          "file_models.final_syntax_fix.py.import_count",
          "file_models.final_syntax_fix.py.error_count",
          "file_models.final_syntax_fix.py.model_data",
          "file_models.final_syntax_fix.py.model_data.docstrings",
          "file_models.final_syntax_fix.py.model_data.imports",
          "file_models.final_syntax_fix.py.model_data.functions",
          "file_models.final_syntax_fix.py.model_data.functions.[0].name",
          "file_models.final_syntax_fix.py.model_data.functions.[0].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[1].name",
          "file_models.final_syntax_fix.py.model_data.functions.[1].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[2].name",
          "file_models.final_syntax_fix.py.model_data.functions.[2].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[3].name",
          "file_models.final_syntax_fix.py.model_data.functions.[3].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[4].name",
          "file_models.final_syntax_fix.py.model_data.functions.[4].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[5].name",
          "file_models.final_syntax_fix.py.model_data.functions.[5].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[6].name",
          "file_models.final_syntax_fix.py.model_data.functions.[6].docstring",
          "file_models.final_syntax_fix.py.model_data.classes",
          "file_models.final_syntax_fix.py.model_data.classes.[0].name",
          "file_models.final_syntax_fix.py.model_data.classes.[0].docstring",
          "file_models.final_syntax_fix.py.model_data.variables",
          "file_models.final_syntax_fix.py.model_data.line_count",
          "file_models.fix_test_rule_compliance.py",
          "file_models.fix_test_rule_compliance.py.file_path",
          "file_models.fix_test_rule_compliance.py.file_type",
          "file_models.fix_test_rule_compliance.py.model_type",
          "file_models.fix_test_rule_compliance.py.complexity_score",
          "file_models.fix_test_rule_compliance.py.line_count",
          "file_models.fix_test_rule_compliance.py.function_count",
          "file_models.fix_test_rule_compliance.py.class_count",
          "file_models.fix_test_rule_compliance.py.import_count",
          "file_models.fix_test_rule_compliance.py.error_count",
          "file_models.fix_test_rule_compliance.py.model_data",
          "file_models.fix_test_rule_compliance.py.model_data.docstrings",
          "file_models.fix_test_rule_compliance.py.model_data.imports",
          "file_models.fix_test_rule_compliance.py.model_data.functions",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[0].name",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[0].docstring",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[1].name",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[1].docstring",
          "file_models.fix_test_rule_compliance.py.model_data.classes",
          "file_models.fix_test_rule_compliance.py.model_data.variables",
          "file_models.fix_test_rule_compliance.py.model_data.line_count",
          "file_models.fix_remaining_indentation.py",
          "file_models.fix_remaining_indentation.py.file_path",
          "file_models.fix_remaining_indentation.py.file_type",
          "file_models.fix_remaining_indentation.py.model_type",
          "file_models.fix_remaining_indentation.py.complexity_score",
          "file_models.fix_remaining_indentation.py.line_count",
          "file_models.fix_remaining_indentation.py.function_count",
          "file_models.fix_remaining_indentation.py.class_count",
          "file_models.fix_remaining_indentation.py.import_count",
          "file_models.fix_remaining_indentation.py.error_count",
          "file_models.fix_remaining_indentation.py.model_data",
          "file_models.fix_remaining_indentation.py.model_data.docstrings",
          "file_models.fix_remaining_indentation.py.model_data.imports",
          "file_models.fix_remaining_indentation.py.model_data.functions",
          "file_models.fix_remaining_indentation.py.model_data.functions.[0].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[1].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[2].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[2].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[3].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[3].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[4].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[4].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[5].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[5].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[6].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[6].docstring",
          "file_models.fix_remaining_indentation.py.model_data.classes",
          "file_models.fix_remaining_indentation.py.model_data.variables",
          "file_models.fix_remaining_indentation.py.model_data.line_count",
          "file_models.ast_projection_demo.py",
          "file_models.ast_projection_demo.py.file_path",
          "file_models.ast_projection_demo.py.file_type",
          "file_models.ast_projection_demo.py.model_type",
          "file_models.ast_projection_demo.py.complexity_score",
          "file_models.ast_projection_demo.py.line_count",
          "file_models.ast_projection_demo.py.function_count",
          "file_models.ast_projection_demo.py.class_count",
          "file_models.ast_projection_demo.py.import_count",
          "file_models.ast_projection_demo.py.error_count",
          "file_models.ast_projection_demo.py.model_data",
          "file_models.ast_projection_demo.py.model_data.docstrings",
          "file_models.ast_projection_demo.py.model_data.imports",
          "file_models.ast_projection_demo.py.model_data.functions",
          "file_models.ast_projection_demo.py.model_data.functions.[0].name",
          "file_models.ast_projection_demo.py.model_data.functions.[0].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[1].name",
          "file_models.ast_projection_demo.py.model_data.functions.[1].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[2].name",
          "file_models.ast_projection_demo.py.model_data.functions.[2].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[3].name",
          "file_models.ast_projection_demo.py.model_data.functions.[3].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[4].name",
          "file_models.ast_projection_demo.py.model_data.functions.[4].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[5].name",
          "file_models.ast_projection_demo.py.model_data.functions.[5].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[6].name",
          "file_models.ast_projection_demo.py.model_data.functions.[6].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[7].name",
          "file_models.ast_projection_demo.py.model_data.functions.[7].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[8].name",
          "file_models.ast_projection_demo.py.model_data.functions.[8].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[9].name",
          "file_models.ast_projection_demo.py.model_data.functions.[9].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[10].name",
          "file_models.ast_projection_demo.py.model_data.functions.[10].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[11].name",
          "file_models.ast_projection_demo.py.model_data.functions.[11].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[12].name",
          "file_models.ast_projection_demo.py.model_data.functions.[12].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[13].name",
          "file_models.ast_projection_demo.py.model_data.functions.[13].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[14].name",
          "file_models.ast_projection_demo.py.model_data.functions.[14].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[15].name",
          "file_models.ast_projection_demo.py.model_data.functions.[15].docstring",
          "file_models.ast_projection_demo.py.model_data.classes",
          "file_models.ast_projection_demo.py.model_data.classes.[0].name",
          "file_models.ast_projection_demo.py.model_data.classes.[0].docstring",
          "file_models.ast_projection_demo.py.model_data.variables",
          "file_models.ast_projection_demo.py.model_data.line_count",
          "file_models.test_git_enhanced.py",
          "file_models.test_git_enhanced.py.file_path",
          "file_models.test_git_enhanced.py.file_type",
          "file_models.test_git_enhanced.py.model_type",
          "file_models.test_git_enhanced.py.complexity_score",
          "file_models.test_git_enhanced.py.line_count",
          "file_models.test_git_enhanced.py.function_count",
          "file_models.test_git_enhanced.py.class_count",
          "file_models.test_git_enhanced.py.import_count",
          "file_models.test_git_enhanced.py.error_count",
          "file_models.test_git_enhanced.py.model_data",
          "file_models.test_git_enhanced.py.model_data.docstrings",
          "file_models.test_git_enhanced.py.model_data.imports",
          "file_models.test_git_enhanced.py.model_data.functions",
          "file_models.test_git_enhanced.py.model_data.functions.[0].name",
          "file_models.test_git_enhanced.py.model_data.functions.[0].docstring",
          "file_models.test_git_enhanced.py.model_data.classes",
          "file_models.test_git_enhanced.py.model_data.variables",
          "file_models.test_git_enhanced.py.model_data.line_count",
          "file_models.multi_generational_git_analyzer.py",
          "file_models.multi_generational_git_analyzer.py.file_path",
          "file_models.multi_generational_git_analyzer.py.file_type",
          "file_models.multi_generational_git_analyzer.py.model_type",
          "file_models.multi_generational_git_analyzer.py.complexity_score",
          "file_models.multi_generational_git_analyzer.py.line_count",
          "file_models.multi_generational_git_analyzer.py.function_count",
          "file_models.multi_generational_git_analyzer.py.class_count",
          "file_models.multi_generational_git_analyzer.py.import_count",
          "file_models.multi_generational_git_analyzer.py.error_count",
          "file_models.multi_generational_git_analyzer.py.model_data",
          "file_models.multi_generational_git_analyzer.py.model_data.docstrings",
          "file_models.multi_generational_git_analyzer.py.model_data.imports",
          "file_models.multi_generational_git_analyzer.py.model_data.functions",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[0].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[0].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[1].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[1].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[2].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[2].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[3].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[3].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[4].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[4].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[5].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[5].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[6].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[6].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[7].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[7].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[8].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[8].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[9].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[9].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[10].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[10].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[11].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[11].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[12].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[12].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[13].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[13].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[14].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[14].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[15].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[15].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[16].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[16].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[17].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[17].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[18].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[18].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[19].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[19].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[20].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[20].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[21].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[21].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[22].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[22].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[23].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[23].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[24].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[24].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[25].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[25].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.classes",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[0].name",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[0].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[1].name",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[1].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.variables",
          "file_models.multi_generational_git_analyzer.py.model_data.line_count",
          "file_models.ast_model_gap_analyzer.py",
          "file_models.ast_model_gap_analyzer.py.file_path",
          "file_models.ast_model_gap_analyzer.py.file_type",
          "file_models.ast_model_gap_analyzer.py.model_type",
          "file_models.ast_model_gap_analyzer.py.complexity_score",
          "file_models.ast_model_gap_analyzer.py.line_count",
          "file_models.ast_model_gap_analyzer.py.function_count",
          "file_models.ast_model_gap_analyzer.py.class_count",
          "file_models.ast_model_gap_analyzer.py.import_count",
          "file_models.ast_model_gap_analyzer.py.error_count",
          "file_models.ast_model_gap_analyzer.py.model_data",
          "file_models.ast_model_gap_analyzer.py.model_data.docstrings",
          "file_models.ast_model_gap_analyzer.py.model_data.imports",
          "file_models.ast_model_gap_analyzer.py.model_data.functions",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[0].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[0].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[1].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[1].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[2].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[2].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[3].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[3].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[4].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[4].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[5].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[5].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[6].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[6].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.classes",
          "file_models.ast_model_gap_analyzer.py.model_data.classes.[0].name",
          "file_models.ast_model_gap_analyzer.py.model_data.classes.[0].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.variables",
          "file_models.ast_model_gap_analyzer.py.model_data.line_count",
          "file_models.model_sufficiency_analyzer.py",
          "file_models.model_sufficiency_analyzer.py.file_path",
          "file_models.model_sufficiency_analyzer.py.file_type",
          "file_models.model_sufficiency_analyzer.py.model_type",
          "file_models.model_sufficiency_analyzer.py.complexity_score",
          "file_models.model_sufficiency_analyzer.py.line_count",
          "file_models.model_sufficiency_analyzer.py.function_count",
          "file_models.model_sufficiency_analyzer.py.class_count",
          "file_models.model_sufficiency_analyzer.py.import_count",
          "file_models.model_sufficiency_analyzer.py.error_count",
          "file_models.model_sufficiency_analyzer.py.model_data",
          "file_models.model_sufficiency_analyzer.py.model_data.docstrings",
          "file_models.model_sufficiency_analyzer.py.model_data.imports",
          "file_models.model_sufficiency_analyzer.py.model_data.functions",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[0].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[0].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[1].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[1].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[2].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[2].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[3].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[3].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[4].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[4].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[5].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[5].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[6].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[6].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[7].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[7].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[8].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[8].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[9].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[9].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[10].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[10].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.classes",
          "file_models.model_sufficiency_analyzer.py.model_data.classes.[0].name",
          "file_models.model_sufficiency_analyzer.py.model_data.classes.[0].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.variables",
          "file_models.model_sufficiency_analyzer.py.model_data.line_count",
          "file_models.ast_capability_analyzer.py",
          "file_models.ast_capability_analyzer.py.file_path",
          "file_models.ast_capability_analyzer.py.file_type",
          "file_models.ast_capability_analyzer.py.model_type",
          "file_models.ast_capability_analyzer.py.complexity_score",
          "file_models.ast_capability_analyzer.py.line_count",
          "file_models.ast_capability_analyzer.py.function_count",
          "file_models.ast_capability_analyzer.py.class_count",
          "file_models.ast_capability_analyzer.py.import_count",
          "file_models.ast_capability_analyzer.py.error_count",
          "file_models.ast_capability_analyzer.py.model_data",
          "file_models.ast_capability_analyzer.py.model_data.docstrings",
          "file_models.ast_capability_analyzer.py.model_data.imports",
          "file_models.ast_capability_analyzer.py.model_data.functions",
          "file_models.ast_capability_analyzer.py.model_data.functions.[0].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[0].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[1].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[1].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[2].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[2].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[3].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[3].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[4].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[4].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[5].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[5].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[6].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[6].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[7].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[7].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[8].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[8].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[9].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[9].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[10].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[10].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[11].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[11].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[12].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[12].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[13].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[13].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[14].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[14].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[15].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[15].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[16].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[16].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[17].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[17].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[18].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[18].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[19].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[19].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[20].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[20].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[21].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[21].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[22].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[22].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[23].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[23].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[24].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[24].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[25].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[25].docstring",
          "file_models.ast_capability_analyzer.py.model_data.classes",
          "file_models.ast_capability_analyzer.py.model_data.classes.[0].name",
          "file_models.ast_capability_analyzer.py.model_data.classes.[0].docstring",
          "file_models.ast_capability_analyzer.py.model_data.variables",
          "file_models.ast_capability_analyzer.py.model_data.line_count",
          "file_models.test_syntax_fix_safety.py",
          "file_models.test_syntax_fix_safety.py.file_path",
          "file_models.test_syntax_fix_safety.py.file_type",
          "file_models.test_syntax_fix_safety.py.model_type",
          "file_models.test_syntax_fix_safety.py.complexity_score",
          "file_models.test_syntax_fix_safety.py.line_count",
          "file_models.test_syntax_fix_safety.py.function_count",
          "file_models.test_syntax_fix_safety.py.class_count",
          "file_models.test_syntax_fix_safety.py.import_count",
          "file_models.test_syntax_fix_safety.py.error_count",
          "file_models.test_syntax_fix_safety.py.model_data",
          "file_models.test_syntax_fix_safety.py.model_data.docstrings",
          "file_models.test_syntax_fix_safety.py.model_data.imports",
          "file_models.test_syntax_fix_safety.py.model_data.functions",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[0].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[0].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[1].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[1].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[2].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[2].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[3].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[3].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.classes",
          "file_models.test_syntax_fix_safety.py.model_data.variables",
          "file_models.test_syntax_fix_safety.py.model_data.line_count",
          "file_models.setup.py",
          "file_models.setup.py.file_path",
          "file_models.setup.py.file_type",
          "file_models.setup.py.model_type",
          "file_models.setup.py.complexity_score",
          "file_models.setup.py.line_count",
          "file_models.setup.py.function_count",
          "file_models.setup.py.class_count",
          "file_models.setup.py.import_count",
          "file_models.setup.py.error_count",
          "file_models.setup.py.model_data",
          "file_models.setup.py.model_data.docstrings",
          "file_models.setup.py.model_data.imports",
          "file_models.setup.py.model_data.functions",
          "file_models.setup.py.model_data.functions.[0].name",
          "file_models.setup.py.model_data.functions.[0].docstring",
          "file_models.setup.py.model_data.functions.[1].name",
          "file_models.setup.py.model_data.functions.[1].docstring",
          "file_models.setup.py.model_data.functions.[2].name",
          "file_models.setup.py.model_data.functions.[2].docstring",
          "file_models.setup.py.model_data.functions.[3].name",
          "file_models.setup.py.model_data.functions.[3].docstring",
          "file_models.setup.py.model_data.functions.[4].name",
          "file_models.setup.py.model_data.functions.[4].docstring",
          "file_models.setup.py.model_data.functions.[5].name",
          "file_models.setup.py.model_data.functions.[5].docstring",
          "file_models.setup.py.model_data.functions.[6].name",
          "file_models.setup.py.model_data.functions.[6].docstring",
          "file_models.setup.py.model_data.functions.[7].name",
          "file_models.setup.py.model_data.functions.[7].docstring",
          "file_models.setup.py.model_data.functions.[8].name",
          "file_models.setup.py.model_data.functions.[8].docstring",
          "file_models.setup.py.model_data.functions.[9].name",
          "file_models.setup.py.model_data.functions.[9].docstring",
          "file_models.setup.py.model_data.classes",
          "file_models.setup.py.model_data.variables",
          "file_models.setup.py.model_data.line_count",
          "file_models.improved_syntax_fix.py",
          "file_models.improved_syntax_fix.py.file_path",
          "file_models.improved_syntax_fix.py.file_type",
          "file_models.improved_syntax_fix.py.model_type",
          "file_models.improved_syntax_fix.py.complexity_score",
          "file_models.improved_syntax_fix.py.line_count",
          "file_models.improved_syntax_fix.py.function_count",
          "file_models.improved_syntax_fix.py.class_count",
          "file_models.improved_syntax_fix.py.import_count",
          "file_models.improved_syntax_fix.py.error_count",
          "file_models.improved_syntax_fix.py.model_data",
          "file_models.improved_syntax_fix.py.model_data.docstrings",
          "file_models.improved_syntax_fix.py.model_data.imports",
          "file_models.improved_syntax_fix.py.model_data.functions",
          "file_models.improved_syntax_fix.py.model_data.functions.[0].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[0].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[1].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[1].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[2].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[2].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[3].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[3].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[4].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[4].docstring",
          "file_models.improved_syntax_fix.py.model_data.classes",
          "file_models.improved_syntax_fix.py.model_data.variables",
          "file_models.improved_syntax_fix.py.model_data.line_count",
          "file_models.fix_all_syntax_errors.py",
          "file_models.fix_all_syntax_errors.py.file_path",
          "file_models.fix_all_syntax_errors.py.file_type",
          "file_models.fix_all_syntax_errors.py.model_type",
          "file_models.fix_all_syntax_errors.py.complexity_score",
          "file_models.fix_all_syntax_errors.py.line_count",
          "file_models.fix_all_syntax_errors.py.function_count",
          "file_models.fix_all_syntax_errors.py.class_count",
          "file_models.fix_all_syntax_errors.py.import_count",
          "file_models.fix_all_syntax_errors.py.error_count",
          "file_models.fix_all_syntax_errors.py.model_data",
          "file_models.fix_all_syntax_errors.py.model_data.docstrings",
          "file_models.fix_all_syntax_errors.py.model_data.imports",
          "file_models.fix_all_syntax_errors.py.model_data.functions",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[0].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[0].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[1].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[1].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[2].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[2].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[3].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[3].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[4].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[4].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[5].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[5].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[6].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[6].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[7].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[7].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.classes",
          "file_models.fix_all_syntax_errors.py.model_data.variables",
          "file_models.fix_all_syntax_errors.py.model_data.line_count",
          "file_models.model_consistency_analyzer.py",
          "file_models.model_consistency_analyzer.py.file_path",
          "file_models.model_consistency_analyzer.py.file_type",
          "file_models.model_consistency_analyzer.py.model_type",
          "file_models.model_consistency_analyzer.py.complexity_score",
          "file_models.model_consistency_analyzer.py.line_count",
          "file_models.model_consistency_analyzer.py.function_count",
          "file_models.model_consistency_analyzer.py.class_count",
          "file_models.model_consistency_analyzer.py.import_count",
          "file_models.model_consistency_analyzer.py.error_count",
          "file_models.model_consistency_analyzer.py.model_data",
          "file_models.model_consistency_analyzer.py.model_data.docstrings",
          "file_models.model_consistency_analyzer.py.model_data.imports",
          "file_models.model_consistency_analyzer.py.model_data.functions",
          "file_models.model_consistency_analyzer.py.model_data.functions.[0].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[0].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[1].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[1].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[2].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[2].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[3].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[3].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[4].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[4].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[5].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[5].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[6].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[6].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[7].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[7].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[8].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[8].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[9].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[9].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[10].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[10].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[11].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[11].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[12].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[12].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[13].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[13].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[14].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[14].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[15].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[15].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[16].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[16].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[17].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[17].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[18].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[18].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[19].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[19].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[20].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[20].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[21].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[21].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[22].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[22].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[23].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[23].docstring",
          "file_models.model_consistency_analyzer.py.model_data.classes",
          "file_models.model_consistency_analyzer.py.model_data.classes.[0].name",
          "file_models.model_consistency_analyzer.py.model_data.classes.[0].docstring",
          "file_models.model_consistency_analyzer.py.model_data.variables",
          "file_models.model_consistency_analyzer.py.model_data.line_count",
          "file_models.comprehensive_indentation_fix.py",
          "file_models.comprehensive_indentation_fix.py.file_path",
          "file_models.comprehensive_indentation_fix.py.file_type",
          "file_models.comprehensive_indentation_fix.py.model_type",
          "file_models.comprehensive_indentation_fix.py.complexity_score",
          "file_models.comprehensive_indentation_fix.py.line_count",
          "file_models.comprehensive_indentation_fix.py.function_count",
          "file_models.comprehensive_indentation_fix.py.class_count",
          "file_models.comprehensive_indentation_fix.py.import_count",
          "file_models.comprehensive_indentation_fix.py.error_count",
          "file_models.comprehensive_indentation_fix.py.model_data",
          "file_models.comprehensive_indentation_fix.py.model_data.docstrings",
          "file_models.comprehensive_indentation_fix.py.model_data.imports",
          "file_models.comprehensive_indentation_fix.py.model_data.functions",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[0].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[0].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[1].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[1].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[2].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[2].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[3].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[3].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[4].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[4].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[5].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[5].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[6].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[6].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.classes",
          "file_models.comprehensive_indentation_fix.py.model_data.classes.[0].name",
          "file_models.comprehensive_indentation_fix.py.model_data.classes.[0].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.variables",
          "file_models.comprehensive_indentation_fix.py.model_data.line_count",
          "file_models.fix_f_strings.py",
          "file_models.fix_f_strings.py.file_path",
          "file_models.fix_f_strings.py.file_type",
          "file_models.fix_f_strings.py.model_type",
          "file_models.fix_f_strings.py.complexity_score",
          "file_models.fix_f_strings.py.line_count",
          "file_models.fix_f_strings.py.function_count",
          "file_models.fix_f_strings.py.class_count",
          "file_models.fix_f_strings.py.import_count",
          "file_models.fix_f_strings.py.error_count",
          "file_models.fix_f_strings.py.model_data",
          "file_models.fix_f_strings.py.model_data.docstrings",
          "file_models.fix_f_strings.py.model_data.imports",
          "file_models.fix_f_strings.py.model_data.functions",
          "file_models.fix_f_strings.py.model_data.functions.[0].name",
          "file_models.fix_f_strings.py.model_data.functions.[0].docstring",
          "file_models.fix_f_strings.py.model_data.functions.[1].name",
          "file_models.fix_f_strings.py.model_data.functions.[1].docstring",
          "file_models.fix_f_strings.py.model_data.functions.[2].name",
          "file_models.fix_f_strings.py.model_data.functions.[2].docstring",
          "file_models.fix_f_strings.py.model_data.classes",
          "file_models.fix_f_strings.py.model_data.variables",
          "file_models.fix_f_strings.py.model_data.line_count",
          "file_models.focused_ast_modeler.py",
          "file_models.focused_ast_modeler.py.file_path",
          "file_models.focused_ast_modeler.py.file_type",
          "file_models.focused_ast_modeler.py.model_type",
          "file_models.focused_ast_modeler.py.complexity_score",
          "file_models.focused_ast_modeler.py.line_count",
          "file_models.focused_ast_modeler.py.function_count",
          "file_models.focused_ast_modeler.py.class_count",
          "file_models.focused_ast_modeler.py.import_count",
          "file_models.focused_ast_modeler.py.error_count",
          "file_models.focused_ast_modeler.py.model_data",
          "file_models.focused_ast_modeler.py.model_data.docstrings",
          "file_models.focused_ast_modeler.py.model_data.imports",
          "file_models.focused_ast_modeler.py.model_data.functions",
          "file_models.focused_ast_modeler.py.model_data.functions.[0].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[0].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[1].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[1].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[2].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[2].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[3].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[3].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[4].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[4].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[5].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[5].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[6].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[6].docstring",
          "file_models.focused_ast_modeler.py.model_data.classes",
          "file_models.focused_ast_modeler.py.model_data.classes.[0].name",
          "file_models.focused_ast_modeler.py.model_data.classes.[0].docstring",
          "file_models.focused_ast_modeler.py.model_data.classes.[1].name",
          "file_models.focused_ast_modeler.py.model_data.classes.[1].docstring",
          "file_models.focused_ast_modeler.py.model_data.variables",
          "file_models.focused_ast_modeler.py.model_data.line_count",
          "file_models.debug_modeler.py",
          "file_models.debug_modeler.py.file_path",
          "file_models.debug_modeler.py.file_type",
          "file_models.debug_modeler.py.model_type",
          "file_models.debug_modeler.py.complexity_score",
          "file_models.debug_modeler.py.line_count",
          "file_models.debug_modeler.py.function_count",
          "file_models.debug_modeler.py.class_count",
          "file_models.debug_modeler.py.import_count",
          "file_models.debug_modeler.py.error_count",
          "file_models.debug_modeler.py.model_data",
          "file_models.debug_modeler.py.model_data.docstrings",
          "file_models.debug_modeler.py.model_data.imports",
          "file_models.debug_modeler.py.model_data.functions",
          "file_models.debug_modeler.py.model_data.functions.[0].name",
          "file_models.debug_modeler.py.model_data.functions.[0].docstring",
          "file_models.debug_modeler.py.model_data.classes",
          "file_models.debug_modeler.py.model_data.variables",
          "file_models.debug_modeler.py.model_data.line_count",
          "file_models.model_driven_reconstructor.py",
          "file_models.model_driven_reconstructor.py.file_path",
          "file_models.model_driven_reconstructor.py.file_type",
          "file_models.model_driven_reconstructor.py.model_type",
          "file_models.model_driven_reconstructor.py.complexity_score",
          "file_models.model_driven_reconstructor.py.line_count",
          "file_models.model_driven_reconstructor.py.function_count",
          "file_models.model_driven_reconstructor.py.class_count",
          "file_models.model_driven_reconstructor.py.import_count",
          "file_models.model_driven_reconstructor.py.error_count",
          "file_models.model_driven_reconstructor.py.model_data",
          "file_models.model_driven_reconstructor.py.model_data.docstrings",
          "file_models.model_driven_reconstructor.py.model_data.imports",
          "file_models.model_driven_reconstructor.py.model_data.functions",
          "file_models.model_driven_reconstructor.py.model_data.functions.[0].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[0].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[1].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[1].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[2].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[2].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[3].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[3].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[4].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[4].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[5].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[5].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[6].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[6].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[7].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[7].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[8].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[8].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[9].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[9].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[10].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[10].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[11].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[11].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[12].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[12].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[13].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[13].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[14].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[14].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[15].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[15].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[16].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[16].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[17].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[17].docstring",
          "file_models.model_driven_reconstructor.py.model_data.classes",
          "file_models.model_driven_reconstructor.py.model_data.classes.[0].name",
          "file_models.model_driven_reconstructor.py.model_data.classes.[0].docstring",
          "file_models.model_driven_reconstructor.py.model_data.variables",
          "file_models.model_driven_reconstructor.py.model_data.line_count",
          "file_models.fix_test_indentation.py",
          "file_models.fix_test_indentation.py.file_path",
          "file_models.fix_test_indentation.py.file_type",
          "file_models.fix_test_indentation.py.model_type",
          "file_models.fix_test_indentation.py.complexity_score",
          "file_models.fix_test_indentation.py.line_count",
          "file_models.fix_test_indentation.py.function_count",
          "file_models.fix_test_indentation.py.class_count",
          "file_models.fix_test_indentation.py.import_count",
          "file_models.fix_test_indentation.py.error_count",
          "file_models.fix_test_indentation.py.model_data",
          "file_models.fix_test_indentation.py.model_data.docstrings",
          "file_models.fix_test_indentation.py.model_data.imports",
          "file_models.fix_test_indentation.py.model_data.functions",
          "file_models.fix_test_indentation.py.model_data.functions.[0].name",
          "file_models.fix_test_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_test_indentation.py.model_data.functions.[1].name",
          "file_models.fix_test_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_test_indentation.py.model_data.classes",
          "file_models.fix_test_indentation.py.model_data.variables",
          "file_models.fix_test_indentation.py.model_data.line_count",
          "file_models.project_model.py",
          "file_models.project_model.py.file_path",
          "file_models.project_model.py.file_type",
          "file_models.project_model.py.model_type",
          "file_models.project_model.py.complexity_score",
          "file_models.project_model.py.line_count",
          "file_models.project_model.py.function_count",
          "file_models.project_model.py.class_count",
          "file_models.project_model.py.import_count",
          "file_models.project_model.py.error_count",
          "file_models.project_model.py.model_data",
          "file_models.project_model.py.model_data.docstrings",
          "file_models.project_model.py.model_data.imports",
          "file_models.project_model.py.model_data.functions",
          "file_models.project_model.py.model_data.functions.[0].name",
          "file_models.project_model.py.model_data.functions.[0].docstring",
          "file_models.project_model.py.model_data.functions.[1].name",
          "file_models.project_model.py.model_data.functions.[1].docstring",
          "file_models.project_model.py.model_data.functions.[2].name",
          "file_models.project_model.py.model_data.functions.[2].docstring",
          "file_models.project_model.py.model_data.functions.[3].name",
          "file_models.project_model.py.model_data.functions.[3].docstring",
          "file_models.project_model.py.model_data.functions.[4].name",
          "file_models.project_model.py.model_data.functions.[4].docstring",
          "file_models.project_model.py.model_data.functions.[5].name",
          "file_models.project_model.py.model_data.functions.[5].docstring",
          "file_models.project_model.py.model_data.functions.[6].name",
          "file_models.project_model.py.model_data.functions.[6].docstring",
          "file_models.project_model.py.model_data.classes",
          "file_models.project_model.py.model_data.classes.[0].name",
          "file_models.project_model.py.model_data.classes.[0].docstring",
          "file_models.project_model.py.model_data.classes.[1].name",
          "file_models.project_model.py.model_data.classes.[1].docstring",
          "file_models.project_model.py.model_data.classes.[2].name",
          "file_models.project_model.py.model_data.classes.[2].docstring",
          "file_models.project_model.py.model_data.variables",
          "file_models.project_model.py.model_data.line_count",
          "file_models.test_functional_equivalence.py",
          "file_models.test_functional_equivalence.py.file_path",
          "file_models.test_functional_equivalence.py.file_type",
          "file_models.test_functional_equivalence.py.model_type",
          "file_models.test_functional_equivalence.py.complexity_score",
          "file_models.test_functional_equivalence.py.line_count",
          "file_models.test_functional_equivalence.py.function_count",
          "file_models.test_functional_equivalence.py.class_count",
          "file_models.test_functional_equivalence.py.import_count",
          "file_models.test_functional_equivalence.py.error_count",
          "file_models.test_functional_equivalence.py.model_data",
          "file_models.test_functional_equivalence.py.model_data.docstrings",
          "file_models.test_functional_equivalence.py.model_data.imports",
          "file_models.test_functional_equivalence.py.model_data.functions",
          "file_models.test_functional_equivalence.py.model_data.functions.[0].name",
          "file_models.test_functional_equivalence.py.model_data.functions.[0].docstring",
          "file_models.test_functional_equivalence.py.model_data.functions.[1].name",
          "file_models.test_functional_equivalence.py.model_data.functions.[1].docstring",
          "file_models.test_functional_equivalence.py.model_data.functions.[2].name",
          "file_models.test_functional_equivalence.py.model_data.functions.[2].docstring",
          "file_models.test_functional_equivalence.py.model_data.classes",
          "file_models.test_functional_equivalence.py.model_data.variables",
          "file_models.test_functional_equivalence.py.model_data.line_count",
          "file_models.data/cost_analysis.py",
          "file_models.data/cost_analysis.py.file_path",
          "file_models.data/cost_analysis.py.file_type",
          "file_models.data/cost_analysis.py.model_type",
          "file_models.data/cost_analysis.py.complexity_score",
          "file_models.data/cost_analysis.py.line_count",
          "file_models.data/cost_analysis.py.function_count",
          "file_models.data/cost_analysis.py.class_count",
          "file_models.data/cost_analysis.py.import_count",
          "file_models.data/cost_analysis.py.error_count",
          "file_models.data/cost_analysis.py.model_data",
          "file_models.data/cost_analysis.py.model_data.docstrings",
          "file_models.data/cost_analysis.py.model_data.imports",
          "file_models.data/cost_analysis.py.model_data.functions",
          "file_models.data/cost_analysis.py.model_data.functions.[0].name",
          "file_models.data/cost_analysis.py.model_data.functions.[0].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[1].name",
          "file_models.data/cost_analysis.py.model_data.functions.[1].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[2].name",
          "file_models.data/cost_analysis.py.model_data.functions.[2].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[3].name",
          "file_models.data/cost_analysis.py.model_data.functions.[3].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[4].name",
          "file_models.data/cost_analysis.py.model_data.functions.[4].docstring",
          "file_models.data/cost_analysis.py.model_data.classes",
          "file_models.data/cost_analysis.py.model_data.variables",
          "file_models.data/cost_analysis.py.model_data.line_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.file_path",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.file_type",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_type",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.complexity_score",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.line_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.function_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.class_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.import_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.error_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.docstrings",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.imports",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[0].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[0].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[1].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[1].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[2].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[2].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[3].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[3].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[4].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[4].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[5].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[5].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[6].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[6].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[7].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[7].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[0].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[0].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[1].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[1].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[2].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[2].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[3].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[3].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[4].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[4].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[5].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[5].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[6].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[6].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[7].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[7].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[8].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[8].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[9].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[9].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[10].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[10].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.variables",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.line_count",
          "file_models.healthcare-cdc/__init__.py",
          "file_models.healthcare-cdc/__init__.py.file_path",
          "file_models.healthcare-cdc/__init__.py.file_type",
          "file_models.healthcare-cdc/__init__.py.model_type",
          "file_models.healthcare-cdc/__init__.py.complexity_score",
          "file_models.healthcare-cdc/__init__.py.line_count",
          "file_models.healthcare-cdc/__init__.py.function_count",
          "file_models.healthcare-cdc/__init__.py.class_count",
          "file_models.healthcare-cdc/__init__.py.import_count",
          "file_models.healthcare-cdc/__init__.py.error_count",
          "file_models.healthcare-cdc/__init__.py.model_data",
          "file_models.healthcare-cdc/__init__.py.model_data.docstrings",
          "file_models.healthcare-cdc/__init__.py.model_data.imports",
          "file_models.healthcare-cdc/__init__.py.model_data.functions",
          "file_models.healthcare-cdc/__init__.py.model_data.classes",
          "file_models.healthcare-cdc/__init__.py.model_data.variables",
          "file_models.healthcare-cdc/__init__.py.model_data.line_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.file_path",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.file_type",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_type",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.complexity_score",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.line_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.function_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.class_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.import_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.error_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.docstrings",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.imports",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[0].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[0].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[1].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[1].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[2].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[2].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[3].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[3].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[4].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[4].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[5].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[5].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[6].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[6].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[7].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[7].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[8].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[8].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[9].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[9].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[10].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[10].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[11].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[11].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[0].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[0].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[1].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[1].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[2].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[2].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[3].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[3].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.variables",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.line_count",
          "file_models.tests/test_rule_compliance.py",
          "file_models.tests/test_rule_compliance.py.file_path",
          "file_models.tests/test_rule_compliance.py.file_type",
          "file_models.tests/test_rule_compliance.py.model_type",
          "file_models.tests/test_rule_compliance.py.complexity_score",
          "file_models.tests/test_rule_compliance.py.line_count",
          "file_models.tests/test_rule_compliance.py.function_count",
          "file_models.tests/test_rule_compliance.py.class_count",
          "file_models.tests/test_rule_compliance.py.import_count",
          "file_models.tests/test_rule_compliance.py.error_count",
          "file_models.tests/test_rule_compliance.py.model_data",
          "file_models.tests/test_rule_compliance.py.model_data.docstrings",
          "file_models.tests/test_rule_compliance.py.model_data.imports",
          "file_models.tests/test_rule_compliance.py.model_data.functions",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[0].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[0].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[1].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[1].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[2].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[2].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[3].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[3].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[4].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[4].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[5].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[5].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[6].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[6].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[7].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[7].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[8].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[8].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[9].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[9].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.classes",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[0].name",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[0].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[1].name",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[1].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[2].name",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[2].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.variables",
          "file_models.tests/test_rule_compliance.py.model_data.line_count",
          "file_models.tests/test_file_organization.py",
          "file_models.tests/test_file_organization.py.file_path",
          "file_models.tests/test_file_organization.py.file_type",
          "file_models.tests/test_file_organization.py.model_type",
          "file_models.tests/test_file_organization.py.complexity_score",
          "file_models.tests/test_file_organization.py.line_count",
          "file_models.tests/test_file_organization.py.function_count",
          "file_models.tests/test_file_organization.py.class_count",
          "file_models.tests/test_file_organization.py.import_count",
          "file_models.tests/test_file_organization.py.error_count",
          "file_models.tests/test_file_organization.py.model_data",
          "file_models.tests/test_file_organization.py.model_data.error",
          "file_models.tests/test_cline_plan_blind_spots.py",
          "file_models.tests/test_cline_plan_blind_spots.py.file_path",
          "file_models.tests/test_cline_plan_blind_spots.py.file_type",
          "file_models.tests/test_cline_plan_blind_spots.py.model_type",
          "file_models.tests/test_cline_plan_blind_spots.py.complexity_score",
          "file_models.tests/test_cline_plan_blind_spots.py.line_count",
          "file_models.tests/test_cline_plan_blind_spots.py.function_count",
          "file_models.tests/test_cline_plan_blind_spots.py.class_count",
          "file_models.tests/test_cline_plan_blind_spots.py.import_count",
          "file_models.tests/test_cline_plan_blind_spots.py.error_count",
          "file_models.tests/test_cline_plan_blind_spots.py.model_data",
          "file_models.tests/test_cline_plan_blind_spots.py.model_data.error",
          "file_models.tests/test_data_fresh_cline_plan.py",
          "file_models.tests/test_data_fresh_cline_plan.py.file_path",
          "file_models.tests/test_data_fresh_cline_plan.py.file_type",
          "file_models.tests/test_data_fresh_cline_plan.py.model_type",
          "file_models.tests/test_data_fresh_cline_plan.py.complexity_score",
          "file_models.tests/test_data_fresh_cline_plan.py.line_count",
          "file_models.tests/test_data_fresh_cline_plan.py.function_count",
          "file_models.tests/test_data_fresh_cline_plan.py.class_count",
          "file_models.tests/test_data_fresh_cline_plan.py.import_count",
          "file_models.tests/test_data_fresh_cline_plan.py.error_count",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.docstrings",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.imports",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.functions",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.classes",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.variables",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.line_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.file_path",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.file_type",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.model_type",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.complexity_score",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.line_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.function_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.class_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.import_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.error_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.model_data",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.model_data.error",
          "file_models.tests/test_code_quality_comprehensive.py",
          "file_models.tests/test_code_quality_comprehensive.py.file_path",
          "file_models.tests/test_code_quality_comprehensive.py.file_type",
          "file_models.tests/test_code_quality_comprehensive.py.model_type",
          "file_models.tests/test_code_quality_comprehensive.py.complexity_score",
          "file_models.tests/test_code_quality_comprehensive.py.line_count",
          "file_models.tests/test_code_quality_comprehensive.py.function_count",
          "file_models.tests/test_code_quality_comprehensive.py.class_count",
          "file_models.tests/test_code_quality_comprehensive.py.import_count",
          "file_models.tests/test_code_quality_comprehensive.py.error_count",
          "file_models.tests/test_code_quality_comprehensive.py.model_data",
          "file_models.tests/test_code_quality_comprehensive.py.model_data.error",
          "file_models.tests/validate_healthcare_cdc_simple.py",
          "file_models.tests/validate_healthcare_cdc_simple.py.file_path",
          "file_models.tests/validate_healthcare_cdc_simple.py.file_type",
          "file_models.tests/validate_healthcare_cdc_simple.py.model_type",
          "file_models.tests/validate_healthcare_cdc_simple.py.complexity_score",
          "file_models.tests/validate_healthcare_cdc_simple.py.line_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.function_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.class_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.import_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.error_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.model_data",
          "file_models.tests/validate_healthcare_cdc_simple.py.model_data.error",
          "file_models.tests/test_mdc_generator.py",
          "file_models.tests/test_mdc_generator.py.file_path",
          "file_models.tests/test_mdc_generator.py.file_type",
          "file_models.tests/test_mdc_generator.py.model_type",
          "file_models.tests/test_mdc_generator.py.complexity_score",
          "file_models.tests/test_mdc_generator.py.line_count",
          "file_models.tests/test_mdc_generator.py.function_count",
          "file_models.tests/test_mdc_generator.py.class_count",
          "file_models.tests/test_mdc_generator.py.import_count",
          "file_models.tests/test_mdc_generator.py.error_count",
          "file_models.tests/test_mdc_generator.py.model_data",
          "file_models.tests/test_mdc_generator.py.model_data.error",
          "file_models.tests/test_file_existence.py",
          "file_models.tests/test_file_existence.py.file_path",
          "file_models.tests/test_file_existence.py.file_type",
          "file_models.tests/test_file_existence.py.model_type",
          "file_models.tests/test_file_existence.py.complexity_score",
          "file_models.tests/test_file_existence.py.line_count",
          "file_models.tests/test_file_existence.py.function_count",
          "file_models.tests/test_file_existence.py.class_count",
          "file_models.tests/test_file_existence.py.import_count",
          "file_models.tests/test_file_existence.py.error_count",
          "file_models.tests/test_file_existence.py.model_data",
          "file_models.tests/test_file_existence.py.model_data.error",
          "file_models.tests/test_security_enhancements.py",
          "file_models.tests/test_security_enhancements.py.file_path",
          "file_models.tests/test_security_enhancements.py.file_type",
          "file_models.tests/test_security_enhancements.py.model_type",
          "file_models.tests/test_security_enhancements.py.complexity_score",
          "file_models.tests/test_security_enhancements.py.line_count",
          "file_models.tests/test_security_enhancements.py.function_count",
          "file_models.tests/test_security_enhancements.py.class_count",
          "file_models.tests/test_security_enhancements.py.import_count",
          "file_models.tests/test_security_enhancements.py.error_count",
          "file_models.tests/test_security_enhancements.py.model_data",
          "file_models.tests/test_security_enhancements.py.model_data.error",
          "file_models.tests/test_basic_validation_simple.py",
          "file_models.tests/test_basic_validation_simple.py.file_path",
          "file_models.tests/test_basic_validation_simple.py.file_type",
          "file_models.tests/test_basic_validation_simple.py.model_type",
          "file_models.tests/test_basic_validation_simple.py.complexity_score",
          "file_models.tests/test_basic_validation_simple.py.line_count",
          "file_models.tests/test_basic_validation_simple.py.function_count",
          "file_models.tests/test_basic_validation_simple.py.class_count",
          "file_models.tests/test_basic_validation_simple.py.import_count",
          "file_models.tests/test_basic_validation_simple.py.error_count",
          "file_models.tests/test_basic_validation_simple.py.model_data",
          "file_models.tests/test_basic_validation_simple.py.model_data.error",
          "file_models.tests/test_code_quality_system.py",
          "file_models.tests/test_code_quality_system.py.file_path",
          "file_models.tests/test_code_quality_system.py.file_type",
          "file_models.tests/test_code_quality_system.py.model_type",
          "file_models.tests/test_code_quality_system.py.complexity_score",
          "file_models.tests/test_code_quality_system.py.line_count",
          "file_models.tests/test_code_quality_system.py.function_count",
          "file_models.tests/test_code_quality_system.py.class_count",
          "file_models.tests/test_code_quality_system.py.import_count",
          "file_models.tests/test_code_quality_system.py.error_count",
          "file_models.tests/test_code_quality_system.py.model_data",
          "file_models.tests/test_code_quality_system.py.model_data.error",
          "file_models.tests/test_basic_validation_pytest.py",
          "file_models.tests/test_basic_validation_pytest.py.file_path",
          "file_models.tests/test_basic_validation_pytest.py.file_type",
          "file_models.tests/test_basic_validation_pytest.py.model_type",
          "file_models.tests/test_basic_validation_pytest.py.complexity_score",
          "file_models.tests/test_basic_validation_pytest.py.line_count",
          "file_models.tests/test_basic_validation_pytest.py.function_count",
          "file_models.tests/test_basic_validation_pytest.py.class_count",
          "file_models.tests/test_basic_validation_pytest.py.import_count",
          "file_models.tests/test_basic_validation_pytest.py.error_count",
          "file_models.tests/test_basic_validation_pytest.py.model_data",
          "file_models.tests/test_basic_validation_pytest.py.model_data.error",
          "file_models.tests/test_uv_package_management.py",
          "file_models.tests/test_uv_package_management.py.file_path",
          "file_models.tests/test_uv_package_management.py.file_type",
          "file_models.tests/test_uv_package_management.py.model_type",
          "file_models.tests/test_uv_package_management.py.complexity_score",
          "file_models.tests/test_uv_package_management.py.line_count",
          "file_models.tests/test_uv_package_management.py.function_count",
          "file_models.tests/test_uv_package_management.py.class_count",
          "file_models.tests/test_uv_package_management.py.import_count",
          "file_models.tests/test_uv_package_management.py.error_count",
          "file_models.tests/test_uv_package_management.py.model_data",
          "file_models.tests/test_uv_package_management.py.model_data.error",
          "file_models.tests/test_type_safety.py",
          "file_models.tests/test_type_safety.py.file_path",
          "file_models.tests/test_type_safety.py.file_type",
          "file_models.tests/test_type_safety.py.model_type",
          "file_models.tests/test_type_safety.py.complexity_score",
          "file_models.tests/test_type_safety.py.line_count",
          "file_models.tests/test_type_safety.py.function_count",
          "file_models.tests/test_type_safety.py.class_count",
          "file_models.tests/test_type_safety.py.import_count",
          "file_models.tests/test_type_safety.py.error_count",
          "file_models.tests/test_type_safety.py.model_data",
          "file_models.tests/test_type_safety.py.model_data.error",
          "file_models.tests/test_makefile_integration.py",
          "file_models.tests/test_makefile_integration.py.file_path",
          "file_models.tests/test_makefile_integration.py.file_type",
          "file_models.tests/test_makefile_integration.py.model_type",
          "file_models.tests/test_makefile_integration.py.complexity_score",
          "file_models.tests/test_makefile_integration.py.line_count",
          "file_models.tests/test_makefile_integration.py.function_count",
          "file_models.tests/test_makefile_integration.py.class_count",
          "file_models.tests/test_makefile_integration.py.import_count",
          "file_models.tests/test_makefile_integration.py.error_count",
          "file_models.tests/test_makefile_integration.py.model_data",
          "file_models.tests/test_makefile_integration.py.model_data.error",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.file_path",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.file_type",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.model_type",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.complexity_score",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.line_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.function_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.class_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.import_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.error_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.model_data",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.model_data.error",
          "file_models.tests/test_rule_compliance_enforcement.py",
          "file_models.tests/test_rule_compliance_enforcement.py.file_path",
          "file_models.tests/test_rule_compliance_enforcement.py.file_type",
          "file_models.tests/test_rule_compliance_enforcement.py.model_type",
          "file_models.tests/test_rule_compliance_enforcement.py.complexity_score",
          "file_models.tests/test_rule_compliance_enforcement.py.line_count",
          "file_models.tests/test_rule_compliance_enforcement.py.function_count",
          "file_models.tests/test_rule_compliance_enforcement.py.class_count",
          "file_models.tests/test_rule_compliance_enforcement.py.import_count",
          "file_models.tests/test_rule_compliance_enforcement.py.error_count",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.docstrings",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.imports",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[0].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[0].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[1].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[1].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[2].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[2].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[3].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[3].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[4].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[4].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[5].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[5].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[6].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[6].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[7].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[7].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[8].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[8].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[9].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[9].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[10].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[10].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[11].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[11].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[12].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[12].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[13].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[13].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[14].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[14].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[0].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[0].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[1].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[1].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.variables",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.line_count",
          "file_models.tests/test_code_quality.py",
          "file_models.tests/test_code_quality.py.file_path",
          "file_models.tests/test_code_quality.py.file_type",
          "file_models.tests/test_code_quality.py.model_type",
          "file_models.tests/test_code_quality.py.complexity_score",
          "file_models.tests/test_code_quality.py.line_count",
          "file_models.tests/test_code_quality.py.function_count",
          "file_models.tests/test_code_quality.py.class_count",
          "file_models.tests/test_code_quality.py.import_count",
          "file_models.tests/test_code_quality.py.error_count",
          "file_models.tests/test_code_quality.py.model_data",
          "file_models.tests/test_code_quality.py.model_data.error",
          "file_models.tests/test_core_concepts.py",
          "file_models.tests/test_core_concepts.py.file_path",
          "file_models.tests/test_core_concepts.py.file_type",
          "file_models.tests/test_core_concepts.py.model_type",
          "file_models.tests/test_core_concepts.py.complexity_score",
          "file_models.tests/test_core_concepts.py.line_count",
          "file_models.tests/test_core_concepts.py.function_count",
          "file_models.tests/test_core_concepts.py.class_count",
          "file_models.tests/test_core_concepts.py.import_count",
          "file_models.tests/test_core_concepts.py.error_count",
          "file_models.tests/test_core_concepts.py.model_data",
          "file_models.tests/test_core_concepts.py.model_data.error",
          "file_models.tests/test_healthcare_cdc_requirements.py",
          "file_models.tests/test_healthcare_cdc_requirements.py.file_path",
          "file_models.tests/test_healthcare_cdc_requirements.py.file_type",
          "file_models.tests/test_healthcare_cdc_requirements.py.model_type",
          "file_models.tests/test_healthcare_cdc_requirements.py.complexity_score",
          "file_models.tests/test_healthcare_cdc_requirements.py.line_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.function_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.class_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.import_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.error_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.model_data",
          "file_models.tests/test_healthcare_cdc_requirements.py.model_data.error",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.file_path",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.file_type",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.model_type",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.complexity_score",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.line_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.function_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.class_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.import_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.error_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.model_data",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.model_data.error",
          "file_models.tests/test_basic_validation.py",
          "file_models.tests/test_basic_validation.py.file_path",
          "file_models.tests/test_basic_validation.py.file_type",
          "file_models.tests/test_basic_validation.py.model_type",
          "file_models.tests/test_basic_validation.py.complexity_score",
          "file_models.tests/test_basic_validation.py.line_count",
          "file_models.tests/test_basic_validation.py.function_count",
          "file_models.tests/test_basic_validation.py.class_count",
          "file_models.tests/test_basic_validation.py.import_count",
          "file_models.tests/test_basic_validation.py.error_count",
          "file_models.tests/test_basic_validation.py.model_data",
          "file_models.tests/test_basic_validation.py.model_data.error",
          "file_models.src/__init__.py",
          "file_models.src/__init__.py.file_path",
          "file_models.src/__init__.py.file_type",
          "file_models.src/__init__.py.model_type",
          "file_models.src/__init__.py.complexity_score",
          "file_models.src/__init__.py.line_count",
          "file_models.src/__init__.py.function_count",
          "file_models.src/__init__.py.class_count",
          "file_models.src/__init__.py.import_count",
          "file_models.src/__init__.py.error_count",
          "file_models.src/__init__.py.model_data",
          "file_models.src/__init__.py.model_data.docstrings",
          "file_models.src/__init__.py.model_data.imports",
          "file_models.src/__init__.py.model_data.functions",
          "file_models.src/__init__.py.model_data.classes",
          "file_models.src/__init__.py.model_data.variables",
          "file_models.src/__init__.py.model_data.line_count",
          "file_models.scripts/mdc-linter.py",
          "file_models.scripts/mdc-linter.py.file_path",
          "file_models.scripts/mdc-linter.py.file_type",
          "file_models.scripts/mdc-linter.py.model_type",
          "file_models.scripts/mdc-linter.py.complexity_score",
          "file_models.scripts/mdc-linter.py.line_count",
          "file_models.scripts/mdc-linter.py.function_count",
          "file_models.scripts/mdc-linter.py.class_count",
          "file_models.scripts/mdc-linter.py.import_count",
          "file_models.scripts/mdc-linter.py.error_count",
          "file_models.scripts/mdc-linter.py.model_data",
          "file_models.scripts/mdc-linter.py.model_data.docstrings",
          "file_models.scripts/mdc-linter.py.model_data.imports",
          "file_models.scripts/mdc-linter.py.model_data.functions",
          "file_models.scripts/mdc-linter.py.model_data.functions.[0].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[0].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[1].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[1].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[2].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[2].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[3].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[3].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[4].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[4].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[5].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[5].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[6].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[6].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[7].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[7].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[8].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[8].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[9].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[9].docstring",
          "file_models.scripts/mdc-linter.py.model_data.classes",
          "file_models.scripts/mdc-linter.py.model_data.classes.[0].name",
          "file_models.scripts/mdc-linter.py.model_data.classes.[0].docstring",
          "file_models.scripts/mdc-linter.py.model_data.variables",
          "file_models.scripts/mdc-linter.py.model_data.line_count",
          "file_models.scripts/fix_mypy_issues.py",
          "file_models.scripts/fix_mypy_issues.py.file_path",
          "file_models.scripts/fix_mypy_issues.py.file_type",
          "file_models.scripts/fix_mypy_issues.py.model_type",
          "file_models.scripts/fix_mypy_issues.py.complexity_score",
          "file_models.scripts/fix_mypy_issues.py.line_count",
          "file_models.scripts/fix_mypy_issues.py.function_count",
          "file_models.scripts/fix_mypy_issues.py.class_count",
          "file_models.scripts/fix_mypy_issues.py.import_count",
          "file_models.scripts/fix_mypy_issues.py.error_count",
          "file_models.scripts/fix_mypy_issues.py.model_data",
          "file_models.scripts/fix_mypy_issues.py.model_data.docstrings",
          "file_models.scripts/fix_mypy_issues.py.model_data.imports",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[0].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[0].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[1].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[1].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[2].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[2].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[3].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[3].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[4].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[4].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.classes",
          "file_models.scripts/fix_mypy_issues.py.model_data.variables",
          "file_models.scripts/fix_mypy_issues.py.model_data.line_count",
          "file_models.scripts/regenerate_mdc_files.py",
          "file_models.scripts/regenerate_mdc_files.py.file_path",
          "file_models.scripts/regenerate_mdc_files.py.file_type",
          "file_models.scripts/regenerate_mdc_files.py.model_type",
          "file_models.scripts/regenerate_mdc_files.py.complexity_score",
          "file_models.scripts/regenerate_mdc_files.py.line_count",
          "file_models.scripts/regenerate_mdc_files.py.function_count",
          "file_models.scripts/regenerate_mdc_files.py.class_count",
          "file_models.scripts/regenerate_mdc_files.py.import_count",
          "file_models.scripts/regenerate_mdc_files.py.error_count",
          "file_models.scripts/regenerate_mdc_files.py.model_data",
          "file_models.scripts/regenerate_mdc_files.py.model_data.docstrings",
          "file_models.scripts/regenerate_mdc_files.py.model_data.imports",
          "file_models.scripts/regenerate_mdc_files.py.model_data.functions",
          "file_models.scripts/regenerate_mdc_files.py.model_data.functions.[0].name",
          "file_models.scripts/regenerate_mdc_files.py.model_data.functions.[0].docstring",
          "file_models.scripts/regenerate_mdc_files.py.model_data.classes",
          "file_models.scripts/regenerate_mdc_files.py.model_data.variables",
          "file_models.scripts/regenerate_mdc_files.py.model_data.line_count",
          "file_models.scripts/fix_code_quality.py",
          "file_models.scripts/fix_code_quality.py.file_path",
          "file_models.scripts/fix_code_quality.py.file_type",
          "file_models.scripts/fix_code_quality.py.model_type",
          "file_models.scripts/fix_code_quality.py.complexity_score",
          "file_models.scripts/fix_code_quality.py.line_count",
          "file_models.scripts/fix_code_quality.py.function_count",
          "file_models.scripts/fix_code_quality.py.class_count",
          "file_models.scripts/fix_code_quality.py.import_count",
          "file_models.scripts/fix_code_quality.py.error_count",
          "file_models.scripts/fix_code_quality.py.model_data",
          "file_models.scripts/fix_code_quality.py.model_data.docstrings",
          "file_models.scripts/fix_code_quality.py.model_data.imports",
          "file_models.scripts/fix_code_quality.py.model_data.functions",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[0].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[0].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[1].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[1].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[2].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[2].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[3].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[3].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[4].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[4].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.classes",
          "file_models.scripts/fix_code_quality.py.model_data.variables",
          "file_models.scripts/fix_code_quality.py.model_data.line_count",
          "file_models..cursor/plugins/rule-compliance-checker.py",
          "file_models..cursor/plugins/rule-compliance-checker.py.file_path",
          "file_models..cursor/plugins/rule-compliance-checker.py.file_type",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_type",
          "file_models..cursor/plugins/rule-compliance-checker.py.complexity_score",
          "file_models..cursor/plugins/rule-compliance-checker.py.line_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.function_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.class_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.import_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.error_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.docstrings",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.imports",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[0].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[0].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[1].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[1].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[2].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[2].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[3].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[3].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[4].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[4].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[5].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[5].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[6].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[6].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.classes",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.classes.[0].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.classes.[0].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.variables",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.line_count",
          "file_models.src/code_quality_system/quality_model.py",
          "file_models.src/code_quality_system/quality_model.py.file_path",
          "file_models.src/code_quality_system/quality_model.py.file_type",
          "file_models.src/code_quality_system/quality_model.py.model_type",
          "file_models.src/code_quality_system/quality_model.py.complexity_score",
          "file_models.src/code_quality_system/quality_model.py.line_count",
          "file_models.src/code_quality_system/quality_model.py.function_count",
          "file_models.src/code_quality_system/quality_model.py.class_count",
          "file_models.src/code_quality_system/quality_model.py.import_count",
          "file_models.src/code_quality_system/quality_model.py.error_count",
          "file_models.src/code_quality_system/quality_model.py.model_data",
          "file_models.src/code_quality_system/quality_model.py.model_data.docstrings",
          "file_models.src/code_quality_system/quality_model.py.model_data.imports",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[0].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[0].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[1].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[1].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[2].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[2].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[3].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[3].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[4].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[4].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[5].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[5].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[6].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[6].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[7].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[7].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[8].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[8].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[9].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[9].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[10].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[10].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[11].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[11].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[12].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[12].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[13].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[13].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[14].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[14].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[0].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[0].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[1].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[1].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.variables",
          "file_models.src/code_quality_system/quality_model.py.model_data.line_count",
          "file_models.src/security_first/https_enforcement.py",
          "file_models.src/security_first/https_enforcement.py.file_path",
          "file_models.src/security_first/https_enforcement.py.file_type",
          "file_models.src/security_first/https_enforcement.py.model_type",
          "file_models.src/security_first/https_enforcement.py.complexity_score",
          "file_models.src/security_first/https_enforcement.py.line_count",
          "file_models.src/security_first/https_enforcement.py.function_count",
          "file_models.src/security_first/https_enforcement.py.class_count",
          "file_models.src/security_first/https_enforcement.py.import_count",
          "file_models.src/security_first/https_enforcement.py.error_count",
          "file_models.src/security_first/https_enforcement.py.model_data",
          "file_models.src/security_first/https_enforcement.py.model_data.docstrings",
          "file_models.src/security_first/https_enforcement.py.model_data.imports",
          "file_models.src/security_first/https_enforcement.py.model_data.functions",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[0].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[0].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[1].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[1].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[2].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[2].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[3].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[3].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[4].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[4].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[5].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[5].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[6].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[6].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[7].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[7].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[8].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[8].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[9].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[9].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[10].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[10].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[11].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[11].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[12].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[12].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[13].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[13].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[14].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[14].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[15].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[15].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[0].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[0].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[1].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[1].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[2].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[2].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[3].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[3].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.variables",
          "file_models.src/security_first/https_enforcement.py.model_data.line_count",
          "file_models.src/security_first/test_https_enforcement.py",
          "file_models.src/security_first/test_https_enforcement.py.file_path",
          "file_models.src/security_first/test_https_enforcement.py.file_type",
          "file_models.src/security_first/test_https_enforcement.py.model_type",
          "file_models.src/security_first/test_https_enforcement.py.complexity_score",
          "file_models.src/security_first/test_https_enforcement.py.line_count",
          "file_models.src/security_first/test_https_enforcement.py.function_count",
          "file_models.src/security_first/test_https_enforcement.py.class_count",
          "file_models.src/security_first/test_https_enforcement.py.import_count",
          "file_models.src/security_first/test_https_enforcement.py.error_count",
          "file_models.src/security_first/test_https_enforcement.py.model_data",
          "file_models.src/security_first/test_https_enforcement.py.model_data.docstrings",
          "file_models.src/security_first/test_https_enforcement.py.model_data.imports",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[0].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[0].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[1].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[1].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[2].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[2].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[3].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[3].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[4].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[4].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[5].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[5].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[6].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[6].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[7].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[7].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[8].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[8].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[9].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[9].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[10].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[10].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[11].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[11].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[12].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[12].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[13].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[13].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[14].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[14].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[15].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[15].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[16].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[16].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[17].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[17].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[18].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[18].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[19].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[19].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[20].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[20].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[21].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[21].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[0].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[0].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[1].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[1].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[2].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[2].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[3].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[3].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[4].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[4].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.variables",
          "file_models.src/security_first/test_https_enforcement.py.model_data.line_count",
          "file_models.src/security_first/rate_limiting.py",
          "file_models.src/security_first/rate_limiting.py.file_path",
          "file_models.src/security_first/rate_limiting.py.file_type",
          "file_models.src/security_first/rate_limiting.py.model_type",
          "file_models.src/security_first/rate_limiting.py.complexity_score",
          "file_models.src/security_first/rate_limiting.py.line_count",
          "file_models.src/security_first/rate_limiting.py.function_count",
          "file_models.src/security_first/rate_limiting.py.class_count",
          "file_models.src/security_first/rate_limiting.py.import_count",
          "file_models.src/security_first/rate_limiting.py.error_count",
          "file_models.src/security_first/rate_limiting.py.model_data",
          "file_models.src/security_first/rate_limiting.py.model_data.error",
          "file_models.src/security_first/test_streamlit_security_first.py",
          "file_models.src/security_first/test_streamlit_security_first.py.file_path",
          "file_models.src/security_first/test_streamlit_security_first.py.file_type",
          "file_models.src/security_first/test_streamlit_security_first.py.model_type",
          "file_models.src/security_first/test_streamlit_security_first.py.complexity_score",
          "file_models.src/security_first/test_streamlit_security_first.py.line_count",
          "file_models.src/security_first/test_streamlit_security_first.py.function_count",
          "file_models.src/security_first/test_streamlit_security_first.py.class_count",
          "file_models.src/security_first/test_streamlit_security_first.py.import_count",
          "file_models.src/security_first/test_streamlit_security_first.py.error_count",
          "file_models.src/security_first/test_streamlit_security_first.py.model_data",
          "file_models.src/security_first/test_streamlit_security_first.py.model_data.error",
          "file_models.src/security_first/test_security_model.py",
          "file_models.src/security_first/test_security_model.py.file_path",
          "file_models.src/security_first/test_security_model.py.file_type",
          "file_models.src/security_first/test_security_model.py.model_type",
          "file_models.src/security_first/test_security_model.py.complexity_score",
          "file_models.src/security_first/test_security_model.py.line_count",
          "file_models.src/security_first/test_security_model.py.function_count",
          "file_models.src/security_first/test_security_model.py.class_count",
          "file_models.src/security_first/test_security_model.py.import_count",
          "file_models.src/security_first/test_security_model.py.error_count",
          "file_models.src/security_first/test_security_model.py.model_data",
          "file_models.src/security_first/test_security_model.py.model_data.error",
          "file_models.src/security_first/__init__.py",
          "file_models.src/security_first/__init__.py.file_path",
          "file_models.src/security_first/__init__.py.file_type",
          "file_models.src/security_first/__init__.py.model_type",
          "file_models.src/security_first/__init__.py.complexity_score",
          "file_models.src/security_first/__init__.py.line_count",
          "file_models.src/security_first/__init__.py.function_count",
          "file_models.src/security_first/__init__.py.class_count",
          "file_models.src/security_first/__init__.py.import_count",
          "file_models.src/security_first/__init__.py.error_count",
          "file_models.src/security_first/__init__.py.model_data",
          "file_models.src/security_first/__init__.py.model_data.docstrings",
          "file_models.src/security_first/__init__.py.model_data.imports",
          "file_models.src/security_first/__init__.py.model_data.functions",
          "file_models.src/security_first/__init__.py.model_data.classes",
          "file_models.src/security_first/__init__.py.model_data.variables",
          "file_models.src/security_first/__init__.py.model_data.line_count",
          "file_models.src/mdc_generator/mdc_model.py",
          "file_models.src/mdc_generator/mdc_model.py.file_path",
          "file_models.src/mdc_generator/mdc_model.py.file_type",
          "file_models.src/mdc_generator/mdc_model.py.model_type",
          "file_models.src/mdc_generator/mdc_model.py.complexity_score",
          "file_models.src/mdc_generator/mdc_model.py.line_count",
          "file_models.src/mdc_generator/mdc_model.py.function_count",
          "file_models.src/mdc_generator/mdc_model.py.class_count",
          "file_models.src/mdc_generator/mdc_model.py.import_count",
          "file_models.src/mdc_generator/mdc_model.py.error_count",
          "file_models.src/mdc_generator/mdc_model.py.model_data",
          "file_models.src/mdc_generator/mdc_model.py.model_data.docstrings",
          "file_models.src/mdc_generator/mdc_model.py.model_data.imports",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[0].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[0].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[1].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[1].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[2].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[2].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[3].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[3].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[4].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[4].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[5].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[5].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[6].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[6].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[7].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[7].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[8].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[8].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[9].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[9].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[10].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[10].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[0].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[0].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[1].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[1].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[2].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[2].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.variables",
          "file_models.src/mdc_generator/mdc_model.py.model_data.line_count",
          "file_models.src/mdc_generator/__init__.py",
          "file_models.src/mdc_generator/__init__.py.file_path",
          "file_models.src/mdc_generator/__init__.py.file_type",
          "file_models.src/mdc_generator/__init__.py.model_type",
          "file_models.src/mdc_generator/__init__.py.complexity_score",
          "file_models.src/mdc_generator/__init__.py.line_count",
          "file_models.src/mdc_generator/__init__.py.function_count",
          "file_models.src/mdc_generator/__init__.py.class_count",
          "file_models.src/mdc_generator/__init__.py.import_count",
          "file_models.src/mdc_generator/__init__.py.error_count",
          "file_models.src/mdc_generator/__init__.py.model_data",
          "file_models.src/mdc_generator/__init__.py.model_data.docstrings",
          "file_models.src/mdc_generator/__init__.py.model_data.imports",
          "file_models.src/mdc_generator/__init__.py.model_data.functions",
          "file_models.src/mdc_generator/__init__.py.model_data.classes",
          "file_models.src/mdc_generator/__init__.py.model_data.variables",
          "file_models.src/mdc_generator/__init__.py.model_data.line_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.imports",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[2].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[2].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[3].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[3].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.variables",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.file_path",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.file_type",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.model_type",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.complexity_score",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.line_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.function_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.class_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.import_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.error_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.model_data",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.model_data.error",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.file_path",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.file_type",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_type",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.complexity_score",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.line_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.function_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.class_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.import_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.error_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.imports",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[9].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[9].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[10].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[10].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[11].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[11].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[12].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[12].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[13].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[13].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[14].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[14].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[15].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[15].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[16].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[16].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[17].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[17].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[18].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[18].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[19].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[19].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[20].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[20].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[21].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[21].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[22].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[22].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[23].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[23].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[24].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[24].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[25].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[25].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[26].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[26].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[2].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[2].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[3].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[3].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[4].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[4].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[5].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[5].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.variables",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.line_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.file_path",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.file_type",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_type",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.complexity_score",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.line_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.function_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.class_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.import_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.error_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.imports",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.functions",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.classes",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.variables",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.file_path",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.file_type",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.model_type",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.complexity_score",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.line_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.function_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.class_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.import_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.error_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.model_data",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.model_data.error",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.imports",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.classes",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.variables",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.file_path",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.file_type",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.model_type",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.complexity_score",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.line_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.function_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.class_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.import_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.error_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.model_data",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.model_data.error",
          "file_models.src/multi_agent_testing/test_model_traceability.py",
          "file_models.src/multi_agent_testing/test_model_traceability.py.file_path",
          "file_models.src/multi_agent_testing/test_model_traceability.py.file_type",
          "file_models.src/multi_agent_testing/test_model_traceability.py.model_type",
          "file_models.src/multi_agent_testing/test_model_traceability.py.complexity_score",
          "file_models.src/multi_agent_testing/test_model_traceability.py.line_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.function_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.class_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.import_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.error_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.model_data",
          "file_models.src/multi_agent_testing/test_model_traceability.py.model_data.error",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.file_path",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.file_type",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.model_type",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.complexity_score",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.line_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.function_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.class_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.import_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.error_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.model_data",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.model_data.error",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.imports",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[9].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[9].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[10].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[10].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[11].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[11].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[2].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[2].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[3].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[3].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.variables",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.line_count",
          "file_models.src/multi_agent_testing/cost_analysis.py",
          "file_models.src/multi_agent_testing/cost_analysis.py.file_path",
          "file_models.src/multi_agent_testing/cost_analysis.py.file_type",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_type",
          "file_models.src/multi_agent_testing/cost_analysis.py.complexity_score",
          "file_models.src/multi_agent_testing/cost_analysis.py.line_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.function_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.class_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.import_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.error_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.imports",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.classes",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.variables",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.model_data.error",
          "file_models.src/multi_agent_testing/live_smoke_test.py",
          "file_models.src/multi_agent_testing/live_smoke_test.py.file_path",
          "file_models.src/multi_agent_testing/live_smoke_test.py.file_type",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_type",
          "file_models.src/multi_agent_testing/live_smoke_test.py.complexity_score",
          "file_models.src/multi_agent_testing/live_smoke_test.py.line_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.function_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.class_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.import_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.error_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.imports",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.classes",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.variables",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.line_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.file_path",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.file_type",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_type",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.complexity_score",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.line_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.function_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.class_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.import_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.error_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.imports",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.variables",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.line_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.file_path",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.file_type",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.model_type",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.complexity_score",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.line_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.function_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.class_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.import_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.error_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.model_data",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.model_data.error",
          "file_models.src/multi_agent_testing/__init__.py",
          "file_models.src/multi_agent_testing/__init__.py.file_path",
          "file_models.src/multi_agent_testing/__init__.py.file_type",
          "file_models.src/multi_agent_testing/__init__.py.model_type",
          "file_models.src/multi_agent_testing/__init__.py.complexity_score",
          "file_models.src/multi_agent_testing/__init__.py.line_count",
          "file_models.src/multi_agent_testing/__init__.py.function_count",
          "file_models.src/multi_agent_testing/__init__.py.class_count",
          "file_models.src/multi_agent_testing/__init__.py.import_count",
          "file_models.src/multi_agent_testing/__init__.py.error_count",
          "file_models.src/multi_agent_testing/__init__.py.model_data",
          "file_models.src/multi_agent_testing/__init__.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/__init__.py.model_data.imports",
          "file_models.src/multi_agent_testing/__init__.py.model_data.functions",
          "file_models.src/multi_agent_testing/__init__.py.model_data.classes",
          "file_models.src/multi_agent_testing/__init__.py.model_data.variables",
          "file_models.src/multi_agent_testing/__init__.py.model_data.line_count",
          "file_models.src/streamlit/openflow_quickstart_app.py",
          "file_models.src/streamlit/openflow_quickstart_app.py.file_path",
          "file_models.src/streamlit/openflow_quickstart_app.py.file_type",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_type",
          "file_models.src/streamlit/openflow_quickstart_app.py.complexity_score",
          "file_models.src/streamlit/openflow_quickstart_app.py.line_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.function_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.class_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.import_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.error_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.docstrings",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.imports",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[0].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[0].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[1].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[1].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[2].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[2].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[3].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[3].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[4].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[4].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[5].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[5].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[6].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[6].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[7].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[7].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[8].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[8].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[9].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[9].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[10].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[10].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[11].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[11].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[12].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[12].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[13].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[13].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[14].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[14].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[15].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[15].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[16].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[16].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[17].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[17].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[18].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[18].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[19].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[19].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[20].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[20].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[21].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[21].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[22].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[22].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[23].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[23].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[24].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[24].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[25].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[25].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[26].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[26].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[27].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[27].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[28].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[28].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[29].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[29].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[30].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[30].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[31].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[31].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[32].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[32].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[33].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[33].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[34].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[34].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[35].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[35].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[36].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[36].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[37].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[37].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[38].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[38].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[39].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[39].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[40].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[40].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[0].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[0].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[1].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[1].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[2].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[2].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[3].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[3].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[4].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[4].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[5].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[5].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[6].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[6].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[7].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[7].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.variables",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.line_count",
          "file_models.src/streamlit/__init__.py",
          "file_models.src/streamlit/__init__.py.file_path",
          "file_models.src/streamlit/__init__.py.file_type",
          "file_models.src/streamlit/__init__.py.model_type",
          "file_models.src/streamlit/__init__.py.complexity_score",
          "file_models.src/streamlit/__init__.py.line_count",
          "file_models.src/streamlit/__init__.py.function_count",
          "file_models.src/streamlit/__init__.py.class_count",
          "file_models.src/streamlit/__init__.py.import_count",
          "file_models.src/streamlit/__init__.py.error_count",
          "file_models.src/streamlit/__init__.py.model_data",
          "file_models.src/streamlit/__init__.py.model_data.docstrings",
          "file_models.src/streamlit/__init__.py.model_data.imports",
          "file_models.src/streamlit/__init__.py.model_data.functions",
          "file_models.src/streamlit/__init__.py.model_data.classes",
          "file_models.src/streamlit/__init__.py.model_data.variables",
          "file_models.src/streamlit/__init__.py.model_data.line_count",
          "summary",
          "summary.total_files",
          "summary.valid_files",
          "summary.error_files",
          "summary.model_type_counts",
          "summary.model_type_counts.ast",
          "summary.model_type_counts.error"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "5c6fa0a9ec559a99bc6e25e022087f38",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.910709",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/model_consistency_analysis.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/model_consistency_analysis.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "list",
        "json_size": 25363,
        "json_keys": [],
        "json_depth": 8,
        "json_keys_list": [
          "[0].file_path",
          "[0].has_git_history",
          "[0].current_model",
          "[0].current_model.type",
          "[0].current_model.functions",
          "[0].current_model.functions.[0].name",
          "[0].current_model.functions.[0].lineno",
          "[0].current_model.functions.[0].args",
          "[0].current_model.functions.[0].decorators",
          "[0].current_model.functions.[0].docstring",
          "[0].current_model.functions.[0].complexity",
          "[0].current_model.functions.[1].name",
          "[0].current_model.functions.[1].lineno",
          "[0].current_model.functions.[1].args",
          "[0].current_model.functions.[1].decorators",
          "[0].current_model.functions.[1].docstring",
          "[0].current_model.functions.[1].complexity",
          "[0].current_model.functions.[2].name",
          "[0].current_model.functions.[2].lineno",
          "[0].current_model.functions.[2].args",
          "[0].current_model.functions.[2].decorators",
          "[0].current_model.functions.[2].docstring",
          "[0].current_model.functions.[2].complexity",
          "[0].current_model.functions.[3].name",
          "[0].current_model.functions.[3].lineno",
          "[0].current_model.functions.[3].args",
          "[0].current_model.functions.[3].decorators",
          "[0].current_model.functions.[3].docstring",
          "[0].current_model.functions.[3].complexity",
          "[0].current_model.functions.[4].name",
          "[0].current_model.functions.[4].lineno",
          "[0].current_model.functions.[4].args",
          "[0].current_model.functions.[4].decorators",
          "[0].current_model.functions.[4].docstring",
          "[0].current_model.functions.[4].complexity",
          "[0].current_model.functions.[5].name",
          "[0].current_model.functions.[5].lineno",
          "[0].current_model.functions.[5].args",
          "[0].current_model.functions.[5].decorators",
          "[0].current_model.functions.[5].docstring",
          "[0].current_model.functions.[5].complexity",
          "[0].current_model.functions.[6].name",
          "[0].current_model.functions.[6].lineno",
          "[0].current_model.functions.[6].args",
          "[0].current_model.functions.[6].decorators",
          "[0].current_model.functions.[6].docstring",
          "[0].current_model.functions.[6].complexity",
          "[0].current_model.functions.[7].name",
          "[0].current_model.functions.[7].lineno",
          "[0].current_model.functions.[7].args",
          "[0].current_model.functions.[7].decorators",
          "[0].current_model.functions.[7].docstring",
          "[0].current_model.functions.[7].complexity",
          "[0].current_model.functions.[8].name",
          "[0].current_model.functions.[8].lineno",
          "[0].current_model.functions.[8].args",
          "[0].current_model.functions.[8].decorators",
          "[0].current_model.functions.[8].docstring",
          "[0].current_model.functions.[8].complexity",
          "[0].current_model.functions.[9].name",
          "[0].current_model.functions.[9].lineno",
          "[0].current_model.functions.[9].args",
          "[0].current_model.functions.[9].decorators",
          "[0].current_model.functions.[9].docstring",
          "[0].current_model.functions.[9].complexity",
          "[0].current_model.classes",
          "[0].current_model.classes.[0].name",
          "[0].current_model.classes.[0].lineno",
          "[0].current_model.classes.[0].bases",
          "[0].current_model.classes.[0].methods",
          "[0].current_model.classes.[0].docstring",
          "[0].current_model.imports",
          "[0].current_model.imports.[0].type",
          "[0].current_model.imports.[0].module",
          "[0].current_model.imports.[0].asname",
          "[0].current_model.imports.[0].lineno",
          "[0].current_model.imports.[1].type",
          "[0].current_model.imports.[1].module",
          "[0].current_model.imports.[1].asname",
          "[0].current_model.imports.[1].lineno",
          "[0].current_model.imports.[2].type",
          "[0].current_model.imports.[2].module",
          "[0].current_model.imports.[2].asname",
          "[0].current_model.imports.[2].lineno",
          "[0].current_model.imports.[3].type",
          "[0].current_model.imports.[3].module",
          "[0].current_model.imports.[3].name",
          "[0].current_model.imports.[3].asname",
          "[0].current_model.imports.[3].lineno",
          "[0].current_model.imports.[4].type",
          "[0].current_model.imports.[4].module",
          "[0].current_model.imports.[4].asname",
          "[0].current_model.imports.[4].lineno",
          "[0].current_model.imports.[5].type",
          "[0].current_model.imports.[5].module",
          "[0].current_model.imports.[5].name",
          "[0].current_model.imports.[5].asname",
          "[0].current_model.imports.[5].lineno",
          "[0].current_model.imports.[6].type",
          "[0].current_model.imports.[6].module",
          "[0].current_model.imports.[6].asname",
          "[0].current_model.imports.[6].lineno",
          "[0].current_model.imports.[7].type",
          "[0].current_model.imports.[7].module",
          "[0].current_model.imports.[7].asname",
          "[0].current_model.imports.[7].lineno",
          "[0].current_model.lines_of_code",
          "[0].current_model.content_length",
          "[0].current_model.syntax_errors",
          "[0].persisted_model",
          "[0].persisted_model.domain",
          "[0].persisted_model.patterns",
          "[0].persisted_model.content_indicators",
          "[0].persisted_model.linter",
          "[0].persisted_model.validator",
          "[0].persisted_model.formatter",
          "[0].pattern_match",
          "[0].is_new_artifact",
          "[0].recommendations",
          "[1].file_path",
          "[1].has_git_history",
          "[1].current_model",
          "[1].current_model.type",
          "[1].current_model.functions",
          "[1].current_model.functions.[0].name",
          "[1].current_model.functions.[0].lineno",
          "[1].current_model.functions.[0].args",
          "[1].current_model.functions.[0].decorators",
          "[1].current_model.functions.[1].name",
          "[1].current_model.functions.[1].lineno",
          "[1].current_model.functions.[1].args",
          "[1].current_model.functions.[1].decorators",
          "[1].current_model.functions.[2].name",
          "[1].current_model.functions.[2].lineno",
          "[1].current_model.functions.[2].args",
          "[1].current_model.functions.[2].decorators",
          "[1].current_model.functions.[3].name",
          "[1].current_model.functions.[3].lineno",
          "[1].current_model.functions.[3].args",
          "[1].current_model.functions.[3].decorators",
          "[1].current_model.functions.[4].name",
          "[1].current_model.functions.[4].lineno",
          "[1].current_model.functions.[4].args",
          "[1].current_model.functions.[4].decorators",
          "[1].current_model.functions.[5].name",
          "[1].current_model.functions.[5].lineno",
          "[1].current_model.functions.[5].args",
          "[1].current_model.functions.[5].decorators",
          "[1].current_model.functions.[6].name",
          "[1].current_model.functions.[6].lineno",
          "[1].current_model.functions.[6].args",
          "[1].current_model.functions.[6].decorators",
          "[1].current_model.functions.[7].name",
          "[1].current_model.functions.[7].lineno",
          "[1].current_model.functions.[7].args",
          "[1].current_model.functions.[7].decorators",
          "[1].current_model.functions.[8].name",
          "[1].current_model.functions.[8].lineno",
          "[1].current_model.functions.[8].args",
          "[1].current_model.functions.[8].decorators",
          "[1].current_model.functions.[9].name",
          "[1].current_model.functions.[9].lineno",
          "[1].current_model.functions.[9].args",
          "[1].current_model.functions.[9].decorators",
          "[1].current_model.functions.[10].name",
          "[1].current_model.functions.[10].lineno",
          "[1].current_model.functions.[10].args",
          "[1].current_model.functions.[10].decorators",
          "[1].current_model.functions.[11].name",
          "[1].current_model.functions.[11].lineno",
          "[1].current_model.functions.[11].args",
          "[1].current_model.functions.[11].decorators",
          "[1].current_model.functions.[12].name",
          "[1].current_model.functions.[12].lineno",
          "[1].current_model.functions.[12].args",
          "[1].current_model.functions.[12].decorators",
          "[1].current_model.functions.[13].name",
          "[1].current_model.functions.[13].lineno",
          "[1].current_model.functions.[13].args",
          "[1].current_model.functions.[13].decorators",
          "[1].current_model.functions.[14].name",
          "[1].current_model.functions.[14].lineno",
          "[1].current_model.functions.[14].args",
          "[1].current_model.functions.[14].decorators",
          "[1].current_model.functions.[15].name",
          "[1].current_model.functions.[15].lineno",
          "[1].current_model.functions.[15].args",
          "[1].current_model.functions.[15].decorators",
          "[1].current_model.functions.[16].name",
          "[1].current_model.functions.[16].lineno",
          "[1].current_model.functions.[16].args",
          "[1].current_model.functions.[16].decorators",
          "[1].current_model.functions.[17].name",
          "[1].current_model.functions.[17].lineno",
          "[1].current_model.functions.[17].args",
          "[1].current_model.functions.[17].decorators",
          "[1].current_model.functions.[18].name",
          "[1].current_model.functions.[18].lineno",
          "[1].current_model.functions.[18].args",
          "[1].current_model.functions.[18].decorators",
          "[1].current_model.functions.[19].name",
          "[1].current_model.functions.[19].lineno",
          "[1].current_model.functions.[19].args",
          "[1].current_model.functions.[19].decorators",
          "[1].current_model.functions.[20].name",
          "[1].current_model.functions.[20].lineno",
          "[1].current_model.functions.[20].args",
          "[1].current_model.functions.[20].decorators",
          "[1].current_model.functions.[21].name",
          "[1].current_model.functions.[21].lineno",
          "[1].current_model.functions.[21].args",
          "[1].current_model.functions.[21].decorators",
          "[1].current_model.functions.[22].name",
          "[1].current_model.functions.[22].lineno",
          "[1].current_model.functions.[22].args",
          "[1].current_model.functions.[22].decorators",
          "[1].current_model.functions.[23].name",
          "[1].current_model.functions.[23].lineno",
          "[1].current_model.functions.[23].args",
          "[1].current_model.functions.[23].decorators",
          "[1].current_model.functions.[24].name",
          "[1].current_model.functions.[24].lineno",
          "[1].current_model.functions.[24].args",
          "[1].current_model.functions.[24].decorators",
          "[1].current_model.functions.[25].name",
          "[1].current_model.functions.[25].lineno",
          "[1].current_model.functions.[25].args",
          "[1].current_model.functions.[25].decorators",
          "[1].current_model.functions.[26].name",
          "[1].current_model.functions.[26].lineno",
          "[1].current_model.functions.[26].args",
          "[1].current_model.functions.[26].decorators",
          "[1].current_model.functions.[27].name",
          "[1].current_model.functions.[27].lineno",
          "[1].current_model.functions.[27].args",
          "[1].current_model.functions.[27].decorators",
          "[1].current_model.functions.[28].name",
          "[1].current_model.functions.[28].lineno",
          "[1].current_model.functions.[28].args",
          "[1].current_model.functions.[28].decorators",
          "[1].current_model.functions.[29].name",
          "[1].current_model.functions.[29].lineno",
          "[1].current_model.functions.[29].args",
          "[1].current_model.functions.[29].decorators",
          "[1].current_model.classes",
          "[1].current_model.classes.[0].name",
          "[1].current_model.classes.[0].lineno",
          "[1].current_model.classes.[0].bases",
          "[1].current_model.classes.[0].methods",
          "[1].current_model.classes.[0].methods.[0].name",
          "[1].current_model.classes.[0].methods.[0].lineno",
          "[1].current_model.classes.[0].methods.[0].args",
          "[1].current_model.classes.[0].methods.[1].name",
          "[1].current_model.classes.[0].methods.[1].lineno",
          "[1].current_model.classes.[0].methods.[1].args",
          "[1].current_model.classes.[0].methods.[2].name",
          "[1].current_model.classes.[0].methods.[2].lineno",
          "[1].current_model.classes.[0].methods.[2].args",
          "[1].current_model.classes.[0].methods.[3].name",
          "[1].current_model.classes.[0].methods.[3].lineno",
          "[1].current_model.classes.[0].methods.[3].args",
          "[1].current_model.classes.[0].methods.[4].name",
          "[1].current_model.classes.[0].methods.[4].lineno",
          "[1].current_model.classes.[0].methods.[4].args",
          "[1].current_model.classes.[0].methods.[5].name",
          "[1].current_model.classes.[0].methods.[5].lineno",
          "[1].current_model.classes.[0].methods.[5].args",
          "[1].current_model.classes.[0].methods.[6].name",
          "[1].current_model.classes.[0].methods.[6].lineno",
          "[1].current_model.classes.[0].methods.[6].args",
          "[1].current_model.classes.[0].methods.[7].name",
          "[1].current_model.classes.[0].methods.[7].lineno",
          "[1].current_model.classes.[0].methods.[7].args",
          "[1].current_model.classes.[0].methods.[8].name",
          "[1].current_model.classes.[0].methods.[8].lineno",
          "[1].current_model.classes.[0].methods.[8].args",
          "[1].current_model.classes.[0].methods.[9].name",
          "[1].current_model.classes.[0].methods.[9].lineno",
          "[1].current_model.classes.[0].methods.[9].args",
          "[1].current_model.classes.[0].methods.[10].name",
          "[1].current_model.classes.[0].methods.[10].lineno",
          "[1].current_model.classes.[0].methods.[10].args",
          "[1].current_model.classes.[0].methods.[11].name",
          "[1].current_model.classes.[0].methods.[11].lineno",
          "[1].current_model.classes.[0].methods.[11].args",
          "[1].current_model.classes.[0].methods.[12].name",
          "[1].current_model.classes.[0].methods.[12].lineno",
          "[1].current_model.classes.[0].methods.[12].args",
          "[1].current_model.classes.[0].methods.[13].name",
          "[1].current_model.classes.[0].methods.[13].lineno",
          "[1].current_model.classes.[0].methods.[13].args",
          "[1].current_model.classes.[0].methods.[14].name",
          "[1].current_model.classes.[0].methods.[14].lineno",
          "[1].current_model.classes.[0].methods.[14].args",
          "[1].current_model.classes.[0].methods.[15].name",
          "[1].current_model.classes.[0].methods.[15].lineno",
          "[1].current_model.classes.[0].methods.[15].args",
          "[1].current_model.classes.[0].methods.[16].name",
          "[1].current_model.classes.[0].methods.[16].lineno",
          "[1].current_model.classes.[0].methods.[16].args",
          "[1].current_model.classes.[0].methods.[17].name",
          "[1].current_model.classes.[0].methods.[17].lineno",
          "[1].current_model.classes.[0].methods.[17].args",
          "[1].current_model.classes.[0].methods.[18].name",
          "[1].current_model.classes.[0].methods.[18].lineno",
          "[1].current_model.classes.[0].methods.[18].args",
          "[1].current_model.classes.[0].methods.[19].name",
          "[1].current_model.classes.[0].methods.[19].lineno",
          "[1].current_model.classes.[0].methods.[19].args",
          "[1].current_model.classes.[0].methods.[20].name",
          "[1].current_model.classes.[0].methods.[20].lineno",
          "[1].current_model.classes.[0].methods.[20].args",
          "[1].current_model.classes.[0].methods.[21].name",
          "[1].current_model.classes.[0].methods.[21].lineno",
          "[1].current_model.classes.[0].methods.[21].args",
          "[1].current_model.classes.[0].methods.[22].name",
          "[1].current_model.classes.[0].methods.[22].lineno",
          "[1].current_model.classes.[0].methods.[22].args",
          "[1].current_model.classes.[0].methods.[23].name",
          "[1].current_model.classes.[0].methods.[23].lineno",
          "[1].current_model.classes.[0].methods.[23].args",
          "[1].current_model.classes.[0].methods.[24].name",
          "[1].current_model.classes.[0].methods.[24].lineno",
          "[1].current_model.classes.[0].methods.[24].args",
          "[1].current_model.classes.[0].methods.[25].name",
          "[1].current_model.classes.[0].methods.[25].lineno",
          "[1].current_model.classes.[0].methods.[25].args",
          "[1].current_model.classes.[0].methods.[26].name",
          "[1].current_model.classes.[0].methods.[26].lineno",
          "[1].current_model.classes.[0].methods.[26].args",
          "[1].current_model.classes.[0].methods.[27].name",
          "[1].current_model.classes.[0].methods.[27].lineno",
          "[1].current_model.classes.[0].methods.[27].args",
          "[1].current_model.classes.[0].methods.[28].name",
          "[1].current_model.classes.[0].methods.[28].lineno",
          "[1].current_model.classes.[0].methods.[28].args",
          "[1].current_model.imports",
          "[1].current_model.imports.[0].type",
          "[1].current_model.imports.[0].module",
          "[1].current_model.imports.[0].asname",
          "[1].current_model.imports.[0].lineno",
          "[1].current_model.imports.[1].type",
          "[1].current_model.imports.[1].module",
          "[1].current_model.imports.[1].asname",
          "[1].current_model.imports.[1].lineno",
          "[1].current_model.imports.[2].type",
          "[1].current_model.imports.[2].module",
          "[1].current_model.imports.[2].asname",
          "[1].current_model.imports.[2].lineno",
          "[1].current_model.imports.[3].type",
          "[1].current_model.imports.[3].module",
          "[1].current_model.imports.[3].asname",
          "[1].current_model.imports.[3].lineno",
          "[1].current_model.imports.[4].type",
          "[1].current_model.imports.[4].module",
          "[1].current_model.imports.[4].name",
          "[1].current_model.imports.[4].asname",
          "[1].current_model.imports.[4].lineno",
          "[1].current_model.imports.[5].type",
          "[1].current_model.imports.[5].module",
          "[1].current_model.imports.[5].name",
          "[1].current_model.imports.[5].asname",
          "[1].current_model.imports.[5].lineno",
          "[1].current_model.imports.[6].type",
          "[1].current_model.imports.[6].module",
          "[1].current_model.imports.[6].name",
          "[1].current_model.imports.[6].asname",
          "[1].current_model.imports.[6].lineno",
          "[1].current_model.imports.[7].type",
          "[1].current_model.imports.[7].module",
          "[1].current_model.imports.[7].name",
          "[1].current_model.imports.[7].asname",
          "[1].current_model.imports.[7].lineno",
          "[1].current_model.imports.[8].type",
          "[1].current_model.imports.[8].module",
          "[1].current_model.imports.[8].name",
          "[1].current_model.imports.[8].asname",
          "[1].current_model.imports.[8].lineno",
          "[1].current_model.imports.[9].type",
          "[1].current_model.imports.[9].module",
          "[1].current_model.imports.[9].name",
          "[1].current_model.imports.[9].asname",
          "[1].current_model.imports.[9].lineno",
          "[1].current_model.variables",
          "[1].current_model.variables.[0].name",
          "[1].current_model.variables.[0].lineno",
          "[1].current_model.variables.[0].value_type",
          "[1].current_model.variables.[1].name",
          "[1].current_model.variables.[1].lineno",
          "[1].current_model.variables.[1].value_type",
          "[1].current_model.variables.[2].name",
          "[1].current_model.variables.[2].lineno",
          "[1].current_model.variables.[2].value_type",
          "[1].current_model.variables.[3].name",
          "[1].current_model.variables.[3].lineno",
          "[1].current_model.variables.[3].value_type",
          "[1].current_model.variables.[4].name",
          "[1].current_model.variables.[4].lineno",
          "[1].current_model.variables.[4].value_type",
          "[1].current_model.variables.[5].name",
          "[1].current_model.variables.[5].lineno",
          "[1].current_model.variables.[5].value_type",
          "[1].current_model.variables.[6].name",
          "[1].current_model.variables.[6].lineno",
          "[1].current_model.variables.[6].value_type",
          "[1].current_model.variables.[7].name",
          "[1].current_model.variables.[7].lineno",
          "[1].current_model.variables.[7].value_type",
          "[1].current_model.variables.[8].name",
          "[1].current_model.variables.[8].lineno",
          "[1].current_model.variables.[8].value_type",
          "[1].current_model.variables.[9].name",
          "[1].current_model.variables.[9].lineno",
          "[1].current_model.variables.[9].value_type",
          "[1].current_model.variables.[10].name",
          "[1].current_model.variables.[10].lineno",
          "[1].current_model.variables.[10].value_type",
          "[1].current_model.variables.[11].name",
          "[1].current_model.variables.[11].lineno",
          "[1].current_model.variables.[11].value_type",
          "[1].current_model.variables.[12].name",
          "[1].current_model.variables.[12].lineno",
          "[1].current_model.variables.[12].value_type",
          "[1].current_model.variables.[13].name",
          "[1].current_model.variables.[13].lineno",
          "[1].current_model.variables.[13].value_type",
          "[1].current_model.variables.[14].name",
          "[1].current_model.variables.[14].lineno",
          "[1].current_model.variables.[14].value_type",
          "[1].current_model.variables.[15].name",
          "[1].current_model.variables.[15].lineno",
          "[1].current_model.variables.[15].value_type",
          "[1].current_model.variables.[16].name",
          "[1].current_model.variables.[16].lineno",
          "[1].current_model.variables.[16].value_type",
          "[1].current_model.variables.[17].name",
          "[1].current_model.variables.[17].lineno",
          "[1].current_model.variables.[17].value_type",
          "[1].current_model.variables.[18].name",
          "[1].current_model.variables.[18].lineno",
          "[1].current_model.variables.[18].value_type",
          "[1].current_model.variables.[19].name",
          "[1].current_model.variables.[19].lineno",
          "[1].current_model.variables.[19].value_type",
          "[1].current_model.variables.[20].name",
          "[1].current_model.variables.[20].lineno",
          "[1].current_model.variables.[20].value_type",
          "[1].current_model.variables.[21].name",
          "[1].current_model.variables.[21].lineno",
          "[1].current_model.variables.[21].value_type",
          "[1].current_model.variables.[22].name",
          "[1].current_model.variables.[22].lineno",
          "[1].current_model.variables.[22].value_type",
          "[1].current_model.variables.[23].name",
          "[1].current_model.variables.[23].lineno",
          "[1].current_model.variables.[23].value_type",
          "[1].current_model.variables.[24].name",
          "[1].current_model.variables.[24].lineno",
          "[1].current_model.variables.[24].value_type",
          "[1].current_model.variables.[25].name",
          "[1].current_model.variables.[25].lineno",
          "[1].current_model.variables.[25].value_type",
          "[1].current_model.variables.[26].name",
          "[1].current_model.variables.[26].lineno",
          "[1].current_model.variables.[26].value_type",
          "[1].current_model.variables.[27].name",
          "[1].current_model.variables.[27].lineno",
          "[1].current_model.variables.[27].value_type",
          "[1].current_model.variables.[28].name",
          "[1].current_model.variables.[28].lineno",
          "[1].current_model.variables.[28].value_type",
          "[1].current_model.variables.[29].name",
          "[1].current_model.variables.[29].lineno",
          "[1].current_model.variables.[29].value_type",
          "[1].current_model.variables.[30].name",
          "[1].current_model.variables.[30].lineno",
          "[1].current_model.variables.[30].value_type",
          "[1].current_model.variables.[31].name",
          "[1].current_model.variables.[31].lineno",
          "[1].current_model.variables.[31].value_type",
          "[1].current_model.variables.[32].name",
          "[1].current_model.variables.[32].lineno",
          "[1].current_model.variables.[32].value_type",
          "[1].current_model.variables.[33].name",
          "[1].current_model.variables.[33].lineno",
          "[1].current_model.variables.[33].value_type",
          "[1].current_model.variables.[34].name",
          "[1].current_model.variables.[34].lineno",
          "[1].current_model.variables.[34].value_type",
          "[1].current_model.variables.[35].name",
          "[1].current_model.variables.[35].lineno",
          "[1].current_model.variables.[35].value_type",
          "[1].current_model.variables.[36].name",
          "[1].current_model.variables.[36].lineno",
          "[1].current_model.variables.[36].value_type",
          "[1].current_model.variables.[37].name",
          "[1].current_model.variables.[37].lineno",
          "[1].current_model.variables.[37].value_type",
          "[1].current_model.variables.[38].name",
          "[1].current_model.variables.[38].lineno",
          "[1].current_model.variables.[38].value_type",
          "[1].current_model.variables.[39].name",
          "[1].current_model.variables.[39].lineno",
          "[1].current_model.variables.[39].value_type",
          "[1].current_model.variables.[40].name",
          "[1].current_model.variables.[40].lineno",
          "[1].current_model.variables.[40].value_type",
          "[1].current_model.variables.[41].name",
          "[1].current_model.variables.[41].lineno",
          "[1].current_model.variables.[41].value_type",
          "[1].current_model.variables.[42].name",
          "[1].current_model.variables.[42].lineno",
          "[1].current_model.variables.[42].value_type",
          "[1].current_model.variables.[43].name",
          "[1].current_model.variables.[43].lineno",
          "[1].current_model.variables.[43].value_type",
          "[1].current_model.variables.[44].name",
          "[1].current_model.variables.[44].lineno",
          "[1].current_model.variables.[44].value_type",
          "[1].current_model.variables.[45].name",
          "[1].current_model.variables.[45].lineno",
          "[1].current_model.variables.[45].value_type",
          "[1].current_model.variables.[46].name",
          "[1].current_model.variables.[46].lineno",
          "[1].current_model.variables.[46].value_type",
          "[1].current_model.variables.[47].name",
          "[1].current_model.variables.[47].lineno",
          "[1].current_model.variables.[47].value_type",
          "[1].current_model.variables.[48].name",
          "[1].current_model.variables.[48].lineno",
          "[1].current_model.variables.[48].value_type",
          "[1].current_model.variables.[49].name",
          "[1].current_model.variables.[49].lineno",
          "[1].current_model.variables.[49].value_type",
          "[1].current_model.variables.[50].name",
          "[1].current_model.variables.[50].lineno",
          "[1].current_model.variables.[50].value_type",
          "[1].current_model.variables.[51].name",
          "[1].current_model.variables.[51].lineno",
          "[1].current_model.variables.[51].value_type",
          "[1].current_model.variables.[52].name",
          "[1].current_model.variables.[52].lineno",
          "[1].current_model.variables.[52].value_type",
          "[1].current_model.variables.[53].name",
          "[1].current_model.variables.[53].lineno",
          "[1].current_model.variables.[53].value_type",
          "[1].current_model.variables.[54].name",
          "[1].current_model.variables.[54].lineno",
          "[1].current_model.variables.[54].value_type",
          "[1].current_model.variables.[55].name",
          "[1].current_model.variables.[55].lineno",
          "[1].current_model.variables.[55].value_type",
          "[1].current_model.variables.[56].name",
          "[1].current_model.variables.[56].lineno",
          "[1].current_model.variables.[56].value_type",
          "[1].current_model.variables.[57].name",
          "[1].current_model.variables.[57].lineno",
          "[1].current_model.variables.[57].value_type",
          "[1].current_model.variables.[58].name",
          "[1].current_model.variables.[58].lineno",
          "[1].current_model.variables.[58].value_type",
          "[1].current_model.variables.[59].name",
          "[1].current_model.variables.[59].lineno",
          "[1].current_model.variables.[59].value_type",
          "[1].current_model.variables.[60].name",
          "[1].current_model.variables.[60].lineno",
          "[1].current_model.variables.[60].value_type",
          "[1].current_model.lines_of_code",
          "[1].current_model.content_length",
          "[1].current_model.ast_nodes",
          "[1].persisted_model",
          "[1].persisted_model.error",
          "[1].persisted_model.content",
          "[1].pattern_match",
          "[1].is_new_artifact",
          "[1].recommendations",
          "[2].file_path",
          "[2].has_git_history",
          "[2].current_model",
          "[2].current_model.type",
          "[2].current_model.functions",
          "[2].current_model.functions.[0].name",
          "[2].current_model.functions.[0].lineno",
          "[2].current_model.functions.[0].args",
          "[2].current_model.functions.[0].decorators",
          "[2].current_model.functions.[1].name",
          "[2].current_model.functions.[1].lineno",
          "[2].current_model.functions.[1].args",
          "[2].current_model.functions.[1].decorators",
          "[2].current_model.functions.[2].name",
          "[2].current_model.functions.[2].lineno",
          "[2].current_model.functions.[2].args",
          "[2].current_model.functions.[2].decorators",
          "[2].current_model.functions.[3].name",
          "[2].current_model.functions.[3].lineno",
          "[2].current_model.functions.[3].args",
          "[2].current_model.functions.[3].decorators",
          "[2].current_model.functions.[4].name",
          "[2].current_model.functions.[4].lineno",
          "[2].current_model.functions.[4].args",
          "[2].current_model.functions.[4].decorators",
          "[2].current_model.functions.[5].name",
          "[2].current_model.functions.[5].lineno",
          "[2].current_model.functions.[5].args",
          "[2].current_model.functions.[5].decorators",
          "[2].current_model.functions.[6].name",
          "[2].current_model.functions.[6].lineno",
          "[2].current_model.functions.[6].args",
          "[2].current_model.functions.[6].decorators",
          "[2].current_model.functions.[7].name",
          "[2].current_model.functions.[7].lineno",
          "[2].current_model.functions.[7].args",
          "[2].current_model.functions.[7].decorators",
          "[2].current_model.functions.[8].name",
          "[2].current_model.functions.[8].lineno",
          "[2].current_model.functions.[8].args",
          "[2].current_model.functions.[8].decorators",
          "[2].current_model.functions.[9].name",
          "[2].current_model.functions.[9].lineno",
          "[2].current_model.functions.[9].args",
          "[2].current_model.functions.[9].decorators",
          "[2].current_model.functions.[10].name",
          "[2].current_model.functions.[10].lineno",
          "[2].current_model.functions.[10].args",
          "[2].current_model.functions.[10].decorators",
          "[2].current_model.functions.[11].name",
          "[2].current_model.functions.[11].lineno",
          "[2].current_model.functions.[11].args",
          "[2].current_model.functions.[11].decorators",
          "[2].current_model.functions.[12].name",
          "[2].current_model.functions.[12].lineno",
          "[2].current_model.functions.[12].args",
          "[2].current_model.functions.[12].decorators",
          "[2].current_model.functions.[13].name",
          "[2].current_model.functions.[13].lineno",
          "[2].current_model.functions.[13].args",
          "[2].current_model.functions.[13].decorators",
          "[2].current_model.functions.[14].name",
          "[2].current_model.functions.[14].lineno",
          "[2].current_model.functions.[14].args",
          "[2].current_model.functions.[14].decorators",
          "[2].current_model.functions.[15].name",
          "[2].current_model.functions.[15].lineno",
          "[2].current_model.functions.[15].args",
          "[2].current_model.functions.[15].decorators",
          "[2].current_model.functions.[16].name",
          "[2].current_model.functions.[16].lineno",
          "[2].current_model.functions.[16].args",
          "[2].current_model.functions.[16].decorators",
          "[2].current_model.functions.[17].name",
          "[2].current_model.functions.[17].lineno",
          "[2].current_model.functions.[17].args",
          "[2].current_model.functions.[17].decorators",
          "[2].current_model.functions.[18].name",
          "[2].current_model.functions.[18].lineno",
          "[2].current_model.functions.[18].args",
          "[2].current_model.functions.[18].decorators",
          "[2].current_model.functions.[19].name",
          "[2].current_model.functions.[19].lineno",
          "[2].current_model.functions.[19].args",
          "[2].current_model.functions.[19].decorators",
          "[2].current_model.functions.[20].name",
          "[2].current_model.functions.[20].lineno",
          "[2].current_model.functions.[20].args",
          "[2].current_model.functions.[20].decorators",
          "[2].current_model.functions.[21].name",
          "[2].current_model.functions.[21].lineno",
          "[2].current_model.functions.[21].args",
          "[2].current_model.functions.[21].decorators",
          "[2].current_model.functions.[22].name",
          "[2].current_model.functions.[22].lineno",
          "[2].current_model.functions.[22].args",
          "[2].current_model.functions.[22].decorators",
          "[2].current_model.functions.[23].name",
          "[2].current_model.functions.[23].lineno",
          "[2].current_model.functions.[23].args",
          "[2].current_model.functions.[23].decorators",
          "[2].current_model.functions.[24].name",
          "[2].current_model.functions.[24].lineno",
          "[2].current_model.functions.[24].args",
          "[2].current_model.functions.[24].decorators",
          "[2].current_model.classes",
          "[2].current_model.classes.[0].name",
          "[2].current_model.classes.[0].lineno",
          "[2].current_model.classes.[0].bases",
          "[2].current_model.classes.[0].methods",
          "[2].current_model.classes.[0].methods.[0].name",
          "[2].current_model.classes.[0].methods.[0].lineno",
          "[2].current_model.classes.[0].methods.[0].args",
          "[2].current_model.classes.[0].methods.[1].name",
          "[2].current_model.classes.[0].methods.[1].lineno",
          "[2].current_model.classes.[0].methods.[1].args",
          "[2].current_model.classes.[0].methods.[2].name",
          "[2].current_model.classes.[0].methods.[2].lineno",
          "[2].current_model.classes.[0].methods.[2].args",
          "[2].current_model.classes.[0].methods.[3].name",
          "[2].current_model.classes.[0].methods.[3].lineno",
          "[2].current_model.classes.[0].methods.[3].args",
          "[2].current_model.classes.[0].methods.[4].name",
          "[2].current_model.classes.[0].methods.[4].lineno",
          "[2].current_model.classes.[0].methods.[4].args",
          "[2].current_model.classes.[0].methods.[5].name",
          "[2].current_model.classes.[0].methods.[5].lineno",
          "[2].current_model.classes.[0].methods.[5].args",
          "[2].current_model.classes.[0].methods.[6].name",
          "[2].current_model.classes.[0].methods.[6].lineno",
          "[2].current_model.classes.[0].methods.[6].args",
          "[2].current_model.classes.[0].methods.[7].name",
          "[2].current_model.classes.[0].methods.[7].lineno",
          "[2].current_model.classes.[0].methods.[7].args",
          "[2].current_model.classes.[0].methods.[8].name",
          "[2].current_model.classes.[0].methods.[8].lineno",
          "[2].current_model.classes.[0].methods.[8].args",
          "[2].current_model.classes.[0].methods.[9].name",
          "[2].current_model.classes.[0].methods.[9].lineno",
          "[2].current_model.classes.[0].methods.[9].args",
          "[2].current_model.classes.[0].methods.[10].name",
          "[2].current_model.classes.[0].methods.[10].lineno",
          "[2].current_model.classes.[0].methods.[10].args",
          "[2].current_model.classes.[0].methods.[11].name",
          "[2].current_model.classes.[0].methods.[11].lineno",
          "[2].current_model.classes.[0].methods.[11].args",
          "[2].current_model.classes.[0].methods.[12].name",
          "[2].current_model.classes.[0].methods.[12].lineno",
          "[2].current_model.classes.[0].methods.[12].args",
          "[2].current_model.classes.[0].methods.[13].name",
          "[2].current_model.classes.[0].methods.[13].lineno",
          "[2].current_model.classes.[0].methods.[13].args",
          "[2].current_model.classes.[0].methods.[14].name",
          "[2].current_model.classes.[0].methods.[14].lineno",
          "[2].current_model.classes.[0].methods.[14].args",
          "[2].current_model.classes.[0].methods.[15].name",
          "[2].current_model.classes.[0].methods.[15].lineno",
          "[2].current_model.classes.[0].methods.[15].args",
          "[2].current_model.classes.[0].methods.[16].name",
          "[2].current_model.classes.[0].methods.[16].lineno",
          "[2].current_model.classes.[0].methods.[16].args",
          "[2].current_model.classes.[0].methods.[17].name",
          "[2].current_model.classes.[0].methods.[17].lineno",
          "[2].current_model.classes.[0].methods.[17].args",
          "[2].current_model.classes.[0].methods.[18].name",
          "[2].current_model.classes.[0].methods.[18].lineno",
          "[2].current_model.classes.[0].methods.[18].args",
          "[2].current_model.classes.[0].methods.[19].name",
          "[2].current_model.classes.[0].methods.[19].lineno",
          "[2].current_model.classes.[0].methods.[19].args",
          "[2].current_model.classes.[0].methods.[20].name",
          "[2].current_model.classes.[0].methods.[20].lineno",
          "[2].current_model.classes.[0].methods.[20].args",
          "[2].current_model.classes.[0].methods.[21].name",
          "[2].current_model.classes.[0].methods.[21].lineno",
          "[2].current_model.classes.[0].methods.[21].args",
          "[2].current_model.classes.[0].methods.[22].name",
          "[2].current_model.classes.[0].methods.[22].lineno",
          "[2].current_model.classes.[0].methods.[22].args",
          "[2].current_model.classes.[0].methods.[23].name",
          "[2].current_model.classes.[0].methods.[23].lineno",
          "[2].current_model.classes.[0].methods.[23].args",
          "[2].current_model.imports",
          "[2].current_model.imports.[0].type",
          "[2].current_model.imports.[0].module",
          "[2].current_model.imports.[0].asname",
          "[2].current_model.imports.[0].lineno",
          "[2].current_model.imports.[1].type",
          "[2].current_model.imports.[1].module",
          "[2].current_model.imports.[1].asname",
          "[2].current_model.imports.[1].lineno",
          "[2].current_model.imports.[2].type",
          "[2].current_model.imports.[2].module",
          "[2].current_model.imports.[2].asname",
          "[2].current_model.imports.[2].lineno",
          "[2].current_model.imports.[3].type",
          "[2].current_model.imports.[3].module",
          "[2].current_model.imports.[3].asname",
          "[2].current_model.imports.[3].lineno",
          "[2].current_model.imports.[4].type",
          "[2].current_model.imports.[4].module",
          "[2].current_model.imports.[4].asname",
          "[2].current_model.imports.[4].lineno",
          "[2].current_model.imports.[5].type",
          "[2].current_model.imports.[5].module",
          "[2].current_model.imports.[5].name",
          "[2].current_model.imports.[5].asname",
          "[2].current_model.imports.[5].lineno",
          "[2].current_model.imports.[6].type",
          "[2].current_model.imports.[6].module",
          "[2].current_model.imports.[6].name",
          "[2].current_model.imports.[6].asname",
          "[2].current_model.imports.[6].lineno",
          "[2].current_model.imports.[7].type",
          "[2].current_model.imports.[7].module",
          "[2].current_model.imports.[7].name",
          "[2].current_model.imports.[7].asname",
          "[2].current_model.imports.[7].lineno",
          "[2].current_model.imports.[8].type",
          "[2].current_model.imports.[8].module",
          "[2].current_model.imports.[8].name",
          "[2].current_model.imports.[8].asname",
          "[2].current_model.imports.[8].lineno",
          "[2].current_model.imports.[9].type",
          "[2].current_model.imports.[9].module",
          "[2].current_model.imports.[9].name",
          "[2].current_model.imports.[9].asname",
          "[2].current_model.imports.[9].lineno",
          "[2].current_model.imports.[10].type",
          "[2].current_model.imports.[10].module",
          "[2].current_model.imports.[10].name",
          "[2].current_model.imports.[10].asname",
          "[2].current_model.imports.[10].lineno",
          "[2].current_model.imports.[11].type",
          "[2].current_model.imports.[11].module",
          "[2].current_model.imports.[11].name",
          "[2].current_model.imports.[11].asname",
          "[2].current_model.imports.[11].lineno",
          "[2].current_model.imports.[12].type",
          "[2].current_model.imports.[12].module",
          "[2].current_model.imports.[12].asname",
          "[2].current_model.imports.[12].lineno",
          "[2].current_model.imports.[13].type",
          "[2].current_model.imports.[13].module",
          "[2].current_model.imports.[13].asname",
          "[2].current_model.imports.[13].lineno",
          "[2].current_model.imports.[14].type",
          "[2].current_model.imports.[14].module",
          "[2].current_model.imports.[14].name",
          "[2].current_model.imports.[14].asname",
          "[2].current_model.imports.[14].lineno",
          "[2].current_model.imports.[15].type",
          "[2].current_model.imports.[15].module",
          "[2].current_model.imports.[15].asname",
          "[2].current_model.imports.[15].lineno",
          "[2].current_model.variables",
          "[2].current_model.variables.[0].name",
          "[2].current_model.variables.[0].lineno",
          "[2].current_model.variables.[0].value_type",
          "[2].current_model.variables.[1].name",
          "[2].current_model.variables.[1].lineno",
          "[2].current_model.variables.[1].value_type",
          "[2].current_model.variables.[2].name",
          "[2].current_model.variables.[2].lineno",
          "[2].current_model.variables.[2].value_type",
          "[2].current_model.variables.[3].name",
          "[2].current_model.variables.[3].lineno",
          "[2].current_model.variables.[3].value_type",
          "[2].current_model.variables.[4].name",
          "[2].current_model.variables.[4].lineno",
          "[2].current_model.variables.[4].value_type",
          "[2].current_model.variables.[5].name",
          "[2].current_model.variables.[5].lineno",
          "[2].current_model.variables.[5].value_type",
          "[2].current_model.variables.[6].name",
          "[2].current_model.variables.[6].lineno",
          "[2].current_model.variables.[6].value_type",
          "[2].current_model.variables.[7].name",
          "[2].current_model.variables.[7].lineno",
          "[2].current_model.variables.[7].value_type",
          "[2].current_model.variables.[8].name",
          "[2].current_model.variables.[8].lineno",
          "[2].current_model.variables.[8].value_type",
          "[2].current_model.variables.[9].name",
          "[2].current_model.variables.[9].lineno",
          "[2].current_model.variables.[9].value_type",
          "[2].current_model.variables.[10].name",
          "[2].current_model.variables.[10].lineno",
          "[2].current_model.variables.[10].value_type",
          "[2].current_model.variables.[11].name",
          "[2].current_model.variables.[11].lineno",
          "[2].current_model.variables.[11].value_type",
          "[2].current_model.variables.[12].name",
          "[2].current_model.variables.[12].lineno",
          "[2].current_model.variables.[12].value_type",
          "[2].current_model.variables.[13].name",
          "[2].current_model.variables.[13].lineno",
          "[2].current_model.variables.[13].value_type",
          "[2].current_model.variables.[14].name",
          "[2].current_model.variables.[14].lineno",
          "[2].current_model.variables.[14].value_type",
          "[2].current_model.variables.[15].name",
          "[2].current_model.variables.[15].lineno",
          "[2].current_model.variables.[15].value_type",
          "[2].current_model.variables.[16].name",
          "[2].current_model.variables.[16].lineno",
          "[2].current_model.variables.[16].value_type",
          "[2].current_model.variables.[17].name",
          "[2].current_model.variables.[17].lineno",
          "[2].current_model.variables.[17].value_type",
          "[2].current_model.variables.[18].name",
          "[2].current_model.variables.[18].lineno",
          "[2].current_model.variables.[18].value_type",
          "[2].current_model.variables.[19].name",
          "[2].current_model.variables.[19].lineno",
          "[2].current_model.variables.[19].value_type",
          "[2].current_model.variables.[20].name",
          "[2].current_model.variables.[20].lineno",
          "[2].current_model.variables.[20].value_type",
          "[2].current_model.variables.[21].name",
          "[2].current_model.variables.[21].lineno",
          "[2].current_model.variables.[21].value_type",
          "[2].current_model.variables.[22].name",
          "[2].current_model.variables.[22].lineno",
          "[2].current_model.variables.[22].value_type",
          "[2].current_model.variables.[23].name",
          "[2].current_model.variables.[23].lineno",
          "[2].current_model.variables.[23].value_type",
          "[2].current_model.variables.[24].name",
          "[2].current_model.variables.[24].lineno",
          "[2].current_model.variables.[24].value_type",
          "[2].current_model.variables.[25].name",
          "[2].current_model.variables.[25].lineno",
          "[2].current_model.variables.[25].value_type",
          "[2].current_model.variables.[26].name",
          "[2].current_model.variables.[26].lineno",
          "[2].current_model.variables.[26].value_type",
          "[2].current_model.variables.[27].name",
          "[2].current_model.variables.[27].lineno",
          "[2].current_model.variables.[27].value_type",
          "[2].current_model.variables.[28].name",
          "[2].current_model.variables.[28].lineno",
          "[2].current_model.variables.[28].value_type",
          "[2].current_model.variables.[29].name",
          "[2].current_model.variables.[29].lineno",
          "[2].current_model.variables.[29].value_type",
          "[2].current_model.variables.[30].name",
          "[2].current_model.variables.[30].lineno",
          "[2].current_model.variables.[30].value_type",
          "[2].current_model.variables.[31].name",
          "[2].current_model.variables.[31].lineno",
          "[2].current_model.variables.[31].value_type",
          "[2].current_model.variables.[32].name",
          "[2].current_model.variables.[32].lineno",
          "[2].current_model.variables.[32].value_type",
          "[2].current_model.variables.[33].name",
          "[2].current_model.variables.[33].lineno",
          "[2].current_model.variables.[33].value_type",
          "[2].current_model.variables.[34].name",
          "[2].current_model.variables.[34].lineno",
          "[2].current_model.variables.[34].value_type",
          "[2].current_model.variables.[35].name",
          "[2].current_model.variables.[35].lineno",
          "[2].current_model.variables.[35].value_type",
          "[2].current_model.variables.[36].name",
          "[2].current_model.variables.[36].lineno",
          "[2].current_model.variables.[36].value_type",
          "[2].current_model.variables.[37].name",
          "[2].current_model.variables.[37].lineno",
          "[2].current_model.variables.[37].value_type",
          "[2].current_model.variables.[38].name",
          "[2].current_model.variables.[38].lineno",
          "[2].current_model.variables.[38].value_type",
          "[2].current_model.variables.[39].name",
          "[2].current_model.variables.[39].lineno",
          "[2].current_model.variables.[39].value_type",
          "[2].current_model.variables.[40].name",
          "[2].current_model.variables.[40].lineno",
          "[2].current_model.variables.[40].value_type",
          "[2].current_model.variables.[41].name",
          "[2].current_model.variables.[41].lineno",
          "[2].current_model.variables.[41].value_type",
          "[2].current_model.variables.[42].name",
          "[2].current_model.variables.[42].lineno",
          "[2].current_model.variables.[42].value_type",
          "[2].current_model.variables.[43].name",
          "[2].current_model.variables.[43].lineno",
          "[2].current_model.variables.[43].value_type",
          "[2].current_model.variables.[44].name",
          "[2].current_model.variables.[44].lineno",
          "[2].current_model.variables.[44].value_type",
          "[2].current_model.variables.[45].name",
          "[2].current_model.variables.[45].lineno",
          "[2].current_model.variables.[45].value_type",
          "[2].current_model.variables.[46].name",
          "[2].current_model.variables.[46].lineno",
          "[2].current_model.variables.[46].value_type",
          "[2].current_model.variables.[47].name",
          "[2].current_model.variables.[47].lineno",
          "[2].current_model.variables.[47].value_type",
          "[2].current_model.variables.[48].name",
          "[2].current_model.variables.[48].lineno",
          "[2].current_model.variables.[48].value_type",
          "[2].current_model.variables.[49].name",
          "[2].current_model.variables.[49].lineno",
          "[2].current_model.variables.[49].value_type",
          "[2].current_model.variables.[50].name",
          "[2].current_model.variables.[50].lineno",
          "[2].current_model.variables.[50].value_type",
          "[2].current_model.variables.[51].name",
          "[2].current_model.variables.[51].lineno",
          "[2].current_model.variables.[51].value_type",
          "[2].current_model.variables.[52].name",
          "[2].current_model.variables.[52].lineno",
          "[2].current_model.variables.[52].value_type",
          "[2].current_model.variables.[53].name",
          "[2].current_model.variables.[53].lineno",
          "[2].current_model.variables.[53].value_type",
          "[2].current_model.variables.[54].name",
          "[2].current_model.variables.[54].lineno",
          "[2].current_model.variables.[54].value_type",
          "[2].current_model.variables.[55].name",
          "[2].current_model.variables.[55].lineno",
          "[2].current_model.variables.[55].value_type",
          "[2].current_model.lines_of_code",
          "[2].current_model.content_length",
          "[2].current_model.ast_nodes",
          "[2].persisted_model",
          "[2].persisted_model.error",
          "[2].persisted_model.content",
          "[2].pattern_match",
          "[2].is_new_artifact",
          "[2].recommendations",
          "[3].file_path",
          "[3].has_git_history",
          "[3].current_model",
          "[3].current_model.type",
          "[3].current_model.functions",
          "[3].current_model.functions.[0].name",
          "[3].current_model.functions.[0].lineno",
          "[3].current_model.functions.[0].args",
          "[3].current_model.functions.[0].decorators",
          "[3].current_model.functions.[0].docstring",
          "[3].current_model.functions.[0].complexity",
          "[3].current_model.functions.[1].name",
          "[3].current_model.functions.[1].lineno",
          "[3].current_model.functions.[1].args",
          "[3].current_model.functions.[1].decorators",
          "[3].current_model.functions.[1].docstring",
          "[3].current_model.functions.[1].complexity",
          "[3].current_model.functions.[2].name",
          "[3].current_model.functions.[2].lineno",
          "[3].current_model.functions.[2].args",
          "[3].current_model.functions.[2].decorators",
          "[3].current_model.functions.[2].docstring",
          "[3].current_model.functions.[2].complexity",
          "[3].current_model.functions.[3].name",
          "[3].current_model.functions.[3].lineno",
          "[3].current_model.functions.[3].args",
          "[3].current_model.functions.[3].decorators",
          "[3].current_model.functions.[3].docstring",
          "[3].current_model.functions.[3].complexity",
          "[3].current_model.functions.[4].name",
          "[3].current_model.functions.[4].lineno",
          "[3].current_model.functions.[4].args",
          "[3].current_model.functions.[4].decorators",
          "[3].current_model.functions.[4].docstring",
          "[3].current_model.functions.[4].complexity",
          "[3].current_model.functions.[5].name",
          "[3].current_model.functions.[5].lineno",
          "[3].current_model.functions.[5].args",
          "[3].current_model.functions.[5].decorators",
          "[3].current_model.functions.[5].docstring",
          "[3].current_model.functions.[5].complexity",
          "[3].current_model.functions.[6].name",
          "[3].current_model.functions.[6].lineno",
          "[3].current_model.functions.[6].args",
          "[3].current_model.functions.[6].decorators",
          "[3].current_model.functions.[6].docstring",
          "[3].current_model.functions.[6].complexity",
          "[3].current_model.classes",
          "[3].current_model.classes.[0].name",
          "[3].current_model.classes.[0].lineno",
          "[3].current_model.classes.[0].bases",
          "[3].current_model.classes.[0].methods",
          "[3].current_model.classes.[0].docstring",
          "[3].current_model.imports",
          "[3].current_model.imports.[0].type",
          "[3].current_model.imports.[0].module",
          "[3].current_model.imports.[0].name",
          "[3].current_model.imports.[0].asname",
          "[3].current_model.imports.[0].lineno",
          "[3].current_model.imports.[1].type",
          "[3].current_model.imports.[1].module",
          "[3].current_model.imports.[1].asname",
          "[3].current_model.imports.[1].lineno",
          "[3].current_model.imports.[2].type",
          "[3].current_model.imports.[2].module",
          "[3].current_model.imports.[2].asname",
          "[3].current_model.imports.[2].lineno",
          "[3].current_model.imports.[3].type",
          "[3].current_model.imports.[3].module",
          "[3].current_model.imports.[3].asname",
          "[3].current_model.imports.[3].lineno",
          "[3].current_model.imports.[4].type",
          "[3].current_model.imports.[4].module",
          "[3].current_model.imports.[4].name",
          "[3].current_model.imports.[4].asname",
          "[3].current_model.imports.[4].lineno",
          "[3].current_model.imports.[5].type",
          "[3].current_model.imports.[5].module",
          "[3].current_model.imports.[5].name",
          "[3].current_model.imports.[5].asname",
          "[3].current_model.imports.[5].lineno",
          "[3].current_model.imports.[6].type",
          "[3].current_model.imports.[6].module",
          "[3].current_model.imports.[6].asname",
          "[3].current_model.imports.[6].lineno",
          "[3].current_model.imports.[7].type",
          "[3].current_model.imports.[7].module",
          "[3].current_model.imports.[7].asname",
          "[3].current_model.imports.[7].lineno",
          "[3].current_model.imports.[8].type",
          "[3].current_model.imports.[8].module",
          "[3].current_model.imports.[8].asname",
          "[3].current_model.imports.[8].lineno",
          "[3].current_model.lines_of_code",
          "[3].current_model.content_length",
          "[3].current_model.syntax_errors",
          "[3].persisted_model",
          "[3].persisted_model.domain",
          "[3].persisted_model.patterns",
          "[3].persisted_model.content_indicators",
          "[3].persisted_model.linter",
          "[3].persisted_model.validator",
          "[3].persisted_model.formatter",
          "[3].pattern_match",
          "[3].is_new_artifact",
          "[3].recommendations"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "00a67482de755e3c469f1b14a9e19fdd",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.912116",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/prompts/gemini_2_5_preview_pr_review.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/prompts/gemini_2_5_preview_pr_review.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 20,
          "code_blocks": 0,
          "lists": 45,
          "links": 0,
          "emphasis": 28,
          "tables": 0,
          "images": 0,
          "total_lines": 116,
          "non_empty_lines": 87
        },
        "content_metrics": {
          "total_chars": 4642,
          "total_lines": 116,
          "non_empty_lines": 87,
          "avg_line_length": 39.025862068965516,
          "max_line_length": 192
        },
        "lines_of_code": 116,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": false,
          "has_links": false,
          "has_headers": true,
          "structure_score": 1
        }
      },
      "complexity_score": 5.2,
      "structure_hash": "aa3216957c426dad",
      "lines_of_code": 116,
      "created_at": "2025-08-03T10:06:04.877293",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/docs/HEALTHCARE_CDC_README.md": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/docs/HEALTHCARE_CDC_README.md",
      "file_type": "markdown",
      "model_type": "ast",
      "model_data": {
        "markdown_analysis": {
          "headers": 44,
          "code_blocks": 20,
          "lists": 77,
          "links": 2,
          "emphasis": 33,
          "tables": 0,
          "images": 0,
          "total_lines": 269,
          "non_empty_lines": 214
        },
        "content_metrics": {
          "total_chars": 7906,
          "total_lines": 269,
          "non_empty_lines": 214,
          "avg_line_length": 28.394052044609666,
          "max_line_length": 373
        },
        "lines_of_code": 269,
        "documentation_quality": {
          "has_table_of_contents": false,
          "has_examples": true,
          "has_links": true,
          "has_headers": true,
          "structure_score": 3
        }
      },
      "complexity_score": 10.0,
      "structure_hash": "43b27930f239ea69",
      "lines_of_code": 269,
      "created_at": "2025-08-03T10:06:04.887344",
      "commit_hash": "ad91365573d4f2ead64d24f3736ac09f50b15004"
    },
    "/home/lou/Documents/OpenFlow-Playground/live_progress_data.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/live_progress_data.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 1936,
        "json_keys": [
          "total_files",
          "fixed_files",
          "broken_files",
          "checkpoints",
          "current_file",
          "current_hypothesis",
          "current_action",
          "validation_results",
          "recent_activity",
          "last_updated"
        ],
        "json_depth": 3,
        "json_keys_list": [
          "total_files",
          "fixed_files",
          "broken_files",
          "checkpoints",
          "current_file",
          "current_hypothesis",
          "current_action",
          "validation_results",
          "validation_results.syntax",
          "validation_results.linter",
          "validation_results.mypy",
          "recent_activity",
          "recent_activity.[0].timestamp",
          "recent_activity.[0].message",
          "recent_activity.[1].timestamp",
          "recent_activity.[1].message",
          "recent_activity.[2].timestamp",
          "recent_activity.[2].message",
          "recent_activity.[3].timestamp",
          "recent_activity.[3].message",
          "recent_activity.[4].timestamp",
          "recent_activity.[4].message",
          "recent_activity.[5].timestamp",
          "recent_activity.[5].message",
          "recent_activity.[6].timestamp",
          "recent_activity.[6].message",
          "recent_activity.[7].timestamp",
          "recent_activity.[7].message",
          "recent_activity.[8].timestamp",
          "recent_activity.[8].message",
          "recent_activity.[9].timestamp",
          "recent_activity.[9].message",
          "last_updated"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "9325fb5e2a770100efff9bcb48dbea2d",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.914826",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/model_sufficiency_report.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/model_sufficiency_report.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 6450,
        "json_keys": [
          "current_models",
          "requirements_analysis",
          "recreation_analysis",
          "recommendations",
          "mdc_parsing_implications"
        ],
        "json_depth": 7,
        "json_keys_list": [
          "current_models",
          "current_models.syntax_patterns",
          "current_models.syntax_patterns.description",
          "current_models.syntax_patterns.capabilities",
          "current_models.syntax_patterns.data_sources",
          "current_models.file_structure",
          "current_models.file_structure.description",
          "current_models.file_structure.capabilities",
          "current_models.file_structure.data_sources",
          "current_models.code_patterns",
          "current_models.code_patterns.description",
          "current_models.code_patterns.capabilities",
          "current_models.code_patterns.data_sources",
          "current_models.project_metadata",
          "current_models.project_metadata.description",
          "current_models.project_metadata.capabilities",
          "current_models.project_metadata.data_sources",
          "requirements_analysis",
          "requirements_analysis.capabilities",
          "requirements_analysis.capabilities.functional_requirements",
          "requirements_analysis.capabilities.functional_requirements.capabilities",
          "requirements_analysis.capabilities.functional_requirements.capabilities.function_analysis",
          "requirements_analysis.capabilities.functional_requirements.capabilities.function_analysis.can_determine",
          "requirements_analysis.capabilities.functional_requirements.capabilities.function_analysis.cannot_determine",
          "requirements_analysis.capabilities.functional_requirements.capabilities.function_analysis.sufficiency",
          "requirements_analysis.capabilities.functional_requirements.capabilities.class_analysis",
          "requirements_analysis.capabilities.functional_requirements.capabilities.class_analysis.can_determine",
          "requirements_analysis.capabilities.functional_requirements.capabilities.class_analysis.cannot_determine",
          "requirements_analysis.capabilities.functional_requirements.capabilities.class_analysis.sufficiency",
          "requirements_analysis.capabilities.functional_requirements.capabilities.import_analysis",
          "requirements_analysis.capabilities.functional_requirements.capabilities.import_analysis.can_determine",
          "requirements_analysis.capabilities.functional_requirements.capabilities.import_analysis.cannot_determine",
          "requirements_analysis.capabilities.functional_requirements.capabilities.import_analysis.sufficiency",
          "requirements_analysis.capabilities.functional_requirements.overall_assessment",
          "requirements_analysis.capabilities.non_functional_requirements",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.performance_requirements",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.performance_requirements.can_determine",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.performance_requirements.cannot_determine",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.performance_requirements.sufficiency",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.security_requirements",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.security_requirements.can_determine",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.security_requirements.cannot_determine",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.security_requirements.sufficiency",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.maintainability_requirements",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.maintainability_requirements.can_determine",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.maintainability_requirements.cannot_determine",
          "requirements_analysis.capabilities.non_functional_requirements.capabilities.maintainability_requirements.sufficiency",
          "requirements_analysis.capabilities.non_functional_requirements.overall_assessment",
          "requirements_analysis.overall_score",
          "requirements_analysis.assessment",
          "recreation_analysis",
          "recreation_analysis.capabilities",
          "recreation_analysis.capabilities.syntax_recreation",
          "recreation_analysis.capabilities.syntax_recreation.capabilities",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.function_recreation",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.function_recreation.can_recreate",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.function_recreation.cannot_recreate",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.function_recreation.sufficiency",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.class_recreation",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.class_recreation.can_recreate",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.class_recreation.cannot_recreate",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.class_recreation.sufficiency",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.import_recreation",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.import_recreation.can_recreate",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.import_recreation.cannot_recreate",
          "recreation_analysis.capabilities.syntax_recreation.capabilities.import_recreation.sufficiency",
          "recreation_analysis.capabilities.syntax_recreation.overall_assessment",
          "recreation_analysis.capabilities.semantic_recreation",
          "recreation_analysis.capabilities.semantic_recreation.capabilities",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.logic_recreation",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.logic_recreation.can_recreate",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.logic_recreation.cannot_recreate",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.logic_recreation.sufficiency",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.type_recreation",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.type_recreation.can_recreate",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.type_recreation.cannot_recreate",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.type_recreation.sufficiency",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.pattern_recreation",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.pattern_recreation.can_recreate",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.pattern_recreation.cannot_recreate",
          "recreation_analysis.capabilities.semantic_recreation.capabilities.pattern_recreation.sufficiency",
          "recreation_analysis.capabilities.semantic_recreation.overall_assessment",
          "recreation_analysis.overall_score",
          "recreation_analysis.assessment",
          "recommendations",
          "mdc_parsing_implications",
          "mdc_parsing_implications.current_capabilities",
          "mdc_parsing_implications.missing_capabilities",
          "mdc_parsing_implications.potential_benefits"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "fb5b944c25cf877fbf457862ec193cc1",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.915746",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/ast_projection_report.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ast_projection_report.json",
      "file_type": "JSON",
      "model_type": "error",
      "model_data": {
        "error": "Expecting value: line 1 column 1 (char 0)",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "4af4870bf4b294efb5660e0ef410f59f",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:06:04.917634",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/ast_capability_report.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ast_capability_report.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 908,
        "json_keys": [
          "ast_capabilities",
          "project_insights",
          "ast_advantages",
          "ast_limitations",
          "enhancement_opportunities"
        ],
        "json_depth": 2,
        "json_keys_list": [
          "ast_capabilities",
          "ast_capabilities.total_files",
          "ast_capabilities.valid_files",
          "ast_capabilities.syntax_error_files",
          "ast_capabilities.success_rate",
          "project_insights",
          "project_insights.total_imports",
          "project_insights.total_functions",
          "project_insights.total_classes",
          "project_insights.unique_dependencies",
          "project_insights.detected_patterns",
          "project_insights.avg_complexity",
          "ast_advantages",
          "ast_limitations",
          "enhancement_opportunities"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "2f37c8df0d314b55940669f328f58c23",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.918095",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/multi_generational_analysis.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/multi_generational_analysis.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "list",
        "json_size": 39,
        "json_keys": [],
        "json_depth": 2,
        "json_keys_list": [
          "[0].error"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "ddf1191a09151efd281451921bfa5589",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.918944",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/project_model_registry.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/project_model_registry.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 20320,
        "json_keys": [
          "description",
          "version",
          "last_updated",
          "author",
          "domains",
          "tool_selection_logic",
          "file_organization",
          "requirements_traceability",
          "meta"
        ],
        "json_depth": 4,
        "json_keys_list": [
          "description",
          "version",
          "last_updated",
          "author",
          "domains",
          "domains.cloudformation",
          "domains.cloudformation.patterns",
          "domains.cloudformation.content_indicators",
          "domains.cloudformation.linter",
          "domains.cloudformation.validator",
          "domains.cloudformation.exclusions",
          "domains.cloudformation.requirements",
          "domains.python",
          "domains.python.patterns",
          "domains.python.content_indicators",
          "domains.python.linter",
          "domains.python.formatter",
          "domains.python.exclusions",
          "domains.python.requirements",
          "domains.streamlit",
          "domains.streamlit.patterns",
          "domains.streamlit.content_indicators",
          "domains.streamlit.linter",
          "domains.streamlit.formatter",
          "domains.streamlit.validator",
          "domains.streamlit.exclusions",
          "domains.streamlit.requirements",
          "domains.security_first",
          "domains.security_first.patterns",
          "domains.security_first.content_indicators",
          "domains.security_first.linter",
          "domains.security_first.validator",
          "domains.security_first.formatter",
          "domains.security_first.exclusions",
          "domains.security_first.requirements",
          "domains.multi_agent_testing",
          "domains.multi_agent_testing.patterns",
          "domains.multi_agent_testing.content_indicators",
          "domains.multi_agent_testing.linter",
          "domains.multi_agent_testing.formatter",
          "domains.multi_agent_testing.validator",
          "domains.multi_agent_testing.type_checker",
          "domains.multi_agent_testing.exclusions",
          "domains.multi_agent_testing.requirements",
          "domains.bash",
          "domains.bash.patterns",
          "domains.bash.content_indicators",
          "domains.bash.linter",
          "domains.bash.exclusions",
          "domains.bash.requirements",
          "domains.documentation",
          "domains.documentation.patterns",
          "domains.documentation.content_indicators",
          "domains.documentation.linter",
          "domains.documentation.formatter",
          "domains.documentation.exclusions",
          "domains.documentation.requirements",
          "domains.configuration",
          "domains.configuration.patterns",
          "domains.configuration.content_indicators",
          "domains.configuration.linter",
          "domains.configuration.validator",
          "domains.configuration.exclusions",
          "domains.configuration.requirements",
          "domains.mdc_generator",
          "domains.mdc_generator.patterns",
          "domains.mdc_generator.content_indicators",
          "domains.mdc_generator.linter",
          "domains.mdc_generator.formatter",
          "domains.mdc_generator.validator",
          "domains.mdc_generator.exclusions",
          "domains.mdc_generator.requirements",
          "domains.healthcare_cdc",
          "domains.healthcare_cdc.patterns",
          "domains.healthcare_cdc.content_indicators",
          "domains.healthcare_cdc.linter",
          "domains.healthcare_cdc.formatter",
          "domains.healthcare_cdc.validator",
          "domains.healthcare_cdc.exclusions",
          "domains.healthcare_cdc.requirements",
          "domains.rule_compliance",
          "domains.rule_compliance.patterns",
          "domains.rule_compliance.content_indicators",
          "domains.rule_compliance.linter",
          "domains.rule_compliance.formatter",
          "domains.rule_compliance.validator",
          "domains.rule_compliance.exclusions",
          "domains.rule_compliance.requirements",
          "domains.package_management",
          "domains.package_management.patterns",
          "domains.package_management.content_indicators",
          "domains.package_management.linter",
          "domains.package_management.validator",
          "domains.package_management.formatter",
          "domains.package_management.exclusions",
          "domains.package_management.requirements",
          "domains.type_safety",
          "domains.type_safety.patterns",
          "domains.type_safety.content_indicators",
          "domains.type_safety.linter",
          "domains.type_safety.validator",
          "domains.type_safety.formatter",
          "domains.type_safety.requirements",
          "domains.ghostbusters_validation",
          "domains.ghostbusters_validation.patterns",
          "domains.ghostbusters_validation.content_indicators",
          "domains.ghostbusters_validation.linter",
          "domains.ghostbusters_validation.validator",
          "domains.ghostbusters_validation.formatter",
          "domains.meta_failure_prevention",
          "domains.meta_failure_prevention.patterns",
          "domains.meta_failure_prevention.content_indicators",
          "domains.meta_failure_prevention.linter",
          "domains.meta_failure_prevention.validator",
          "domains.meta_failure_prevention.formatter",
          "domains.testing",
          "domains.testing.patterns",
          "domains.testing.content_indicators",
          "domains.testing.linter",
          "domains.testing.formatter",
          "domains.testing.validator",
          "domains.testing.type_checker",
          "domains.testing.exclusions",
          "domains.testing.requirements",
          "domains.code_quality_model",
          "domains.code_quality_model.patterns",
          "domains.code_quality_model.content_indicators",
          "domains.code_quality_model.linter",
          "domains.code_quality_model.formatter",
          "domains.code_quality_model.validator",
          "domains.code_quality_model.exclusions",
          "domains.code_quality_model.requirements",
          "tool_selection_logic",
          "tool_selection_logic.pattern_weight",
          "tool_selection_logic.content_indicator_weight",
          "tool_selection_logic.exclusion_weight",
          "tool_selection_logic.confidence_threshold",
          "file_organization",
          "file_organization.src",
          "file_organization.src.description",
          "file_organization.src.streamlit",
          "file_organization.src.security_first",
          "file_organization.src.multi_agent_testing",
          "file_organization.tests",
          "file_organization.tests.description",
          "file_organization.tests.test_basic_validation.py",
          "file_organization.tests.test_core_concepts.py",
          "file_organization.tests.test_file_organization.py",
          "file_organization.scripts",
          "file_organization.scripts.description",
          "file_organization.scripts.deploy.sh",
          "file_organization.scripts.monitor.sh",
          "file_organization.scripts.run_live_smoke_test*.sh",
          "file_organization.docs",
          "file_organization.docs.description",
          "file_organization.docs.PR_*.md",
          "file_organization.docs.*.md",
          "file_organization.docs.ORGANIZATION_SUMMARY.md",
          "file_organization.docs.DOCUMENTATION_INDEX.md",
          "file_organization.docs.prioritized_implementation_plan.md",
          "file_organization.config",
          "file_organization.config.description",
          "file_organization.config.config.env.example",
          "file_organization.config..pre-commit-config.yaml",
          "file_organization.config..yaml-lint-ignore",
          "file_organization.config.Openflow-Playground.yaml",
          "file_organization.data",
          "file_organization.data.description",
          "file_organization.data.*.json",
          "file_organization.data.cost_analysis.py",
          "file_organization.data.PR_Dashboard.html",
          "file_organization.data.diversity_analysis_report.*",
          "file_organization.data.*.png",
          "file_organization.data.*.svg",
          "file_organization.data.synthesis_*.json",
          "file_organization.healthcare_cdc",
          "file_organization.healthcare_cdc.description",
          "file_organization.healthcare_cdc.healthcare_cdc_domain_model.py",
          "file_organization.healthcare_cdc.test_healthcare_cdc_domain_model.py",
          "file_organization.healthcare_cdc.README.md",
          "file_organization.requirements",
          "file_organization.requirements.description",
          "file_organization.requirements.requirements_streamlit.txt",
          "file_organization.requirements.requirements_diversity.txt",
          "file_organization.project_level",
          "file_organization.project_level.description",
          "file_organization.project_level.README.md",
          "file_organization.project_level.QUICKSTART.md",
          "file_organization.project_level.project_model_registry.json",
          "file_organization.project_level.project_model.py",
          "file_organization.project_level.setup.py",
          "file_organization.project_level..gitignore",
          "file_organization.domain_rules",
          "file_organization.domain_rules.description",
          "file_organization.domain_rules.src/streamlit/.cursor/rules/streamlit-development.mdc",
          "file_organization.domain_rules.src/security_first/.cursor/rules/security-first.mdc",
          "file_organization.domain_rules.src/multi_agent_testing/.cursor/rules/multi-agent-testing.mdc",
          "file_organization.domain_rules.scripts/.cursor/rules/bash-scripting.mdc",
          "file_organization.domain_rules.docs/.cursor/rules/documentation.mdc",
          "file_organization.domain_rules.config/.cursor/rules/configuration.mdc",
          "file_organization.domain_rules.data/.cursor/rules/data-management.mdc",
          "requirements_traceability",
          "requirements_traceability.[0].requirement",
          "requirements_traceability.[0].domain",
          "requirements_traceability.[0].implementation",
          "requirements_traceability.[0].test",
          "requirements_traceability.[1].requirement",
          "requirements_traceability.[1].domain",
          "requirements_traceability.[1].implementation",
          "requirements_traceability.[1].test",
          "requirements_traceability.[2].requirement",
          "requirements_traceability.[2].domain",
          "requirements_traceability.[2].implementation",
          "requirements_traceability.[2].test",
          "requirements_traceability.[3].requirement",
          "requirements_traceability.[3].domain",
          "requirements_traceability.[3].implementation",
          "requirements_traceability.[3].test",
          "requirements_traceability.[4].requirement",
          "requirements_traceability.[4].domain",
          "requirements_traceability.[4].implementation",
          "requirements_traceability.[4].test",
          "requirements_traceability.[5].requirement",
          "requirements_traceability.[5].domain",
          "requirements_traceability.[5].implementation",
          "requirements_traceability.[5].test",
          "requirements_traceability.[6].requirement",
          "requirements_traceability.[6].domain",
          "requirements_traceability.[6].implementation",
          "requirements_traceability.[6].test",
          "requirements_traceability.[7].requirement",
          "requirements_traceability.[7].domain",
          "requirements_traceability.[7].implementation",
          "requirements_traceability.[7].test",
          "requirements_traceability.[8].requirement",
          "requirements_traceability.[8].domain",
          "requirements_traceability.[8].implementation",
          "requirements_traceability.[8].test",
          "requirements_traceability.[9].requirement",
          "requirements_traceability.[9].domain",
          "requirements_traceability.[9].implementation",
          "requirements_traceability.[9].test",
          "requirements_traceability.[10].requirement",
          "requirements_traceability.[10].domain",
          "requirements_traceability.[10].implementation",
          "requirements_traceability.[10].test",
          "requirements_traceability.[11].requirement",
          "requirements_traceability.[11].domain",
          "requirements_traceability.[11].implementation",
          "requirements_traceability.[11].test",
          "requirements_traceability.[12].requirement",
          "requirements_traceability.[12].domain",
          "requirements_traceability.[12].implementation",
          "requirements_traceability.[12].test",
          "requirements_traceability.[13].requirement",
          "requirements_traceability.[13].domain",
          "requirements_traceability.[13].implementation",
          "requirements_traceability.[13].test",
          "requirements_traceability.[14].requirement",
          "requirements_traceability.[14].domain",
          "requirements_traceability.[14].implementation",
          "requirements_traceability.[14].test",
          "requirements_traceability.[15].requirement",
          "requirements_traceability.[15].domain",
          "requirements_traceability.[15].implementation",
          "requirements_traceability.[15].test",
          "requirements_traceability.[16].requirement",
          "requirements_traceability.[16].domain",
          "requirements_traceability.[16].implementation",
          "requirements_traceability.[16].test",
          "requirements_traceability.[17].requirement",
          "requirements_traceability.[17].domain",
          "requirements_traceability.[17].implementation",
          "requirements_traceability.[17].test",
          "requirements_traceability.[18].requirement",
          "requirements_traceability.[18].domain",
          "requirements_traceability.[18].implementation",
          "requirements_traceability.[18].test",
          "requirements_traceability.[19].requirement",
          "requirements_traceability.[19].domain",
          "requirements_traceability.[19].implementation",
          "requirements_traceability.[19].test",
          "requirements_traceability.[20].requirement",
          "requirements_traceability.[20].domain",
          "requirements_traceability.[20].implementation",
          "requirements_traceability.[20].test",
          "requirements_traceability.[21].requirement",
          "requirements_traceability.[21].domain",
          "requirements_traceability.[21].implementation",
          "requirements_traceability.[21].test",
          "requirements_traceability.[22].requirement",
          "requirements_traceability.[22].domain",
          "requirements_traceability.[22].implementation",
          "requirements_traceability.[22].test",
          "requirements_traceability.[23].requirement",
          "requirements_traceability.[23].domain",
          "requirements_traceability.[23].implementation",
          "requirements_traceability.[23].test",
          "requirements_traceability.[24].requirement",
          "requirements_traceability.[24].domain",
          "requirements_traceability.[24].implementation",
          "requirements_traceability.[24].test",
          "requirements_traceability.[25].requirement",
          "requirements_traceability.[25].domain",
          "requirements_traceability.[25].implementation",
          "requirements_traceability.[25].test",
          "requirements_traceability.[26].requirement",
          "requirements_traceability.[26].domain",
          "requirements_traceability.[26].implementation",
          "requirements_traceability.[26].test",
          "requirements_traceability.[27].requirement",
          "requirements_traceability.[27].domain",
          "requirements_traceability.[27].implementation",
          "requirements_traceability.[27].test",
          "requirements_traceability.[28].requirement",
          "requirements_traceability.[28].domain",
          "requirements_traceability.[28].implementation",
          "requirements_traceability.[28].test",
          "requirements_traceability.[29].requirement",
          "requirements_traceability.[29].domain",
          "requirements_traceability.[29].implementation",
          "requirements_traceability.[29].test",
          "requirements_traceability.[30].requirement",
          "requirements_traceability.[30].domain",
          "requirements_traceability.[30].implementation",
          "requirements_traceability.[30].test",
          "requirements_traceability.[31].requirement",
          "requirements_traceability.[31].domain",
          "requirements_traceability.[31].implementation",
          "requirements_traceability.[31].test",
          "requirements_traceability.[32].requirement",
          "requirements_traceability.[32].domain",
          "requirements_traceability.[32].implementation",
          "requirements_traceability.[32].test",
          "requirements_traceability.[33].requirement",
          "requirements_traceability.[33].domain",
          "requirements_traceability.[33].implementation",
          "requirements_traceability.[33].test",
          "requirements_traceability.[34].requirement",
          "requirements_traceability.[34].domain",
          "requirements_traceability.[34].implementation",
          "requirements_traceability.[34].test",
          "requirements_traceability.[35].requirement",
          "requirements_traceability.[35].domain",
          "requirements_traceability.[35].implementation",
          "requirements_traceability.[35].test",
          "requirements_traceability.[36].requirement",
          "requirements_traceability.[36].domain",
          "requirements_traceability.[36].implementation",
          "requirements_traceability.[36].test",
          "requirements_traceability.[37].requirement",
          "requirements_traceability.[37].domain",
          "requirements_traceability.[37].implementation",
          "requirements_traceability.[37].test",
          "requirements_traceability.[38].requirement",
          "requirements_traceability.[38].domain",
          "requirements_traceability.[38].implementation",
          "requirements_traceability.[38].test",
          "requirements_traceability.[39].requirement",
          "requirements_traceability.[39].domain",
          "requirements_traceability.[39].implementation",
          "requirements_traceability.[39].test",
          "requirements_traceability.[40].requirement",
          "requirements_traceability.[40].domain",
          "requirements_traceability.[40].implementation",
          "requirements_traceability.[40].test",
          "requirements_traceability.[41].requirement",
          "requirements_traceability.[41].domain",
          "requirements_traceability.[41].implementation",
          "requirements_traceability.[41].test",
          "requirements_traceability.[42].requirement",
          "requirements_traceability.[42].domain",
          "requirements_traceability.[42].implementation",
          "requirements_traceability.[42].test",
          "requirements_traceability.[43].requirement",
          "requirements_traceability.[43].domain",
          "requirements_traceability.[43].implementation",
          "requirements_traceability.[43].test",
          "meta",
          "meta.project",
          "meta.model_type",
          "meta.file",
          "meta.tests",
          "meta.rules"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "2d11db7c976005dfe41fbec3ab925320",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.919349",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/ast_models.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/ast_models.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 109544,
        "json_keys": [
          "file_models",
          "summary",
          "metadata"
        ],
        "json_depth": 6,
        "json_keys_list": [
          "file_models",
          "file_models.fix_test_rule_compliance_indentation.py",
          "file_models.fix_test_rule_compliance_indentation.py.file_path",
          "file_models.fix_test_rule_compliance_indentation.py.file_type",
          "file_models.fix_test_rule_compliance_indentation.py.model_type",
          "file_models.fix_test_rule_compliance_indentation.py.complexity_score",
          "file_models.fix_test_rule_compliance_indentation.py.line_count",
          "file_models.fix_test_rule_compliance_indentation.py.function_count",
          "file_models.fix_test_rule_compliance_indentation.py.class_count",
          "file_models.fix_test_rule_compliance_indentation.py.import_count",
          "file_models.fix_test_rule_compliance_indentation.py.error_count",
          "file_models.fix_test_rule_compliance_indentation.py.model_data",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.docstrings",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.imports",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[0].name",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[1].name",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.classes",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.variables",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.line_count",
          "file_models.final_syntax_fix.py",
          "file_models.final_syntax_fix.py.file_path",
          "file_models.final_syntax_fix.py.file_type",
          "file_models.final_syntax_fix.py.model_type",
          "file_models.final_syntax_fix.py.complexity_score",
          "file_models.final_syntax_fix.py.line_count",
          "file_models.final_syntax_fix.py.function_count",
          "file_models.final_syntax_fix.py.class_count",
          "file_models.final_syntax_fix.py.import_count",
          "file_models.final_syntax_fix.py.error_count",
          "file_models.final_syntax_fix.py.model_data",
          "file_models.final_syntax_fix.py.model_data.docstrings",
          "file_models.final_syntax_fix.py.model_data.imports",
          "file_models.final_syntax_fix.py.model_data.functions",
          "file_models.final_syntax_fix.py.model_data.functions.[0].name",
          "file_models.final_syntax_fix.py.model_data.functions.[0].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[1].name",
          "file_models.final_syntax_fix.py.model_data.functions.[1].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[2].name",
          "file_models.final_syntax_fix.py.model_data.functions.[2].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[3].name",
          "file_models.final_syntax_fix.py.model_data.functions.[3].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[4].name",
          "file_models.final_syntax_fix.py.model_data.functions.[4].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[5].name",
          "file_models.final_syntax_fix.py.model_data.functions.[5].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[6].name",
          "file_models.final_syntax_fix.py.model_data.functions.[6].docstring",
          "file_models.final_syntax_fix.py.model_data.classes",
          "file_models.final_syntax_fix.py.model_data.classes.[0].name",
          "file_models.final_syntax_fix.py.model_data.classes.[0].docstring",
          "file_models.final_syntax_fix.py.model_data.variables",
          "file_models.final_syntax_fix.py.model_data.line_count",
          "file_models.fix_test_rule_compliance.py",
          "file_models.fix_test_rule_compliance.py.file_path",
          "file_models.fix_test_rule_compliance.py.file_type",
          "file_models.fix_test_rule_compliance.py.model_type",
          "file_models.fix_test_rule_compliance.py.complexity_score",
          "file_models.fix_test_rule_compliance.py.line_count",
          "file_models.fix_test_rule_compliance.py.function_count",
          "file_models.fix_test_rule_compliance.py.class_count",
          "file_models.fix_test_rule_compliance.py.import_count",
          "file_models.fix_test_rule_compliance.py.error_count",
          "file_models.fix_test_rule_compliance.py.model_data",
          "file_models.fix_test_rule_compliance.py.model_data.docstrings",
          "file_models.fix_test_rule_compliance.py.model_data.imports",
          "file_models.fix_test_rule_compliance.py.model_data.functions",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[0].name",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[0].docstring",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[1].name",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[1].docstring",
          "file_models.fix_test_rule_compliance.py.model_data.classes",
          "file_models.fix_test_rule_compliance.py.model_data.variables",
          "file_models.fix_test_rule_compliance.py.model_data.line_count",
          "file_models.fix_remaining_indentation.py",
          "file_models.fix_remaining_indentation.py.file_path",
          "file_models.fix_remaining_indentation.py.file_type",
          "file_models.fix_remaining_indentation.py.model_type",
          "file_models.fix_remaining_indentation.py.complexity_score",
          "file_models.fix_remaining_indentation.py.line_count",
          "file_models.fix_remaining_indentation.py.function_count",
          "file_models.fix_remaining_indentation.py.class_count",
          "file_models.fix_remaining_indentation.py.import_count",
          "file_models.fix_remaining_indentation.py.error_count",
          "file_models.fix_remaining_indentation.py.model_data",
          "file_models.fix_remaining_indentation.py.model_data.docstrings",
          "file_models.fix_remaining_indentation.py.model_data.imports",
          "file_models.fix_remaining_indentation.py.model_data.functions",
          "file_models.fix_remaining_indentation.py.model_data.functions.[0].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[1].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[2].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[2].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[3].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[3].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[4].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[4].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[5].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[5].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[6].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[6].docstring",
          "file_models.fix_remaining_indentation.py.model_data.classes",
          "file_models.fix_remaining_indentation.py.model_data.variables",
          "file_models.fix_remaining_indentation.py.model_data.line_count",
          "file_models.ast_projection_demo.py",
          "file_models.ast_projection_demo.py.file_path",
          "file_models.ast_projection_demo.py.file_type",
          "file_models.ast_projection_demo.py.model_type",
          "file_models.ast_projection_demo.py.complexity_score",
          "file_models.ast_projection_demo.py.line_count",
          "file_models.ast_projection_demo.py.function_count",
          "file_models.ast_projection_demo.py.class_count",
          "file_models.ast_projection_demo.py.import_count",
          "file_models.ast_projection_demo.py.error_count",
          "file_models.ast_projection_demo.py.model_data",
          "file_models.ast_projection_demo.py.model_data.docstrings",
          "file_models.ast_projection_demo.py.model_data.imports",
          "file_models.ast_projection_demo.py.model_data.functions",
          "file_models.ast_projection_demo.py.model_data.functions.[0].name",
          "file_models.ast_projection_demo.py.model_data.functions.[0].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[1].name",
          "file_models.ast_projection_demo.py.model_data.functions.[1].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[2].name",
          "file_models.ast_projection_demo.py.model_data.functions.[2].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[3].name",
          "file_models.ast_projection_demo.py.model_data.functions.[3].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[4].name",
          "file_models.ast_projection_demo.py.model_data.functions.[4].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[5].name",
          "file_models.ast_projection_demo.py.model_data.functions.[5].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[6].name",
          "file_models.ast_projection_demo.py.model_data.functions.[6].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[7].name",
          "file_models.ast_projection_demo.py.model_data.functions.[7].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[8].name",
          "file_models.ast_projection_demo.py.model_data.functions.[8].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[9].name",
          "file_models.ast_projection_demo.py.model_data.functions.[9].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[10].name",
          "file_models.ast_projection_demo.py.model_data.functions.[10].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[11].name",
          "file_models.ast_projection_demo.py.model_data.functions.[11].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[12].name",
          "file_models.ast_projection_demo.py.model_data.functions.[12].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[13].name",
          "file_models.ast_projection_demo.py.model_data.functions.[13].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[14].name",
          "file_models.ast_projection_demo.py.model_data.functions.[14].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[15].name",
          "file_models.ast_projection_demo.py.model_data.functions.[15].docstring",
          "file_models.ast_projection_demo.py.model_data.classes",
          "file_models.ast_projection_demo.py.model_data.classes.[0].name",
          "file_models.ast_projection_demo.py.model_data.classes.[0].docstring",
          "file_models.ast_projection_demo.py.model_data.variables",
          "file_models.ast_projection_demo.py.model_data.line_count",
          "file_models.test_git_enhanced.py",
          "file_models.test_git_enhanced.py.file_path",
          "file_models.test_git_enhanced.py.file_type",
          "file_models.test_git_enhanced.py.model_type",
          "file_models.test_git_enhanced.py.complexity_score",
          "file_models.test_git_enhanced.py.line_count",
          "file_models.test_git_enhanced.py.function_count",
          "file_models.test_git_enhanced.py.class_count",
          "file_models.test_git_enhanced.py.import_count",
          "file_models.test_git_enhanced.py.error_count",
          "file_models.test_git_enhanced.py.model_data",
          "file_models.test_git_enhanced.py.model_data.docstrings",
          "file_models.test_git_enhanced.py.model_data.imports",
          "file_models.test_git_enhanced.py.model_data.functions",
          "file_models.test_git_enhanced.py.model_data.functions.[0].name",
          "file_models.test_git_enhanced.py.model_data.functions.[0].docstring",
          "file_models.test_git_enhanced.py.model_data.classes",
          "file_models.test_git_enhanced.py.model_data.variables",
          "file_models.test_git_enhanced.py.model_data.line_count",
          "file_models.multi_generational_git_analyzer.py",
          "file_models.multi_generational_git_analyzer.py.file_path",
          "file_models.multi_generational_git_analyzer.py.file_type",
          "file_models.multi_generational_git_analyzer.py.model_type",
          "file_models.multi_generational_git_analyzer.py.complexity_score",
          "file_models.multi_generational_git_analyzer.py.line_count",
          "file_models.multi_generational_git_analyzer.py.function_count",
          "file_models.multi_generational_git_analyzer.py.class_count",
          "file_models.multi_generational_git_analyzer.py.import_count",
          "file_models.multi_generational_git_analyzer.py.error_count",
          "file_models.multi_generational_git_analyzer.py.model_data",
          "file_models.multi_generational_git_analyzer.py.model_data.docstrings",
          "file_models.multi_generational_git_analyzer.py.model_data.imports",
          "file_models.multi_generational_git_analyzer.py.model_data.functions",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[0].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[0].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[1].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[1].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[2].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[2].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[3].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[3].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[4].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[4].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[5].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[5].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[6].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[6].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[7].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[7].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[8].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[8].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[9].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[9].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[10].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[10].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[11].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[11].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[12].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[12].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[13].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[13].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[14].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[14].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[15].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[15].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[16].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[16].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[17].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[17].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[18].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[18].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[19].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[19].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[20].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[20].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[21].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[21].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[22].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[22].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[23].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[23].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[24].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[24].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[25].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[25].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.classes",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[0].name",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[0].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[1].name",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[1].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.variables",
          "file_models.multi_generational_git_analyzer.py.model_data.line_count",
          "file_models.ast_model_gap_analyzer.py",
          "file_models.ast_model_gap_analyzer.py.file_path",
          "file_models.ast_model_gap_analyzer.py.file_type",
          "file_models.ast_model_gap_analyzer.py.model_type",
          "file_models.ast_model_gap_analyzer.py.complexity_score",
          "file_models.ast_model_gap_analyzer.py.line_count",
          "file_models.ast_model_gap_analyzer.py.function_count",
          "file_models.ast_model_gap_analyzer.py.class_count",
          "file_models.ast_model_gap_analyzer.py.import_count",
          "file_models.ast_model_gap_analyzer.py.error_count",
          "file_models.ast_model_gap_analyzer.py.model_data",
          "file_models.ast_model_gap_analyzer.py.model_data.docstrings",
          "file_models.ast_model_gap_analyzer.py.model_data.imports",
          "file_models.ast_model_gap_analyzer.py.model_data.functions",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[0].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[0].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[1].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[1].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[2].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[2].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[3].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[3].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[4].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[4].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[5].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[5].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[6].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[6].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.classes",
          "file_models.ast_model_gap_analyzer.py.model_data.classes.[0].name",
          "file_models.ast_model_gap_analyzer.py.model_data.classes.[0].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.variables",
          "file_models.ast_model_gap_analyzer.py.model_data.line_count",
          "file_models.model_sufficiency_analyzer.py",
          "file_models.model_sufficiency_analyzer.py.file_path",
          "file_models.model_sufficiency_analyzer.py.file_type",
          "file_models.model_sufficiency_analyzer.py.model_type",
          "file_models.model_sufficiency_analyzer.py.complexity_score",
          "file_models.model_sufficiency_analyzer.py.line_count",
          "file_models.model_sufficiency_analyzer.py.function_count",
          "file_models.model_sufficiency_analyzer.py.class_count",
          "file_models.model_sufficiency_analyzer.py.import_count",
          "file_models.model_sufficiency_analyzer.py.error_count",
          "file_models.model_sufficiency_analyzer.py.model_data",
          "file_models.model_sufficiency_analyzer.py.model_data.docstrings",
          "file_models.model_sufficiency_analyzer.py.model_data.imports",
          "file_models.model_sufficiency_analyzer.py.model_data.functions",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[0].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[0].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[1].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[1].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[2].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[2].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[3].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[3].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[4].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[4].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[5].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[5].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[6].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[6].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[7].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[7].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[8].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[8].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[9].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[9].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[10].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[10].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.classes",
          "file_models.model_sufficiency_analyzer.py.model_data.classes.[0].name",
          "file_models.model_sufficiency_analyzer.py.model_data.classes.[0].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.variables",
          "file_models.model_sufficiency_analyzer.py.model_data.line_count",
          "file_models.ast_capability_analyzer.py",
          "file_models.ast_capability_analyzer.py.file_path",
          "file_models.ast_capability_analyzer.py.file_type",
          "file_models.ast_capability_analyzer.py.model_type",
          "file_models.ast_capability_analyzer.py.complexity_score",
          "file_models.ast_capability_analyzer.py.line_count",
          "file_models.ast_capability_analyzer.py.function_count",
          "file_models.ast_capability_analyzer.py.class_count",
          "file_models.ast_capability_analyzer.py.import_count",
          "file_models.ast_capability_analyzer.py.error_count",
          "file_models.ast_capability_analyzer.py.model_data",
          "file_models.ast_capability_analyzer.py.model_data.docstrings",
          "file_models.ast_capability_analyzer.py.model_data.imports",
          "file_models.ast_capability_analyzer.py.model_data.functions",
          "file_models.ast_capability_analyzer.py.model_data.functions.[0].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[0].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[1].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[1].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[2].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[2].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[3].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[3].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[4].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[4].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[5].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[5].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[6].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[6].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[7].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[7].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[8].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[8].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[9].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[9].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[10].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[10].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[11].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[11].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[12].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[12].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[13].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[13].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[14].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[14].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[15].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[15].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[16].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[16].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[17].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[17].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[18].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[18].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[19].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[19].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[20].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[20].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[21].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[21].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[22].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[22].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[23].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[23].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[24].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[24].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[25].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[25].docstring",
          "file_models.ast_capability_analyzer.py.model_data.classes",
          "file_models.ast_capability_analyzer.py.model_data.classes.[0].name",
          "file_models.ast_capability_analyzer.py.model_data.classes.[0].docstring",
          "file_models.ast_capability_analyzer.py.model_data.variables",
          "file_models.ast_capability_analyzer.py.model_data.line_count",
          "file_models.test_syntax_fix_safety.py",
          "file_models.test_syntax_fix_safety.py.file_path",
          "file_models.test_syntax_fix_safety.py.file_type",
          "file_models.test_syntax_fix_safety.py.model_type",
          "file_models.test_syntax_fix_safety.py.complexity_score",
          "file_models.test_syntax_fix_safety.py.line_count",
          "file_models.test_syntax_fix_safety.py.function_count",
          "file_models.test_syntax_fix_safety.py.class_count",
          "file_models.test_syntax_fix_safety.py.import_count",
          "file_models.test_syntax_fix_safety.py.error_count",
          "file_models.test_syntax_fix_safety.py.model_data",
          "file_models.test_syntax_fix_safety.py.model_data.docstrings",
          "file_models.test_syntax_fix_safety.py.model_data.imports",
          "file_models.test_syntax_fix_safety.py.model_data.functions",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[0].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[0].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[1].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[1].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[2].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[2].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[3].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[3].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.classes",
          "file_models.test_syntax_fix_safety.py.model_data.variables",
          "file_models.test_syntax_fix_safety.py.model_data.line_count",
          "file_models.setup.py",
          "file_models.setup.py.file_path",
          "file_models.setup.py.file_type",
          "file_models.setup.py.model_type",
          "file_models.setup.py.complexity_score",
          "file_models.setup.py.line_count",
          "file_models.setup.py.function_count",
          "file_models.setup.py.class_count",
          "file_models.setup.py.import_count",
          "file_models.setup.py.error_count",
          "file_models.setup.py.model_data",
          "file_models.setup.py.model_data.docstrings",
          "file_models.setup.py.model_data.imports",
          "file_models.setup.py.model_data.functions",
          "file_models.setup.py.model_data.functions.[0].name",
          "file_models.setup.py.model_data.functions.[0].docstring",
          "file_models.setup.py.model_data.functions.[1].name",
          "file_models.setup.py.model_data.functions.[1].docstring",
          "file_models.setup.py.model_data.functions.[2].name",
          "file_models.setup.py.model_data.functions.[2].docstring",
          "file_models.setup.py.model_data.functions.[3].name",
          "file_models.setup.py.model_data.functions.[3].docstring",
          "file_models.setup.py.model_data.functions.[4].name",
          "file_models.setup.py.model_data.functions.[4].docstring",
          "file_models.setup.py.model_data.functions.[5].name",
          "file_models.setup.py.model_data.functions.[5].docstring",
          "file_models.setup.py.model_data.functions.[6].name",
          "file_models.setup.py.model_data.functions.[6].docstring",
          "file_models.setup.py.model_data.functions.[7].name",
          "file_models.setup.py.model_data.functions.[7].docstring",
          "file_models.setup.py.model_data.functions.[8].name",
          "file_models.setup.py.model_data.functions.[8].docstring",
          "file_models.setup.py.model_data.functions.[9].name",
          "file_models.setup.py.model_data.functions.[9].docstring",
          "file_models.setup.py.model_data.classes",
          "file_models.setup.py.model_data.variables",
          "file_models.setup.py.model_data.line_count",
          "file_models.improved_syntax_fix.py",
          "file_models.improved_syntax_fix.py.file_path",
          "file_models.improved_syntax_fix.py.file_type",
          "file_models.improved_syntax_fix.py.model_type",
          "file_models.improved_syntax_fix.py.complexity_score",
          "file_models.improved_syntax_fix.py.line_count",
          "file_models.improved_syntax_fix.py.function_count",
          "file_models.improved_syntax_fix.py.class_count",
          "file_models.improved_syntax_fix.py.import_count",
          "file_models.improved_syntax_fix.py.error_count",
          "file_models.improved_syntax_fix.py.model_data",
          "file_models.improved_syntax_fix.py.model_data.docstrings",
          "file_models.improved_syntax_fix.py.model_data.imports",
          "file_models.improved_syntax_fix.py.model_data.functions",
          "file_models.improved_syntax_fix.py.model_data.functions.[0].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[0].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[1].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[1].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[2].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[2].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[3].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[3].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[4].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[4].docstring",
          "file_models.improved_syntax_fix.py.model_data.classes",
          "file_models.improved_syntax_fix.py.model_data.variables",
          "file_models.improved_syntax_fix.py.model_data.line_count",
          "file_models.fix_all_syntax_errors.py",
          "file_models.fix_all_syntax_errors.py.file_path",
          "file_models.fix_all_syntax_errors.py.file_type",
          "file_models.fix_all_syntax_errors.py.model_type",
          "file_models.fix_all_syntax_errors.py.complexity_score",
          "file_models.fix_all_syntax_errors.py.line_count",
          "file_models.fix_all_syntax_errors.py.function_count",
          "file_models.fix_all_syntax_errors.py.class_count",
          "file_models.fix_all_syntax_errors.py.import_count",
          "file_models.fix_all_syntax_errors.py.error_count",
          "file_models.fix_all_syntax_errors.py.model_data",
          "file_models.fix_all_syntax_errors.py.model_data.docstrings",
          "file_models.fix_all_syntax_errors.py.model_data.imports",
          "file_models.fix_all_syntax_errors.py.model_data.functions",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[0].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[0].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[1].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[1].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[2].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[2].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[3].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[3].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[4].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[4].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[5].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[5].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[6].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[6].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[7].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[7].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.classes",
          "file_models.fix_all_syntax_errors.py.model_data.variables",
          "file_models.fix_all_syntax_errors.py.model_data.line_count",
          "file_models.model_consistency_analyzer.py",
          "file_models.model_consistency_analyzer.py.file_path",
          "file_models.model_consistency_analyzer.py.file_type",
          "file_models.model_consistency_analyzer.py.model_type",
          "file_models.model_consistency_analyzer.py.complexity_score",
          "file_models.model_consistency_analyzer.py.line_count",
          "file_models.model_consistency_analyzer.py.function_count",
          "file_models.model_consistency_analyzer.py.class_count",
          "file_models.model_consistency_analyzer.py.import_count",
          "file_models.model_consistency_analyzer.py.error_count",
          "file_models.model_consistency_analyzer.py.model_data",
          "file_models.model_consistency_analyzer.py.model_data.docstrings",
          "file_models.model_consistency_analyzer.py.model_data.imports",
          "file_models.model_consistency_analyzer.py.model_data.functions",
          "file_models.model_consistency_analyzer.py.model_data.functions.[0].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[0].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[1].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[1].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[2].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[2].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[3].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[3].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[4].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[4].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[5].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[5].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[6].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[6].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[7].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[7].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[8].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[8].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[9].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[9].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[10].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[10].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[11].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[11].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[12].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[12].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[13].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[13].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[14].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[14].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[15].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[15].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[16].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[16].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[17].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[17].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[18].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[18].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[19].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[19].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[20].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[20].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[21].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[21].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[22].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[22].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[23].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[23].docstring",
          "file_models.model_consistency_analyzer.py.model_data.classes",
          "file_models.model_consistency_analyzer.py.model_data.classes.[0].name",
          "file_models.model_consistency_analyzer.py.model_data.classes.[0].docstring",
          "file_models.model_consistency_analyzer.py.model_data.variables",
          "file_models.model_consistency_analyzer.py.model_data.line_count",
          "file_models.comprehensive_indentation_fix.py",
          "file_models.comprehensive_indentation_fix.py.file_path",
          "file_models.comprehensive_indentation_fix.py.file_type",
          "file_models.comprehensive_indentation_fix.py.model_type",
          "file_models.comprehensive_indentation_fix.py.complexity_score",
          "file_models.comprehensive_indentation_fix.py.line_count",
          "file_models.comprehensive_indentation_fix.py.function_count",
          "file_models.comprehensive_indentation_fix.py.class_count",
          "file_models.comprehensive_indentation_fix.py.import_count",
          "file_models.comprehensive_indentation_fix.py.error_count",
          "file_models.comprehensive_indentation_fix.py.model_data",
          "file_models.comprehensive_indentation_fix.py.model_data.docstrings",
          "file_models.comprehensive_indentation_fix.py.model_data.imports",
          "file_models.comprehensive_indentation_fix.py.model_data.functions",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[0].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[0].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[1].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[1].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[2].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[2].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[3].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[3].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[4].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[4].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[5].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[5].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[6].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[6].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.classes",
          "file_models.comprehensive_indentation_fix.py.model_data.classes.[0].name",
          "file_models.comprehensive_indentation_fix.py.model_data.classes.[0].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.variables",
          "file_models.comprehensive_indentation_fix.py.model_data.line_count",
          "file_models.fix_f_strings.py",
          "file_models.fix_f_strings.py.file_path",
          "file_models.fix_f_strings.py.file_type",
          "file_models.fix_f_strings.py.model_type",
          "file_models.fix_f_strings.py.complexity_score",
          "file_models.fix_f_strings.py.line_count",
          "file_models.fix_f_strings.py.function_count",
          "file_models.fix_f_strings.py.class_count",
          "file_models.fix_f_strings.py.import_count",
          "file_models.fix_f_strings.py.error_count",
          "file_models.fix_f_strings.py.model_data",
          "file_models.fix_f_strings.py.model_data.docstrings",
          "file_models.fix_f_strings.py.model_data.imports",
          "file_models.fix_f_strings.py.model_data.functions",
          "file_models.fix_f_strings.py.model_data.functions.[0].name",
          "file_models.fix_f_strings.py.model_data.functions.[0].docstring",
          "file_models.fix_f_strings.py.model_data.functions.[1].name",
          "file_models.fix_f_strings.py.model_data.functions.[1].docstring",
          "file_models.fix_f_strings.py.model_data.functions.[2].name",
          "file_models.fix_f_strings.py.model_data.functions.[2].docstring",
          "file_models.fix_f_strings.py.model_data.classes",
          "file_models.fix_f_strings.py.model_data.variables",
          "file_models.fix_f_strings.py.model_data.line_count",
          "file_models.checkpointed_ast_modeler.py",
          "file_models.checkpointed_ast_modeler.py.file_path",
          "file_models.checkpointed_ast_modeler.py.file_type",
          "file_models.checkpointed_ast_modeler.py.model_type",
          "file_models.checkpointed_ast_modeler.py.complexity_score",
          "file_models.checkpointed_ast_modeler.py.line_count",
          "file_models.checkpointed_ast_modeler.py.function_count",
          "file_models.checkpointed_ast_modeler.py.class_count",
          "file_models.checkpointed_ast_modeler.py.import_count",
          "file_models.checkpointed_ast_modeler.py.error_count",
          "file_models.checkpointed_ast_modeler.py.model_data",
          "file_models.checkpointed_ast_modeler.py.model_data.docstrings",
          "file_models.checkpointed_ast_modeler.py.model_data.imports",
          "file_models.checkpointed_ast_modeler.py.model_data.functions",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[0].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[0].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[1].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[1].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[2].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[2].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[3].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[3].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[4].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[4].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[5].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[5].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[6].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[6].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[7].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[7].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[8].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[8].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[9].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[9].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[10].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[10].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[11].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[11].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.classes",
          "file_models.checkpointed_ast_modeler.py.model_data.classes.[0].name",
          "file_models.checkpointed_ast_modeler.py.model_data.classes.[0].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.classes.[1].name",
          "file_models.checkpointed_ast_modeler.py.model_data.classes.[1].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.variables",
          "file_models.checkpointed_ast_modeler.py.model_data.line_count",
          "file_models.focused_ast_modeler.py",
          "file_models.focused_ast_modeler.py.file_path",
          "file_models.focused_ast_modeler.py.file_type",
          "file_models.focused_ast_modeler.py.model_type",
          "file_models.focused_ast_modeler.py.complexity_score",
          "file_models.focused_ast_modeler.py.line_count",
          "file_models.focused_ast_modeler.py.function_count",
          "file_models.focused_ast_modeler.py.class_count",
          "file_models.focused_ast_modeler.py.import_count",
          "file_models.focused_ast_modeler.py.error_count",
          "file_models.focused_ast_modeler.py.model_data",
          "file_models.focused_ast_modeler.py.model_data.docstrings",
          "file_models.focused_ast_modeler.py.model_data.imports",
          "file_models.focused_ast_modeler.py.model_data.functions",
          "file_models.focused_ast_modeler.py.model_data.functions.[0].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[0].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[1].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[1].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[2].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[2].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[3].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[3].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[4].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[4].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[5].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[5].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[6].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[6].docstring",
          "file_models.focused_ast_modeler.py.model_data.classes",
          "file_models.focused_ast_modeler.py.model_data.classes.[0].name",
          "file_models.focused_ast_modeler.py.model_data.classes.[0].docstring",
          "file_models.focused_ast_modeler.py.model_data.classes.[1].name",
          "file_models.focused_ast_modeler.py.model_data.classes.[1].docstring",
          "file_models.focused_ast_modeler.py.model_data.variables",
          "file_models.focused_ast_modeler.py.model_data.line_count",
          "file_models.debug_modeler.py",
          "file_models.debug_modeler.py.file_path",
          "file_models.debug_modeler.py.file_type",
          "file_models.debug_modeler.py.model_type",
          "file_models.debug_modeler.py.complexity_score",
          "file_models.debug_modeler.py.line_count",
          "file_models.debug_modeler.py.function_count",
          "file_models.debug_modeler.py.class_count",
          "file_models.debug_modeler.py.import_count",
          "file_models.debug_modeler.py.error_count",
          "file_models.debug_modeler.py.model_data",
          "file_models.debug_modeler.py.model_data.docstrings",
          "file_models.debug_modeler.py.model_data.imports",
          "file_models.debug_modeler.py.model_data.functions",
          "file_models.debug_modeler.py.model_data.functions.[0].name",
          "file_models.debug_modeler.py.model_data.functions.[0].docstring",
          "file_models.debug_modeler.py.model_data.classes",
          "file_models.debug_modeler.py.model_data.variables",
          "file_models.debug_modeler.py.model_data.line_count",
          "file_models.model_driven_reconstructor.py",
          "file_models.model_driven_reconstructor.py.file_path",
          "file_models.model_driven_reconstructor.py.file_type",
          "file_models.model_driven_reconstructor.py.model_type",
          "file_models.model_driven_reconstructor.py.complexity_score",
          "file_models.model_driven_reconstructor.py.line_count",
          "file_models.model_driven_reconstructor.py.function_count",
          "file_models.model_driven_reconstructor.py.class_count",
          "file_models.model_driven_reconstructor.py.import_count",
          "file_models.model_driven_reconstructor.py.error_count",
          "file_models.model_driven_reconstructor.py.model_data",
          "file_models.model_driven_reconstructor.py.model_data.docstrings",
          "file_models.model_driven_reconstructor.py.model_data.imports",
          "file_models.model_driven_reconstructor.py.model_data.functions",
          "file_models.model_driven_reconstructor.py.model_data.functions.[0].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[0].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[1].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[1].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[2].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[2].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[3].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[3].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[4].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[4].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[5].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[5].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[6].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[6].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[7].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[7].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[8].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[8].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[9].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[9].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[10].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[10].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[11].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[11].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[12].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[12].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[13].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[13].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[14].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[14].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[15].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[15].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[16].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[16].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[17].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[17].docstring",
          "file_models.model_driven_reconstructor.py.model_data.classes",
          "file_models.model_driven_reconstructor.py.model_data.classes.[0].name",
          "file_models.model_driven_reconstructor.py.model_data.classes.[0].docstring",
          "file_models.model_driven_reconstructor.py.model_data.variables",
          "file_models.model_driven_reconstructor.py.model_data.line_count",
          "file_models.fix_test_indentation.py",
          "file_models.fix_test_indentation.py.file_path",
          "file_models.fix_test_indentation.py.file_type",
          "file_models.fix_test_indentation.py.model_type",
          "file_models.fix_test_indentation.py.complexity_score",
          "file_models.fix_test_indentation.py.line_count",
          "file_models.fix_test_indentation.py.function_count",
          "file_models.fix_test_indentation.py.class_count",
          "file_models.fix_test_indentation.py.import_count",
          "file_models.fix_test_indentation.py.error_count",
          "file_models.fix_test_indentation.py.model_data",
          "file_models.fix_test_indentation.py.model_data.docstrings",
          "file_models.fix_test_indentation.py.model_data.imports",
          "file_models.fix_test_indentation.py.model_data.functions",
          "file_models.fix_test_indentation.py.model_data.functions.[0].name",
          "file_models.fix_test_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_test_indentation.py.model_data.functions.[1].name",
          "file_models.fix_test_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_test_indentation.py.model_data.classes",
          "file_models.fix_test_indentation.py.model_data.variables",
          "file_models.fix_test_indentation.py.model_data.line_count",
          "file_models.project_model.py",
          "file_models.project_model.py.file_path",
          "file_models.project_model.py.file_type",
          "file_models.project_model.py.model_type",
          "file_models.project_model.py.complexity_score",
          "file_models.project_model.py.line_count",
          "file_models.project_model.py.function_count",
          "file_models.project_model.py.class_count",
          "file_models.project_model.py.import_count",
          "file_models.project_model.py.error_count",
          "file_models.project_model.py.model_data",
          "file_models.project_model.py.model_data.docstrings",
          "file_models.project_model.py.model_data.imports",
          "file_models.project_model.py.model_data.functions",
          "file_models.project_model.py.model_data.functions.[0].name",
          "file_models.project_model.py.model_data.functions.[0].docstring",
          "file_models.project_model.py.model_data.functions.[1].name",
          "file_models.project_model.py.model_data.functions.[1].docstring",
          "file_models.project_model.py.model_data.functions.[2].name",
          "file_models.project_model.py.model_data.functions.[2].docstring",
          "file_models.project_model.py.model_data.functions.[3].name",
          "file_models.project_model.py.model_data.functions.[3].docstring",
          "file_models.project_model.py.model_data.functions.[4].name",
          "file_models.project_model.py.model_data.functions.[4].docstring",
          "file_models.project_model.py.model_data.functions.[5].name",
          "file_models.project_model.py.model_data.functions.[5].docstring",
          "file_models.project_model.py.model_data.functions.[6].name",
          "file_models.project_model.py.model_data.functions.[6].docstring",
          "file_models.project_model.py.model_data.classes",
          "file_models.project_model.py.model_data.classes.[0].name",
          "file_models.project_model.py.model_data.classes.[0].docstring",
          "file_models.project_model.py.model_data.classes.[1].name",
          "file_models.project_model.py.model_data.classes.[1].docstring",
          "file_models.project_model.py.model_data.classes.[2].name",
          "file_models.project_model.py.model_data.classes.[2].docstring",
          "file_models.project_model.py.model_data.variables",
          "file_models.project_model.py.model_data.line_count",
          "file_models.test_functional_equivalence.py",
          "file_models.test_functional_equivalence.py.file_path",
          "file_models.test_functional_equivalence.py.file_type",
          "file_models.test_functional_equivalence.py.model_type",
          "file_models.test_functional_equivalence.py.complexity_score",
          "file_models.test_functional_equivalence.py.line_count",
          "file_models.test_functional_equivalence.py.function_count",
          "file_models.test_functional_equivalence.py.class_count",
          "file_models.test_functional_equivalence.py.import_count",
          "file_models.test_functional_equivalence.py.error_count",
          "file_models.test_functional_equivalence.py.model_data",
          "file_models.test_functional_equivalence.py.model_data.docstrings",
          "file_models.test_functional_equivalence.py.model_data.imports",
          "file_models.test_functional_equivalence.py.model_data.functions",
          "file_models.test_functional_equivalence.py.model_data.functions.[0].name",
          "file_models.test_functional_equivalence.py.model_data.functions.[0].docstring",
          "file_models.test_functional_equivalence.py.model_data.functions.[1].name",
          "file_models.test_functional_equivalence.py.model_data.functions.[1].docstring",
          "file_models.test_functional_equivalence.py.model_data.functions.[2].name",
          "file_models.test_functional_equivalence.py.model_data.functions.[2].docstring",
          "file_models.test_functional_equivalence.py.model_data.classes",
          "file_models.test_functional_equivalence.py.model_data.variables",
          "file_models.test_functional_equivalence.py.model_data.line_count",
          "file_models.data/cost_analysis.py",
          "file_models.data/cost_analysis.py.file_path",
          "file_models.data/cost_analysis.py.file_type",
          "file_models.data/cost_analysis.py.model_type",
          "file_models.data/cost_analysis.py.complexity_score",
          "file_models.data/cost_analysis.py.line_count",
          "file_models.data/cost_analysis.py.function_count",
          "file_models.data/cost_analysis.py.class_count",
          "file_models.data/cost_analysis.py.import_count",
          "file_models.data/cost_analysis.py.error_count",
          "file_models.data/cost_analysis.py.model_data",
          "file_models.data/cost_analysis.py.model_data.docstrings",
          "file_models.data/cost_analysis.py.model_data.imports",
          "file_models.data/cost_analysis.py.model_data.functions",
          "file_models.data/cost_analysis.py.model_data.functions.[0].name",
          "file_models.data/cost_analysis.py.model_data.functions.[0].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[1].name",
          "file_models.data/cost_analysis.py.model_data.functions.[1].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[2].name",
          "file_models.data/cost_analysis.py.model_data.functions.[2].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[3].name",
          "file_models.data/cost_analysis.py.model_data.functions.[3].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[4].name",
          "file_models.data/cost_analysis.py.model_data.functions.[4].docstring",
          "file_models.data/cost_analysis.py.model_data.classes",
          "file_models.data/cost_analysis.py.model_data.variables",
          "file_models.data/cost_analysis.py.model_data.line_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.file_path",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.file_type",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_type",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.complexity_score",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.line_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.function_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.class_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.import_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.error_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.docstrings",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.imports",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[0].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[0].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[1].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[1].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[2].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[2].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[3].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[3].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[4].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[4].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[5].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[5].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[6].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[6].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[7].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[7].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[0].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[0].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[1].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[1].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[2].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[2].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[3].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[3].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[4].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[4].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[5].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[5].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[6].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[6].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[7].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[7].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[8].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[8].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[9].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[9].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[10].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[10].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.variables",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.line_count",
          "file_models.healthcare-cdc/__init__.py",
          "file_models.healthcare-cdc/__init__.py.file_path",
          "file_models.healthcare-cdc/__init__.py.file_type",
          "file_models.healthcare-cdc/__init__.py.model_type",
          "file_models.healthcare-cdc/__init__.py.complexity_score",
          "file_models.healthcare-cdc/__init__.py.line_count",
          "file_models.healthcare-cdc/__init__.py.function_count",
          "file_models.healthcare-cdc/__init__.py.class_count",
          "file_models.healthcare-cdc/__init__.py.import_count",
          "file_models.healthcare-cdc/__init__.py.error_count",
          "file_models.healthcare-cdc/__init__.py.model_data",
          "file_models.healthcare-cdc/__init__.py.model_data.docstrings",
          "file_models.healthcare-cdc/__init__.py.model_data.imports",
          "file_models.healthcare-cdc/__init__.py.model_data.functions",
          "file_models.healthcare-cdc/__init__.py.model_data.classes",
          "file_models.healthcare-cdc/__init__.py.model_data.variables",
          "file_models.healthcare-cdc/__init__.py.model_data.line_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.file_path",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.file_type",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_type",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.complexity_score",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.line_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.function_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.class_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.import_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.error_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.docstrings",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.imports",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[0].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[0].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[1].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[1].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[2].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[2].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[3].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[3].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[4].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[4].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[5].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[5].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[6].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[6].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[7].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[7].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[8].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[8].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[9].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[9].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[10].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[10].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[11].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[11].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[0].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[0].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[1].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[1].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[2].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[2].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[3].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[3].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.variables",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.line_count",
          "file_models.tests/test_rule_compliance.py",
          "file_models.tests/test_rule_compliance.py.file_path",
          "file_models.tests/test_rule_compliance.py.file_type",
          "file_models.tests/test_rule_compliance.py.model_type",
          "file_models.tests/test_rule_compliance.py.complexity_score",
          "file_models.tests/test_rule_compliance.py.line_count",
          "file_models.tests/test_rule_compliance.py.function_count",
          "file_models.tests/test_rule_compliance.py.class_count",
          "file_models.tests/test_rule_compliance.py.import_count",
          "file_models.tests/test_rule_compliance.py.error_count",
          "file_models.tests/test_rule_compliance.py.model_data",
          "file_models.tests/test_rule_compliance.py.model_data.docstrings",
          "file_models.tests/test_rule_compliance.py.model_data.imports",
          "file_models.tests/test_rule_compliance.py.model_data.functions",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[0].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[0].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[1].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[1].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[2].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[2].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[3].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[3].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[4].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[4].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[5].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[5].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[6].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[6].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[7].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[7].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[8].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[8].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[9].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[9].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.classes",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[0].name",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[0].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[1].name",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[1].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[2].name",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[2].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.variables",
          "file_models.tests/test_rule_compliance.py.model_data.line_count",
          "file_models.tests/test_file_organization.py",
          "file_models.tests/test_file_organization.py.file_path",
          "file_models.tests/test_file_organization.py.file_type",
          "file_models.tests/test_file_organization.py.model_type",
          "file_models.tests/test_file_organization.py.complexity_score",
          "file_models.tests/test_file_organization.py.line_count",
          "file_models.tests/test_file_organization.py.function_count",
          "file_models.tests/test_file_organization.py.class_count",
          "file_models.tests/test_file_organization.py.import_count",
          "file_models.tests/test_file_organization.py.error_count",
          "file_models.tests/test_file_organization.py.model_data",
          "file_models.tests/test_file_organization.py.model_data.error",
          "file_models.tests/test_cline_plan_blind_spots.py",
          "file_models.tests/test_cline_plan_blind_spots.py.file_path",
          "file_models.tests/test_cline_plan_blind_spots.py.file_type",
          "file_models.tests/test_cline_plan_blind_spots.py.model_type",
          "file_models.tests/test_cline_plan_blind_spots.py.complexity_score",
          "file_models.tests/test_cline_plan_blind_spots.py.line_count",
          "file_models.tests/test_cline_plan_blind_spots.py.function_count",
          "file_models.tests/test_cline_plan_blind_spots.py.class_count",
          "file_models.tests/test_cline_plan_blind_spots.py.import_count",
          "file_models.tests/test_cline_plan_blind_spots.py.error_count",
          "file_models.tests/test_cline_plan_blind_spots.py.model_data",
          "file_models.tests/test_cline_plan_blind_spots.py.model_data.error",
          "file_models.tests/test_data_fresh_cline_plan.py",
          "file_models.tests/test_data_fresh_cline_plan.py.file_path",
          "file_models.tests/test_data_fresh_cline_plan.py.file_type",
          "file_models.tests/test_data_fresh_cline_plan.py.model_type",
          "file_models.tests/test_data_fresh_cline_plan.py.complexity_score",
          "file_models.tests/test_data_fresh_cline_plan.py.line_count",
          "file_models.tests/test_data_fresh_cline_plan.py.function_count",
          "file_models.tests/test_data_fresh_cline_plan.py.class_count",
          "file_models.tests/test_data_fresh_cline_plan.py.import_count",
          "file_models.tests/test_data_fresh_cline_plan.py.error_count",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.docstrings",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.imports",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.functions",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.classes",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.variables",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.line_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.file_path",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.file_type",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.model_type",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.complexity_score",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.line_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.function_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.class_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.import_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.error_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.model_data",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.model_data.error",
          "file_models.tests/test_code_quality_comprehensive.py",
          "file_models.tests/test_code_quality_comprehensive.py.file_path",
          "file_models.tests/test_code_quality_comprehensive.py.file_type",
          "file_models.tests/test_code_quality_comprehensive.py.model_type",
          "file_models.tests/test_code_quality_comprehensive.py.complexity_score",
          "file_models.tests/test_code_quality_comprehensive.py.line_count",
          "file_models.tests/test_code_quality_comprehensive.py.function_count",
          "file_models.tests/test_code_quality_comprehensive.py.class_count",
          "file_models.tests/test_code_quality_comprehensive.py.import_count",
          "file_models.tests/test_code_quality_comprehensive.py.error_count",
          "file_models.tests/test_code_quality_comprehensive.py.model_data",
          "file_models.tests/test_code_quality_comprehensive.py.model_data.error",
          "file_models.tests/validate_healthcare_cdc_simple.py",
          "file_models.tests/validate_healthcare_cdc_simple.py.file_path",
          "file_models.tests/validate_healthcare_cdc_simple.py.file_type",
          "file_models.tests/validate_healthcare_cdc_simple.py.model_type",
          "file_models.tests/validate_healthcare_cdc_simple.py.complexity_score",
          "file_models.tests/validate_healthcare_cdc_simple.py.line_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.function_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.class_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.import_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.error_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.model_data",
          "file_models.tests/validate_healthcare_cdc_simple.py.model_data.error",
          "file_models.tests/test_mdc_generator.py",
          "file_models.tests/test_mdc_generator.py.file_path",
          "file_models.tests/test_mdc_generator.py.file_type",
          "file_models.tests/test_mdc_generator.py.model_type",
          "file_models.tests/test_mdc_generator.py.complexity_score",
          "file_models.tests/test_mdc_generator.py.line_count",
          "file_models.tests/test_mdc_generator.py.function_count",
          "file_models.tests/test_mdc_generator.py.class_count",
          "file_models.tests/test_mdc_generator.py.import_count",
          "file_models.tests/test_mdc_generator.py.error_count",
          "file_models.tests/test_mdc_generator.py.model_data",
          "file_models.tests/test_mdc_generator.py.model_data.error",
          "file_models.tests/test_file_existence.py",
          "file_models.tests/test_file_existence.py.file_path",
          "file_models.tests/test_file_existence.py.file_type",
          "file_models.tests/test_file_existence.py.model_type",
          "file_models.tests/test_file_existence.py.complexity_score",
          "file_models.tests/test_file_existence.py.line_count",
          "file_models.tests/test_file_existence.py.function_count",
          "file_models.tests/test_file_existence.py.class_count",
          "file_models.tests/test_file_existence.py.import_count",
          "file_models.tests/test_file_existence.py.error_count",
          "file_models.tests/test_file_existence.py.model_data",
          "file_models.tests/test_file_existence.py.model_data.error",
          "file_models.tests/test_security_enhancements.py",
          "file_models.tests/test_security_enhancements.py.file_path",
          "file_models.tests/test_security_enhancements.py.file_type",
          "file_models.tests/test_security_enhancements.py.model_type",
          "file_models.tests/test_security_enhancements.py.complexity_score",
          "file_models.tests/test_security_enhancements.py.line_count",
          "file_models.tests/test_security_enhancements.py.function_count",
          "file_models.tests/test_security_enhancements.py.class_count",
          "file_models.tests/test_security_enhancements.py.import_count",
          "file_models.tests/test_security_enhancements.py.error_count",
          "file_models.tests/test_security_enhancements.py.model_data",
          "file_models.tests/test_security_enhancements.py.model_data.error",
          "file_models.tests/test_basic_validation_simple.py",
          "file_models.tests/test_basic_validation_simple.py.file_path",
          "file_models.tests/test_basic_validation_simple.py.file_type",
          "file_models.tests/test_basic_validation_simple.py.model_type",
          "file_models.tests/test_basic_validation_simple.py.complexity_score",
          "file_models.tests/test_basic_validation_simple.py.line_count",
          "file_models.tests/test_basic_validation_simple.py.function_count",
          "file_models.tests/test_basic_validation_simple.py.class_count",
          "file_models.tests/test_basic_validation_simple.py.import_count",
          "file_models.tests/test_basic_validation_simple.py.error_count",
          "file_models.tests/test_basic_validation_simple.py.model_data",
          "file_models.tests/test_basic_validation_simple.py.model_data.error",
          "file_models.tests/test_code_quality_system.py",
          "file_models.tests/test_code_quality_system.py.file_path",
          "file_models.tests/test_code_quality_system.py.file_type",
          "file_models.tests/test_code_quality_system.py.model_type",
          "file_models.tests/test_code_quality_system.py.complexity_score",
          "file_models.tests/test_code_quality_system.py.line_count",
          "file_models.tests/test_code_quality_system.py.function_count",
          "file_models.tests/test_code_quality_system.py.class_count",
          "file_models.tests/test_code_quality_system.py.import_count",
          "file_models.tests/test_code_quality_system.py.error_count",
          "file_models.tests/test_code_quality_system.py.model_data",
          "file_models.tests/test_code_quality_system.py.model_data.error",
          "file_models.tests/test_basic_validation_pytest.py",
          "file_models.tests/test_basic_validation_pytest.py.file_path",
          "file_models.tests/test_basic_validation_pytest.py.file_type",
          "file_models.tests/test_basic_validation_pytest.py.model_type",
          "file_models.tests/test_basic_validation_pytest.py.complexity_score",
          "file_models.tests/test_basic_validation_pytest.py.line_count",
          "file_models.tests/test_basic_validation_pytest.py.function_count",
          "file_models.tests/test_basic_validation_pytest.py.class_count",
          "file_models.tests/test_basic_validation_pytest.py.import_count",
          "file_models.tests/test_basic_validation_pytest.py.error_count",
          "file_models.tests/test_basic_validation_pytest.py.model_data",
          "file_models.tests/test_basic_validation_pytest.py.model_data.error",
          "file_models.tests/test_uv_package_management.py",
          "file_models.tests/test_uv_package_management.py.file_path",
          "file_models.tests/test_uv_package_management.py.file_type",
          "file_models.tests/test_uv_package_management.py.model_type",
          "file_models.tests/test_uv_package_management.py.complexity_score",
          "file_models.tests/test_uv_package_management.py.line_count",
          "file_models.tests/test_uv_package_management.py.function_count",
          "file_models.tests/test_uv_package_management.py.class_count",
          "file_models.tests/test_uv_package_management.py.import_count",
          "file_models.tests/test_uv_package_management.py.error_count",
          "file_models.tests/test_uv_package_management.py.model_data",
          "file_models.tests/test_uv_package_management.py.model_data.error",
          "file_models.tests/test_type_safety.py",
          "file_models.tests/test_type_safety.py.file_path",
          "file_models.tests/test_type_safety.py.file_type",
          "file_models.tests/test_type_safety.py.model_type",
          "file_models.tests/test_type_safety.py.complexity_score",
          "file_models.tests/test_type_safety.py.line_count",
          "file_models.tests/test_type_safety.py.function_count",
          "file_models.tests/test_type_safety.py.class_count",
          "file_models.tests/test_type_safety.py.import_count",
          "file_models.tests/test_type_safety.py.error_count",
          "file_models.tests/test_type_safety.py.model_data",
          "file_models.tests/test_type_safety.py.model_data.error",
          "file_models.tests/test_makefile_integration.py",
          "file_models.tests/test_makefile_integration.py.file_path",
          "file_models.tests/test_makefile_integration.py.file_type",
          "file_models.tests/test_makefile_integration.py.model_type",
          "file_models.tests/test_makefile_integration.py.complexity_score",
          "file_models.tests/test_makefile_integration.py.line_count",
          "file_models.tests/test_makefile_integration.py.function_count",
          "file_models.tests/test_makefile_integration.py.class_count",
          "file_models.tests/test_makefile_integration.py.import_count",
          "file_models.tests/test_makefile_integration.py.error_count",
          "file_models.tests/test_makefile_integration.py.model_data",
          "file_models.tests/test_makefile_integration.py.model_data.error",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.file_path",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.file_type",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.model_type",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.complexity_score",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.line_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.function_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.class_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.import_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.error_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.model_data",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.model_data.error",
          "file_models.tests/test_rule_compliance_enforcement.py",
          "file_models.tests/test_rule_compliance_enforcement.py.file_path",
          "file_models.tests/test_rule_compliance_enforcement.py.file_type",
          "file_models.tests/test_rule_compliance_enforcement.py.model_type",
          "file_models.tests/test_rule_compliance_enforcement.py.complexity_score",
          "file_models.tests/test_rule_compliance_enforcement.py.line_count",
          "file_models.tests/test_rule_compliance_enforcement.py.function_count",
          "file_models.tests/test_rule_compliance_enforcement.py.class_count",
          "file_models.tests/test_rule_compliance_enforcement.py.import_count",
          "file_models.tests/test_rule_compliance_enforcement.py.error_count",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.docstrings",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.imports",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[0].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[0].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[1].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[1].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[2].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[2].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[3].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[3].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[4].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[4].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[5].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[5].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[6].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[6].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[7].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[7].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[8].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[8].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[9].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[9].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[10].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[10].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[11].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[11].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[12].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[12].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[13].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[13].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[14].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[14].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[0].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[0].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[1].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[1].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.variables",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.line_count",
          "file_models.tests/test_code_quality.py",
          "file_models.tests/test_code_quality.py.file_path",
          "file_models.tests/test_code_quality.py.file_type",
          "file_models.tests/test_code_quality.py.model_type",
          "file_models.tests/test_code_quality.py.complexity_score",
          "file_models.tests/test_code_quality.py.line_count",
          "file_models.tests/test_code_quality.py.function_count",
          "file_models.tests/test_code_quality.py.class_count",
          "file_models.tests/test_code_quality.py.import_count",
          "file_models.tests/test_code_quality.py.error_count",
          "file_models.tests/test_code_quality.py.model_data",
          "file_models.tests/test_code_quality.py.model_data.error",
          "file_models.tests/test_core_concepts.py",
          "file_models.tests/test_core_concepts.py.file_path",
          "file_models.tests/test_core_concepts.py.file_type",
          "file_models.tests/test_core_concepts.py.model_type",
          "file_models.tests/test_core_concepts.py.complexity_score",
          "file_models.tests/test_core_concepts.py.line_count",
          "file_models.tests/test_core_concepts.py.function_count",
          "file_models.tests/test_core_concepts.py.class_count",
          "file_models.tests/test_core_concepts.py.import_count",
          "file_models.tests/test_core_concepts.py.error_count",
          "file_models.tests/test_core_concepts.py.model_data",
          "file_models.tests/test_core_concepts.py.model_data.error",
          "file_models.tests/test_healthcare_cdc_requirements.py",
          "file_models.tests/test_healthcare_cdc_requirements.py.file_path",
          "file_models.tests/test_healthcare_cdc_requirements.py.file_type",
          "file_models.tests/test_healthcare_cdc_requirements.py.model_type",
          "file_models.tests/test_healthcare_cdc_requirements.py.complexity_score",
          "file_models.tests/test_healthcare_cdc_requirements.py.line_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.function_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.class_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.import_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.error_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.model_data",
          "file_models.tests/test_healthcare_cdc_requirements.py.model_data.error",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.file_path",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.file_type",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.model_type",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.complexity_score",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.line_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.function_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.class_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.import_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.error_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.model_data",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.model_data.error",
          "file_models.tests/test_basic_validation.py",
          "file_models.tests/test_basic_validation.py.file_path",
          "file_models.tests/test_basic_validation.py.file_type",
          "file_models.tests/test_basic_validation.py.model_type",
          "file_models.tests/test_basic_validation.py.complexity_score",
          "file_models.tests/test_basic_validation.py.line_count",
          "file_models.tests/test_basic_validation.py.function_count",
          "file_models.tests/test_basic_validation.py.class_count",
          "file_models.tests/test_basic_validation.py.import_count",
          "file_models.tests/test_basic_validation.py.error_count",
          "file_models.tests/test_basic_validation.py.model_data",
          "file_models.tests/test_basic_validation.py.model_data.error",
          "file_models.src/__init__.py",
          "file_models.src/__init__.py.file_path",
          "file_models.src/__init__.py.file_type",
          "file_models.src/__init__.py.model_type",
          "file_models.src/__init__.py.complexity_score",
          "file_models.src/__init__.py.line_count",
          "file_models.src/__init__.py.function_count",
          "file_models.src/__init__.py.class_count",
          "file_models.src/__init__.py.import_count",
          "file_models.src/__init__.py.error_count",
          "file_models.src/__init__.py.model_data",
          "file_models.src/__init__.py.model_data.docstrings",
          "file_models.src/__init__.py.model_data.imports",
          "file_models.src/__init__.py.model_data.functions",
          "file_models.src/__init__.py.model_data.classes",
          "file_models.src/__init__.py.model_data.variables",
          "file_models.src/__init__.py.model_data.line_count",
          "file_models.scripts/mdc-linter.py",
          "file_models.scripts/mdc-linter.py.file_path",
          "file_models.scripts/mdc-linter.py.file_type",
          "file_models.scripts/mdc-linter.py.model_type",
          "file_models.scripts/mdc-linter.py.complexity_score",
          "file_models.scripts/mdc-linter.py.line_count",
          "file_models.scripts/mdc-linter.py.function_count",
          "file_models.scripts/mdc-linter.py.class_count",
          "file_models.scripts/mdc-linter.py.import_count",
          "file_models.scripts/mdc-linter.py.error_count",
          "file_models.scripts/mdc-linter.py.model_data",
          "file_models.scripts/mdc-linter.py.model_data.docstrings",
          "file_models.scripts/mdc-linter.py.model_data.imports",
          "file_models.scripts/mdc-linter.py.model_data.functions",
          "file_models.scripts/mdc-linter.py.model_data.functions.[0].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[0].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[1].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[1].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[2].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[2].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[3].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[3].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[4].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[4].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[5].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[5].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[6].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[6].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[7].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[7].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[8].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[8].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[9].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[9].docstring",
          "file_models.scripts/mdc-linter.py.model_data.classes",
          "file_models.scripts/mdc-linter.py.model_data.classes.[0].name",
          "file_models.scripts/mdc-linter.py.model_data.classes.[0].docstring",
          "file_models.scripts/mdc-linter.py.model_data.variables",
          "file_models.scripts/mdc-linter.py.model_data.line_count",
          "file_models.scripts/fix_mypy_issues.py",
          "file_models.scripts/fix_mypy_issues.py.file_path",
          "file_models.scripts/fix_mypy_issues.py.file_type",
          "file_models.scripts/fix_mypy_issues.py.model_type",
          "file_models.scripts/fix_mypy_issues.py.complexity_score",
          "file_models.scripts/fix_mypy_issues.py.line_count",
          "file_models.scripts/fix_mypy_issues.py.function_count",
          "file_models.scripts/fix_mypy_issues.py.class_count",
          "file_models.scripts/fix_mypy_issues.py.import_count",
          "file_models.scripts/fix_mypy_issues.py.error_count",
          "file_models.scripts/fix_mypy_issues.py.model_data",
          "file_models.scripts/fix_mypy_issues.py.model_data.docstrings",
          "file_models.scripts/fix_mypy_issues.py.model_data.imports",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[0].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[0].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[1].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[1].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[2].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[2].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[3].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[3].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[4].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[4].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.classes",
          "file_models.scripts/fix_mypy_issues.py.model_data.variables",
          "file_models.scripts/fix_mypy_issues.py.model_data.line_count",
          "file_models.scripts/regenerate_mdc_files.py",
          "file_models.scripts/regenerate_mdc_files.py.file_path",
          "file_models.scripts/regenerate_mdc_files.py.file_type",
          "file_models.scripts/regenerate_mdc_files.py.model_type",
          "file_models.scripts/regenerate_mdc_files.py.complexity_score",
          "file_models.scripts/regenerate_mdc_files.py.line_count",
          "file_models.scripts/regenerate_mdc_files.py.function_count",
          "file_models.scripts/regenerate_mdc_files.py.class_count",
          "file_models.scripts/regenerate_mdc_files.py.import_count",
          "file_models.scripts/regenerate_mdc_files.py.error_count",
          "file_models.scripts/regenerate_mdc_files.py.model_data",
          "file_models.scripts/regenerate_mdc_files.py.model_data.docstrings",
          "file_models.scripts/regenerate_mdc_files.py.model_data.imports",
          "file_models.scripts/regenerate_mdc_files.py.model_data.functions",
          "file_models.scripts/regenerate_mdc_files.py.model_data.functions.[0].name",
          "file_models.scripts/regenerate_mdc_files.py.model_data.functions.[0].docstring",
          "file_models.scripts/regenerate_mdc_files.py.model_data.classes",
          "file_models.scripts/regenerate_mdc_files.py.model_data.variables",
          "file_models.scripts/regenerate_mdc_files.py.model_data.line_count",
          "file_models.scripts/fix_code_quality.py",
          "file_models.scripts/fix_code_quality.py.file_path",
          "file_models.scripts/fix_code_quality.py.file_type",
          "file_models.scripts/fix_code_quality.py.model_type",
          "file_models.scripts/fix_code_quality.py.complexity_score",
          "file_models.scripts/fix_code_quality.py.line_count",
          "file_models.scripts/fix_code_quality.py.function_count",
          "file_models.scripts/fix_code_quality.py.class_count",
          "file_models.scripts/fix_code_quality.py.import_count",
          "file_models.scripts/fix_code_quality.py.error_count",
          "file_models.scripts/fix_code_quality.py.model_data",
          "file_models.scripts/fix_code_quality.py.model_data.docstrings",
          "file_models.scripts/fix_code_quality.py.model_data.imports",
          "file_models.scripts/fix_code_quality.py.model_data.functions",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[0].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[0].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[1].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[1].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[2].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[2].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[3].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[3].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[4].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[4].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.classes",
          "file_models.scripts/fix_code_quality.py.model_data.variables",
          "file_models.scripts/fix_code_quality.py.model_data.line_count",
          "file_models..cursor/plugins/rule-compliance-checker.py",
          "file_models..cursor/plugins/rule-compliance-checker.py.file_path",
          "file_models..cursor/plugins/rule-compliance-checker.py.file_type",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_type",
          "file_models..cursor/plugins/rule-compliance-checker.py.complexity_score",
          "file_models..cursor/plugins/rule-compliance-checker.py.line_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.function_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.class_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.import_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.error_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.docstrings",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.imports",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[0].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[0].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[1].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[1].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[2].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[2].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[3].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[3].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[4].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[4].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[5].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[5].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[6].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[6].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.classes",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.classes.[0].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.classes.[0].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.variables",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.line_count",
          "file_models.src/code_quality_system/quality_model.py",
          "file_models.src/code_quality_system/quality_model.py.file_path",
          "file_models.src/code_quality_system/quality_model.py.file_type",
          "file_models.src/code_quality_system/quality_model.py.model_type",
          "file_models.src/code_quality_system/quality_model.py.complexity_score",
          "file_models.src/code_quality_system/quality_model.py.line_count",
          "file_models.src/code_quality_system/quality_model.py.function_count",
          "file_models.src/code_quality_system/quality_model.py.class_count",
          "file_models.src/code_quality_system/quality_model.py.import_count",
          "file_models.src/code_quality_system/quality_model.py.error_count",
          "file_models.src/code_quality_system/quality_model.py.model_data",
          "file_models.src/code_quality_system/quality_model.py.model_data.docstrings",
          "file_models.src/code_quality_system/quality_model.py.model_data.imports",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[0].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[0].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[1].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[1].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[2].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[2].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[3].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[3].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[4].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[4].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[5].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[5].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[6].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[6].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[7].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[7].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[8].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[8].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[9].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[9].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[10].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[10].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[11].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[11].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[12].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[12].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[13].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[13].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[14].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[14].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[0].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[0].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[1].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[1].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.variables",
          "file_models.src/code_quality_system/quality_model.py.model_data.line_count",
          "file_models.src/security_first/https_enforcement.py",
          "file_models.src/security_first/https_enforcement.py.file_path",
          "file_models.src/security_first/https_enforcement.py.file_type",
          "file_models.src/security_first/https_enforcement.py.model_type",
          "file_models.src/security_first/https_enforcement.py.complexity_score",
          "file_models.src/security_first/https_enforcement.py.line_count",
          "file_models.src/security_first/https_enforcement.py.function_count",
          "file_models.src/security_first/https_enforcement.py.class_count",
          "file_models.src/security_first/https_enforcement.py.import_count",
          "file_models.src/security_first/https_enforcement.py.error_count",
          "file_models.src/security_first/https_enforcement.py.model_data",
          "file_models.src/security_first/https_enforcement.py.model_data.docstrings",
          "file_models.src/security_first/https_enforcement.py.model_data.imports",
          "file_models.src/security_first/https_enforcement.py.model_data.functions",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[0].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[0].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[1].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[1].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[2].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[2].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[3].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[3].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[4].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[4].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[5].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[5].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[6].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[6].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[7].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[7].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[8].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[8].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[9].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[9].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[10].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[10].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[11].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[11].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[12].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[12].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[13].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[13].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[14].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[14].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[15].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[15].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[0].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[0].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[1].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[1].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[2].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[2].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[3].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[3].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.variables",
          "file_models.src/security_first/https_enforcement.py.model_data.line_count",
          "file_models.src/security_first/test_https_enforcement.py",
          "file_models.src/security_first/test_https_enforcement.py.file_path",
          "file_models.src/security_first/test_https_enforcement.py.file_type",
          "file_models.src/security_first/test_https_enforcement.py.model_type",
          "file_models.src/security_first/test_https_enforcement.py.complexity_score",
          "file_models.src/security_first/test_https_enforcement.py.line_count",
          "file_models.src/security_first/test_https_enforcement.py.function_count",
          "file_models.src/security_first/test_https_enforcement.py.class_count",
          "file_models.src/security_first/test_https_enforcement.py.import_count",
          "file_models.src/security_first/test_https_enforcement.py.error_count",
          "file_models.src/security_first/test_https_enforcement.py.model_data",
          "file_models.src/security_first/test_https_enforcement.py.model_data.docstrings",
          "file_models.src/security_first/test_https_enforcement.py.model_data.imports",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[0].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[0].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[1].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[1].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[2].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[2].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[3].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[3].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[4].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[4].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[5].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[5].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[6].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[6].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[7].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[7].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[8].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[8].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[9].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[9].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[10].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[10].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[11].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[11].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[12].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[12].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[13].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[13].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[14].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[14].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[15].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[15].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[16].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[16].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[17].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[17].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[18].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[18].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[19].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[19].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[20].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[20].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[21].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[21].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[0].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[0].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[1].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[1].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[2].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[2].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[3].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[3].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[4].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[4].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.variables",
          "file_models.src/security_first/test_https_enforcement.py.model_data.line_count",
          "file_models.src/security_first/rate_limiting.py",
          "file_models.src/security_first/rate_limiting.py.file_path",
          "file_models.src/security_first/rate_limiting.py.file_type",
          "file_models.src/security_first/rate_limiting.py.model_type",
          "file_models.src/security_first/rate_limiting.py.complexity_score",
          "file_models.src/security_first/rate_limiting.py.line_count",
          "file_models.src/security_first/rate_limiting.py.function_count",
          "file_models.src/security_first/rate_limiting.py.class_count",
          "file_models.src/security_first/rate_limiting.py.import_count",
          "file_models.src/security_first/rate_limiting.py.error_count",
          "file_models.src/security_first/rate_limiting.py.model_data",
          "file_models.src/security_first/rate_limiting.py.model_data.error",
          "file_models.src/security_first/test_streamlit_security_first.py",
          "file_models.src/security_first/test_streamlit_security_first.py.file_path",
          "file_models.src/security_first/test_streamlit_security_first.py.file_type",
          "file_models.src/security_first/test_streamlit_security_first.py.model_type",
          "file_models.src/security_first/test_streamlit_security_first.py.complexity_score",
          "file_models.src/security_first/test_streamlit_security_first.py.line_count",
          "file_models.src/security_first/test_streamlit_security_first.py.function_count",
          "file_models.src/security_first/test_streamlit_security_first.py.class_count",
          "file_models.src/security_first/test_streamlit_security_first.py.import_count",
          "file_models.src/security_first/test_streamlit_security_first.py.error_count",
          "file_models.src/security_first/test_streamlit_security_first.py.model_data",
          "file_models.src/security_first/test_streamlit_security_first.py.model_data.error",
          "file_models.src/security_first/test_security_model.py",
          "file_models.src/security_first/test_security_model.py.file_path",
          "file_models.src/security_first/test_security_model.py.file_type",
          "file_models.src/security_first/test_security_model.py.model_type",
          "file_models.src/security_first/test_security_model.py.complexity_score",
          "file_models.src/security_first/test_security_model.py.line_count",
          "file_models.src/security_first/test_security_model.py.function_count",
          "file_models.src/security_first/test_security_model.py.class_count",
          "file_models.src/security_first/test_security_model.py.import_count",
          "file_models.src/security_first/test_security_model.py.error_count",
          "file_models.src/security_first/test_security_model.py.model_data",
          "file_models.src/security_first/test_security_model.py.model_data.error",
          "file_models.src/security_first/__init__.py",
          "file_models.src/security_first/__init__.py.file_path",
          "file_models.src/security_first/__init__.py.file_type",
          "file_models.src/security_first/__init__.py.model_type",
          "file_models.src/security_first/__init__.py.complexity_score",
          "file_models.src/security_first/__init__.py.line_count",
          "file_models.src/security_first/__init__.py.function_count",
          "file_models.src/security_first/__init__.py.class_count",
          "file_models.src/security_first/__init__.py.import_count",
          "file_models.src/security_first/__init__.py.error_count",
          "file_models.src/security_first/__init__.py.model_data",
          "file_models.src/security_first/__init__.py.model_data.docstrings",
          "file_models.src/security_first/__init__.py.model_data.imports",
          "file_models.src/security_first/__init__.py.model_data.functions",
          "file_models.src/security_first/__init__.py.model_data.classes",
          "file_models.src/security_first/__init__.py.model_data.variables",
          "file_models.src/security_first/__init__.py.model_data.line_count",
          "file_models.src/mdc_generator/mdc_model.py",
          "file_models.src/mdc_generator/mdc_model.py.file_path",
          "file_models.src/mdc_generator/mdc_model.py.file_type",
          "file_models.src/mdc_generator/mdc_model.py.model_type",
          "file_models.src/mdc_generator/mdc_model.py.complexity_score",
          "file_models.src/mdc_generator/mdc_model.py.line_count",
          "file_models.src/mdc_generator/mdc_model.py.function_count",
          "file_models.src/mdc_generator/mdc_model.py.class_count",
          "file_models.src/mdc_generator/mdc_model.py.import_count",
          "file_models.src/mdc_generator/mdc_model.py.error_count",
          "file_models.src/mdc_generator/mdc_model.py.model_data",
          "file_models.src/mdc_generator/mdc_model.py.model_data.docstrings",
          "file_models.src/mdc_generator/mdc_model.py.model_data.imports",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[0].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[0].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[1].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[1].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[2].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[2].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[3].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[3].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[4].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[4].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[5].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[5].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[6].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[6].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[7].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[7].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[8].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[8].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[9].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[9].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[10].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[10].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[0].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[0].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[1].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[1].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[2].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[2].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.variables",
          "file_models.src/mdc_generator/mdc_model.py.model_data.line_count",
          "file_models.src/mdc_generator/__init__.py",
          "file_models.src/mdc_generator/__init__.py.file_path",
          "file_models.src/mdc_generator/__init__.py.file_type",
          "file_models.src/mdc_generator/__init__.py.model_type",
          "file_models.src/mdc_generator/__init__.py.complexity_score",
          "file_models.src/mdc_generator/__init__.py.line_count",
          "file_models.src/mdc_generator/__init__.py.function_count",
          "file_models.src/mdc_generator/__init__.py.class_count",
          "file_models.src/mdc_generator/__init__.py.import_count",
          "file_models.src/mdc_generator/__init__.py.error_count",
          "file_models.src/mdc_generator/__init__.py.model_data",
          "file_models.src/mdc_generator/__init__.py.model_data.docstrings",
          "file_models.src/mdc_generator/__init__.py.model_data.imports",
          "file_models.src/mdc_generator/__init__.py.model_data.functions",
          "file_models.src/mdc_generator/__init__.py.model_data.classes",
          "file_models.src/mdc_generator/__init__.py.model_data.variables",
          "file_models.src/mdc_generator/__init__.py.model_data.line_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.imports",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[2].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[2].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[3].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[3].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.variables",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.file_path",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.file_type",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.model_type",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.complexity_score",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.line_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.function_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.class_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.import_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.error_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.model_data",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.model_data.error",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.file_path",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.file_type",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_type",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.complexity_score",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.line_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.function_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.class_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.import_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.error_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.imports",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[9].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[9].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[10].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[10].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[11].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[11].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[12].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[12].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[13].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[13].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[14].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[14].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[15].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[15].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[16].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[16].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[17].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[17].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[18].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[18].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[19].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[19].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[20].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[20].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[21].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[21].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[22].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[22].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[23].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[23].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[24].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[24].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[25].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[25].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[26].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[26].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[2].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[2].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[3].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[3].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[4].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[4].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[5].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[5].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.variables",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.line_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.file_path",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.file_type",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_type",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.complexity_score",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.line_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.function_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.class_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.import_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.error_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.imports",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.functions",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.classes",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.variables",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.file_path",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.file_type",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.model_type",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.complexity_score",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.line_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.function_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.class_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.import_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.error_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.model_data",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.model_data.error",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.imports",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.classes",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.variables",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.file_path",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.file_type",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.model_type",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.complexity_score",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.line_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.function_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.class_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.import_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.error_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.model_data",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.model_data.error",
          "file_models.src/multi_agent_testing/test_model_traceability.py",
          "file_models.src/multi_agent_testing/test_model_traceability.py.file_path",
          "file_models.src/multi_agent_testing/test_model_traceability.py.file_type",
          "file_models.src/multi_agent_testing/test_model_traceability.py.model_type",
          "file_models.src/multi_agent_testing/test_model_traceability.py.complexity_score",
          "file_models.src/multi_agent_testing/test_model_traceability.py.line_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.function_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.class_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.import_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.error_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.model_data",
          "file_models.src/multi_agent_testing/test_model_traceability.py.model_data.error",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.file_path",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.file_type",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.model_type",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.complexity_score",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.line_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.function_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.class_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.import_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.error_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.model_data",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.model_data.error",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.imports",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[9].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[9].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[10].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[10].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[11].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[11].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[2].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[2].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[3].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[3].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.variables",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.line_count",
          "file_models.src/multi_agent_testing/cost_analysis.py",
          "file_models.src/multi_agent_testing/cost_analysis.py.file_path",
          "file_models.src/multi_agent_testing/cost_analysis.py.file_type",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_type",
          "file_models.src/multi_agent_testing/cost_analysis.py.complexity_score",
          "file_models.src/multi_agent_testing/cost_analysis.py.line_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.function_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.class_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.import_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.error_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.imports",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.classes",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.variables",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.model_data.error",
          "file_models.src/multi_agent_testing/live_smoke_test.py",
          "file_models.src/multi_agent_testing/live_smoke_test.py.file_path",
          "file_models.src/multi_agent_testing/live_smoke_test.py.file_type",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_type",
          "file_models.src/multi_agent_testing/live_smoke_test.py.complexity_score",
          "file_models.src/multi_agent_testing/live_smoke_test.py.line_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.function_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.class_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.import_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.error_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.imports",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.classes",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.variables",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.line_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.file_path",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.file_type",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_type",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.complexity_score",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.line_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.function_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.class_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.import_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.error_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.imports",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.variables",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.line_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.file_path",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.file_type",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.model_type",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.complexity_score",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.line_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.function_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.class_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.import_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.error_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.model_data",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.model_data.error",
          "file_models.src/multi_agent_testing/__init__.py",
          "file_models.src/multi_agent_testing/__init__.py.file_path",
          "file_models.src/multi_agent_testing/__init__.py.file_type",
          "file_models.src/multi_agent_testing/__init__.py.model_type",
          "file_models.src/multi_agent_testing/__init__.py.complexity_score",
          "file_models.src/multi_agent_testing/__init__.py.line_count",
          "file_models.src/multi_agent_testing/__init__.py.function_count",
          "file_models.src/multi_agent_testing/__init__.py.class_count",
          "file_models.src/multi_agent_testing/__init__.py.import_count",
          "file_models.src/multi_agent_testing/__init__.py.error_count",
          "file_models.src/multi_agent_testing/__init__.py.model_data",
          "file_models.src/multi_agent_testing/__init__.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/__init__.py.model_data.imports",
          "file_models.src/multi_agent_testing/__init__.py.model_data.functions",
          "file_models.src/multi_agent_testing/__init__.py.model_data.classes",
          "file_models.src/multi_agent_testing/__init__.py.model_data.variables",
          "file_models.src/multi_agent_testing/__init__.py.model_data.line_count",
          "file_models.src/streamlit/openflow_quickstart_app.py",
          "file_models.src/streamlit/openflow_quickstart_app.py.file_path",
          "file_models.src/streamlit/openflow_quickstart_app.py.file_type",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_type",
          "file_models.src/streamlit/openflow_quickstart_app.py.complexity_score",
          "file_models.src/streamlit/openflow_quickstart_app.py.line_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.function_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.class_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.import_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.error_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.docstrings",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.imports",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[0].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[0].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[1].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[1].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[2].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[2].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[3].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[3].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[4].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[4].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[5].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[5].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[6].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[6].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[7].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[7].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[8].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[8].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[9].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[9].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[10].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[10].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[11].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[11].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[12].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[12].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[13].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[13].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[14].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[14].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[15].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[15].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[16].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[16].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[17].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[17].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[18].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[18].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[19].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[19].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[20].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[20].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[21].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[21].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[22].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[22].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[23].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[23].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[24].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[24].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[25].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[25].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[26].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[26].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[27].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[27].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[28].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[28].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[29].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[29].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[30].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[30].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[31].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[31].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[32].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[32].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[33].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[33].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[34].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[34].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[35].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[35].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[36].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[36].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[37].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[37].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[38].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[38].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[39].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[39].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[40].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[40].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[0].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[0].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[1].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[1].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[2].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[2].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[3].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[3].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[4].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[4].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[5].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[5].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[6].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[6].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[7].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[7].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.variables",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.line_count",
          "file_models.src/streamlit/__init__.py",
          "file_models.src/streamlit/__init__.py.file_path",
          "file_models.src/streamlit/__init__.py.file_type",
          "file_models.src/streamlit/__init__.py.model_type",
          "file_models.src/streamlit/__init__.py.complexity_score",
          "file_models.src/streamlit/__init__.py.line_count",
          "file_models.src/streamlit/__init__.py.function_count",
          "file_models.src/streamlit/__init__.py.class_count",
          "file_models.src/streamlit/__init__.py.import_count",
          "file_models.src/streamlit/__init__.py.error_count",
          "file_models.src/streamlit/__init__.py.model_data",
          "file_models.src/streamlit/__init__.py.model_data.docstrings",
          "file_models.src/streamlit/__init__.py.model_data.imports",
          "file_models.src/streamlit/__init__.py.model_data.functions",
          "file_models.src/streamlit/__init__.py.model_data.classes",
          "file_models.src/streamlit/__init__.py.model_data.variables",
          "file_models.src/streamlit/__init__.py.model_data.line_count",
          "summary",
          "summary.total_files",
          "summary.valid_files",
          "summary.error_files",
          "summary.model_type_counts",
          "summary.model_type_counts.ast",
          "summary.model_type_counts.error",
          "metadata",
          "metadata.last_updated",
          "metadata.checkpoint_count",
          "metadata.version"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "8539005143397964a365d936eea6c935",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.932428",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/data/synthesis_data.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/data/synthesis_data.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 7853,
        "json_keys": [
          "fixes",
          "impact_matrix",
          "stakeholders",
          "analysis_file"
        ],
        "json_depth": 4,
        "json_keys_list": [
          "fixes",
          "fixes.[0].fix_title",
          "fixes.[0].description",
          "fixes.[0].stakeholder_impacts",
          "fixes.[0].stakeholder_impacts.Security Team",
          "fixes.[0].stakeholder_impacts.DevOps Team",
          "fixes.[0].stakeholder_impacts.Development Team",
          "fixes.[0].stakeholder_impacts.Product Team",
          "fixes.[0].stakeholder_impacts.Business Stakeholders",
          "fixes.[0].implementation_effort",
          "fixes.[0].priority_score",
          "fixes.[0].categories_addressed",
          "fixes.[0].estimated_roi",
          "fixes.[0].dependencies",
          "fixes.[0].timeline",
          "fixes.[1].fix_title",
          "fixes.[1].description",
          "fixes.[1].stakeholder_impacts",
          "fixes.[1].stakeholder_impacts.Security Team",
          "fixes.[1].stakeholder_impacts.DevOps Team",
          "fixes.[1].stakeholder_impacts.Development Team",
          "fixes.[1].stakeholder_impacts.Product Team",
          "fixes.[1].stakeholder_impacts.Business Stakeholders",
          "fixes.[1].implementation_effort",
          "fixes.[1].priority_score",
          "fixes.[1].categories_addressed",
          "fixes.[1].estimated_roi",
          "fixes.[1].dependencies",
          "fixes.[1].timeline",
          "fixes.[2].fix_title",
          "fixes.[2].description",
          "fixes.[2].stakeholder_impacts",
          "fixes.[2].stakeholder_impacts.Security Team",
          "fixes.[2].stakeholder_impacts.DevOps Team",
          "fixes.[2].stakeholder_impacts.Development Team",
          "fixes.[2].stakeholder_impacts.Product Team",
          "fixes.[2].stakeholder_impacts.Business Stakeholders",
          "fixes.[2].implementation_effort",
          "fixes.[2].priority_score",
          "fixes.[2].categories_addressed",
          "fixes.[2].estimated_roi",
          "fixes.[2].dependencies",
          "fixes.[2].timeline",
          "fixes.[3].fix_title",
          "fixes.[3].description",
          "fixes.[3].stakeholder_impacts",
          "fixes.[3].stakeholder_impacts.Security Team",
          "fixes.[3].stakeholder_impacts.DevOps Team",
          "fixes.[3].stakeholder_impacts.Development Team",
          "fixes.[3].stakeholder_impacts.Product Team",
          "fixes.[3].stakeholder_impacts.Business Stakeholders",
          "fixes.[3].implementation_effort",
          "fixes.[3].priority_score",
          "fixes.[3].categories_addressed",
          "fixes.[3].estimated_roi",
          "fixes.[3].dependencies",
          "fixes.[3].timeline",
          "fixes.[4].fix_title",
          "fixes.[4].description",
          "fixes.[4].stakeholder_impacts",
          "fixes.[4].stakeholder_impacts.Security Team",
          "fixes.[4].stakeholder_impacts.DevOps Team",
          "fixes.[4].stakeholder_impacts.Development Team",
          "fixes.[4].stakeholder_impacts.Product Team",
          "fixes.[4].stakeholder_impacts.Business Stakeholders",
          "fixes.[4].implementation_effort",
          "fixes.[4].priority_score",
          "fixes.[4].categories_addressed",
          "fixes.[4].estimated_roi",
          "fixes.[4].dependencies",
          "fixes.[4].timeline",
          "fixes.[5].fix_title",
          "fixes.[5].description",
          "fixes.[5].stakeholder_impacts",
          "fixes.[5].stakeholder_impacts.Security Team",
          "fixes.[5].stakeholder_impacts.DevOps Team",
          "fixes.[5].stakeholder_impacts.Development Team",
          "fixes.[5].stakeholder_impacts.Product Team",
          "fixes.[5].stakeholder_impacts.Business Stakeholders",
          "fixes.[5].implementation_effort",
          "fixes.[5].priority_score",
          "fixes.[5].categories_addressed",
          "fixes.[5].estimated_roi",
          "fixes.[5].dependencies",
          "fixes.[5].timeline",
          "impact_matrix",
          "impact_matrix.Security Team",
          "impact_matrix.Security Team.Implement Robust Credential Management",
          "impact_matrix.Security Team.Enhance Error Handling and Logging",
          "impact_matrix.Security Team.Conduct Load Testing and Performance Profiling",
          "impact_matrix.Security Team.Create Comprehensive Documentation",
          "impact_matrix.Security Team.Implement Monitoring and Alerting for CDC Operations",
          "impact_matrix.Security Team.Optimize Input Sanitization Process",
          "impact_matrix.DevOps Team",
          "impact_matrix.DevOps Team.Implement Robust Credential Management",
          "impact_matrix.DevOps Team.Enhance Error Handling and Logging",
          "impact_matrix.DevOps Team.Conduct Load Testing and Performance Profiling",
          "impact_matrix.DevOps Team.Create Comprehensive Documentation",
          "impact_matrix.DevOps Team.Implement Monitoring and Alerting for CDC Operations",
          "impact_matrix.DevOps Team.Optimize Input Sanitization Process",
          "impact_matrix.Development Team",
          "impact_matrix.Development Team.Implement Robust Credential Management",
          "impact_matrix.Development Team.Enhance Error Handling and Logging",
          "impact_matrix.Development Team.Conduct Load Testing and Performance Profiling",
          "impact_matrix.Development Team.Create Comprehensive Documentation",
          "impact_matrix.Development Team.Implement Monitoring and Alerting for CDC Operations",
          "impact_matrix.Development Team.Optimize Input Sanitization Process",
          "impact_matrix.Product Team",
          "impact_matrix.Product Team.Implement Robust Credential Management",
          "impact_matrix.Product Team.Enhance Error Handling and Logging",
          "impact_matrix.Product Team.Conduct Load Testing and Performance Profiling",
          "impact_matrix.Product Team.Create Comprehensive Documentation",
          "impact_matrix.Product Team.Implement Monitoring and Alerting for CDC Operations",
          "impact_matrix.Product Team.Optimize Input Sanitization Process",
          "impact_matrix.Business Stakeholders",
          "impact_matrix.Business Stakeholders.Implement Robust Credential Management",
          "impact_matrix.Business Stakeholders.Enhance Error Handling and Logging",
          "impact_matrix.Business Stakeholders.Conduct Load Testing and Performance Profiling",
          "impact_matrix.Business Stakeholders.Create Comprehensive Documentation",
          "impact_matrix.Business Stakeholders.Implement Monitoring and Alerting for CDC Operations",
          "impact_matrix.Business Stakeholders.Optimize Input Sanitization Process",
          "stakeholders",
          "stakeholders.[0].name",
          "stakeholders.[0].role",
          "stakeholders.[0].priority",
          "stakeholders.[0].impact_areas",
          "stakeholders.[0].decision_power",
          "stakeholders.[1].name",
          "stakeholders.[1].role",
          "stakeholders.[1].priority",
          "stakeholders.[1].impact_areas",
          "stakeholders.[1].decision_power",
          "stakeholders.[2].name",
          "stakeholders.[2].role",
          "stakeholders.[2].priority",
          "stakeholders.[2].impact_areas",
          "stakeholders.[2].decision_power",
          "stakeholders.[3].name",
          "stakeholders.[3].role",
          "stakeholders.[3].priority",
          "stakeholders.[3].impact_areas",
          "stakeholders.[3].decision_power",
          "stakeholders.[4].name",
          "stakeholders.[4].role",
          "stakeholders.[4].priority",
          "stakeholders.[4].impact_areas",
          "stakeholders.[4].decision_power",
          "analysis_file"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "fa4d3e4e62c93269bb4c360ec4001a4b",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.950674",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/data/diversity_hypothesis_results.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/data/diversity_hypothesis_results.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 5836,
        "json_keys": [
          "diversity_analysis",
          "comparison"
        ],
        "json_depth": 5,
        "json_keys_list": [
          "diversity_analysis",
          "diversity_analysis.total_reviewers",
          "diversity_analysis.total_unique_findings",
          "diversity_analysis.findings_per_reviewer",
          "diversity_analysis.diversity_score",
          "diversity_analysis.blind_spot_coverage",
          "diversity_analysis.reviews",
          "diversity_analysis.reviews.[0].reviewer",
          "diversity_analysis.reviews.[0].role",
          "diversity_analysis.reviews.[0].focus",
          "diversity_analysis.reviews.[0].perspective",
          "diversity_analysis.reviews.[0].findings",
          "diversity_analysis.reviews.[0].confidence",
          "diversity_analysis.reviews.[0].recommendations",
          "diversity_analysis.reviews.[1].reviewer",
          "diversity_analysis.reviews.[1].role",
          "diversity_analysis.reviews.[1].focus",
          "diversity_analysis.reviews.[1].perspective",
          "diversity_analysis.reviews.[1].findings",
          "diversity_analysis.reviews.[1].confidence",
          "diversity_analysis.reviews.[1].recommendations",
          "diversity_analysis.reviews.[2].reviewer",
          "diversity_analysis.reviews.[2].role",
          "diversity_analysis.reviews.[2].focus",
          "diversity_analysis.reviews.[2].perspective",
          "diversity_analysis.reviews.[2].findings",
          "diversity_analysis.reviews.[2].confidence",
          "diversity_analysis.reviews.[2].recommendations",
          "diversity_analysis.reviews.[3].reviewer",
          "diversity_analysis.reviews.[3].role",
          "diversity_analysis.reviews.[3].focus",
          "diversity_analysis.reviews.[3].perspective",
          "diversity_analysis.reviews.[3].findings",
          "diversity_analysis.reviews.[3].confidence",
          "diversity_analysis.reviews.[3].recommendations",
          "diversity_analysis.reviews.[4].reviewer",
          "diversity_analysis.reviews.[4].role",
          "diversity_analysis.reviews.[4].focus",
          "diversity_analysis.reviews.[4].perspective",
          "diversity_analysis.reviews.[4].findings",
          "diversity_analysis.reviews.[4].confidence",
          "diversity_analysis.reviews.[4].recommendations",
          "diversity_analysis.all_findings",
          "comparison",
          "comparison.github_copilot_findings",
          "comparison.our_diverse_findings",
          "comparison.overlap_findings",
          "comparison.copilot_unique_findings",
          "comparison.our_unique_findings",
          "comparison.total_coverage",
          "comparison.diversity_advantage"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "6adb3c4fa079f1d5e675f834cb15f8ff",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.951172",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/data/analysis_data.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/data/analysis_data.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 15087,
        "json_keys": [
          "analyses",
          "metrics",
          "context",
          "timestamp"
        ],
        "json_depth": 5,
        "json_keys_list": [
          "analyses",
          "analyses.[0].agent_name",
          "analyses.[0].findings",
          "analyses.[0].findings.[0].question",
          "analyses.[0].findings.[0].confidence",
          "analyses.[0].findings.[0].blind_spots",
          "analyses.[0].findings.[0].recommendation",
          "analyses.[0].findings.[0].category",
          "analyses.[0].findings.[1].question",
          "analyses.[0].findings.[1].confidence",
          "analyses.[0].findings.[1].blind_spots",
          "analyses.[0].findings.[1].recommendation",
          "analyses.[0].findings.[1].category",
          "analyses.[0].findings.[2].question",
          "analyses.[0].findings.[2].confidence",
          "analyses.[0].findings.[2].blind_spots",
          "analyses.[0].findings.[2].recommendation",
          "analyses.[0].findings.[2].category",
          "analyses.[0].findings.[3].question",
          "analyses.[0].findings.[3].confidence",
          "analyses.[0].findings.[3].blind_spots",
          "analyses.[0].findings.[3].recommendation",
          "analyses.[0].findings.[3].category",
          "analyses.[0].findings.[4].question",
          "analyses.[0].findings.[4].confidence",
          "analyses.[0].findings.[4].blind_spots",
          "analyses.[0].findings.[4].recommendation",
          "analyses.[0].findings.[4].category",
          "analyses.[0].total_findings",
          "analyses.[0].confidence_score",
          "analyses.[0].diversity_score",
          "analyses.[1].agent_name",
          "analyses.[1].findings",
          "analyses.[1].findings.[0].question",
          "analyses.[1].findings.[0].confidence",
          "analyses.[1].findings.[0].blind_spots",
          "analyses.[1].findings.[0].recommendation",
          "analyses.[1].findings.[0].category",
          "analyses.[1].findings.[1].question",
          "analyses.[1].findings.[1].confidence",
          "analyses.[1].findings.[1].blind_spots",
          "analyses.[1].findings.[1].recommendation",
          "analyses.[1].findings.[1].category",
          "analyses.[1].findings.[2].question",
          "analyses.[1].findings.[2].confidence",
          "analyses.[1].findings.[2].blind_spots",
          "analyses.[1].findings.[2].recommendation",
          "analyses.[1].findings.[2].category",
          "analyses.[1].findings.[3].question",
          "analyses.[1].findings.[3].confidence",
          "analyses.[1].findings.[3].blind_spots",
          "analyses.[1].findings.[3].recommendation",
          "analyses.[1].findings.[3].category",
          "analyses.[1].findings.[4].question",
          "analyses.[1].findings.[4].confidence",
          "analyses.[1].findings.[4].blind_spots",
          "analyses.[1].findings.[4].recommendation",
          "analyses.[1].findings.[4].category",
          "analyses.[1].total_findings",
          "analyses.[1].confidence_score",
          "analyses.[1].diversity_score",
          "analyses.[2].agent_name",
          "analyses.[2].findings",
          "analyses.[2].findings.[0].question",
          "analyses.[2].findings.[0].confidence",
          "analyses.[2].findings.[0].blind_spots",
          "analyses.[2].findings.[0].recommendation",
          "analyses.[2].findings.[0].category",
          "analyses.[2].findings.[1].question",
          "analyses.[2].findings.[1].confidence",
          "analyses.[2].findings.[1].blind_spots",
          "analyses.[2].findings.[1].recommendation",
          "analyses.[2].findings.[1].category",
          "analyses.[2].findings.[2].question",
          "analyses.[2].findings.[2].confidence",
          "analyses.[2].findings.[2].blind_spots",
          "analyses.[2].findings.[2].recommendation",
          "analyses.[2].findings.[2].category",
          "analyses.[2].findings.[3].question",
          "analyses.[2].findings.[3].confidence",
          "analyses.[2].findings.[3].blind_spots",
          "analyses.[2].findings.[3].recommendation",
          "analyses.[2].findings.[3].category",
          "analyses.[2].findings.[4].question",
          "analyses.[2].findings.[4].confidence",
          "analyses.[2].findings.[4].blind_spots",
          "analyses.[2].findings.[4].recommendation",
          "analyses.[2].findings.[4].category",
          "analyses.[2].total_findings",
          "analyses.[2].confidence_score",
          "analyses.[2].diversity_score",
          "analyses.[3].agent_name",
          "analyses.[3].findings",
          "analyses.[3].findings.[0].question",
          "analyses.[3].findings.[0].confidence",
          "analyses.[3].findings.[0].blind_spots",
          "analyses.[3].findings.[0].recommendation",
          "analyses.[3].findings.[0].category",
          "analyses.[3].findings.[1].question",
          "analyses.[3].findings.[1].confidence",
          "analyses.[3].findings.[1].blind_spots",
          "analyses.[3].findings.[1].recommendation",
          "analyses.[3].findings.[1].category",
          "analyses.[3].findings.[2].question",
          "analyses.[3].findings.[2].confidence",
          "analyses.[3].findings.[2].blind_spots",
          "analyses.[3].findings.[2].recommendation",
          "analyses.[3].findings.[2].category",
          "analyses.[3].findings.[3].question",
          "analyses.[3].findings.[3].confidence",
          "analyses.[3].findings.[3].blind_spots",
          "analyses.[3].findings.[3].recommendation",
          "analyses.[3].findings.[3].category",
          "analyses.[3].findings.[4].question",
          "analyses.[3].findings.[4].confidence",
          "analyses.[3].findings.[4].blind_spots",
          "analyses.[3].findings.[4].recommendation",
          "analyses.[3].findings.[4].category",
          "analyses.[3].total_findings",
          "analyses.[3].confidence_score",
          "analyses.[3].diversity_score",
          "analyses.[4].agent_name",
          "analyses.[4].findings",
          "analyses.[4].findings.[0].question",
          "analyses.[4].findings.[0].confidence",
          "analyses.[4].findings.[0].blind_spots",
          "analyses.[4].findings.[0].recommendation",
          "analyses.[4].findings.[0].category",
          "analyses.[4].findings.[1].question",
          "analyses.[4].findings.[1].confidence",
          "analyses.[4].findings.[1].blind_spots",
          "analyses.[4].findings.[1].recommendation",
          "analyses.[4].findings.[1].category",
          "analyses.[4].findings.[2].question",
          "analyses.[4].findings.[2].confidence",
          "analyses.[4].findings.[2].blind_spots",
          "analyses.[4].findings.[2].recommendation",
          "analyses.[4].findings.[2].category",
          "analyses.[4].findings.[3].question",
          "analyses.[4].findings.[3].confidence",
          "analyses.[4].findings.[3].blind_spots",
          "analyses.[4].findings.[3].recommendation",
          "analyses.[4].findings.[3].category",
          "analyses.[4].findings.[4].question",
          "analyses.[4].findings.[4].confidence",
          "analyses.[4].findings.[4].blind_spots",
          "analyses.[4].findings.[4].recommendation",
          "analyses.[4].findings.[4].category",
          "analyses.[4].total_findings",
          "analyses.[4].confidence_score",
          "analyses.[4].diversity_score",
          "metrics",
          "metrics.total_findings",
          "metrics.unique_findings",
          "metrics.agent_coverage",
          "metrics.category_coverage",
          "metrics.diversity_score",
          "metrics.overlap_rate",
          "metrics.findings_by_category",
          "metrics.findings_by_category.code_quality",
          "metrics.findings_by_category.devops",
          "metrics.findings_by_category.monitoring",
          "metrics.findings_by_category.performance",
          "metrics.findings_by_category.security",
          "metrics.findings_by_category.ux",
          "metrics.findings_by_agent",
          "metrics.findings_by_agent.Code Quality Expert",
          "metrics.findings_by_agent.DevOps Engineer",
          "metrics.findings_by_agent.Performance Engineer",
          "metrics.findings_by_agent.Security Expert",
          "metrics.findings_by_agent.User Experience Advocate",
          "metrics.confidence_distribution",
          "metrics.confidence_distribution.Medium",
          "metrics.confidence_distribution.High",
          "metrics.confidence_distribution.Low",
          "context",
          "timestamp"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "62406ad9b478e3d99f343e2e81b5e9e5",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.957471",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/data/multi_dimensional_results.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/data/multi_dimensional_results.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 391699,
        "json_keys": [
          "total_tests",
          "results",
          "analysis"
        ],
        "json_depth": 5,
        "json_keys_list": [
          "total_tests",
          "results",
          "results.[0].config",
          "results.[0].config.name",
          "results.[0].config.temperature",
          "results.[0].config.role",
          "results.[0].config.model",
          "results.[0].config.prompt_structure",
          "results.[0].config.response_format",
          "results.[0].scenario",
          "results.[0].our_result",
          "results.[0].our_result.assumptions",
          "results.[0].our_result.blind_spots",
          "results.[0].our_result.confidence",
          "results.[0].our_result.decision",
          "results.[0].real_llm_result",
          "results.[0].real_llm_result.raw_response",
          "results.[0].real_llm_result.questions",
          "results.[0].agreement",
          "results.[0].insights",
          "results.[1].config",
          "results.[1].config.name",
          "results.[1].config.temperature",
          "results.[1].config.role",
          "results.[1].config.model",
          "results.[1].config.prompt_structure",
          "results.[1].config.response_format",
          "results.[1].scenario",
          "results.[1].our_result",
          "results.[1].our_result.assumptions",
          "results.[1].our_result.blind_spots",
          "results.[1].our_result.confidence",
          "results.[1].our_result.decision",
          "results.[1].real_llm_result",
          "results.[1].real_llm_result.raw_response",
          "results.[1].real_llm_result.questions",
          "results.[1].agreement",
          "results.[1].insights",
          "results.[2].config",
          "results.[2].config.name",
          "results.[2].config.temperature",
          "results.[2].config.role",
          "results.[2].config.model",
          "results.[2].config.prompt_structure",
          "results.[2].config.response_format",
          "results.[2].scenario",
          "results.[2].our_result",
          "results.[2].our_result.assumptions",
          "results.[2].our_result.blind_spots",
          "results.[2].our_result.confidence",
          "results.[2].our_result.decision",
          "results.[2].real_llm_result",
          "results.[2].real_llm_result.raw_response",
          "results.[2].real_llm_result.questions",
          "results.[2].agreement",
          "results.[2].insights",
          "results.[3].config",
          "results.[3].config.name",
          "results.[3].config.temperature",
          "results.[3].config.role",
          "results.[3].config.model",
          "results.[3].config.prompt_structure",
          "results.[3].config.response_format",
          "results.[3].scenario",
          "results.[3].our_result",
          "results.[3].our_result.assumptions",
          "results.[3].our_result.blind_spots",
          "results.[3].our_result.confidence",
          "results.[3].our_result.decision",
          "results.[3].real_llm_result",
          "results.[3].real_llm_result.raw_response",
          "results.[3].real_llm_result.questions",
          "results.[3].agreement",
          "results.[3].insights",
          "results.[4].config",
          "results.[4].config.name",
          "results.[4].config.temperature",
          "results.[4].config.role",
          "results.[4].config.model",
          "results.[4].config.prompt_structure",
          "results.[4].config.response_format",
          "results.[4].scenario",
          "results.[4].our_result",
          "results.[4].our_result.assumptions",
          "results.[4].our_result.blind_spots",
          "results.[4].our_result.confidence",
          "results.[4].our_result.decision",
          "results.[4].real_llm_result",
          "results.[4].real_llm_result.raw_response",
          "results.[4].real_llm_result.questions",
          "results.[4].agreement",
          "results.[4].insights",
          "results.[5].config",
          "results.[5].config.name",
          "results.[5].config.temperature",
          "results.[5].config.role",
          "results.[5].config.model",
          "results.[5].config.prompt_structure",
          "results.[5].config.response_format",
          "results.[5].scenario",
          "results.[5].our_result",
          "results.[5].our_result.assumptions",
          "results.[5].our_result.blind_spots",
          "results.[5].our_result.confidence",
          "results.[5].our_result.decision",
          "results.[5].real_llm_result",
          "results.[5].real_llm_result.raw_response",
          "results.[5].real_llm_result.questions",
          "results.[5].agreement",
          "results.[5].insights",
          "results.[6].config",
          "results.[6].config.name",
          "results.[6].config.temperature",
          "results.[6].config.role",
          "results.[6].config.model",
          "results.[6].config.prompt_structure",
          "results.[6].config.response_format",
          "results.[6].scenario",
          "results.[6].our_result",
          "results.[6].our_result.assumptions",
          "results.[6].our_result.blind_spots",
          "results.[6].our_result.confidence",
          "results.[6].our_result.decision",
          "results.[6].real_llm_result",
          "results.[6].real_llm_result.raw_response",
          "results.[6].real_llm_result.questions",
          "results.[6].agreement",
          "results.[6].insights",
          "results.[7].config",
          "results.[7].config.name",
          "results.[7].config.temperature",
          "results.[7].config.role",
          "results.[7].config.model",
          "results.[7].config.prompt_structure",
          "results.[7].config.response_format",
          "results.[7].scenario",
          "results.[7].our_result",
          "results.[7].our_result.assumptions",
          "results.[7].our_result.blind_spots",
          "results.[7].our_result.confidence",
          "results.[7].our_result.decision",
          "results.[7].real_llm_result",
          "results.[7].real_llm_result.raw_response",
          "results.[7].real_llm_result.questions",
          "results.[7].agreement",
          "results.[7].insights",
          "results.[8].config",
          "results.[8].config.name",
          "results.[8].config.temperature",
          "results.[8].config.role",
          "results.[8].config.model",
          "results.[8].config.prompt_structure",
          "results.[8].config.response_format",
          "results.[8].scenario",
          "results.[8].our_result",
          "results.[8].our_result.assumptions",
          "results.[8].our_result.blind_spots",
          "results.[8].our_result.confidence",
          "results.[8].our_result.decision",
          "results.[8].real_llm_result",
          "results.[8].real_llm_result.raw_response",
          "results.[8].real_llm_result.questions",
          "results.[8].agreement",
          "results.[8].insights",
          "results.[9].config",
          "results.[9].config.name",
          "results.[9].config.temperature",
          "results.[9].config.role",
          "results.[9].config.model",
          "results.[9].config.prompt_structure",
          "results.[9].config.response_format",
          "results.[9].scenario",
          "results.[9].our_result",
          "results.[9].our_result.assumptions",
          "results.[9].our_result.blind_spots",
          "results.[9].our_result.confidence",
          "results.[9].our_result.decision",
          "results.[9].real_llm_result",
          "results.[9].real_llm_result.raw_response",
          "results.[9].real_llm_result.questions",
          "results.[9].agreement",
          "results.[9].insights",
          "results.[10].config",
          "results.[10].config.name",
          "results.[10].config.temperature",
          "results.[10].config.role",
          "results.[10].config.model",
          "results.[10].config.prompt_structure",
          "results.[10].config.response_format",
          "results.[10].scenario",
          "results.[10].our_result",
          "results.[10].our_result.assumptions",
          "results.[10].our_result.blind_spots",
          "results.[10].our_result.confidence",
          "results.[10].our_result.decision",
          "results.[10].real_llm_result",
          "results.[10].real_llm_result.raw_response",
          "results.[10].real_llm_result.questions",
          "results.[10].agreement",
          "results.[10].insights",
          "results.[11].config",
          "results.[11].config.name",
          "results.[11].config.temperature",
          "results.[11].config.role",
          "results.[11].config.model",
          "results.[11].config.prompt_structure",
          "results.[11].config.response_format",
          "results.[11].scenario",
          "results.[11].our_result",
          "results.[11].our_result.assumptions",
          "results.[11].our_result.blind_spots",
          "results.[11].our_result.confidence",
          "results.[11].our_result.decision",
          "results.[11].real_llm_result",
          "results.[11].real_llm_result.raw_response",
          "results.[11].real_llm_result.questions",
          "results.[11].agreement",
          "results.[11].insights",
          "results.[12].config",
          "results.[12].config.name",
          "results.[12].config.temperature",
          "results.[12].config.role",
          "results.[12].config.model",
          "results.[12].config.prompt_structure",
          "results.[12].config.response_format",
          "results.[12].scenario",
          "results.[12].our_result",
          "results.[12].our_result.assumptions",
          "results.[12].our_result.blind_spots",
          "results.[12].our_result.confidence",
          "results.[12].our_result.decision",
          "results.[12].real_llm_result",
          "results.[12].real_llm_result.raw_response",
          "results.[12].real_llm_result.questions",
          "results.[12].agreement",
          "results.[12].insights",
          "results.[13].config",
          "results.[13].config.name",
          "results.[13].config.temperature",
          "results.[13].config.role",
          "results.[13].config.model",
          "results.[13].config.prompt_structure",
          "results.[13].config.response_format",
          "results.[13].scenario",
          "results.[13].our_result",
          "results.[13].our_result.assumptions",
          "results.[13].our_result.blind_spots",
          "results.[13].our_result.confidence",
          "results.[13].our_result.decision",
          "results.[13].real_llm_result",
          "results.[13].real_llm_result.raw_response",
          "results.[13].real_llm_result.questions",
          "results.[13].agreement",
          "results.[13].insights",
          "results.[14].config",
          "results.[14].config.name",
          "results.[14].config.temperature",
          "results.[14].config.role",
          "results.[14].config.model",
          "results.[14].config.prompt_structure",
          "results.[14].config.response_format",
          "results.[14].scenario",
          "results.[14].our_result",
          "results.[14].our_result.assumptions",
          "results.[14].our_result.blind_spots",
          "results.[14].our_result.confidence",
          "results.[14].our_result.decision",
          "results.[14].real_llm_result",
          "results.[14].real_llm_result.raw_response",
          "results.[14].real_llm_result.questions",
          "results.[14].agreement",
          "results.[14].insights",
          "results.[15].config",
          "results.[15].config.name",
          "results.[15].config.temperature",
          "results.[15].config.role",
          "results.[15].config.model",
          "results.[15].config.prompt_structure",
          "results.[15].config.response_format",
          "results.[15].scenario",
          "results.[15].our_result",
          "results.[15].our_result.assumptions",
          "results.[15].our_result.blind_spots",
          "results.[15].our_result.confidence",
          "results.[15].our_result.decision",
          "results.[15].real_llm_result",
          "results.[15].real_llm_result.raw_response",
          "results.[15].real_llm_result.questions",
          "results.[15].agreement",
          "results.[15].insights",
          "results.[16].config",
          "results.[16].config.name",
          "results.[16].config.temperature",
          "results.[16].config.role",
          "results.[16].config.model",
          "results.[16].config.prompt_structure",
          "results.[16].config.response_format",
          "results.[16].scenario",
          "results.[16].our_result",
          "results.[16].our_result.assumptions",
          "results.[16].our_result.blind_spots",
          "results.[16].our_result.confidence",
          "results.[16].our_result.decision",
          "results.[16].real_llm_result",
          "results.[16].real_llm_result.raw_response",
          "results.[16].real_llm_result.questions",
          "results.[16].agreement",
          "results.[16].insights",
          "results.[17].config",
          "results.[17].config.name",
          "results.[17].config.temperature",
          "results.[17].config.role",
          "results.[17].config.model",
          "results.[17].config.prompt_structure",
          "results.[17].config.response_format",
          "results.[17].scenario",
          "results.[17].our_result",
          "results.[17].our_result.assumptions",
          "results.[17].our_result.blind_spots",
          "results.[17].our_result.confidence",
          "results.[17].our_result.decision",
          "results.[17].real_llm_result",
          "results.[17].real_llm_result.raw_response",
          "results.[17].real_llm_result.questions",
          "results.[17].agreement",
          "results.[17].insights",
          "results.[18].config",
          "results.[18].config.name",
          "results.[18].config.temperature",
          "results.[18].config.role",
          "results.[18].config.model",
          "results.[18].config.prompt_structure",
          "results.[18].config.response_format",
          "results.[18].scenario",
          "results.[18].our_result",
          "results.[18].our_result.assumptions",
          "results.[18].our_result.blind_spots",
          "results.[18].our_result.confidence",
          "results.[18].our_result.decision",
          "results.[18].real_llm_result",
          "results.[18].real_llm_result.raw_response",
          "results.[18].real_llm_result.questions",
          "results.[18].agreement",
          "results.[18].insights",
          "results.[19].config",
          "results.[19].config.name",
          "results.[19].config.temperature",
          "results.[19].config.role",
          "results.[19].config.model",
          "results.[19].config.prompt_structure",
          "results.[19].config.response_format",
          "results.[19].scenario",
          "results.[19].our_result",
          "results.[19].our_result.assumptions",
          "results.[19].our_result.blind_spots",
          "results.[19].our_result.confidence",
          "results.[19].our_result.decision",
          "results.[19].real_llm_result",
          "results.[19].real_llm_result.raw_response",
          "results.[19].real_llm_result.questions",
          "results.[19].agreement",
          "results.[19].insights",
          "results.[20].config",
          "results.[20].config.name",
          "results.[20].config.temperature",
          "results.[20].config.role",
          "results.[20].config.model",
          "results.[20].config.prompt_structure",
          "results.[20].config.response_format",
          "results.[20].scenario",
          "results.[20].our_result",
          "results.[20].our_result.assumptions",
          "results.[20].our_result.blind_spots",
          "results.[20].our_result.confidence",
          "results.[20].our_result.decision",
          "results.[20].real_llm_result",
          "results.[20].real_llm_result.raw_response",
          "results.[20].real_llm_result.questions",
          "results.[20].agreement",
          "results.[20].insights",
          "results.[21].config",
          "results.[21].config.name",
          "results.[21].config.temperature",
          "results.[21].config.role",
          "results.[21].config.model",
          "results.[21].config.prompt_structure",
          "results.[21].config.response_format",
          "results.[21].scenario",
          "results.[21].our_result",
          "results.[21].our_result.assumptions",
          "results.[21].our_result.blind_spots",
          "results.[21].our_result.confidence",
          "results.[21].our_result.decision",
          "results.[21].real_llm_result",
          "results.[21].real_llm_result.raw_response",
          "results.[21].real_llm_result.questions",
          "results.[21].agreement",
          "results.[21].insights",
          "results.[22].config",
          "results.[22].config.name",
          "results.[22].config.temperature",
          "results.[22].config.role",
          "results.[22].config.model",
          "results.[22].config.prompt_structure",
          "results.[22].config.response_format",
          "results.[22].scenario",
          "results.[22].our_result",
          "results.[22].our_result.assumptions",
          "results.[22].our_result.blind_spots",
          "results.[22].our_result.confidence",
          "results.[22].our_result.decision",
          "results.[22].real_llm_result",
          "results.[22].real_llm_result.raw_response",
          "results.[22].real_llm_result.questions",
          "results.[22].agreement",
          "results.[22].insights",
          "results.[23].config",
          "results.[23].config.name",
          "results.[23].config.temperature",
          "results.[23].config.role",
          "results.[23].config.model",
          "results.[23].config.prompt_structure",
          "results.[23].config.response_format",
          "results.[23].scenario",
          "results.[23].our_result",
          "results.[23].our_result.assumptions",
          "results.[23].our_result.blind_spots",
          "results.[23].our_result.confidence",
          "results.[23].our_result.decision",
          "results.[23].real_llm_result",
          "results.[23].real_llm_result.raw_response",
          "results.[23].real_llm_result.questions",
          "results.[23].agreement",
          "results.[23].insights",
          "results.[24].config",
          "results.[24].config.name",
          "results.[24].config.temperature",
          "results.[24].config.role",
          "results.[24].config.model",
          "results.[24].config.prompt_structure",
          "results.[24].config.response_format",
          "results.[24].scenario",
          "results.[24].our_result",
          "results.[24].our_result.assumptions",
          "results.[24].our_result.blind_spots",
          "results.[24].our_result.confidence",
          "results.[24].our_result.decision",
          "results.[24].real_llm_result",
          "results.[24].real_llm_result.raw_response",
          "results.[24].real_llm_result.questions",
          "results.[24].agreement",
          "results.[24].insights",
          "results.[25].config",
          "results.[25].config.name",
          "results.[25].config.temperature",
          "results.[25].config.role",
          "results.[25].config.model",
          "results.[25].config.prompt_structure",
          "results.[25].config.response_format",
          "results.[25].scenario",
          "results.[25].our_result",
          "results.[25].our_result.assumptions",
          "results.[25].our_result.blind_spots",
          "results.[25].our_result.confidence",
          "results.[25].our_result.decision",
          "results.[25].real_llm_result",
          "results.[25].real_llm_result.raw_response",
          "results.[25].real_llm_result.questions",
          "results.[25].agreement",
          "results.[25].insights",
          "results.[26].config",
          "results.[26].config.name",
          "results.[26].config.temperature",
          "results.[26].config.role",
          "results.[26].config.model",
          "results.[26].config.prompt_structure",
          "results.[26].config.response_format",
          "results.[26].scenario",
          "results.[26].our_result",
          "results.[26].our_result.assumptions",
          "results.[26].our_result.blind_spots",
          "results.[26].our_result.confidence",
          "results.[26].our_result.decision",
          "results.[26].real_llm_result",
          "results.[26].real_llm_result.raw_response",
          "results.[26].real_llm_result.questions",
          "results.[26].agreement",
          "results.[26].insights",
          "results.[27].config",
          "results.[27].config.name",
          "results.[27].config.temperature",
          "results.[27].config.role",
          "results.[27].config.model",
          "results.[27].config.prompt_structure",
          "results.[27].config.response_format",
          "results.[27].scenario",
          "results.[27].our_result",
          "results.[27].our_result.assumptions",
          "results.[27].our_result.blind_spots",
          "results.[27].our_result.confidence",
          "results.[27].our_result.decision",
          "results.[27].real_llm_result",
          "results.[27].real_llm_result.raw_response",
          "results.[27].real_llm_result.questions",
          "results.[27].agreement",
          "results.[27].insights",
          "results.[28].config",
          "results.[28].config.name",
          "results.[28].config.temperature",
          "results.[28].config.role",
          "results.[28].config.model",
          "results.[28].config.prompt_structure",
          "results.[28].config.response_format",
          "results.[28].scenario",
          "results.[28].our_result",
          "results.[28].our_result.assumptions",
          "results.[28].our_result.blind_spots",
          "results.[28].our_result.confidence",
          "results.[28].our_result.decision",
          "results.[28].real_llm_result",
          "results.[28].real_llm_result.raw_response",
          "results.[28].real_llm_result.questions",
          "results.[28].agreement",
          "results.[28].insights",
          "results.[29].config",
          "results.[29].config.name",
          "results.[29].config.temperature",
          "results.[29].config.role",
          "results.[29].config.model",
          "results.[29].config.prompt_structure",
          "results.[29].config.response_format",
          "results.[29].scenario",
          "results.[29].our_result",
          "results.[29].our_result.assumptions",
          "results.[29].our_result.blind_spots",
          "results.[29].our_result.confidence",
          "results.[29].our_result.decision",
          "results.[29].real_llm_result",
          "results.[29].real_llm_result.raw_response",
          "results.[29].real_llm_result.questions",
          "results.[29].agreement",
          "results.[29].insights",
          "results.[30].config",
          "results.[30].config.name",
          "results.[30].config.temperature",
          "results.[30].config.role",
          "results.[30].config.model",
          "results.[30].config.prompt_structure",
          "results.[30].config.response_format",
          "results.[30].scenario",
          "results.[30].our_result",
          "results.[30].our_result.assumptions",
          "results.[30].our_result.blind_spots",
          "results.[30].our_result.confidence",
          "results.[30].our_result.decision",
          "results.[30].real_llm_result",
          "results.[30].real_llm_result.raw_response",
          "results.[30].real_llm_result.questions",
          "results.[30].agreement",
          "results.[30].insights",
          "results.[31].config",
          "results.[31].config.name",
          "results.[31].config.temperature",
          "results.[31].config.role",
          "results.[31].config.model",
          "results.[31].config.prompt_structure",
          "results.[31].config.response_format",
          "results.[31].scenario",
          "results.[31].our_result",
          "results.[31].our_result.assumptions",
          "results.[31].our_result.blind_spots",
          "results.[31].our_result.confidence",
          "results.[31].our_result.decision",
          "results.[31].real_llm_result",
          "results.[31].real_llm_result.raw_response",
          "results.[31].real_llm_result.questions",
          "results.[31].agreement",
          "results.[31].insights",
          "results.[32].config",
          "results.[32].config.name",
          "results.[32].config.temperature",
          "results.[32].config.role",
          "results.[32].config.model",
          "results.[32].config.prompt_structure",
          "results.[32].config.response_format",
          "results.[32].scenario",
          "results.[32].our_result",
          "results.[32].our_result.assumptions",
          "results.[32].our_result.blind_spots",
          "results.[32].our_result.confidence",
          "results.[32].our_result.decision",
          "results.[32].real_llm_result",
          "results.[32].real_llm_result.raw_response",
          "results.[32].real_llm_result.questions",
          "results.[32].agreement",
          "results.[32].insights",
          "results.[33].config",
          "results.[33].config.name",
          "results.[33].config.temperature",
          "results.[33].config.role",
          "results.[33].config.model",
          "results.[33].config.prompt_structure",
          "results.[33].config.response_format",
          "results.[33].scenario",
          "results.[33].our_result",
          "results.[33].our_result.assumptions",
          "results.[33].our_result.blind_spots",
          "results.[33].our_result.confidence",
          "results.[33].our_result.decision",
          "results.[33].real_llm_result",
          "results.[33].real_llm_result.raw_response",
          "results.[33].real_llm_result.questions",
          "results.[33].agreement",
          "results.[33].insights",
          "results.[34].config",
          "results.[34].config.name",
          "results.[34].config.temperature",
          "results.[34].config.role",
          "results.[34].config.model",
          "results.[34].config.prompt_structure",
          "results.[34].config.response_format",
          "results.[34].scenario",
          "results.[34].our_result",
          "results.[34].our_result.assumptions",
          "results.[34].our_result.blind_spots",
          "results.[34].our_result.confidence",
          "results.[34].our_result.decision",
          "results.[34].real_llm_result",
          "results.[34].real_llm_result.raw_response",
          "results.[34].real_llm_result.questions",
          "results.[34].agreement",
          "results.[34].insights",
          "results.[35].config",
          "results.[35].config.name",
          "results.[35].config.temperature",
          "results.[35].config.role",
          "results.[35].config.model",
          "results.[35].config.prompt_structure",
          "results.[35].config.response_format",
          "results.[35].scenario",
          "results.[35].our_result",
          "results.[35].our_result.assumptions",
          "results.[35].our_result.blind_spots",
          "results.[35].our_result.confidence",
          "results.[35].our_result.decision",
          "results.[35].real_llm_result",
          "results.[35].real_llm_result.error",
          "results.[35].real_llm_result.questions",
          "results.[35].agreement",
          "results.[35].insights",
          "results.[36].config",
          "results.[36].config.name",
          "results.[36].config.temperature",
          "results.[36].config.role",
          "results.[36].config.model",
          "results.[36].config.prompt_structure",
          "results.[36].config.response_format",
          "results.[36].scenario",
          "results.[36].our_result",
          "results.[36].our_result.assumptions",
          "results.[36].our_result.blind_spots",
          "results.[36].our_result.confidence",
          "results.[36].our_result.decision",
          "results.[36].real_llm_result",
          "results.[36].real_llm_result.error",
          "results.[36].real_llm_result.questions",
          "results.[36].agreement",
          "results.[36].insights",
          "results.[37].config",
          "results.[37].config.name",
          "results.[37].config.temperature",
          "results.[37].config.role",
          "results.[37].config.model",
          "results.[37].config.prompt_structure",
          "results.[37].config.response_format",
          "results.[37].scenario",
          "results.[37].our_result",
          "results.[37].our_result.assumptions",
          "results.[37].our_result.blind_spots",
          "results.[37].our_result.confidence",
          "results.[37].our_result.decision",
          "results.[37].real_llm_result",
          "results.[37].real_llm_result.error",
          "results.[37].real_llm_result.questions",
          "results.[37].agreement",
          "results.[37].insights",
          "results.[38].config",
          "results.[38].config.name",
          "results.[38].config.temperature",
          "results.[38].config.role",
          "results.[38].config.model",
          "results.[38].config.prompt_structure",
          "results.[38].config.response_format",
          "results.[38].scenario",
          "results.[38].our_result",
          "results.[38].our_result.assumptions",
          "results.[38].our_result.blind_spots",
          "results.[38].our_result.confidence",
          "results.[38].our_result.decision",
          "results.[38].real_llm_result",
          "results.[38].real_llm_result.error",
          "results.[38].real_llm_result.questions",
          "results.[38].agreement",
          "results.[38].insights",
          "results.[39].config",
          "results.[39].config.name",
          "results.[39].config.temperature",
          "results.[39].config.role",
          "results.[39].config.model",
          "results.[39].config.prompt_structure",
          "results.[39].config.response_format",
          "results.[39].scenario",
          "results.[39].our_result",
          "results.[39].our_result.assumptions",
          "results.[39].our_result.blind_spots",
          "results.[39].our_result.confidence",
          "results.[39].our_result.decision",
          "results.[39].real_llm_result",
          "results.[39].real_llm_result.error",
          "results.[39].real_llm_result.questions",
          "results.[39].agreement",
          "results.[39].insights",
          "results.[40].config",
          "results.[40].config.name",
          "results.[40].config.temperature",
          "results.[40].config.role",
          "results.[40].config.model",
          "results.[40].config.prompt_structure",
          "results.[40].config.response_format",
          "results.[40].scenario",
          "results.[40].our_result",
          "results.[40].our_result.assumptions",
          "results.[40].our_result.blind_spots",
          "results.[40].our_result.confidence",
          "results.[40].our_result.decision",
          "results.[40].real_llm_result",
          "results.[40].real_llm_result.error",
          "results.[40].real_llm_result.questions",
          "results.[40].agreement",
          "results.[40].insights",
          "results.[41].config",
          "results.[41].config.name",
          "results.[41].config.temperature",
          "results.[41].config.role",
          "results.[41].config.model",
          "results.[41].config.prompt_structure",
          "results.[41].config.response_format",
          "results.[41].scenario",
          "results.[41].our_result",
          "results.[41].our_result.assumptions",
          "results.[41].our_result.blind_spots",
          "results.[41].our_result.confidence",
          "results.[41].our_result.decision",
          "results.[41].real_llm_result",
          "results.[41].real_llm_result.error",
          "results.[41].real_llm_result.questions",
          "results.[41].agreement",
          "results.[41].insights",
          "results.[42].config",
          "results.[42].config.name",
          "results.[42].config.temperature",
          "results.[42].config.role",
          "results.[42].config.model",
          "results.[42].config.prompt_structure",
          "results.[42].config.response_format",
          "results.[42].scenario",
          "results.[42].our_result",
          "results.[42].our_result.assumptions",
          "results.[42].our_result.blind_spots",
          "results.[42].our_result.confidence",
          "results.[42].our_result.decision",
          "results.[42].real_llm_result",
          "results.[42].real_llm_result.raw_response",
          "results.[42].real_llm_result.questions",
          "results.[42].agreement",
          "results.[42].insights",
          "results.[43].config",
          "results.[43].config.name",
          "results.[43].config.temperature",
          "results.[43].config.role",
          "results.[43].config.model",
          "results.[43].config.prompt_structure",
          "results.[43].config.response_format",
          "results.[43].scenario",
          "results.[43].our_result",
          "results.[43].our_result.assumptions",
          "results.[43].our_result.blind_spots",
          "results.[43].our_result.confidence",
          "results.[43].our_result.decision",
          "results.[43].real_llm_result",
          "results.[43].real_llm_result.raw_response",
          "results.[43].real_llm_result.questions",
          "results.[43].agreement",
          "results.[43].insights",
          "results.[44].config",
          "results.[44].config.name",
          "results.[44].config.temperature",
          "results.[44].config.role",
          "results.[44].config.model",
          "results.[44].config.prompt_structure",
          "results.[44].config.response_format",
          "results.[44].scenario",
          "results.[44].our_result",
          "results.[44].our_result.assumptions",
          "results.[44].our_result.blind_spots",
          "results.[44].our_result.confidence",
          "results.[44].our_result.decision",
          "results.[44].real_llm_result",
          "results.[44].real_llm_result.raw_response",
          "results.[44].real_llm_result.questions",
          "results.[44].agreement",
          "results.[44].insights",
          "results.[45].config",
          "results.[45].config.name",
          "results.[45].config.temperature",
          "results.[45].config.role",
          "results.[45].config.model",
          "results.[45].config.prompt_structure",
          "results.[45].config.response_format",
          "results.[45].scenario",
          "results.[45].our_result",
          "results.[45].our_result.assumptions",
          "results.[45].our_result.blind_spots",
          "results.[45].our_result.confidence",
          "results.[45].our_result.decision",
          "results.[45].real_llm_result",
          "results.[45].real_llm_result.raw_response",
          "results.[45].real_llm_result.questions",
          "results.[45].agreement",
          "results.[45].insights",
          "results.[46].config",
          "results.[46].config.name",
          "results.[46].config.temperature",
          "results.[46].config.role",
          "results.[46].config.model",
          "results.[46].config.prompt_structure",
          "results.[46].config.response_format",
          "results.[46].scenario",
          "results.[46].our_result",
          "results.[46].our_result.assumptions",
          "results.[46].our_result.blind_spots",
          "results.[46].our_result.confidence",
          "results.[46].our_result.decision",
          "results.[46].real_llm_result",
          "results.[46].real_llm_result.raw_response",
          "results.[46].real_llm_result.questions",
          "results.[46].agreement",
          "results.[46].insights",
          "results.[47].config",
          "results.[47].config.name",
          "results.[47].config.temperature",
          "results.[47].config.role",
          "results.[47].config.model",
          "results.[47].config.prompt_structure",
          "results.[47].config.response_format",
          "results.[47].scenario",
          "results.[47].our_result",
          "results.[47].our_result.assumptions",
          "results.[47].our_result.blind_spots",
          "results.[47].our_result.confidence",
          "results.[47].our_result.decision",
          "results.[47].real_llm_result",
          "results.[47].real_llm_result.raw_response",
          "results.[47].real_llm_result.questions",
          "results.[47].agreement",
          "results.[47].insights",
          "results.[48].config",
          "results.[48].config.name",
          "results.[48].config.temperature",
          "results.[48].config.role",
          "results.[48].config.model",
          "results.[48].config.prompt_structure",
          "results.[48].config.response_format",
          "results.[48].scenario",
          "results.[48].our_result",
          "results.[48].our_result.assumptions",
          "results.[48].our_result.blind_spots",
          "results.[48].our_result.confidence",
          "results.[48].our_result.decision",
          "results.[48].real_llm_result",
          "results.[48].real_llm_result.raw_response",
          "results.[48].real_llm_result.questions",
          "results.[48].agreement",
          "results.[48].insights",
          "results.[49].config",
          "results.[49].config.name",
          "results.[49].config.temperature",
          "results.[49].config.role",
          "results.[49].config.model",
          "results.[49].config.prompt_structure",
          "results.[49].config.response_format",
          "results.[49].scenario",
          "results.[49].our_result",
          "results.[49].our_result.assumptions",
          "results.[49].our_result.blind_spots",
          "results.[49].our_result.confidence",
          "results.[49].our_result.decision",
          "results.[49].real_llm_result",
          "results.[49].real_llm_result.raw_response",
          "results.[49].real_llm_result.questions",
          "results.[49].agreement",
          "results.[49].insights",
          "results.[50].config",
          "results.[50].config.name",
          "results.[50].config.temperature",
          "results.[50].config.role",
          "results.[50].config.model",
          "results.[50].config.prompt_structure",
          "results.[50].config.response_format",
          "results.[50].scenario",
          "results.[50].our_result",
          "results.[50].our_result.assumptions",
          "results.[50].our_result.blind_spots",
          "results.[50].our_result.confidence",
          "results.[50].our_result.decision",
          "results.[50].real_llm_result",
          "results.[50].real_llm_result.raw_response",
          "results.[50].real_llm_result.questions",
          "results.[50].agreement",
          "results.[50].insights",
          "results.[51].config",
          "results.[51].config.name",
          "results.[51].config.temperature",
          "results.[51].config.role",
          "results.[51].config.model",
          "results.[51].config.prompt_structure",
          "results.[51].config.response_format",
          "results.[51].scenario",
          "results.[51].our_result",
          "results.[51].our_result.assumptions",
          "results.[51].our_result.blind_spots",
          "results.[51].our_result.confidence",
          "results.[51].our_result.decision",
          "results.[51].real_llm_result",
          "results.[51].real_llm_result.raw_response",
          "results.[51].real_llm_result.questions",
          "results.[51].agreement",
          "results.[51].insights",
          "results.[52].config",
          "results.[52].config.name",
          "results.[52].config.temperature",
          "results.[52].config.role",
          "results.[52].config.model",
          "results.[52].config.prompt_structure",
          "results.[52].config.response_format",
          "results.[52].scenario",
          "results.[52].our_result",
          "results.[52].our_result.assumptions",
          "results.[52].our_result.blind_spots",
          "results.[52].our_result.confidence",
          "results.[52].our_result.decision",
          "results.[52].real_llm_result",
          "results.[52].real_llm_result.raw_response",
          "results.[52].real_llm_result.questions",
          "results.[52].agreement",
          "results.[52].insights",
          "results.[53].config",
          "results.[53].config.name",
          "results.[53].config.temperature",
          "results.[53].config.role",
          "results.[53].config.model",
          "results.[53].config.prompt_structure",
          "results.[53].config.response_format",
          "results.[53].scenario",
          "results.[53].our_result",
          "results.[53].our_result.assumptions",
          "results.[53].our_result.blind_spots",
          "results.[53].our_result.confidence",
          "results.[53].our_result.decision",
          "results.[53].real_llm_result",
          "results.[53].real_llm_result.raw_response",
          "results.[53].real_llm_result.questions",
          "results.[53].agreement",
          "results.[53].insights",
          "results.[54].config",
          "results.[54].config.name",
          "results.[54].config.temperature",
          "results.[54].config.role",
          "results.[54].config.model",
          "results.[54].config.prompt_structure",
          "results.[54].config.response_format",
          "results.[54].scenario",
          "results.[54].our_result",
          "results.[54].our_result.assumptions",
          "results.[54].our_result.blind_spots",
          "results.[54].our_result.confidence",
          "results.[54].our_result.decision",
          "results.[54].real_llm_result",
          "results.[54].real_llm_result.raw_response",
          "results.[54].real_llm_result.questions",
          "results.[54].agreement",
          "results.[54].insights",
          "results.[55].config",
          "results.[55].config.name",
          "results.[55].config.temperature",
          "results.[55].config.role",
          "results.[55].config.model",
          "results.[55].config.prompt_structure",
          "results.[55].config.response_format",
          "results.[55].scenario",
          "results.[55].our_result",
          "results.[55].our_result.assumptions",
          "results.[55].our_result.blind_spots",
          "results.[55].our_result.confidence",
          "results.[55].our_result.decision",
          "results.[55].real_llm_result",
          "results.[55].real_llm_result.raw_response",
          "results.[55].real_llm_result.questions",
          "results.[55].agreement",
          "results.[55].insights",
          "results.[56].config",
          "results.[56].config.name",
          "results.[56].config.temperature",
          "results.[56].config.role",
          "results.[56].config.model",
          "results.[56].config.prompt_structure",
          "results.[56].config.response_format",
          "results.[56].scenario",
          "results.[56].our_result",
          "results.[56].our_result.assumptions",
          "results.[56].our_result.blind_spots",
          "results.[56].our_result.confidence",
          "results.[56].our_result.decision",
          "results.[56].real_llm_result",
          "results.[56].real_llm_result.raw_response",
          "results.[56].real_llm_result.questions",
          "results.[56].agreement",
          "results.[56].insights",
          "results.[57].config",
          "results.[57].config.name",
          "results.[57].config.temperature",
          "results.[57].config.role",
          "results.[57].config.model",
          "results.[57].config.prompt_structure",
          "results.[57].config.response_format",
          "results.[57].scenario",
          "results.[57].our_result",
          "results.[57].our_result.assumptions",
          "results.[57].our_result.blind_spots",
          "results.[57].our_result.confidence",
          "results.[57].our_result.decision",
          "results.[57].real_llm_result",
          "results.[57].real_llm_result.raw_response",
          "results.[57].real_llm_result.questions",
          "results.[57].agreement",
          "results.[57].insights",
          "results.[58].config",
          "results.[58].config.name",
          "results.[58].config.temperature",
          "results.[58].config.role",
          "results.[58].config.model",
          "results.[58].config.prompt_structure",
          "results.[58].config.response_format",
          "results.[58].scenario",
          "results.[58].our_result",
          "results.[58].our_result.assumptions",
          "results.[58].our_result.blind_spots",
          "results.[58].our_result.confidence",
          "results.[58].our_result.decision",
          "results.[58].real_llm_result",
          "results.[58].real_llm_result.raw_response",
          "results.[58].real_llm_result.questions",
          "results.[58].agreement",
          "results.[58].insights",
          "results.[59].config",
          "results.[59].config.name",
          "results.[59].config.temperature",
          "results.[59].config.role",
          "results.[59].config.model",
          "results.[59].config.prompt_structure",
          "results.[59].config.response_format",
          "results.[59].scenario",
          "results.[59].our_result",
          "results.[59].our_result.assumptions",
          "results.[59].our_result.blind_spots",
          "results.[59].our_result.confidence",
          "results.[59].our_result.decision",
          "results.[59].real_llm_result",
          "results.[59].real_llm_result.raw_response",
          "results.[59].real_llm_result.questions",
          "results.[59].agreement",
          "results.[59].insights",
          "results.[60].config",
          "results.[60].config.name",
          "results.[60].config.temperature",
          "results.[60].config.role",
          "results.[60].config.model",
          "results.[60].config.prompt_structure",
          "results.[60].config.response_format",
          "results.[60].scenario",
          "results.[60].our_result",
          "results.[60].our_result.assumptions",
          "results.[60].our_result.blind_spots",
          "results.[60].our_result.confidence",
          "results.[60].our_result.decision",
          "results.[60].real_llm_result",
          "results.[60].real_llm_result.raw_response",
          "results.[60].real_llm_result.questions",
          "results.[60].agreement",
          "results.[60].insights",
          "results.[61].config",
          "results.[61].config.name",
          "results.[61].config.temperature",
          "results.[61].config.role",
          "results.[61].config.model",
          "results.[61].config.prompt_structure",
          "results.[61].config.response_format",
          "results.[61].scenario",
          "results.[61].our_result",
          "results.[61].our_result.assumptions",
          "results.[61].our_result.blind_spots",
          "results.[61].our_result.confidence",
          "results.[61].our_result.decision",
          "results.[61].real_llm_result",
          "results.[61].real_llm_result.raw_response",
          "results.[61].real_llm_result.questions",
          "results.[61].agreement",
          "results.[61].insights",
          "results.[62].config",
          "results.[62].config.name",
          "results.[62].config.temperature",
          "results.[62].config.role",
          "results.[62].config.model",
          "results.[62].config.prompt_structure",
          "results.[62].config.response_format",
          "results.[62].scenario",
          "results.[62].our_result",
          "results.[62].our_result.assumptions",
          "results.[62].our_result.blind_spots",
          "results.[62].our_result.confidence",
          "results.[62].our_result.decision",
          "results.[62].real_llm_result",
          "results.[62].real_llm_result.raw_response",
          "results.[62].real_llm_result.questions",
          "results.[62].agreement",
          "results.[62].insights",
          "results.[63].config",
          "results.[63].config.name",
          "results.[63].config.temperature",
          "results.[63].config.role",
          "results.[63].config.model",
          "results.[63].config.prompt_structure",
          "results.[63].config.response_format",
          "results.[63].scenario",
          "results.[63].our_result",
          "results.[63].our_result.assumptions",
          "results.[63].our_result.blind_spots",
          "results.[63].our_result.confidence",
          "results.[63].our_result.decision",
          "results.[63].real_llm_result",
          "results.[63].real_llm_result.raw_response",
          "results.[63].real_llm_result.questions",
          "results.[63].agreement",
          "results.[63].insights",
          "results.[64].config",
          "results.[64].config.name",
          "results.[64].config.temperature",
          "results.[64].config.role",
          "results.[64].config.model",
          "results.[64].config.prompt_structure",
          "results.[64].config.response_format",
          "results.[64].scenario",
          "results.[64].our_result",
          "results.[64].our_result.assumptions",
          "results.[64].our_result.blind_spots",
          "results.[64].our_result.confidence",
          "results.[64].our_result.decision",
          "results.[64].real_llm_result",
          "results.[64].real_llm_result.raw_response",
          "results.[64].real_llm_result.questions",
          "results.[64].agreement",
          "results.[64].insights",
          "results.[65].config",
          "results.[65].config.name",
          "results.[65].config.temperature",
          "results.[65].config.role",
          "results.[65].config.model",
          "results.[65].config.prompt_structure",
          "results.[65].config.response_format",
          "results.[65].scenario",
          "results.[65].our_result",
          "results.[65].our_result.assumptions",
          "results.[65].our_result.blind_spots",
          "results.[65].our_result.confidence",
          "results.[65].our_result.decision",
          "results.[65].real_llm_result",
          "results.[65].real_llm_result.raw_response",
          "results.[65].real_llm_result.questions",
          "results.[65].agreement",
          "results.[65].insights",
          "results.[66].config",
          "results.[66].config.name",
          "results.[66].config.temperature",
          "results.[66].config.role",
          "results.[66].config.model",
          "results.[66].config.prompt_structure",
          "results.[66].config.response_format",
          "results.[66].scenario",
          "results.[66].our_result",
          "results.[66].our_result.assumptions",
          "results.[66].our_result.blind_spots",
          "results.[66].our_result.confidence",
          "results.[66].our_result.decision",
          "results.[66].real_llm_result",
          "results.[66].real_llm_result.raw_response",
          "results.[66].real_llm_result.questions",
          "results.[66].agreement",
          "results.[66].insights",
          "results.[67].config",
          "results.[67].config.name",
          "results.[67].config.temperature",
          "results.[67].config.role",
          "results.[67].config.model",
          "results.[67].config.prompt_structure",
          "results.[67].config.response_format",
          "results.[67].scenario",
          "results.[67].our_result",
          "results.[67].our_result.assumptions",
          "results.[67].our_result.blind_spots",
          "results.[67].our_result.confidence",
          "results.[67].our_result.decision",
          "results.[67].real_llm_result",
          "results.[67].real_llm_result.raw_response",
          "results.[67].real_llm_result.questions",
          "results.[67].agreement",
          "results.[67].insights",
          "results.[68].config",
          "results.[68].config.name",
          "results.[68].config.temperature",
          "results.[68].config.role",
          "results.[68].config.model",
          "results.[68].config.prompt_structure",
          "results.[68].config.response_format",
          "results.[68].scenario",
          "results.[68].our_result",
          "results.[68].our_result.assumptions",
          "results.[68].our_result.blind_spots",
          "results.[68].our_result.confidence",
          "results.[68].our_result.decision",
          "results.[68].real_llm_result",
          "results.[68].real_llm_result.raw_response",
          "results.[68].real_llm_result.questions",
          "results.[68].agreement",
          "results.[68].insights",
          "results.[69].config",
          "results.[69].config.name",
          "results.[69].config.temperature",
          "results.[69].config.role",
          "results.[69].config.model",
          "results.[69].config.prompt_structure",
          "results.[69].config.response_format",
          "results.[69].scenario",
          "results.[69].our_result",
          "results.[69].our_result.assumptions",
          "results.[69].our_result.blind_spots",
          "results.[69].our_result.confidence",
          "results.[69].our_result.decision",
          "results.[69].real_llm_result",
          "results.[69].real_llm_result.raw_response",
          "results.[69].real_llm_result.questions",
          "results.[69].agreement",
          "results.[69].insights",
          "results.[70].config",
          "results.[70].config.name",
          "results.[70].config.temperature",
          "results.[70].config.role",
          "results.[70].config.model",
          "results.[70].config.prompt_structure",
          "results.[70].config.response_format",
          "results.[70].scenario",
          "results.[70].our_result",
          "results.[70].our_result.assumptions",
          "results.[70].our_result.blind_spots",
          "results.[70].our_result.confidence",
          "results.[70].our_result.decision",
          "results.[70].real_llm_result",
          "results.[70].real_llm_result.raw_response",
          "results.[70].real_llm_result.questions",
          "results.[70].agreement",
          "results.[70].insights",
          "results.[71].config",
          "results.[71].config.name",
          "results.[71].config.temperature",
          "results.[71].config.role",
          "results.[71].config.model",
          "results.[71].config.prompt_structure",
          "results.[71].config.response_format",
          "results.[71].scenario",
          "results.[71].our_result",
          "results.[71].our_result.assumptions",
          "results.[71].our_result.blind_spots",
          "results.[71].our_result.confidence",
          "results.[71].our_result.decision",
          "results.[71].real_llm_result",
          "results.[71].real_llm_result.raw_response",
          "results.[71].real_llm_result.questions",
          "results.[71].agreement",
          "results.[71].insights",
          "results.[72].config",
          "results.[72].config.name",
          "results.[72].config.temperature",
          "results.[72].config.role",
          "results.[72].config.model",
          "results.[72].config.prompt_structure",
          "results.[72].config.response_format",
          "results.[72].scenario",
          "results.[72].our_result",
          "results.[72].our_result.assumptions",
          "results.[72].our_result.blind_spots",
          "results.[72].our_result.confidence",
          "results.[72].our_result.decision",
          "results.[72].real_llm_result",
          "results.[72].real_llm_result.raw_response",
          "results.[72].real_llm_result.questions",
          "results.[72].agreement",
          "results.[72].insights",
          "results.[73].config",
          "results.[73].config.name",
          "results.[73].config.temperature",
          "results.[73].config.role",
          "results.[73].config.model",
          "results.[73].config.prompt_structure",
          "results.[73].config.response_format",
          "results.[73].scenario",
          "results.[73].our_result",
          "results.[73].our_result.assumptions",
          "results.[73].our_result.blind_spots",
          "results.[73].our_result.confidence",
          "results.[73].our_result.decision",
          "results.[73].real_llm_result",
          "results.[73].real_llm_result.raw_response",
          "results.[73].real_llm_result.questions",
          "results.[73].agreement",
          "results.[73].insights",
          "results.[74].config",
          "results.[74].config.name",
          "results.[74].config.temperature",
          "results.[74].config.role",
          "results.[74].config.model",
          "results.[74].config.prompt_structure",
          "results.[74].config.response_format",
          "results.[74].scenario",
          "results.[74].our_result",
          "results.[74].our_result.assumptions",
          "results.[74].our_result.blind_spots",
          "results.[74].our_result.confidence",
          "results.[74].our_result.decision",
          "results.[74].real_llm_result",
          "results.[74].real_llm_result.raw_response",
          "results.[74].real_llm_result.questions",
          "results.[74].agreement",
          "results.[74].insights",
          "results.[75].config",
          "results.[75].config.name",
          "results.[75].config.temperature",
          "results.[75].config.role",
          "results.[75].config.model",
          "results.[75].config.prompt_structure",
          "results.[75].config.response_format",
          "results.[75].scenario",
          "results.[75].our_result",
          "results.[75].our_result.assumptions",
          "results.[75].our_result.blind_spots",
          "results.[75].our_result.confidence",
          "results.[75].our_result.decision",
          "results.[75].real_llm_result",
          "results.[75].real_llm_result.raw_response",
          "results.[75].real_llm_result.questions",
          "results.[75].agreement",
          "results.[75].insights",
          "results.[76].config",
          "results.[76].config.name",
          "results.[76].config.temperature",
          "results.[76].config.role",
          "results.[76].config.model",
          "results.[76].config.prompt_structure",
          "results.[76].config.response_format",
          "results.[76].scenario",
          "results.[76].our_result",
          "results.[76].our_result.assumptions",
          "results.[76].our_result.blind_spots",
          "results.[76].our_result.confidence",
          "results.[76].our_result.decision",
          "results.[76].real_llm_result",
          "results.[76].real_llm_result.raw_response",
          "results.[76].real_llm_result.questions",
          "results.[76].agreement",
          "results.[76].insights",
          "results.[77].config",
          "results.[77].config.name",
          "results.[77].config.temperature",
          "results.[77].config.role",
          "results.[77].config.model",
          "results.[77].config.prompt_structure",
          "results.[77].config.response_format",
          "results.[77].scenario",
          "results.[77].our_result",
          "results.[77].our_result.assumptions",
          "results.[77].our_result.blind_spots",
          "results.[77].our_result.confidence",
          "results.[77].our_result.decision",
          "results.[77].real_llm_result",
          "results.[77].real_llm_result.raw_response",
          "results.[77].real_llm_result.questions",
          "results.[77].agreement",
          "results.[77].insights",
          "results.[78].config",
          "results.[78].config.name",
          "results.[78].config.temperature",
          "results.[78].config.role",
          "results.[78].config.model",
          "results.[78].config.prompt_structure",
          "results.[78].config.response_format",
          "results.[78].scenario",
          "results.[78].our_result",
          "results.[78].our_result.assumptions",
          "results.[78].our_result.blind_spots",
          "results.[78].our_result.confidence",
          "results.[78].our_result.decision",
          "results.[78].real_llm_result",
          "results.[78].real_llm_result.raw_response",
          "results.[78].real_llm_result.questions",
          "results.[78].agreement",
          "results.[78].insights",
          "results.[79].config",
          "results.[79].config.name",
          "results.[79].config.temperature",
          "results.[79].config.role",
          "results.[79].config.model",
          "results.[79].config.prompt_structure",
          "results.[79].config.response_format",
          "results.[79].scenario",
          "results.[79].our_result",
          "results.[79].our_result.assumptions",
          "results.[79].our_result.blind_spots",
          "results.[79].our_result.confidence",
          "results.[79].our_result.decision",
          "results.[79].real_llm_result",
          "results.[79].real_llm_result.raw_response",
          "results.[79].real_llm_result.questions",
          "results.[79].agreement",
          "results.[79].insights",
          "results.[80].config",
          "results.[80].config.name",
          "results.[80].config.temperature",
          "results.[80].config.role",
          "results.[80].config.model",
          "results.[80].config.prompt_structure",
          "results.[80].config.response_format",
          "results.[80].scenario",
          "results.[80].our_result",
          "results.[80].our_result.assumptions",
          "results.[80].our_result.blind_spots",
          "results.[80].our_result.confidence",
          "results.[80].our_result.decision",
          "results.[80].real_llm_result",
          "results.[80].real_llm_result.raw_response",
          "results.[80].real_llm_result.questions",
          "results.[80].agreement",
          "results.[80].insights",
          "results.[81].config",
          "results.[81].config.name",
          "results.[81].config.temperature",
          "results.[81].config.role",
          "results.[81].config.model",
          "results.[81].config.prompt_structure",
          "results.[81].config.response_format",
          "results.[81].scenario",
          "results.[81].our_result",
          "results.[81].our_result.assumptions",
          "results.[81].our_result.blind_spots",
          "results.[81].our_result.confidence",
          "results.[81].our_result.decision",
          "results.[81].real_llm_result",
          "results.[81].real_llm_result.raw_response",
          "results.[81].real_llm_result.questions",
          "results.[81].agreement",
          "results.[81].insights",
          "results.[82].config",
          "results.[82].config.name",
          "results.[82].config.temperature",
          "results.[82].config.role",
          "results.[82].config.model",
          "results.[82].config.prompt_structure",
          "results.[82].config.response_format",
          "results.[82].scenario",
          "results.[82].our_result",
          "results.[82].our_result.assumptions",
          "results.[82].our_result.blind_spots",
          "results.[82].our_result.confidence",
          "results.[82].our_result.decision",
          "results.[82].real_llm_result",
          "results.[82].real_llm_result.raw_response",
          "results.[82].real_llm_result.questions",
          "results.[82].agreement",
          "results.[82].insights",
          "results.[83].config",
          "results.[83].config.name",
          "results.[83].config.temperature",
          "results.[83].config.role",
          "results.[83].config.model",
          "results.[83].config.prompt_structure",
          "results.[83].config.response_format",
          "results.[83].scenario",
          "results.[83].our_result",
          "results.[83].our_result.assumptions",
          "results.[83].our_result.blind_spots",
          "results.[83].our_result.confidence",
          "results.[83].our_result.decision",
          "results.[83].real_llm_result",
          "results.[83].real_llm_result.raw_response",
          "results.[83].real_llm_result.questions",
          "results.[83].agreement",
          "results.[83].insights",
          "results.[84].config",
          "results.[84].config.name",
          "results.[84].config.temperature",
          "results.[84].config.role",
          "results.[84].config.model",
          "results.[84].config.prompt_structure",
          "results.[84].config.response_format",
          "results.[84].scenario",
          "results.[84].our_result",
          "results.[84].our_result.assumptions",
          "results.[84].our_result.blind_spots",
          "results.[84].our_result.confidence",
          "results.[84].our_result.decision",
          "results.[84].real_llm_result",
          "results.[84].real_llm_result.raw_response",
          "results.[84].real_llm_result.questions",
          "results.[84].agreement",
          "results.[84].insights",
          "results.[85].config",
          "results.[85].config.name",
          "results.[85].config.temperature",
          "results.[85].config.role",
          "results.[85].config.model",
          "results.[85].config.prompt_structure",
          "results.[85].config.response_format",
          "results.[85].scenario",
          "results.[85].our_result",
          "results.[85].our_result.assumptions",
          "results.[85].our_result.blind_spots",
          "results.[85].our_result.confidence",
          "results.[85].our_result.decision",
          "results.[85].real_llm_result",
          "results.[85].real_llm_result.raw_response",
          "results.[85].real_llm_result.questions",
          "results.[85].agreement",
          "results.[85].insights",
          "results.[86].config",
          "results.[86].config.name",
          "results.[86].config.temperature",
          "results.[86].config.role",
          "results.[86].config.model",
          "results.[86].config.prompt_structure",
          "results.[86].config.response_format",
          "results.[86].scenario",
          "results.[86].our_result",
          "results.[86].our_result.assumptions",
          "results.[86].our_result.blind_spots",
          "results.[86].our_result.confidence",
          "results.[86].our_result.decision",
          "results.[86].real_llm_result",
          "results.[86].real_llm_result.raw_response",
          "results.[86].real_llm_result.questions",
          "results.[86].agreement",
          "results.[86].insights",
          "results.[87].config",
          "results.[87].config.name",
          "results.[87].config.temperature",
          "results.[87].config.role",
          "results.[87].config.model",
          "results.[87].config.prompt_structure",
          "results.[87].config.response_format",
          "results.[87].scenario",
          "results.[87].our_result",
          "results.[87].our_result.assumptions",
          "results.[87].our_result.blind_spots",
          "results.[87].our_result.confidence",
          "results.[87].our_result.decision",
          "results.[87].real_llm_result",
          "results.[87].real_llm_result.raw_response",
          "results.[87].real_llm_result.questions",
          "results.[87].agreement",
          "results.[87].insights",
          "results.[88].config",
          "results.[88].config.name",
          "results.[88].config.temperature",
          "results.[88].config.role",
          "results.[88].config.model",
          "results.[88].config.prompt_structure",
          "results.[88].config.response_format",
          "results.[88].scenario",
          "results.[88].our_result",
          "results.[88].our_result.assumptions",
          "results.[88].our_result.blind_spots",
          "results.[88].our_result.confidence",
          "results.[88].our_result.decision",
          "results.[88].real_llm_result",
          "results.[88].real_llm_result.raw_response",
          "results.[88].real_llm_result.questions",
          "results.[88].agreement",
          "results.[88].insights",
          "results.[89].config",
          "results.[89].config.name",
          "results.[89].config.temperature",
          "results.[89].config.role",
          "results.[89].config.model",
          "results.[89].config.prompt_structure",
          "results.[89].config.response_format",
          "results.[89].scenario",
          "results.[89].our_result",
          "results.[89].our_result.assumptions",
          "results.[89].our_result.blind_spots",
          "results.[89].our_result.confidence",
          "results.[89].our_result.decision",
          "results.[89].real_llm_result",
          "results.[89].real_llm_result.raw_response",
          "results.[89].real_llm_result.questions",
          "results.[89].agreement",
          "results.[89].insights",
          "results.[90].config",
          "results.[90].config.name",
          "results.[90].config.temperature",
          "results.[90].config.role",
          "results.[90].config.model",
          "results.[90].config.prompt_structure",
          "results.[90].config.response_format",
          "results.[90].scenario",
          "results.[90].our_result",
          "results.[90].our_result.assumptions",
          "results.[90].our_result.blind_spots",
          "results.[90].our_result.confidence",
          "results.[90].our_result.decision",
          "results.[90].real_llm_result",
          "results.[90].real_llm_result.raw_response",
          "results.[90].real_llm_result.questions",
          "results.[90].agreement",
          "results.[90].insights",
          "results.[91].config",
          "results.[91].config.name",
          "results.[91].config.temperature",
          "results.[91].config.role",
          "results.[91].config.model",
          "results.[91].config.prompt_structure",
          "results.[91].config.response_format",
          "results.[91].scenario",
          "results.[91].our_result",
          "results.[91].our_result.assumptions",
          "results.[91].our_result.blind_spots",
          "results.[91].our_result.confidence",
          "results.[91].our_result.decision",
          "results.[91].real_llm_result",
          "results.[91].real_llm_result.raw_response",
          "results.[91].real_llm_result.questions",
          "results.[91].agreement",
          "results.[91].insights",
          "results.[92].config",
          "results.[92].config.name",
          "results.[92].config.temperature",
          "results.[92].config.role",
          "results.[92].config.model",
          "results.[92].config.prompt_structure",
          "results.[92].config.response_format",
          "results.[92].scenario",
          "results.[92].our_result",
          "results.[92].our_result.assumptions",
          "results.[92].our_result.blind_spots",
          "results.[92].our_result.confidence",
          "results.[92].our_result.decision",
          "results.[92].real_llm_result",
          "results.[92].real_llm_result.raw_response",
          "results.[92].real_llm_result.questions",
          "results.[92].agreement",
          "results.[92].insights",
          "results.[93].config",
          "results.[93].config.name",
          "results.[93].config.temperature",
          "results.[93].config.role",
          "results.[93].config.model",
          "results.[93].config.prompt_structure",
          "results.[93].config.response_format",
          "results.[93].scenario",
          "results.[93].our_result",
          "results.[93].our_result.assumptions",
          "results.[93].our_result.blind_spots",
          "results.[93].our_result.confidence",
          "results.[93].our_result.decision",
          "results.[93].real_llm_result",
          "results.[93].real_llm_result.raw_response",
          "results.[93].real_llm_result.questions",
          "results.[93].agreement",
          "results.[93].insights",
          "results.[94].config",
          "results.[94].config.name",
          "results.[94].config.temperature",
          "results.[94].config.role",
          "results.[94].config.model",
          "results.[94].config.prompt_structure",
          "results.[94].config.response_format",
          "results.[94].scenario",
          "results.[94].our_result",
          "results.[94].our_result.assumptions",
          "results.[94].our_result.blind_spots",
          "results.[94].our_result.confidence",
          "results.[94].our_result.decision",
          "results.[94].real_llm_result",
          "results.[94].real_llm_result.raw_response",
          "results.[94].real_llm_result.questions",
          "results.[94].agreement",
          "results.[94].insights",
          "results.[95].config",
          "results.[95].config.name",
          "results.[95].config.temperature",
          "results.[95].config.role",
          "results.[95].config.model",
          "results.[95].config.prompt_structure",
          "results.[95].config.response_format",
          "results.[95].scenario",
          "results.[95].our_result",
          "results.[95].our_result.assumptions",
          "results.[95].our_result.blind_spots",
          "results.[95].our_result.confidence",
          "results.[95].our_result.decision",
          "results.[95].real_llm_result",
          "results.[95].real_llm_result.raw_response",
          "results.[95].real_llm_result.questions",
          "results.[95].agreement",
          "results.[95].insights",
          "results.[96].config",
          "results.[96].config.name",
          "results.[96].config.temperature",
          "results.[96].config.role",
          "results.[96].config.model",
          "results.[96].config.prompt_structure",
          "results.[96].config.response_format",
          "results.[96].scenario",
          "results.[96].our_result",
          "results.[96].our_result.assumptions",
          "results.[96].our_result.blind_spots",
          "results.[96].our_result.confidence",
          "results.[96].our_result.decision",
          "results.[96].real_llm_result",
          "results.[96].real_llm_result.raw_response",
          "results.[96].real_llm_result.questions",
          "results.[96].agreement",
          "results.[96].insights",
          "results.[97].config",
          "results.[97].config.name",
          "results.[97].config.temperature",
          "results.[97].config.role",
          "results.[97].config.model",
          "results.[97].config.prompt_structure",
          "results.[97].config.response_format",
          "results.[97].scenario",
          "results.[97].our_result",
          "results.[97].our_result.assumptions",
          "results.[97].our_result.blind_spots",
          "results.[97].our_result.confidence",
          "results.[97].our_result.decision",
          "results.[97].real_llm_result",
          "results.[97].real_llm_result.raw_response",
          "results.[97].real_llm_result.questions",
          "results.[97].agreement",
          "results.[97].insights",
          "analysis",
          "analysis.temperature_impact",
          "analysis.temperature_impact.0.0",
          "analysis.temperature_impact.0.0.agreements",
          "analysis.temperature_impact.0.0.total",
          "analysis.temperature_impact.0.7",
          "analysis.temperature_impact.0.7.agreements",
          "analysis.temperature_impact.0.7.total",
          "analysis.temperature_impact.0.3",
          "analysis.temperature_impact.0.3.agreements",
          "analysis.temperature_impact.0.3.total",
          "analysis.role_impact",
          "analysis.role_impact.skeptical_partner",
          "analysis.role_impact.skeptical_partner.agreements",
          "analysis.role_impact.skeptical_partner.total",
          "analysis.role_impact.supportive_partner",
          "analysis.role_impact.supportive_partner.agreements",
          "analysis.role_impact.supportive_partner.total",
          "analysis.role_impact.domain_expert",
          "analysis.role_impact.domain_expert.agreements",
          "analysis.role_impact.domain_expert.total",
          "analysis.role_impact.human_advocate",
          "analysis.role_impact.human_advocate.agreements",
          "analysis.role_impact.human_advocate.total",
          "analysis.role_impact.risk_assessor",
          "analysis.role_impact.risk_assessor.agreements",
          "analysis.role_impact.risk_assessor.total",
          "analysis.role_impact.process_enforcer",
          "analysis.role_impact.process_enforcer.agreements",
          "analysis.role_impact.process_enforcer.total",
          "analysis.model_impact",
          "analysis.prompt_impact",
          "analysis.format_impact",
          "analysis.agreement_rate",
          "analysis.key_insights"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "92df414c89d15495530b7ea350067b11",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.957158",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/checkpoints/ast_models_20250802_182527.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/checkpoints/ast_models_20250802_182527.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 20739,
        "json_keys": [
          "file_models",
          "summary",
          "metadata"
        ],
        "json_depth": 6,
        "json_keys_list": [
          "file_models",
          "file_models.fix_test_rule_compliance_indentation.py",
          "file_models.fix_test_rule_compliance_indentation.py.file_path",
          "file_models.fix_test_rule_compliance_indentation.py.file_type",
          "file_models.fix_test_rule_compliance_indentation.py.model_type",
          "file_models.fix_test_rule_compliance_indentation.py.complexity_score",
          "file_models.fix_test_rule_compliance_indentation.py.line_count",
          "file_models.fix_test_rule_compliance_indentation.py.function_count",
          "file_models.fix_test_rule_compliance_indentation.py.class_count",
          "file_models.fix_test_rule_compliance_indentation.py.import_count",
          "file_models.fix_test_rule_compliance_indentation.py.error_count",
          "file_models.fix_test_rule_compliance_indentation.py.model_data",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.docstrings",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.imports",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[0].name",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[1].name",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.classes",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.variables",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.line_count",
          "file_models.final_syntax_fix.py",
          "file_models.final_syntax_fix.py.file_path",
          "file_models.final_syntax_fix.py.file_type",
          "file_models.final_syntax_fix.py.model_type",
          "file_models.final_syntax_fix.py.complexity_score",
          "file_models.final_syntax_fix.py.line_count",
          "file_models.final_syntax_fix.py.function_count",
          "file_models.final_syntax_fix.py.class_count",
          "file_models.final_syntax_fix.py.import_count",
          "file_models.final_syntax_fix.py.error_count",
          "file_models.final_syntax_fix.py.model_data",
          "file_models.final_syntax_fix.py.model_data.docstrings",
          "file_models.final_syntax_fix.py.model_data.imports",
          "file_models.final_syntax_fix.py.model_data.functions",
          "file_models.final_syntax_fix.py.model_data.functions.[0].name",
          "file_models.final_syntax_fix.py.model_data.functions.[0].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[1].name",
          "file_models.final_syntax_fix.py.model_data.functions.[1].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[2].name",
          "file_models.final_syntax_fix.py.model_data.functions.[2].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[3].name",
          "file_models.final_syntax_fix.py.model_data.functions.[3].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[4].name",
          "file_models.final_syntax_fix.py.model_data.functions.[4].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[5].name",
          "file_models.final_syntax_fix.py.model_data.functions.[5].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[6].name",
          "file_models.final_syntax_fix.py.model_data.functions.[6].docstring",
          "file_models.final_syntax_fix.py.model_data.classes",
          "file_models.final_syntax_fix.py.model_data.classes.[0].name",
          "file_models.final_syntax_fix.py.model_data.classes.[0].docstring",
          "file_models.final_syntax_fix.py.model_data.variables",
          "file_models.final_syntax_fix.py.model_data.line_count",
          "file_models.fix_test_rule_compliance.py",
          "file_models.fix_test_rule_compliance.py.file_path",
          "file_models.fix_test_rule_compliance.py.file_type",
          "file_models.fix_test_rule_compliance.py.model_type",
          "file_models.fix_test_rule_compliance.py.complexity_score",
          "file_models.fix_test_rule_compliance.py.line_count",
          "file_models.fix_test_rule_compliance.py.function_count",
          "file_models.fix_test_rule_compliance.py.class_count",
          "file_models.fix_test_rule_compliance.py.import_count",
          "file_models.fix_test_rule_compliance.py.error_count",
          "file_models.fix_test_rule_compliance.py.model_data",
          "file_models.fix_test_rule_compliance.py.model_data.docstrings",
          "file_models.fix_test_rule_compliance.py.model_data.imports",
          "file_models.fix_test_rule_compliance.py.model_data.functions",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[0].name",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[0].docstring",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[1].name",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[1].docstring",
          "file_models.fix_test_rule_compliance.py.model_data.classes",
          "file_models.fix_test_rule_compliance.py.model_data.variables",
          "file_models.fix_test_rule_compliance.py.model_data.line_count",
          "file_models.fix_remaining_indentation.py",
          "file_models.fix_remaining_indentation.py.file_path",
          "file_models.fix_remaining_indentation.py.file_type",
          "file_models.fix_remaining_indentation.py.model_type",
          "file_models.fix_remaining_indentation.py.complexity_score",
          "file_models.fix_remaining_indentation.py.line_count",
          "file_models.fix_remaining_indentation.py.function_count",
          "file_models.fix_remaining_indentation.py.class_count",
          "file_models.fix_remaining_indentation.py.import_count",
          "file_models.fix_remaining_indentation.py.error_count",
          "file_models.fix_remaining_indentation.py.model_data",
          "file_models.fix_remaining_indentation.py.model_data.docstrings",
          "file_models.fix_remaining_indentation.py.model_data.imports",
          "file_models.fix_remaining_indentation.py.model_data.functions",
          "file_models.fix_remaining_indentation.py.model_data.functions.[0].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[1].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[2].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[2].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[3].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[3].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[4].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[4].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[5].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[5].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[6].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[6].docstring",
          "file_models.fix_remaining_indentation.py.model_data.classes",
          "file_models.fix_remaining_indentation.py.model_data.variables",
          "file_models.fix_remaining_indentation.py.model_data.line_count",
          "file_models.ast_projection_demo.py",
          "file_models.ast_projection_demo.py.file_path",
          "file_models.ast_projection_demo.py.file_type",
          "file_models.ast_projection_demo.py.model_type",
          "file_models.ast_projection_demo.py.complexity_score",
          "file_models.ast_projection_demo.py.line_count",
          "file_models.ast_projection_demo.py.function_count",
          "file_models.ast_projection_demo.py.class_count",
          "file_models.ast_projection_demo.py.import_count",
          "file_models.ast_projection_demo.py.error_count",
          "file_models.ast_projection_demo.py.model_data",
          "file_models.ast_projection_demo.py.model_data.docstrings",
          "file_models.ast_projection_demo.py.model_data.imports",
          "file_models.ast_projection_demo.py.model_data.functions",
          "file_models.ast_projection_demo.py.model_data.functions.[0].name",
          "file_models.ast_projection_demo.py.model_data.functions.[0].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[1].name",
          "file_models.ast_projection_demo.py.model_data.functions.[1].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[2].name",
          "file_models.ast_projection_demo.py.model_data.functions.[2].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[3].name",
          "file_models.ast_projection_demo.py.model_data.functions.[3].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[4].name",
          "file_models.ast_projection_demo.py.model_data.functions.[4].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[5].name",
          "file_models.ast_projection_demo.py.model_data.functions.[5].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[6].name",
          "file_models.ast_projection_demo.py.model_data.functions.[6].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[7].name",
          "file_models.ast_projection_demo.py.model_data.functions.[7].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[8].name",
          "file_models.ast_projection_demo.py.model_data.functions.[8].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[9].name",
          "file_models.ast_projection_demo.py.model_data.functions.[9].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[10].name",
          "file_models.ast_projection_demo.py.model_data.functions.[10].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[11].name",
          "file_models.ast_projection_demo.py.model_data.functions.[11].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[12].name",
          "file_models.ast_projection_demo.py.model_data.functions.[12].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[13].name",
          "file_models.ast_projection_demo.py.model_data.functions.[13].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[14].name",
          "file_models.ast_projection_demo.py.model_data.functions.[14].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[15].name",
          "file_models.ast_projection_demo.py.model_data.functions.[15].docstring",
          "file_models.ast_projection_demo.py.model_data.classes",
          "file_models.ast_projection_demo.py.model_data.classes.[0].name",
          "file_models.ast_projection_demo.py.model_data.classes.[0].docstring",
          "file_models.ast_projection_demo.py.model_data.variables",
          "file_models.ast_projection_demo.py.model_data.line_count",
          "file_models.test_git_enhanced.py",
          "file_models.test_git_enhanced.py.file_path",
          "file_models.test_git_enhanced.py.file_type",
          "file_models.test_git_enhanced.py.model_type",
          "file_models.test_git_enhanced.py.complexity_score",
          "file_models.test_git_enhanced.py.line_count",
          "file_models.test_git_enhanced.py.function_count",
          "file_models.test_git_enhanced.py.class_count",
          "file_models.test_git_enhanced.py.import_count",
          "file_models.test_git_enhanced.py.error_count",
          "file_models.test_git_enhanced.py.model_data",
          "file_models.test_git_enhanced.py.model_data.docstrings",
          "file_models.test_git_enhanced.py.model_data.imports",
          "file_models.test_git_enhanced.py.model_data.functions",
          "file_models.test_git_enhanced.py.model_data.functions.[0].name",
          "file_models.test_git_enhanced.py.model_data.functions.[0].docstring",
          "file_models.test_git_enhanced.py.model_data.classes",
          "file_models.test_git_enhanced.py.model_data.variables",
          "file_models.test_git_enhanced.py.model_data.line_count",
          "file_models.multi_generational_git_analyzer.py",
          "file_models.multi_generational_git_analyzer.py.file_path",
          "file_models.multi_generational_git_analyzer.py.file_type",
          "file_models.multi_generational_git_analyzer.py.model_type",
          "file_models.multi_generational_git_analyzer.py.complexity_score",
          "file_models.multi_generational_git_analyzer.py.line_count",
          "file_models.multi_generational_git_analyzer.py.function_count",
          "file_models.multi_generational_git_analyzer.py.class_count",
          "file_models.multi_generational_git_analyzer.py.import_count",
          "file_models.multi_generational_git_analyzer.py.error_count",
          "file_models.multi_generational_git_analyzer.py.model_data",
          "file_models.multi_generational_git_analyzer.py.model_data.docstrings",
          "file_models.multi_generational_git_analyzer.py.model_data.imports",
          "file_models.multi_generational_git_analyzer.py.model_data.functions",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[0].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[0].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[1].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[1].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[2].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[2].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[3].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[3].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[4].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[4].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[5].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[5].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[6].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[6].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[7].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[7].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[8].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[8].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[9].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[9].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[10].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[10].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[11].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[11].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[12].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[12].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[13].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[13].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[14].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[14].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[15].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[15].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[16].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[16].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[17].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[17].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[18].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[18].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[19].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[19].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[20].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[20].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[21].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[21].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[22].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[22].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[23].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[23].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[24].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[24].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[25].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[25].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.classes",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[0].name",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[0].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[1].name",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[1].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.variables",
          "file_models.multi_generational_git_analyzer.py.model_data.line_count",
          "file_models.ast_model_gap_analyzer.py",
          "file_models.ast_model_gap_analyzer.py.file_path",
          "file_models.ast_model_gap_analyzer.py.file_type",
          "file_models.ast_model_gap_analyzer.py.model_type",
          "file_models.ast_model_gap_analyzer.py.complexity_score",
          "file_models.ast_model_gap_analyzer.py.line_count",
          "file_models.ast_model_gap_analyzer.py.function_count",
          "file_models.ast_model_gap_analyzer.py.class_count",
          "file_models.ast_model_gap_analyzer.py.import_count",
          "file_models.ast_model_gap_analyzer.py.error_count",
          "file_models.ast_model_gap_analyzer.py.model_data",
          "file_models.ast_model_gap_analyzer.py.model_data.docstrings",
          "file_models.ast_model_gap_analyzer.py.model_data.imports",
          "file_models.ast_model_gap_analyzer.py.model_data.functions",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[0].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[0].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[1].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[1].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[2].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[2].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[3].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[3].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[4].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[4].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[5].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[5].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[6].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[6].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.classes",
          "file_models.ast_model_gap_analyzer.py.model_data.classes.[0].name",
          "file_models.ast_model_gap_analyzer.py.model_data.classes.[0].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.variables",
          "file_models.ast_model_gap_analyzer.py.model_data.line_count",
          "file_models.model_sufficiency_analyzer.py",
          "file_models.model_sufficiency_analyzer.py.file_path",
          "file_models.model_sufficiency_analyzer.py.file_type",
          "file_models.model_sufficiency_analyzer.py.model_type",
          "file_models.model_sufficiency_analyzer.py.complexity_score",
          "file_models.model_sufficiency_analyzer.py.line_count",
          "file_models.model_sufficiency_analyzer.py.function_count",
          "file_models.model_sufficiency_analyzer.py.class_count",
          "file_models.model_sufficiency_analyzer.py.import_count",
          "file_models.model_sufficiency_analyzer.py.error_count",
          "file_models.model_sufficiency_analyzer.py.model_data",
          "file_models.model_sufficiency_analyzer.py.model_data.docstrings",
          "file_models.model_sufficiency_analyzer.py.model_data.imports",
          "file_models.model_sufficiency_analyzer.py.model_data.functions",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[0].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[0].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[1].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[1].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[2].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[2].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[3].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[3].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[4].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[4].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[5].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[5].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[6].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[6].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[7].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[7].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[8].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[8].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[9].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[9].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[10].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[10].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.classes",
          "file_models.model_sufficiency_analyzer.py.model_data.classes.[0].name",
          "file_models.model_sufficiency_analyzer.py.model_data.classes.[0].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.variables",
          "file_models.model_sufficiency_analyzer.py.model_data.line_count",
          "file_models.ast_capability_analyzer.py",
          "file_models.ast_capability_analyzer.py.file_path",
          "file_models.ast_capability_analyzer.py.file_type",
          "file_models.ast_capability_analyzer.py.model_type",
          "file_models.ast_capability_analyzer.py.complexity_score",
          "file_models.ast_capability_analyzer.py.line_count",
          "file_models.ast_capability_analyzer.py.function_count",
          "file_models.ast_capability_analyzer.py.class_count",
          "file_models.ast_capability_analyzer.py.import_count",
          "file_models.ast_capability_analyzer.py.error_count",
          "file_models.ast_capability_analyzer.py.model_data",
          "file_models.ast_capability_analyzer.py.model_data.docstrings",
          "file_models.ast_capability_analyzer.py.model_data.imports",
          "file_models.ast_capability_analyzer.py.model_data.functions",
          "file_models.ast_capability_analyzer.py.model_data.functions.[0].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[0].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[1].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[1].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[2].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[2].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[3].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[3].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[4].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[4].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[5].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[5].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[6].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[6].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[7].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[7].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[8].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[8].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[9].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[9].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[10].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[10].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[11].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[11].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[12].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[12].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[13].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[13].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[14].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[14].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[15].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[15].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[16].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[16].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[17].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[17].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[18].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[18].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[19].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[19].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[20].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[20].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[21].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[21].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[22].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[22].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[23].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[23].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[24].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[24].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[25].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[25].docstring",
          "file_models.ast_capability_analyzer.py.model_data.classes",
          "file_models.ast_capability_analyzer.py.model_data.classes.[0].name",
          "file_models.ast_capability_analyzer.py.model_data.classes.[0].docstring",
          "file_models.ast_capability_analyzer.py.model_data.variables",
          "file_models.ast_capability_analyzer.py.model_data.line_count",
          "summary",
          "summary.total_files",
          "summary.valid_files",
          "summary.error_files",
          "summary.model_type_counts",
          "summary.model_type_counts.ast",
          "metadata",
          "metadata.last_updated",
          "metadata.checkpoint_count",
          "metadata.version"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "7163ea9273f726f0a9e6b12efd15f993",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.969108",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/checkpoints/ast_models_20250802_182528.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/checkpoints/ast_models_20250802_182528.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 109544,
        "json_keys": [
          "file_models",
          "summary",
          "metadata"
        ],
        "json_depth": 6,
        "json_keys_list": [
          "file_models",
          "file_models.fix_test_rule_compliance_indentation.py",
          "file_models.fix_test_rule_compliance_indentation.py.file_path",
          "file_models.fix_test_rule_compliance_indentation.py.file_type",
          "file_models.fix_test_rule_compliance_indentation.py.model_type",
          "file_models.fix_test_rule_compliance_indentation.py.complexity_score",
          "file_models.fix_test_rule_compliance_indentation.py.line_count",
          "file_models.fix_test_rule_compliance_indentation.py.function_count",
          "file_models.fix_test_rule_compliance_indentation.py.class_count",
          "file_models.fix_test_rule_compliance_indentation.py.import_count",
          "file_models.fix_test_rule_compliance_indentation.py.error_count",
          "file_models.fix_test_rule_compliance_indentation.py.model_data",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.docstrings",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.imports",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[0].name",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[1].name",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.classes",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.variables",
          "file_models.fix_test_rule_compliance_indentation.py.model_data.line_count",
          "file_models.final_syntax_fix.py",
          "file_models.final_syntax_fix.py.file_path",
          "file_models.final_syntax_fix.py.file_type",
          "file_models.final_syntax_fix.py.model_type",
          "file_models.final_syntax_fix.py.complexity_score",
          "file_models.final_syntax_fix.py.line_count",
          "file_models.final_syntax_fix.py.function_count",
          "file_models.final_syntax_fix.py.class_count",
          "file_models.final_syntax_fix.py.import_count",
          "file_models.final_syntax_fix.py.error_count",
          "file_models.final_syntax_fix.py.model_data",
          "file_models.final_syntax_fix.py.model_data.docstrings",
          "file_models.final_syntax_fix.py.model_data.imports",
          "file_models.final_syntax_fix.py.model_data.functions",
          "file_models.final_syntax_fix.py.model_data.functions.[0].name",
          "file_models.final_syntax_fix.py.model_data.functions.[0].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[1].name",
          "file_models.final_syntax_fix.py.model_data.functions.[1].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[2].name",
          "file_models.final_syntax_fix.py.model_data.functions.[2].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[3].name",
          "file_models.final_syntax_fix.py.model_data.functions.[3].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[4].name",
          "file_models.final_syntax_fix.py.model_data.functions.[4].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[5].name",
          "file_models.final_syntax_fix.py.model_data.functions.[5].docstring",
          "file_models.final_syntax_fix.py.model_data.functions.[6].name",
          "file_models.final_syntax_fix.py.model_data.functions.[6].docstring",
          "file_models.final_syntax_fix.py.model_data.classes",
          "file_models.final_syntax_fix.py.model_data.classes.[0].name",
          "file_models.final_syntax_fix.py.model_data.classes.[0].docstring",
          "file_models.final_syntax_fix.py.model_data.variables",
          "file_models.final_syntax_fix.py.model_data.line_count",
          "file_models.fix_test_rule_compliance.py",
          "file_models.fix_test_rule_compliance.py.file_path",
          "file_models.fix_test_rule_compliance.py.file_type",
          "file_models.fix_test_rule_compliance.py.model_type",
          "file_models.fix_test_rule_compliance.py.complexity_score",
          "file_models.fix_test_rule_compliance.py.line_count",
          "file_models.fix_test_rule_compliance.py.function_count",
          "file_models.fix_test_rule_compliance.py.class_count",
          "file_models.fix_test_rule_compliance.py.import_count",
          "file_models.fix_test_rule_compliance.py.error_count",
          "file_models.fix_test_rule_compliance.py.model_data",
          "file_models.fix_test_rule_compliance.py.model_data.docstrings",
          "file_models.fix_test_rule_compliance.py.model_data.imports",
          "file_models.fix_test_rule_compliance.py.model_data.functions",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[0].name",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[0].docstring",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[1].name",
          "file_models.fix_test_rule_compliance.py.model_data.functions.[1].docstring",
          "file_models.fix_test_rule_compliance.py.model_data.classes",
          "file_models.fix_test_rule_compliance.py.model_data.variables",
          "file_models.fix_test_rule_compliance.py.model_data.line_count",
          "file_models.fix_remaining_indentation.py",
          "file_models.fix_remaining_indentation.py.file_path",
          "file_models.fix_remaining_indentation.py.file_type",
          "file_models.fix_remaining_indentation.py.model_type",
          "file_models.fix_remaining_indentation.py.complexity_score",
          "file_models.fix_remaining_indentation.py.line_count",
          "file_models.fix_remaining_indentation.py.function_count",
          "file_models.fix_remaining_indentation.py.class_count",
          "file_models.fix_remaining_indentation.py.import_count",
          "file_models.fix_remaining_indentation.py.error_count",
          "file_models.fix_remaining_indentation.py.model_data",
          "file_models.fix_remaining_indentation.py.model_data.docstrings",
          "file_models.fix_remaining_indentation.py.model_data.imports",
          "file_models.fix_remaining_indentation.py.model_data.functions",
          "file_models.fix_remaining_indentation.py.model_data.functions.[0].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[1].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[2].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[2].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[3].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[3].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[4].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[4].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[5].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[5].docstring",
          "file_models.fix_remaining_indentation.py.model_data.functions.[6].name",
          "file_models.fix_remaining_indentation.py.model_data.functions.[6].docstring",
          "file_models.fix_remaining_indentation.py.model_data.classes",
          "file_models.fix_remaining_indentation.py.model_data.variables",
          "file_models.fix_remaining_indentation.py.model_data.line_count",
          "file_models.ast_projection_demo.py",
          "file_models.ast_projection_demo.py.file_path",
          "file_models.ast_projection_demo.py.file_type",
          "file_models.ast_projection_demo.py.model_type",
          "file_models.ast_projection_demo.py.complexity_score",
          "file_models.ast_projection_demo.py.line_count",
          "file_models.ast_projection_demo.py.function_count",
          "file_models.ast_projection_demo.py.class_count",
          "file_models.ast_projection_demo.py.import_count",
          "file_models.ast_projection_demo.py.error_count",
          "file_models.ast_projection_demo.py.model_data",
          "file_models.ast_projection_demo.py.model_data.docstrings",
          "file_models.ast_projection_demo.py.model_data.imports",
          "file_models.ast_projection_demo.py.model_data.functions",
          "file_models.ast_projection_demo.py.model_data.functions.[0].name",
          "file_models.ast_projection_demo.py.model_data.functions.[0].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[1].name",
          "file_models.ast_projection_demo.py.model_data.functions.[1].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[2].name",
          "file_models.ast_projection_demo.py.model_data.functions.[2].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[3].name",
          "file_models.ast_projection_demo.py.model_data.functions.[3].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[4].name",
          "file_models.ast_projection_demo.py.model_data.functions.[4].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[5].name",
          "file_models.ast_projection_demo.py.model_data.functions.[5].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[6].name",
          "file_models.ast_projection_demo.py.model_data.functions.[6].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[7].name",
          "file_models.ast_projection_demo.py.model_data.functions.[7].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[8].name",
          "file_models.ast_projection_demo.py.model_data.functions.[8].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[9].name",
          "file_models.ast_projection_demo.py.model_data.functions.[9].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[10].name",
          "file_models.ast_projection_demo.py.model_data.functions.[10].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[11].name",
          "file_models.ast_projection_demo.py.model_data.functions.[11].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[12].name",
          "file_models.ast_projection_demo.py.model_data.functions.[12].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[13].name",
          "file_models.ast_projection_demo.py.model_data.functions.[13].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[14].name",
          "file_models.ast_projection_demo.py.model_data.functions.[14].docstring",
          "file_models.ast_projection_demo.py.model_data.functions.[15].name",
          "file_models.ast_projection_demo.py.model_data.functions.[15].docstring",
          "file_models.ast_projection_demo.py.model_data.classes",
          "file_models.ast_projection_demo.py.model_data.classes.[0].name",
          "file_models.ast_projection_demo.py.model_data.classes.[0].docstring",
          "file_models.ast_projection_demo.py.model_data.variables",
          "file_models.ast_projection_demo.py.model_data.line_count",
          "file_models.test_git_enhanced.py",
          "file_models.test_git_enhanced.py.file_path",
          "file_models.test_git_enhanced.py.file_type",
          "file_models.test_git_enhanced.py.model_type",
          "file_models.test_git_enhanced.py.complexity_score",
          "file_models.test_git_enhanced.py.line_count",
          "file_models.test_git_enhanced.py.function_count",
          "file_models.test_git_enhanced.py.class_count",
          "file_models.test_git_enhanced.py.import_count",
          "file_models.test_git_enhanced.py.error_count",
          "file_models.test_git_enhanced.py.model_data",
          "file_models.test_git_enhanced.py.model_data.docstrings",
          "file_models.test_git_enhanced.py.model_data.imports",
          "file_models.test_git_enhanced.py.model_data.functions",
          "file_models.test_git_enhanced.py.model_data.functions.[0].name",
          "file_models.test_git_enhanced.py.model_data.functions.[0].docstring",
          "file_models.test_git_enhanced.py.model_data.classes",
          "file_models.test_git_enhanced.py.model_data.variables",
          "file_models.test_git_enhanced.py.model_data.line_count",
          "file_models.multi_generational_git_analyzer.py",
          "file_models.multi_generational_git_analyzer.py.file_path",
          "file_models.multi_generational_git_analyzer.py.file_type",
          "file_models.multi_generational_git_analyzer.py.model_type",
          "file_models.multi_generational_git_analyzer.py.complexity_score",
          "file_models.multi_generational_git_analyzer.py.line_count",
          "file_models.multi_generational_git_analyzer.py.function_count",
          "file_models.multi_generational_git_analyzer.py.class_count",
          "file_models.multi_generational_git_analyzer.py.import_count",
          "file_models.multi_generational_git_analyzer.py.error_count",
          "file_models.multi_generational_git_analyzer.py.model_data",
          "file_models.multi_generational_git_analyzer.py.model_data.docstrings",
          "file_models.multi_generational_git_analyzer.py.model_data.imports",
          "file_models.multi_generational_git_analyzer.py.model_data.functions",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[0].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[0].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[1].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[1].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[2].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[2].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[3].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[3].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[4].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[4].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[5].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[5].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[6].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[6].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[7].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[7].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[8].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[8].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[9].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[9].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[10].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[10].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[11].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[11].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[12].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[12].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[13].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[13].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[14].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[14].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[15].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[15].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[16].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[16].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[17].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[17].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[18].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[18].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[19].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[19].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[20].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[20].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[21].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[21].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[22].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[22].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[23].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[23].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[24].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[24].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[25].name",
          "file_models.multi_generational_git_analyzer.py.model_data.functions.[25].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.classes",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[0].name",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[0].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[1].name",
          "file_models.multi_generational_git_analyzer.py.model_data.classes.[1].docstring",
          "file_models.multi_generational_git_analyzer.py.model_data.variables",
          "file_models.multi_generational_git_analyzer.py.model_data.line_count",
          "file_models.ast_model_gap_analyzer.py",
          "file_models.ast_model_gap_analyzer.py.file_path",
          "file_models.ast_model_gap_analyzer.py.file_type",
          "file_models.ast_model_gap_analyzer.py.model_type",
          "file_models.ast_model_gap_analyzer.py.complexity_score",
          "file_models.ast_model_gap_analyzer.py.line_count",
          "file_models.ast_model_gap_analyzer.py.function_count",
          "file_models.ast_model_gap_analyzer.py.class_count",
          "file_models.ast_model_gap_analyzer.py.import_count",
          "file_models.ast_model_gap_analyzer.py.error_count",
          "file_models.ast_model_gap_analyzer.py.model_data",
          "file_models.ast_model_gap_analyzer.py.model_data.docstrings",
          "file_models.ast_model_gap_analyzer.py.model_data.imports",
          "file_models.ast_model_gap_analyzer.py.model_data.functions",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[0].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[0].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[1].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[1].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[2].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[2].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[3].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[3].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[4].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[4].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[5].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[5].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[6].name",
          "file_models.ast_model_gap_analyzer.py.model_data.functions.[6].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.classes",
          "file_models.ast_model_gap_analyzer.py.model_data.classes.[0].name",
          "file_models.ast_model_gap_analyzer.py.model_data.classes.[0].docstring",
          "file_models.ast_model_gap_analyzer.py.model_data.variables",
          "file_models.ast_model_gap_analyzer.py.model_data.line_count",
          "file_models.model_sufficiency_analyzer.py",
          "file_models.model_sufficiency_analyzer.py.file_path",
          "file_models.model_sufficiency_analyzer.py.file_type",
          "file_models.model_sufficiency_analyzer.py.model_type",
          "file_models.model_sufficiency_analyzer.py.complexity_score",
          "file_models.model_sufficiency_analyzer.py.line_count",
          "file_models.model_sufficiency_analyzer.py.function_count",
          "file_models.model_sufficiency_analyzer.py.class_count",
          "file_models.model_sufficiency_analyzer.py.import_count",
          "file_models.model_sufficiency_analyzer.py.error_count",
          "file_models.model_sufficiency_analyzer.py.model_data",
          "file_models.model_sufficiency_analyzer.py.model_data.docstrings",
          "file_models.model_sufficiency_analyzer.py.model_data.imports",
          "file_models.model_sufficiency_analyzer.py.model_data.functions",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[0].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[0].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[1].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[1].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[2].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[2].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[3].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[3].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[4].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[4].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[5].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[5].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[6].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[6].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[7].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[7].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[8].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[8].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[9].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[9].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[10].name",
          "file_models.model_sufficiency_analyzer.py.model_data.functions.[10].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.classes",
          "file_models.model_sufficiency_analyzer.py.model_data.classes.[0].name",
          "file_models.model_sufficiency_analyzer.py.model_data.classes.[0].docstring",
          "file_models.model_sufficiency_analyzer.py.model_data.variables",
          "file_models.model_sufficiency_analyzer.py.model_data.line_count",
          "file_models.ast_capability_analyzer.py",
          "file_models.ast_capability_analyzer.py.file_path",
          "file_models.ast_capability_analyzer.py.file_type",
          "file_models.ast_capability_analyzer.py.model_type",
          "file_models.ast_capability_analyzer.py.complexity_score",
          "file_models.ast_capability_analyzer.py.line_count",
          "file_models.ast_capability_analyzer.py.function_count",
          "file_models.ast_capability_analyzer.py.class_count",
          "file_models.ast_capability_analyzer.py.import_count",
          "file_models.ast_capability_analyzer.py.error_count",
          "file_models.ast_capability_analyzer.py.model_data",
          "file_models.ast_capability_analyzer.py.model_data.docstrings",
          "file_models.ast_capability_analyzer.py.model_data.imports",
          "file_models.ast_capability_analyzer.py.model_data.functions",
          "file_models.ast_capability_analyzer.py.model_data.functions.[0].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[0].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[1].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[1].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[2].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[2].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[3].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[3].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[4].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[4].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[5].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[5].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[6].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[6].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[7].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[7].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[8].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[8].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[9].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[9].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[10].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[10].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[11].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[11].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[12].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[12].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[13].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[13].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[14].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[14].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[15].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[15].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[16].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[16].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[17].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[17].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[18].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[18].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[19].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[19].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[20].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[20].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[21].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[21].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[22].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[22].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[23].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[23].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[24].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[24].docstring",
          "file_models.ast_capability_analyzer.py.model_data.functions.[25].name",
          "file_models.ast_capability_analyzer.py.model_data.functions.[25].docstring",
          "file_models.ast_capability_analyzer.py.model_data.classes",
          "file_models.ast_capability_analyzer.py.model_data.classes.[0].name",
          "file_models.ast_capability_analyzer.py.model_data.classes.[0].docstring",
          "file_models.ast_capability_analyzer.py.model_data.variables",
          "file_models.ast_capability_analyzer.py.model_data.line_count",
          "file_models.test_syntax_fix_safety.py",
          "file_models.test_syntax_fix_safety.py.file_path",
          "file_models.test_syntax_fix_safety.py.file_type",
          "file_models.test_syntax_fix_safety.py.model_type",
          "file_models.test_syntax_fix_safety.py.complexity_score",
          "file_models.test_syntax_fix_safety.py.line_count",
          "file_models.test_syntax_fix_safety.py.function_count",
          "file_models.test_syntax_fix_safety.py.class_count",
          "file_models.test_syntax_fix_safety.py.import_count",
          "file_models.test_syntax_fix_safety.py.error_count",
          "file_models.test_syntax_fix_safety.py.model_data",
          "file_models.test_syntax_fix_safety.py.model_data.docstrings",
          "file_models.test_syntax_fix_safety.py.model_data.imports",
          "file_models.test_syntax_fix_safety.py.model_data.functions",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[0].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[0].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[1].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[1].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[2].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[2].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[3].name",
          "file_models.test_syntax_fix_safety.py.model_data.functions.[3].docstring",
          "file_models.test_syntax_fix_safety.py.model_data.classes",
          "file_models.test_syntax_fix_safety.py.model_data.variables",
          "file_models.test_syntax_fix_safety.py.model_data.line_count",
          "file_models.setup.py",
          "file_models.setup.py.file_path",
          "file_models.setup.py.file_type",
          "file_models.setup.py.model_type",
          "file_models.setup.py.complexity_score",
          "file_models.setup.py.line_count",
          "file_models.setup.py.function_count",
          "file_models.setup.py.class_count",
          "file_models.setup.py.import_count",
          "file_models.setup.py.error_count",
          "file_models.setup.py.model_data",
          "file_models.setup.py.model_data.docstrings",
          "file_models.setup.py.model_data.imports",
          "file_models.setup.py.model_data.functions",
          "file_models.setup.py.model_data.functions.[0].name",
          "file_models.setup.py.model_data.functions.[0].docstring",
          "file_models.setup.py.model_data.functions.[1].name",
          "file_models.setup.py.model_data.functions.[1].docstring",
          "file_models.setup.py.model_data.functions.[2].name",
          "file_models.setup.py.model_data.functions.[2].docstring",
          "file_models.setup.py.model_data.functions.[3].name",
          "file_models.setup.py.model_data.functions.[3].docstring",
          "file_models.setup.py.model_data.functions.[4].name",
          "file_models.setup.py.model_data.functions.[4].docstring",
          "file_models.setup.py.model_data.functions.[5].name",
          "file_models.setup.py.model_data.functions.[5].docstring",
          "file_models.setup.py.model_data.functions.[6].name",
          "file_models.setup.py.model_data.functions.[6].docstring",
          "file_models.setup.py.model_data.functions.[7].name",
          "file_models.setup.py.model_data.functions.[7].docstring",
          "file_models.setup.py.model_data.functions.[8].name",
          "file_models.setup.py.model_data.functions.[8].docstring",
          "file_models.setup.py.model_data.functions.[9].name",
          "file_models.setup.py.model_data.functions.[9].docstring",
          "file_models.setup.py.model_data.classes",
          "file_models.setup.py.model_data.variables",
          "file_models.setup.py.model_data.line_count",
          "file_models.improved_syntax_fix.py",
          "file_models.improved_syntax_fix.py.file_path",
          "file_models.improved_syntax_fix.py.file_type",
          "file_models.improved_syntax_fix.py.model_type",
          "file_models.improved_syntax_fix.py.complexity_score",
          "file_models.improved_syntax_fix.py.line_count",
          "file_models.improved_syntax_fix.py.function_count",
          "file_models.improved_syntax_fix.py.class_count",
          "file_models.improved_syntax_fix.py.import_count",
          "file_models.improved_syntax_fix.py.error_count",
          "file_models.improved_syntax_fix.py.model_data",
          "file_models.improved_syntax_fix.py.model_data.docstrings",
          "file_models.improved_syntax_fix.py.model_data.imports",
          "file_models.improved_syntax_fix.py.model_data.functions",
          "file_models.improved_syntax_fix.py.model_data.functions.[0].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[0].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[1].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[1].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[2].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[2].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[3].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[3].docstring",
          "file_models.improved_syntax_fix.py.model_data.functions.[4].name",
          "file_models.improved_syntax_fix.py.model_data.functions.[4].docstring",
          "file_models.improved_syntax_fix.py.model_data.classes",
          "file_models.improved_syntax_fix.py.model_data.variables",
          "file_models.improved_syntax_fix.py.model_data.line_count",
          "file_models.fix_all_syntax_errors.py",
          "file_models.fix_all_syntax_errors.py.file_path",
          "file_models.fix_all_syntax_errors.py.file_type",
          "file_models.fix_all_syntax_errors.py.model_type",
          "file_models.fix_all_syntax_errors.py.complexity_score",
          "file_models.fix_all_syntax_errors.py.line_count",
          "file_models.fix_all_syntax_errors.py.function_count",
          "file_models.fix_all_syntax_errors.py.class_count",
          "file_models.fix_all_syntax_errors.py.import_count",
          "file_models.fix_all_syntax_errors.py.error_count",
          "file_models.fix_all_syntax_errors.py.model_data",
          "file_models.fix_all_syntax_errors.py.model_data.docstrings",
          "file_models.fix_all_syntax_errors.py.model_data.imports",
          "file_models.fix_all_syntax_errors.py.model_data.functions",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[0].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[0].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[1].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[1].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[2].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[2].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[3].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[3].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[4].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[4].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[5].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[5].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[6].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[6].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[7].name",
          "file_models.fix_all_syntax_errors.py.model_data.functions.[7].docstring",
          "file_models.fix_all_syntax_errors.py.model_data.classes",
          "file_models.fix_all_syntax_errors.py.model_data.variables",
          "file_models.fix_all_syntax_errors.py.model_data.line_count",
          "file_models.model_consistency_analyzer.py",
          "file_models.model_consistency_analyzer.py.file_path",
          "file_models.model_consistency_analyzer.py.file_type",
          "file_models.model_consistency_analyzer.py.model_type",
          "file_models.model_consistency_analyzer.py.complexity_score",
          "file_models.model_consistency_analyzer.py.line_count",
          "file_models.model_consistency_analyzer.py.function_count",
          "file_models.model_consistency_analyzer.py.class_count",
          "file_models.model_consistency_analyzer.py.import_count",
          "file_models.model_consistency_analyzer.py.error_count",
          "file_models.model_consistency_analyzer.py.model_data",
          "file_models.model_consistency_analyzer.py.model_data.docstrings",
          "file_models.model_consistency_analyzer.py.model_data.imports",
          "file_models.model_consistency_analyzer.py.model_data.functions",
          "file_models.model_consistency_analyzer.py.model_data.functions.[0].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[0].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[1].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[1].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[2].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[2].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[3].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[3].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[4].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[4].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[5].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[5].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[6].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[6].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[7].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[7].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[8].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[8].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[9].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[9].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[10].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[10].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[11].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[11].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[12].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[12].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[13].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[13].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[14].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[14].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[15].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[15].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[16].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[16].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[17].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[17].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[18].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[18].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[19].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[19].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[20].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[20].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[21].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[21].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[22].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[22].docstring",
          "file_models.model_consistency_analyzer.py.model_data.functions.[23].name",
          "file_models.model_consistency_analyzer.py.model_data.functions.[23].docstring",
          "file_models.model_consistency_analyzer.py.model_data.classes",
          "file_models.model_consistency_analyzer.py.model_data.classes.[0].name",
          "file_models.model_consistency_analyzer.py.model_data.classes.[0].docstring",
          "file_models.model_consistency_analyzer.py.model_data.variables",
          "file_models.model_consistency_analyzer.py.model_data.line_count",
          "file_models.comprehensive_indentation_fix.py",
          "file_models.comprehensive_indentation_fix.py.file_path",
          "file_models.comprehensive_indentation_fix.py.file_type",
          "file_models.comprehensive_indentation_fix.py.model_type",
          "file_models.comprehensive_indentation_fix.py.complexity_score",
          "file_models.comprehensive_indentation_fix.py.line_count",
          "file_models.comprehensive_indentation_fix.py.function_count",
          "file_models.comprehensive_indentation_fix.py.class_count",
          "file_models.comprehensive_indentation_fix.py.import_count",
          "file_models.comprehensive_indentation_fix.py.error_count",
          "file_models.comprehensive_indentation_fix.py.model_data",
          "file_models.comprehensive_indentation_fix.py.model_data.docstrings",
          "file_models.comprehensive_indentation_fix.py.model_data.imports",
          "file_models.comprehensive_indentation_fix.py.model_data.functions",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[0].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[0].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[1].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[1].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[2].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[2].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[3].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[3].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[4].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[4].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[5].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[5].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[6].name",
          "file_models.comprehensive_indentation_fix.py.model_data.functions.[6].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.classes",
          "file_models.comprehensive_indentation_fix.py.model_data.classes.[0].name",
          "file_models.comprehensive_indentation_fix.py.model_data.classes.[0].docstring",
          "file_models.comprehensive_indentation_fix.py.model_data.variables",
          "file_models.comprehensive_indentation_fix.py.model_data.line_count",
          "file_models.fix_f_strings.py",
          "file_models.fix_f_strings.py.file_path",
          "file_models.fix_f_strings.py.file_type",
          "file_models.fix_f_strings.py.model_type",
          "file_models.fix_f_strings.py.complexity_score",
          "file_models.fix_f_strings.py.line_count",
          "file_models.fix_f_strings.py.function_count",
          "file_models.fix_f_strings.py.class_count",
          "file_models.fix_f_strings.py.import_count",
          "file_models.fix_f_strings.py.error_count",
          "file_models.fix_f_strings.py.model_data",
          "file_models.fix_f_strings.py.model_data.docstrings",
          "file_models.fix_f_strings.py.model_data.imports",
          "file_models.fix_f_strings.py.model_data.functions",
          "file_models.fix_f_strings.py.model_data.functions.[0].name",
          "file_models.fix_f_strings.py.model_data.functions.[0].docstring",
          "file_models.fix_f_strings.py.model_data.functions.[1].name",
          "file_models.fix_f_strings.py.model_data.functions.[1].docstring",
          "file_models.fix_f_strings.py.model_data.functions.[2].name",
          "file_models.fix_f_strings.py.model_data.functions.[2].docstring",
          "file_models.fix_f_strings.py.model_data.classes",
          "file_models.fix_f_strings.py.model_data.variables",
          "file_models.fix_f_strings.py.model_data.line_count",
          "file_models.checkpointed_ast_modeler.py",
          "file_models.checkpointed_ast_modeler.py.file_path",
          "file_models.checkpointed_ast_modeler.py.file_type",
          "file_models.checkpointed_ast_modeler.py.model_type",
          "file_models.checkpointed_ast_modeler.py.complexity_score",
          "file_models.checkpointed_ast_modeler.py.line_count",
          "file_models.checkpointed_ast_modeler.py.function_count",
          "file_models.checkpointed_ast_modeler.py.class_count",
          "file_models.checkpointed_ast_modeler.py.import_count",
          "file_models.checkpointed_ast_modeler.py.error_count",
          "file_models.checkpointed_ast_modeler.py.model_data",
          "file_models.checkpointed_ast_modeler.py.model_data.docstrings",
          "file_models.checkpointed_ast_modeler.py.model_data.imports",
          "file_models.checkpointed_ast_modeler.py.model_data.functions",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[0].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[0].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[1].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[1].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[2].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[2].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[3].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[3].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[4].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[4].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[5].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[5].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[6].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[6].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[7].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[7].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[8].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[8].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[9].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[9].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[10].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[10].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[11].name",
          "file_models.checkpointed_ast_modeler.py.model_data.functions.[11].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.classes",
          "file_models.checkpointed_ast_modeler.py.model_data.classes.[0].name",
          "file_models.checkpointed_ast_modeler.py.model_data.classes.[0].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.classes.[1].name",
          "file_models.checkpointed_ast_modeler.py.model_data.classes.[1].docstring",
          "file_models.checkpointed_ast_modeler.py.model_data.variables",
          "file_models.checkpointed_ast_modeler.py.model_data.line_count",
          "file_models.focused_ast_modeler.py",
          "file_models.focused_ast_modeler.py.file_path",
          "file_models.focused_ast_modeler.py.file_type",
          "file_models.focused_ast_modeler.py.model_type",
          "file_models.focused_ast_modeler.py.complexity_score",
          "file_models.focused_ast_modeler.py.line_count",
          "file_models.focused_ast_modeler.py.function_count",
          "file_models.focused_ast_modeler.py.class_count",
          "file_models.focused_ast_modeler.py.import_count",
          "file_models.focused_ast_modeler.py.error_count",
          "file_models.focused_ast_modeler.py.model_data",
          "file_models.focused_ast_modeler.py.model_data.docstrings",
          "file_models.focused_ast_modeler.py.model_data.imports",
          "file_models.focused_ast_modeler.py.model_data.functions",
          "file_models.focused_ast_modeler.py.model_data.functions.[0].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[0].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[1].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[1].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[2].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[2].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[3].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[3].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[4].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[4].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[5].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[5].docstring",
          "file_models.focused_ast_modeler.py.model_data.functions.[6].name",
          "file_models.focused_ast_modeler.py.model_data.functions.[6].docstring",
          "file_models.focused_ast_modeler.py.model_data.classes",
          "file_models.focused_ast_modeler.py.model_data.classes.[0].name",
          "file_models.focused_ast_modeler.py.model_data.classes.[0].docstring",
          "file_models.focused_ast_modeler.py.model_data.classes.[1].name",
          "file_models.focused_ast_modeler.py.model_data.classes.[1].docstring",
          "file_models.focused_ast_modeler.py.model_data.variables",
          "file_models.focused_ast_modeler.py.model_data.line_count",
          "file_models.debug_modeler.py",
          "file_models.debug_modeler.py.file_path",
          "file_models.debug_modeler.py.file_type",
          "file_models.debug_modeler.py.model_type",
          "file_models.debug_modeler.py.complexity_score",
          "file_models.debug_modeler.py.line_count",
          "file_models.debug_modeler.py.function_count",
          "file_models.debug_modeler.py.class_count",
          "file_models.debug_modeler.py.import_count",
          "file_models.debug_modeler.py.error_count",
          "file_models.debug_modeler.py.model_data",
          "file_models.debug_modeler.py.model_data.docstrings",
          "file_models.debug_modeler.py.model_data.imports",
          "file_models.debug_modeler.py.model_data.functions",
          "file_models.debug_modeler.py.model_data.functions.[0].name",
          "file_models.debug_modeler.py.model_data.functions.[0].docstring",
          "file_models.debug_modeler.py.model_data.classes",
          "file_models.debug_modeler.py.model_data.variables",
          "file_models.debug_modeler.py.model_data.line_count",
          "file_models.model_driven_reconstructor.py",
          "file_models.model_driven_reconstructor.py.file_path",
          "file_models.model_driven_reconstructor.py.file_type",
          "file_models.model_driven_reconstructor.py.model_type",
          "file_models.model_driven_reconstructor.py.complexity_score",
          "file_models.model_driven_reconstructor.py.line_count",
          "file_models.model_driven_reconstructor.py.function_count",
          "file_models.model_driven_reconstructor.py.class_count",
          "file_models.model_driven_reconstructor.py.import_count",
          "file_models.model_driven_reconstructor.py.error_count",
          "file_models.model_driven_reconstructor.py.model_data",
          "file_models.model_driven_reconstructor.py.model_data.docstrings",
          "file_models.model_driven_reconstructor.py.model_data.imports",
          "file_models.model_driven_reconstructor.py.model_data.functions",
          "file_models.model_driven_reconstructor.py.model_data.functions.[0].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[0].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[1].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[1].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[2].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[2].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[3].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[3].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[4].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[4].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[5].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[5].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[6].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[6].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[7].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[7].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[8].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[8].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[9].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[9].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[10].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[10].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[11].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[11].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[12].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[12].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[13].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[13].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[14].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[14].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[15].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[15].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[16].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[16].docstring",
          "file_models.model_driven_reconstructor.py.model_data.functions.[17].name",
          "file_models.model_driven_reconstructor.py.model_data.functions.[17].docstring",
          "file_models.model_driven_reconstructor.py.model_data.classes",
          "file_models.model_driven_reconstructor.py.model_data.classes.[0].name",
          "file_models.model_driven_reconstructor.py.model_data.classes.[0].docstring",
          "file_models.model_driven_reconstructor.py.model_data.variables",
          "file_models.model_driven_reconstructor.py.model_data.line_count",
          "file_models.fix_test_indentation.py",
          "file_models.fix_test_indentation.py.file_path",
          "file_models.fix_test_indentation.py.file_type",
          "file_models.fix_test_indentation.py.model_type",
          "file_models.fix_test_indentation.py.complexity_score",
          "file_models.fix_test_indentation.py.line_count",
          "file_models.fix_test_indentation.py.function_count",
          "file_models.fix_test_indentation.py.class_count",
          "file_models.fix_test_indentation.py.import_count",
          "file_models.fix_test_indentation.py.error_count",
          "file_models.fix_test_indentation.py.model_data",
          "file_models.fix_test_indentation.py.model_data.docstrings",
          "file_models.fix_test_indentation.py.model_data.imports",
          "file_models.fix_test_indentation.py.model_data.functions",
          "file_models.fix_test_indentation.py.model_data.functions.[0].name",
          "file_models.fix_test_indentation.py.model_data.functions.[0].docstring",
          "file_models.fix_test_indentation.py.model_data.functions.[1].name",
          "file_models.fix_test_indentation.py.model_data.functions.[1].docstring",
          "file_models.fix_test_indentation.py.model_data.classes",
          "file_models.fix_test_indentation.py.model_data.variables",
          "file_models.fix_test_indentation.py.model_data.line_count",
          "file_models.project_model.py",
          "file_models.project_model.py.file_path",
          "file_models.project_model.py.file_type",
          "file_models.project_model.py.model_type",
          "file_models.project_model.py.complexity_score",
          "file_models.project_model.py.line_count",
          "file_models.project_model.py.function_count",
          "file_models.project_model.py.class_count",
          "file_models.project_model.py.import_count",
          "file_models.project_model.py.error_count",
          "file_models.project_model.py.model_data",
          "file_models.project_model.py.model_data.docstrings",
          "file_models.project_model.py.model_data.imports",
          "file_models.project_model.py.model_data.functions",
          "file_models.project_model.py.model_data.functions.[0].name",
          "file_models.project_model.py.model_data.functions.[0].docstring",
          "file_models.project_model.py.model_data.functions.[1].name",
          "file_models.project_model.py.model_data.functions.[1].docstring",
          "file_models.project_model.py.model_data.functions.[2].name",
          "file_models.project_model.py.model_data.functions.[2].docstring",
          "file_models.project_model.py.model_data.functions.[3].name",
          "file_models.project_model.py.model_data.functions.[3].docstring",
          "file_models.project_model.py.model_data.functions.[4].name",
          "file_models.project_model.py.model_data.functions.[4].docstring",
          "file_models.project_model.py.model_data.functions.[5].name",
          "file_models.project_model.py.model_data.functions.[5].docstring",
          "file_models.project_model.py.model_data.functions.[6].name",
          "file_models.project_model.py.model_data.functions.[6].docstring",
          "file_models.project_model.py.model_data.classes",
          "file_models.project_model.py.model_data.classes.[0].name",
          "file_models.project_model.py.model_data.classes.[0].docstring",
          "file_models.project_model.py.model_data.classes.[1].name",
          "file_models.project_model.py.model_data.classes.[1].docstring",
          "file_models.project_model.py.model_data.classes.[2].name",
          "file_models.project_model.py.model_data.classes.[2].docstring",
          "file_models.project_model.py.model_data.variables",
          "file_models.project_model.py.model_data.line_count",
          "file_models.test_functional_equivalence.py",
          "file_models.test_functional_equivalence.py.file_path",
          "file_models.test_functional_equivalence.py.file_type",
          "file_models.test_functional_equivalence.py.model_type",
          "file_models.test_functional_equivalence.py.complexity_score",
          "file_models.test_functional_equivalence.py.line_count",
          "file_models.test_functional_equivalence.py.function_count",
          "file_models.test_functional_equivalence.py.class_count",
          "file_models.test_functional_equivalence.py.import_count",
          "file_models.test_functional_equivalence.py.error_count",
          "file_models.test_functional_equivalence.py.model_data",
          "file_models.test_functional_equivalence.py.model_data.docstrings",
          "file_models.test_functional_equivalence.py.model_data.imports",
          "file_models.test_functional_equivalence.py.model_data.functions",
          "file_models.test_functional_equivalence.py.model_data.functions.[0].name",
          "file_models.test_functional_equivalence.py.model_data.functions.[0].docstring",
          "file_models.test_functional_equivalence.py.model_data.functions.[1].name",
          "file_models.test_functional_equivalence.py.model_data.functions.[1].docstring",
          "file_models.test_functional_equivalence.py.model_data.functions.[2].name",
          "file_models.test_functional_equivalence.py.model_data.functions.[2].docstring",
          "file_models.test_functional_equivalence.py.model_data.classes",
          "file_models.test_functional_equivalence.py.model_data.variables",
          "file_models.test_functional_equivalence.py.model_data.line_count",
          "file_models.data/cost_analysis.py",
          "file_models.data/cost_analysis.py.file_path",
          "file_models.data/cost_analysis.py.file_type",
          "file_models.data/cost_analysis.py.model_type",
          "file_models.data/cost_analysis.py.complexity_score",
          "file_models.data/cost_analysis.py.line_count",
          "file_models.data/cost_analysis.py.function_count",
          "file_models.data/cost_analysis.py.class_count",
          "file_models.data/cost_analysis.py.import_count",
          "file_models.data/cost_analysis.py.error_count",
          "file_models.data/cost_analysis.py.model_data",
          "file_models.data/cost_analysis.py.model_data.docstrings",
          "file_models.data/cost_analysis.py.model_data.imports",
          "file_models.data/cost_analysis.py.model_data.functions",
          "file_models.data/cost_analysis.py.model_data.functions.[0].name",
          "file_models.data/cost_analysis.py.model_data.functions.[0].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[1].name",
          "file_models.data/cost_analysis.py.model_data.functions.[1].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[2].name",
          "file_models.data/cost_analysis.py.model_data.functions.[2].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[3].name",
          "file_models.data/cost_analysis.py.model_data.functions.[3].docstring",
          "file_models.data/cost_analysis.py.model_data.functions.[4].name",
          "file_models.data/cost_analysis.py.model_data.functions.[4].docstring",
          "file_models.data/cost_analysis.py.model_data.classes",
          "file_models.data/cost_analysis.py.model_data.variables",
          "file_models.data/cost_analysis.py.model_data.line_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.file_path",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.file_type",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_type",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.complexity_score",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.line_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.function_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.class_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.import_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.error_count",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.docstrings",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.imports",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[0].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[0].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[1].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[1].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[2].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[2].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[3].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[3].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[4].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[4].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[5].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[5].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[6].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[6].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[7].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.functions.[7].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[0].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[0].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[1].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[1].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[2].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[2].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[3].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[3].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[4].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[4].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[5].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[5].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[6].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[6].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[7].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[7].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[8].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[8].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[9].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[9].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[10].name",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.classes.[10].docstring",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.variables",
          "file_models.healthcare-cdc/healthcare_cdc_domain_model.py.model_data.line_count",
          "file_models.healthcare-cdc/__init__.py",
          "file_models.healthcare-cdc/__init__.py.file_path",
          "file_models.healthcare-cdc/__init__.py.file_type",
          "file_models.healthcare-cdc/__init__.py.model_type",
          "file_models.healthcare-cdc/__init__.py.complexity_score",
          "file_models.healthcare-cdc/__init__.py.line_count",
          "file_models.healthcare-cdc/__init__.py.function_count",
          "file_models.healthcare-cdc/__init__.py.class_count",
          "file_models.healthcare-cdc/__init__.py.import_count",
          "file_models.healthcare-cdc/__init__.py.error_count",
          "file_models.healthcare-cdc/__init__.py.model_data",
          "file_models.healthcare-cdc/__init__.py.model_data.docstrings",
          "file_models.healthcare-cdc/__init__.py.model_data.imports",
          "file_models.healthcare-cdc/__init__.py.model_data.functions",
          "file_models.healthcare-cdc/__init__.py.model_data.classes",
          "file_models.healthcare-cdc/__init__.py.model_data.variables",
          "file_models.healthcare-cdc/__init__.py.model_data.line_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.file_path",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.file_type",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_type",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.complexity_score",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.line_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.function_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.class_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.import_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.error_count",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.docstrings",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.imports",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[0].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[0].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[1].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[1].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[2].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[2].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[3].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[3].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[4].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[4].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[5].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[5].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[6].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[6].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[7].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[7].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[8].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[8].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[9].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[9].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[10].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[10].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[11].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.functions.[11].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[0].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[0].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[1].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[1].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[2].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[2].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[3].name",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.classes.[3].docstring",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.variables",
          "file_models.healthcare-cdc/test_healthcare_cdc_domain_model.py.model_data.line_count",
          "file_models.tests/test_rule_compliance.py",
          "file_models.tests/test_rule_compliance.py.file_path",
          "file_models.tests/test_rule_compliance.py.file_type",
          "file_models.tests/test_rule_compliance.py.model_type",
          "file_models.tests/test_rule_compliance.py.complexity_score",
          "file_models.tests/test_rule_compliance.py.line_count",
          "file_models.tests/test_rule_compliance.py.function_count",
          "file_models.tests/test_rule_compliance.py.class_count",
          "file_models.tests/test_rule_compliance.py.import_count",
          "file_models.tests/test_rule_compliance.py.error_count",
          "file_models.tests/test_rule_compliance.py.model_data",
          "file_models.tests/test_rule_compliance.py.model_data.docstrings",
          "file_models.tests/test_rule_compliance.py.model_data.imports",
          "file_models.tests/test_rule_compliance.py.model_data.functions",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[0].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[0].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[1].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[1].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[2].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[2].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[3].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[3].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[4].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[4].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[5].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[5].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[6].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[6].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[7].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[7].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[8].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[8].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[9].name",
          "file_models.tests/test_rule_compliance.py.model_data.functions.[9].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.classes",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[0].name",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[0].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[1].name",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[1].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[2].name",
          "file_models.tests/test_rule_compliance.py.model_data.classes.[2].docstring",
          "file_models.tests/test_rule_compliance.py.model_data.variables",
          "file_models.tests/test_rule_compliance.py.model_data.line_count",
          "file_models.tests/test_file_organization.py",
          "file_models.tests/test_file_organization.py.file_path",
          "file_models.tests/test_file_organization.py.file_type",
          "file_models.tests/test_file_organization.py.model_type",
          "file_models.tests/test_file_organization.py.complexity_score",
          "file_models.tests/test_file_organization.py.line_count",
          "file_models.tests/test_file_organization.py.function_count",
          "file_models.tests/test_file_organization.py.class_count",
          "file_models.tests/test_file_organization.py.import_count",
          "file_models.tests/test_file_organization.py.error_count",
          "file_models.tests/test_file_organization.py.model_data",
          "file_models.tests/test_file_organization.py.model_data.error",
          "file_models.tests/test_cline_plan_blind_spots.py",
          "file_models.tests/test_cline_plan_blind_spots.py.file_path",
          "file_models.tests/test_cline_plan_blind_spots.py.file_type",
          "file_models.tests/test_cline_plan_blind_spots.py.model_type",
          "file_models.tests/test_cline_plan_blind_spots.py.complexity_score",
          "file_models.tests/test_cline_plan_blind_spots.py.line_count",
          "file_models.tests/test_cline_plan_blind_spots.py.function_count",
          "file_models.tests/test_cline_plan_blind_spots.py.class_count",
          "file_models.tests/test_cline_plan_blind_spots.py.import_count",
          "file_models.tests/test_cline_plan_blind_spots.py.error_count",
          "file_models.tests/test_cline_plan_blind_spots.py.model_data",
          "file_models.tests/test_cline_plan_blind_spots.py.model_data.error",
          "file_models.tests/test_data_fresh_cline_plan.py",
          "file_models.tests/test_data_fresh_cline_plan.py.file_path",
          "file_models.tests/test_data_fresh_cline_plan.py.file_type",
          "file_models.tests/test_data_fresh_cline_plan.py.model_type",
          "file_models.tests/test_data_fresh_cline_plan.py.complexity_score",
          "file_models.tests/test_data_fresh_cline_plan.py.line_count",
          "file_models.tests/test_data_fresh_cline_plan.py.function_count",
          "file_models.tests/test_data_fresh_cline_plan.py.class_count",
          "file_models.tests/test_data_fresh_cline_plan.py.import_count",
          "file_models.tests/test_data_fresh_cline_plan.py.error_count",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.docstrings",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.imports",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.functions",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.classes",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.variables",
          "file_models.tests/test_data_fresh_cline_plan.py.model_data.line_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.file_path",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.file_type",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.model_type",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.complexity_score",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.line_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.function_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.class_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.import_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.error_count",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.model_data",
          "file_models.tests/test_gemini_2_5_flash_lite_pr_review.py.model_data.error",
          "file_models.tests/test_code_quality_comprehensive.py",
          "file_models.tests/test_code_quality_comprehensive.py.file_path",
          "file_models.tests/test_code_quality_comprehensive.py.file_type",
          "file_models.tests/test_code_quality_comprehensive.py.model_type",
          "file_models.tests/test_code_quality_comprehensive.py.complexity_score",
          "file_models.tests/test_code_quality_comprehensive.py.line_count",
          "file_models.tests/test_code_quality_comprehensive.py.function_count",
          "file_models.tests/test_code_quality_comprehensive.py.class_count",
          "file_models.tests/test_code_quality_comprehensive.py.import_count",
          "file_models.tests/test_code_quality_comprehensive.py.error_count",
          "file_models.tests/test_code_quality_comprehensive.py.model_data",
          "file_models.tests/test_code_quality_comprehensive.py.model_data.error",
          "file_models.tests/validate_healthcare_cdc_simple.py",
          "file_models.tests/validate_healthcare_cdc_simple.py.file_path",
          "file_models.tests/validate_healthcare_cdc_simple.py.file_type",
          "file_models.tests/validate_healthcare_cdc_simple.py.model_type",
          "file_models.tests/validate_healthcare_cdc_simple.py.complexity_score",
          "file_models.tests/validate_healthcare_cdc_simple.py.line_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.function_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.class_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.import_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.error_count",
          "file_models.tests/validate_healthcare_cdc_simple.py.model_data",
          "file_models.tests/validate_healthcare_cdc_simple.py.model_data.error",
          "file_models.tests/test_mdc_generator.py",
          "file_models.tests/test_mdc_generator.py.file_path",
          "file_models.tests/test_mdc_generator.py.file_type",
          "file_models.tests/test_mdc_generator.py.model_type",
          "file_models.tests/test_mdc_generator.py.complexity_score",
          "file_models.tests/test_mdc_generator.py.line_count",
          "file_models.tests/test_mdc_generator.py.function_count",
          "file_models.tests/test_mdc_generator.py.class_count",
          "file_models.tests/test_mdc_generator.py.import_count",
          "file_models.tests/test_mdc_generator.py.error_count",
          "file_models.tests/test_mdc_generator.py.model_data",
          "file_models.tests/test_mdc_generator.py.model_data.error",
          "file_models.tests/test_file_existence.py",
          "file_models.tests/test_file_existence.py.file_path",
          "file_models.tests/test_file_existence.py.file_type",
          "file_models.tests/test_file_existence.py.model_type",
          "file_models.tests/test_file_existence.py.complexity_score",
          "file_models.tests/test_file_existence.py.line_count",
          "file_models.tests/test_file_existence.py.function_count",
          "file_models.tests/test_file_existence.py.class_count",
          "file_models.tests/test_file_existence.py.import_count",
          "file_models.tests/test_file_existence.py.error_count",
          "file_models.tests/test_file_existence.py.model_data",
          "file_models.tests/test_file_existence.py.model_data.error",
          "file_models.tests/test_security_enhancements.py",
          "file_models.tests/test_security_enhancements.py.file_path",
          "file_models.tests/test_security_enhancements.py.file_type",
          "file_models.tests/test_security_enhancements.py.model_type",
          "file_models.tests/test_security_enhancements.py.complexity_score",
          "file_models.tests/test_security_enhancements.py.line_count",
          "file_models.tests/test_security_enhancements.py.function_count",
          "file_models.tests/test_security_enhancements.py.class_count",
          "file_models.tests/test_security_enhancements.py.import_count",
          "file_models.tests/test_security_enhancements.py.error_count",
          "file_models.tests/test_security_enhancements.py.model_data",
          "file_models.tests/test_security_enhancements.py.model_data.error",
          "file_models.tests/test_basic_validation_simple.py",
          "file_models.tests/test_basic_validation_simple.py.file_path",
          "file_models.tests/test_basic_validation_simple.py.file_type",
          "file_models.tests/test_basic_validation_simple.py.model_type",
          "file_models.tests/test_basic_validation_simple.py.complexity_score",
          "file_models.tests/test_basic_validation_simple.py.line_count",
          "file_models.tests/test_basic_validation_simple.py.function_count",
          "file_models.tests/test_basic_validation_simple.py.class_count",
          "file_models.tests/test_basic_validation_simple.py.import_count",
          "file_models.tests/test_basic_validation_simple.py.error_count",
          "file_models.tests/test_basic_validation_simple.py.model_data",
          "file_models.tests/test_basic_validation_simple.py.model_data.error",
          "file_models.tests/test_code_quality_system.py",
          "file_models.tests/test_code_quality_system.py.file_path",
          "file_models.tests/test_code_quality_system.py.file_type",
          "file_models.tests/test_code_quality_system.py.model_type",
          "file_models.tests/test_code_quality_system.py.complexity_score",
          "file_models.tests/test_code_quality_system.py.line_count",
          "file_models.tests/test_code_quality_system.py.function_count",
          "file_models.tests/test_code_quality_system.py.class_count",
          "file_models.tests/test_code_quality_system.py.import_count",
          "file_models.tests/test_code_quality_system.py.error_count",
          "file_models.tests/test_code_quality_system.py.model_data",
          "file_models.tests/test_code_quality_system.py.model_data.error",
          "file_models.tests/test_basic_validation_pytest.py",
          "file_models.tests/test_basic_validation_pytest.py.file_path",
          "file_models.tests/test_basic_validation_pytest.py.file_type",
          "file_models.tests/test_basic_validation_pytest.py.model_type",
          "file_models.tests/test_basic_validation_pytest.py.complexity_score",
          "file_models.tests/test_basic_validation_pytest.py.line_count",
          "file_models.tests/test_basic_validation_pytest.py.function_count",
          "file_models.tests/test_basic_validation_pytest.py.class_count",
          "file_models.tests/test_basic_validation_pytest.py.import_count",
          "file_models.tests/test_basic_validation_pytest.py.error_count",
          "file_models.tests/test_basic_validation_pytest.py.model_data",
          "file_models.tests/test_basic_validation_pytest.py.model_data.error",
          "file_models.tests/test_uv_package_management.py",
          "file_models.tests/test_uv_package_management.py.file_path",
          "file_models.tests/test_uv_package_management.py.file_type",
          "file_models.tests/test_uv_package_management.py.model_type",
          "file_models.tests/test_uv_package_management.py.complexity_score",
          "file_models.tests/test_uv_package_management.py.line_count",
          "file_models.tests/test_uv_package_management.py.function_count",
          "file_models.tests/test_uv_package_management.py.class_count",
          "file_models.tests/test_uv_package_management.py.import_count",
          "file_models.tests/test_uv_package_management.py.error_count",
          "file_models.tests/test_uv_package_management.py.model_data",
          "file_models.tests/test_uv_package_management.py.model_data.error",
          "file_models.tests/test_type_safety.py",
          "file_models.tests/test_type_safety.py.file_path",
          "file_models.tests/test_type_safety.py.file_type",
          "file_models.tests/test_type_safety.py.model_type",
          "file_models.tests/test_type_safety.py.complexity_score",
          "file_models.tests/test_type_safety.py.line_count",
          "file_models.tests/test_type_safety.py.function_count",
          "file_models.tests/test_type_safety.py.class_count",
          "file_models.tests/test_type_safety.py.import_count",
          "file_models.tests/test_type_safety.py.error_count",
          "file_models.tests/test_type_safety.py.model_data",
          "file_models.tests/test_type_safety.py.model_data.error",
          "file_models.tests/test_makefile_integration.py",
          "file_models.tests/test_makefile_integration.py.file_path",
          "file_models.tests/test_makefile_integration.py.file_type",
          "file_models.tests/test_makefile_integration.py.model_type",
          "file_models.tests/test_makefile_integration.py.complexity_score",
          "file_models.tests/test_makefile_integration.py.line_count",
          "file_models.tests/test_makefile_integration.py.function_count",
          "file_models.tests/test_makefile_integration.py.class_count",
          "file_models.tests/test_makefile_integration.py.import_count",
          "file_models.tests/test_makefile_integration.py.error_count",
          "file_models.tests/test_makefile_integration.py.model_data",
          "file_models.tests/test_makefile_integration.py.model_data.error",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.file_path",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.file_type",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.model_type",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.complexity_score",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.line_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.function_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.class_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.import_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.error_count",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.model_data",
          "file_models.tests/test_gemini_2_5_preview_pr_review.py.model_data.error",
          "file_models.tests/test_rule_compliance_enforcement.py",
          "file_models.tests/test_rule_compliance_enforcement.py.file_path",
          "file_models.tests/test_rule_compliance_enforcement.py.file_type",
          "file_models.tests/test_rule_compliance_enforcement.py.model_type",
          "file_models.tests/test_rule_compliance_enforcement.py.complexity_score",
          "file_models.tests/test_rule_compliance_enforcement.py.line_count",
          "file_models.tests/test_rule_compliance_enforcement.py.function_count",
          "file_models.tests/test_rule_compliance_enforcement.py.class_count",
          "file_models.tests/test_rule_compliance_enforcement.py.import_count",
          "file_models.tests/test_rule_compliance_enforcement.py.error_count",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.docstrings",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.imports",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[0].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[0].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[1].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[1].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[2].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[2].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[3].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[3].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[4].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[4].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[5].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[5].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[6].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[6].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[7].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[7].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[8].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[8].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[9].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[9].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[10].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[10].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[11].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[11].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[12].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[12].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[13].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[13].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[14].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.functions.[14].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[0].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[0].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[1].name",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.classes.[1].docstring",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.variables",
          "file_models.tests/test_rule_compliance_enforcement.py.model_data.line_count",
          "file_models.tests/test_code_quality.py",
          "file_models.tests/test_code_quality.py.file_path",
          "file_models.tests/test_code_quality.py.file_type",
          "file_models.tests/test_code_quality.py.model_type",
          "file_models.tests/test_code_quality.py.complexity_score",
          "file_models.tests/test_code_quality.py.line_count",
          "file_models.tests/test_code_quality.py.function_count",
          "file_models.tests/test_code_quality.py.class_count",
          "file_models.tests/test_code_quality.py.import_count",
          "file_models.tests/test_code_quality.py.error_count",
          "file_models.tests/test_code_quality.py.model_data",
          "file_models.tests/test_code_quality.py.model_data.error",
          "file_models.tests/test_core_concepts.py",
          "file_models.tests/test_core_concepts.py.file_path",
          "file_models.tests/test_core_concepts.py.file_type",
          "file_models.tests/test_core_concepts.py.model_type",
          "file_models.tests/test_core_concepts.py.complexity_score",
          "file_models.tests/test_core_concepts.py.line_count",
          "file_models.tests/test_core_concepts.py.function_count",
          "file_models.tests/test_core_concepts.py.class_count",
          "file_models.tests/test_core_concepts.py.import_count",
          "file_models.tests/test_core_concepts.py.error_count",
          "file_models.tests/test_core_concepts.py.model_data",
          "file_models.tests/test_core_concepts.py.model_data.error",
          "file_models.tests/test_healthcare_cdc_requirements.py",
          "file_models.tests/test_healthcare_cdc_requirements.py.file_path",
          "file_models.tests/test_healthcare_cdc_requirements.py.file_type",
          "file_models.tests/test_healthcare_cdc_requirements.py.model_type",
          "file_models.tests/test_healthcare_cdc_requirements.py.complexity_score",
          "file_models.tests/test_healthcare_cdc_requirements.py.line_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.function_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.class_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.import_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.error_count",
          "file_models.tests/test_healthcare_cdc_requirements.py.model_data",
          "file_models.tests/test_healthcare_cdc_requirements.py.model_data.error",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.file_path",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.file_type",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.model_type",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.complexity_score",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.line_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.function_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.class_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.import_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.error_count",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.model_data",
          "file_models.tests/test_cline_fresh_plan_blind_spots.py.model_data.error",
          "file_models.tests/test_basic_validation.py",
          "file_models.tests/test_basic_validation.py.file_path",
          "file_models.tests/test_basic_validation.py.file_type",
          "file_models.tests/test_basic_validation.py.model_type",
          "file_models.tests/test_basic_validation.py.complexity_score",
          "file_models.tests/test_basic_validation.py.line_count",
          "file_models.tests/test_basic_validation.py.function_count",
          "file_models.tests/test_basic_validation.py.class_count",
          "file_models.tests/test_basic_validation.py.import_count",
          "file_models.tests/test_basic_validation.py.error_count",
          "file_models.tests/test_basic_validation.py.model_data",
          "file_models.tests/test_basic_validation.py.model_data.error",
          "file_models.src/__init__.py",
          "file_models.src/__init__.py.file_path",
          "file_models.src/__init__.py.file_type",
          "file_models.src/__init__.py.model_type",
          "file_models.src/__init__.py.complexity_score",
          "file_models.src/__init__.py.line_count",
          "file_models.src/__init__.py.function_count",
          "file_models.src/__init__.py.class_count",
          "file_models.src/__init__.py.import_count",
          "file_models.src/__init__.py.error_count",
          "file_models.src/__init__.py.model_data",
          "file_models.src/__init__.py.model_data.docstrings",
          "file_models.src/__init__.py.model_data.imports",
          "file_models.src/__init__.py.model_data.functions",
          "file_models.src/__init__.py.model_data.classes",
          "file_models.src/__init__.py.model_data.variables",
          "file_models.src/__init__.py.model_data.line_count",
          "file_models.scripts/mdc-linter.py",
          "file_models.scripts/mdc-linter.py.file_path",
          "file_models.scripts/mdc-linter.py.file_type",
          "file_models.scripts/mdc-linter.py.model_type",
          "file_models.scripts/mdc-linter.py.complexity_score",
          "file_models.scripts/mdc-linter.py.line_count",
          "file_models.scripts/mdc-linter.py.function_count",
          "file_models.scripts/mdc-linter.py.class_count",
          "file_models.scripts/mdc-linter.py.import_count",
          "file_models.scripts/mdc-linter.py.error_count",
          "file_models.scripts/mdc-linter.py.model_data",
          "file_models.scripts/mdc-linter.py.model_data.docstrings",
          "file_models.scripts/mdc-linter.py.model_data.imports",
          "file_models.scripts/mdc-linter.py.model_data.functions",
          "file_models.scripts/mdc-linter.py.model_data.functions.[0].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[0].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[1].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[1].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[2].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[2].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[3].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[3].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[4].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[4].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[5].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[5].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[6].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[6].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[7].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[7].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[8].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[8].docstring",
          "file_models.scripts/mdc-linter.py.model_data.functions.[9].name",
          "file_models.scripts/mdc-linter.py.model_data.functions.[9].docstring",
          "file_models.scripts/mdc-linter.py.model_data.classes",
          "file_models.scripts/mdc-linter.py.model_data.classes.[0].name",
          "file_models.scripts/mdc-linter.py.model_data.classes.[0].docstring",
          "file_models.scripts/mdc-linter.py.model_data.variables",
          "file_models.scripts/mdc-linter.py.model_data.line_count",
          "file_models.scripts/fix_mypy_issues.py",
          "file_models.scripts/fix_mypy_issues.py.file_path",
          "file_models.scripts/fix_mypy_issues.py.file_type",
          "file_models.scripts/fix_mypy_issues.py.model_type",
          "file_models.scripts/fix_mypy_issues.py.complexity_score",
          "file_models.scripts/fix_mypy_issues.py.line_count",
          "file_models.scripts/fix_mypy_issues.py.function_count",
          "file_models.scripts/fix_mypy_issues.py.class_count",
          "file_models.scripts/fix_mypy_issues.py.import_count",
          "file_models.scripts/fix_mypy_issues.py.error_count",
          "file_models.scripts/fix_mypy_issues.py.model_data",
          "file_models.scripts/fix_mypy_issues.py.model_data.docstrings",
          "file_models.scripts/fix_mypy_issues.py.model_data.imports",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[0].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[0].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[1].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[1].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[2].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[2].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[3].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[3].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[4].name",
          "file_models.scripts/fix_mypy_issues.py.model_data.functions.[4].docstring",
          "file_models.scripts/fix_mypy_issues.py.model_data.classes",
          "file_models.scripts/fix_mypy_issues.py.model_data.variables",
          "file_models.scripts/fix_mypy_issues.py.model_data.line_count",
          "file_models.scripts/regenerate_mdc_files.py",
          "file_models.scripts/regenerate_mdc_files.py.file_path",
          "file_models.scripts/regenerate_mdc_files.py.file_type",
          "file_models.scripts/regenerate_mdc_files.py.model_type",
          "file_models.scripts/regenerate_mdc_files.py.complexity_score",
          "file_models.scripts/regenerate_mdc_files.py.line_count",
          "file_models.scripts/regenerate_mdc_files.py.function_count",
          "file_models.scripts/regenerate_mdc_files.py.class_count",
          "file_models.scripts/regenerate_mdc_files.py.import_count",
          "file_models.scripts/regenerate_mdc_files.py.error_count",
          "file_models.scripts/regenerate_mdc_files.py.model_data",
          "file_models.scripts/regenerate_mdc_files.py.model_data.docstrings",
          "file_models.scripts/regenerate_mdc_files.py.model_data.imports",
          "file_models.scripts/regenerate_mdc_files.py.model_data.functions",
          "file_models.scripts/regenerate_mdc_files.py.model_data.functions.[0].name",
          "file_models.scripts/regenerate_mdc_files.py.model_data.functions.[0].docstring",
          "file_models.scripts/regenerate_mdc_files.py.model_data.classes",
          "file_models.scripts/regenerate_mdc_files.py.model_data.variables",
          "file_models.scripts/regenerate_mdc_files.py.model_data.line_count",
          "file_models.scripts/fix_code_quality.py",
          "file_models.scripts/fix_code_quality.py.file_path",
          "file_models.scripts/fix_code_quality.py.file_type",
          "file_models.scripts/fix_code_quality.py.model_type",
          "file_models.scripts/fix_code_quality.py.complexity_score",
          "file_models.scripts/fix_code_quality.py.line_count",
          "file_models.scripts/fix_code_quality.py.function_count",
          "file_models.scripts/fix_code_quality.py.class_count",
          "file_models.scripts/fix_code_quality.py.import_count",
          "file_models.scripts/fix_code_quality.py.error_count",
          "file_models.scripts/fix_code_quality.py.model_data",
          "file_models.scripts/fix_code_quality.py.model_data.docstrings",
          "file_models.scripts/fix_code_quality.py.model_data.imports",
          "file_models.scripts/fix_code_quality.py.model_data.functions",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[0].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[0].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[1].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[1].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[2].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[2].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[3].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[3].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[4].name",
          "file_models.scripts/fix_code_quality.py.model_data.functions.[4].docstring",
          "file_models.scripts/fix_code_quality.py.model_data.classes",
          "file_models.scripts/fix_code_quality.py.model_data.variables",
          "file_models.scripts/fix_code_quality.py.model_data.line_count",
          "file_models..cursor/plugins/rule-compliance-checker.py",
          "file_models..cursor/plugins/rule-compliance-checker.py.file_path",
          "file_models..cursor/plugins/rule-compliance-checker.py.file_type",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_type",
          "file_models..cursor/plugins/rule-compliance-checker.py.complexity_score",
          "file_models..cursor/plugins/rule-compliance-checker.py.line_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.function_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.class_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.import_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.error_count",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.docstrings",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.imports",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[0].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[0].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[1].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[1].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[2].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[2].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[3].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[3].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[4].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[4].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[5].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[5].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[6].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.functions.[6].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.classes",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.classes.[0].name",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.classes.[0].docstring",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.variables",
          "file_models..cursor/plugins/rule-compliance-checker.py.model_data.line_count",
          "file_models.src/code_quality_system/quality_model.py",
          "file_models.src/code_quality_system/quality_model.py.file_path",
          "file_models.src/code_quality_system/quality_model.py.file_type",
          "file_models.src/code_quality_system/quality_model.py.model_type",
          "file_models.src/code_quality_system/quality_model.py.complexity_score",
          "file_models.src/code_quality_system/quality_model.py.line_count",
          "file_models.src/code_quality_system/quality_model.py.function_count",
          "file_models.src/code_quality_system/quality_model.py.class_count",
          "file_models.src/code_quality_system/quality_model.py.import_count",
          "file_models.src/code_quality_system/quality_model.py.error_count",
          "file_models.src/code_quality_system/quality_model.py.model_data",
          "file_models.src/code_quality_system/quality_model.py.model_data.docstrings",
          "file_models.src/code_quality_system/quality_model.py.model_data.imports",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[0].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[0].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[1].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[1].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[2].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[2].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[3].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[3].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[4].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[4].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[5].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[5].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[6].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[6].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[7].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[7].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[8].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[8].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[9].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[9].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[10].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[10].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[11].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[11].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[12].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[12].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[13].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[13].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[14].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.functions.[14].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[0].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[0].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[1].name",
          "file_models.src/code_quality_system/quality_model.py.model_data.classes.[1].docstring",
          "file_models.src/code_quality_system/quality_model.py.model_data.variables",
          "file_models.src/code_quality_system/quality_model.py.model_data.line_count",
          "file_models.src/security_first/https_enforcement.py",
          "file_models.src/security_first/https_enforcement.py.file_path",
          "file_models.src/security_first/https_enforcement.py.file_type",
          "file_models.src/security_first/https_enforcement.py.model_type",
          "file_models.src/security_first/https_enforcement.py.complexity_score",
          "file_models.src/security_first/https_enforcement.py.line_count",
          "file_models.src/security_first/https_enforcement.py.function_count",
          "file_models.src/security_first/https_enforcement.py.class_count",
          "file_models.src/security_first/https_enforcement.py.import_count",
          "file_models.src/security_first/https_enforcement.py.error_count",
          "file_models.src/security_first/https_enforcement.py.model_data",
          "file_models.src/security_first/https_enforcement.py.model_data.docstrings",
          "file_models.src/security_first/https_enforcement.py.model_data.imports",
          "file_models.src/security_first/https_enforcement.py.model_data.functions",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[0].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[0].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[1].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[1].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[2].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[2].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[3].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[3].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[4].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[4].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[5].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[5].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[6].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[6].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[7].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[7].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[8].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[8].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[9].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[9].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[10].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[10].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[11].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[11].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[12].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[12].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[13].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[13].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[14].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[14].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[15].name",
          "file_models.src/security_first/https_enforcement.py.model_data.functions.[15].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[0].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[0].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[1].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[1].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[2].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[2].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[3].name",
          "file_models.src/security_first/https_enforcement.py.model_data.classes.[3].docstring",
          "file_models.src/security_first/https_enforcement.py.model_data.variables",
          "file_models.src/security_first/https_enforcement.py.model_data.line_count",
          "file_models.src/security_first/test_https_enforcement.py",
          "file_models.src/security_first/test_https_enforcement.py.file_path",
          "file_models.src/security_first/test_https_enforcement.py.file_type",
          "file_models.src/security_first/test_https_enforcement.py.model_type",
          "file_models.src/security_first/test_https_enforcement.py.complexity_score",
          "file_models.src/security_first/test_https_enforcement.py.line_count",
          "file_models.src/security_first/test_https_enforcement.py.function_count",
          "file_models.src/security_first/test_https_enforcement.py.class_count",
          "file_models.src/security_first/test_https_enforcement.py.import_count",
          "file_models.src/security_first/test_https_enforcement.py.error_count",
          "file_models.src/security_first/test_https_enforcement.py.model_data",
          "file_models.src/security_first/test_https_enforcement.py.model_data.docstrings",
          "file_models.src/security_first/test_https_enforcement.py.model_data.imports",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[0].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[0].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[1].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[1].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[2].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[2].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[3].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[3].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[4].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[4].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[5].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[5].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[6].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[6].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[7].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[7].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[8].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[8].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[9].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[9].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[10].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[10].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[11].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[11].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[12].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[12].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[13].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[13].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[14].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[14].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[15].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[15].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[16].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[16].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[17].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[17].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[18].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[18].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[19].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[19].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[20].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[20].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[21].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.functions.[21].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[0].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[0].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[1].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[1].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[2].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[2].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[3].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[3].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[4].name",
          "file_models.src/security_first/test_https_enforcement.py.model_data.classes.[4].docstring",
          "file_models.src/security_first/test_https_enforcement.py.model_data.variables",
          "file_models.src/security_first/test_https_enforcement.py.model_data.line_count",
          "file_models.src/security_first/rate_limiting.py",
          "file_models.src/security_first/rate_limiting.py.file_path",
          "file_models.src/security_first/rate_limiting.py.file_type",
          "file_models.src/security_first/rate_limiting.py.model_type",
          "file_models.src/security_first/rate_limiting.py.complexity_score",
          "file_models.src/security_first/rate_limiting.py.line_count",
          "file_models.src/security_first/rate_limiting.py.function_count",
          "file_models.src/security_first/rate_limiting.py.class_count",
          "file_models.src/security_first/rate_limiting.py.import_count",
          "file_models.src/security_first/rate_limiting.py.error_count",
          "file_models.src/security_first/rate_limiting.py.model_data",
          "file_models.src/security_first/rate_limiting.py.model_data.error",
          "file_models.src/security_first/test_streamlit_security_first.py",
          "file_models.src/security_first/test_streamlit_security_first.py.file_path",
          "file_models.src/security_first/test_streamlit_security_first.py.file_type",
          "file_models.src/security_first/test_streamlit_security_first.py.model_type",
          "file_models.src/security_first/test_streamlit_security_first.py.complexity_score",
          "file_models.src/security_first/test_streamlit_security_first.py.line_count",
          "file_models.src/security_first/test_streamlit_security_first.py.function_count",
          "file_models.src/security_first/test_streamlit_security_first.py.class_count",
          "file_models.src/security_first/test_streamlit_security_first.py.import_count",
          "file_models.src/security_first/test_streamlit_security_first.py.error_count",
          "file_models.src/security_first/test_streamlit_security_first.py.model_data",
          "file_models.src/security_first/test_streamlit_security_first.py.model_data.error",
          "file_models.src/security_first/test_security_model.py",
          "file_models.src/security_first/test_security_model.py.file_path",
          "file_models.src/security_first/test_security_model.py.file_type",
          "file_models.src/security_first/test_security_model.py.model_type",
          "file_models.src/security_first/test_security_model.py.complexity_score",
          "file_models.src/security_first/test_security_model.py.line_count",
          "file_models.src/security_first/test_security_model.py.function_count",
          "file_models.src/security_first/test_security_model.py.class_count",
          "file_models.src/security_first/test_security_model.py.import_count",
          "file_models.src/security_first/test_security_model.py.error_count",
          "file_models.src/security_first/test_security_model.py.model_data",
          "file_models.src/security_first/test_security_model.py.model_data.error",
          "file_models.src/security_first/__init__.py",
          "file_models.src/security_first/__init__.py.file_path",
          "file_models.src/security_first/__init__.py.file_type",
          "file_models.src/security_first/__init__.py.model_type",
          "file_models.src/security_first/__init__.py.complexity_score",
          "file_models.src/security_first/__init__.py.line_count",
          "file_models.src/security_first/__init__.py.function_count",
          "file_models.src/security_first/__init__.py.class_count",
          "file_models.src/security_first/__init__.py.import_count",
          "file_models.src/security_first/__init__.py.error_count",
          "file_models.src/security_first/__init__.py.model_data",
          "file_models.src/security_first/__init__.py.model_data.docstrings",
          "file_models.src/security_first/__init__.py.model_data.imports",
          "file_models.src/security_first/__init__.py.model_data.functions",
          "file_models.src/security_first/__init__.py.model_data.classes",
          "file_models.src/security_first/__init__.py.model_data.variables",
          "file_models.src/security_first/__init__.py.model_data.line_count",
          "file_models.src/mdc_generator/mdc_model.py",
          "file_models.src/mdc_generator/mdc_model.py.file_path",
          "file_models.src/mdc_generator/mdc_model.py.file_type",
          "file_models.src/mdc_generator/mdc_model.py.model_type",
          "file_models.src/mdc_generator/mdc_model.py.complexity_score",
          "file_models.src/mdc_generator/mdc_model.py.line_count",
          "file_models.src/mdc_generator/mdc_model.py.function_count",
          "file_models.src/mdc_generator/mdc_model.py.class_count",
          "file_models.src/mdc_generator/mdc_model.py.import_count",
          "file_models.src/mdc_generator/mdc_model.py.error_count",
          "file_models.src/mdc_generator/mdc_model.py.model_data",
          "file_models.src/mdc_generator/mdc_model.py.model_data.docstrings",
          "file_models.src/mdc_generator/mdc_model.py.model_data.imports",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[0].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[0].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[1].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[1].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[2].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[2].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[3].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[3].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[4].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[4].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[5].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[5].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[6].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[6].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[7].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[7].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[8].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[8].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[9].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[9].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[10].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.functions.[10].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[0].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[0].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[1].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[1].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[2].name",
          "file_models.src/mdc_generator/mdc_model.py.model_data.classes.[2].docstring",
          "file_models.src/mdc_generator/mdc_model.py.model_data.variables",
          "file_models.src/mdc_generator/mdc_model.py.model_data.line_count",
          "file_models.src/mdc_generator/__init__.py",
          "file_models.src/mdc_generator/__init__.py.file_path",
          "file_models.src/mdc_generator/__init__.py.file_type",
          "file_models.src/mdc_generator/__init__.py.model_type",
          "file_models.src/mdc_generator/__init__.py.complexity_score",
          "file_models.src/mdc_generator/__init__.py.line_count",
          "file_models.src/mdc_generator/__init__.py.function_count",
          "file_models.src/mdc_generator/__init__.py.class_count",
          "file_models.src/mdc_generator/__init__.py.import_count",
          "file_models.src/mdc_generator/__init__.py.error_count",
          "file_models.src/mdc_generator/__init__.py.model_data",
          "file_models.src/mdc_generator/__init__.py.model_data.docstrings",
          "file_models.src/mdc_generator/__init__.py.model_data.imports",
          "file_models.src/mdc_generator/__init__.py.model_data.functions",
          "file_models.src/mdc_generator/__init__.py.model_data.classes",
          "file_models.src/mdc_generator/__init__.py.model_data.variables",
          "file_models.src/mdc_generator/__init__.py.model_data.line_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.imports",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[2].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[2].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[3].name",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.classes.[3].docstring",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.variables",
          "file_models.src/multi_agent_testing/diversity_synthesis_orchestrator.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.file_path",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.file_type",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.model_type",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.complexity_score",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.line_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.function_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.class_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.import_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.error_count",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.model_data",
          "file_models.src/multi_agent_testing/test_anthropic_simple.py.model_data.error",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.file_path",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.file_type",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_type",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.complexity_score",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.line_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.function_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.class_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.import_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.error_count",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.imports",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[9].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[9].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[10].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[10].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[11].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[11].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[12].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[12].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[13].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[13].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[14].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[14].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[15].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[15].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[16].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[16].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[17].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[17].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[18].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[18].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[19].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[19].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[20].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[20].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[21].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[21].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[22].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[22].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[23].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[23].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[24].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[24].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[25].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[25].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[26].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.functions.[26].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[2].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[2].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[3].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[3].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[4].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[4].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[5].name",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.classes.[5].docstring",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.variables",
          "file_models.src/multi_agent_testing/test_multi_agent_blind_spot_detection.py.model_data.line_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.file_path",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.file_type",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_type",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.complexity_score",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.line_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.function_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.class_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.import_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.error_count",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.imports",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.functions",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.classes",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.variables",
          "file_models.src/multi_agent_testing/debug_anthropic_api.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.file_path",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.file_type",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.model_type",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.complexity_score",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.line_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.function_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.class_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.import_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.error_count",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.model_data",
          "file_models.src/multi_agent_testing/test_diversity_hypothesis.py.model_data.error",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.imports",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.classes",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.variables",
          "file_models.src/multi_agent_testing/meta_cognitive_orchestrator.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.file_path",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.file_type",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.model_type",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.complexity_score",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.line_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.function_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.class_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.import_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.error_count",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.model_data",
          "file_models.src/multi_agent_testing/test_live_smoke_test.py.model_data.error",
          "file_models.src/multi_agent_testing/test_model_traceability.py",
          "file_models.src/multi_agent_testing/test_model_traceability.py.file_path",
          "file_models.src/multi_agent_testing/test_model_traceability.py.file_type",
          "file_models.src/multi_agent_testing/test_model_traceability.py.model_type",
          "file_models.src/multi_agent_testing/test_model_traceability.py.complexity_score",
          "file_models.src/multi_agent_testing/test_model_traceability.py.line_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.function_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.class_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.import_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.error_count",
          "file_models.src/multi_agent_testing/test_model_traceability.py.model_data",
          "file_models.src/multi_agent_testing/test_model_traceability.py.model_data.error",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.file_path",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.file_type",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.model_type",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.complexity_score",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.line_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.function_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.class_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.import_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.error_count",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.model_data",
          "file_models.src/multi_agent_testing/multi_dimensional_smoke_test.py.model_data.error",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.imports",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[8].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[8].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[9].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[9].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[10].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[10].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[11].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.functions.[11].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[2].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[2].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[3].name",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.classes.[3].docstring",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.variables",
          "file_models.src/multi_agent_testing/langgraph_diversity_orchestrator.py.model_data.line_count",
          "file_models.src/multi_agent_testing/cost_analysis.py",
          "file_models.src/multi_agent_testing/cost_analysis.py.file_path",
          "file_models.src/multi_agent_testing/cost_analysis.py.file_type",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_type",
          "file_models.src/multi_agent_testing/cost_analysis.py.complexity_score",
          "file_models.src/multi_agent_testing/cost_analysis.py.line_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.function_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.class_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.import_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.error_count",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.imports",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.classes",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.variables",
          "file_models.src/multi_agent_testing/cost_analysis.py.model_data.line_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.file_path",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.file_type",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.model_type",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.complexity_score",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.line_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.function_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.class_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.import_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.error_count",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.model_data",
          "file_models.src/multi_agent_testing/test_meta_cognitive_orchestrator.py.model_data.error",
          "file_models.src/multi_agent_testing/live_smoke_test.py",
          "file_models.src/multi_agent_testing/live_smoke_test.py.file_path",
          "file_models.src/multi_agent_testing/live_smoke_test.py.file_type",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_type",
          "file_models.src/multi_agent_testing/live_smoke_test.py.complexity_score",
          "file_models.src/multi_agent_testing/live_smoke_test.py.line_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.function_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.class_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.import_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.error_count",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.imports",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[6].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[6].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[7].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.functions.[7].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.classes",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.variables",
          "file_models.src/multi_agent_testing/live_smoke_test.py.model_data.line_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.file_path",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.file_type",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_type",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.complexity_score",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.line_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.function_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.class_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.import_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.error_count",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.imports",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[0].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[1].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[2].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[2].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[3].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[3].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[4].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[4].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[5].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.functions.[5].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[0].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[0].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[1].name",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.classes.[1].docstring",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.variables",
          "file_models.src/multi_agent_testing/diversity_hypothesis_demo.py.model_data.line_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.file_path",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.file_type",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.model_type",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.complexity_score",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.line_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.function_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.class_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.import_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.error_count",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.model_data",
          "file_models.src/multi_agent_testing/live_smoke_test_langchain.py.model_data.error",
          "file_models.src/multi_agent_testing/__init__.py",
          "file_models.src/multi_agent_testing/__init__.py.file_path",
          "file_models.src/multi_agent_testing/__init__.py.file_type",
          "file_models.src/multi_agent_testing/__init__.py.model_type",
          "file_models.src/multi_agent_testing/__init__.py.complexity_score",
          "file_models.src/multi_agent_testing/__init__.py.line_count",
          "file_models.src/multi_agent_testing/__init__.py.function_count",
          "file_models.src/multi_agent_testing/__init__.py.class_count",
          "file_models.src/multi_agent_testing/__init__.py.import_count",
          "file_models.src/multi_agent_testing/__init__.py.error_count",
          "file_models.src/multi_agent_testing/__init__.py.model_data",
          "file_models.src/multi_agent_testing/__init__.py.model_data.docstrings",
          "file_models.src/multi_agent_testing/__init__.py.model_data.imports",
          "file_models.src/multi_agent_testing/__init__.py.model_data.functions",
          "file_models.src/multi_agent_testing/__init__.py.model_data.classes",
          "file_models.src/multi_agent_testing/__init__.py.model_data.variables",
          "file_models.src/multi_agent_testing/__init__.py.model_data.line_count",
          "file_models.src/streamlit/openflow_quickstart_app.py",
          "file_models.src/streamlit/openflow_quickstart_app.py.file_path",
          "file_models.src/streamlit/openflow_quickstart_app.py.file_type",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_type",
          "file_models.src/streamlit/openflow_quickstart_app.py.complexity_score",
          "file_models.src/streamlit/openflow_quickstart_app.py.line_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.function_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.class_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.import_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.error_count",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.docstrings",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.imports",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[0].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[0].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[1].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[1].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[2].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[2].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[3].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[3].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[4].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[4].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[5].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[5].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[6].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[6].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[7].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[7].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[8].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[8].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[9].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[9].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[10].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[10].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[11].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[11].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[12].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[12].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[13].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[13].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[14].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[14].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[15].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[15].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[16].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[16].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[17].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[17].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[18].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[18].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[19].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[19].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[20].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[20].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[21].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[21].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[22].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[22].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[23].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[23].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[24].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[24].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[25].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[25].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[26].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[26].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[27].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[27].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[28].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[28].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[29].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[29].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[30].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[30].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[31].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[31].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[32].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[32].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[33].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[33].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[34].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[34].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[35].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[35].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[36].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[36].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[37].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[37].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[38].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[38].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[39].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[39].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[40].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.functions.[40].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[0].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[0].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[1].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[1].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[2].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[2].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[3].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[3].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[4].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[4].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[5].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[5].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[6].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[6].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[7].name",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.classes.[7].docstring",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.variables",
          "file_models.src/streamlit/openflow_quickstart_app.py.model_data.line_count",
          "file_models.src/streamlit/__init__.py",
          "file_models.src/streamlit/__init__.py.file_path",
          "file_models.src/streamlit/__init__.py.file_type",
          "file_models.src/streamlit/__init__.py.model_type",
          "file_models.src/streamlit/__init__.py.complexity_score",
          "file_models.src/streamlit/__init__.py.line_count",
          "file_models.src/streamlit/__init__.py.function_count",
          "file_models.src/streamlit/__init__.py.class_count",
          "file_models.src/streamlit/__init__.py.import_count",
          "file_models.src/streamlit/__init__.py.error_count",
          "file_models.src/streamlit/__init__.py.model_data",
          "file_models.src/streamlit/__init__.py.model_data.docstrings",
          "file_models.src/streamlit/__init__.py.model_data.imports",
          "file_models.src/streamlit/__init__.py.model_data.functions",
          "file_models.src/streamlit/__init__.py.model_data.classes",
          "file_models.src/streamlit/__init__.py.model_data.variables",
          "file_models.src/streamlit/__init__.py.model_data.line_count",
          "summary",
          "summary.total_files",
          "summary.valid_files",
          "summary.error_files",
          "summary.model_type_counts",
          "summary.model_type_counts.ast",
          "summary.model_type_counts.error",
          "metadata",
          "metadata.last_updated",
          "metadata.checkpoint_count",
          "metadata.version"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "8539005143397964a365d936eea6c935",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.971083",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/gemini_2_5_flash_lite_pr_review_results.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/gemini_2_5_flash_lite_pr_review_results.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 2784,
        "json_keys": [
          "model",
          "timestamp",
          "review",
          "cost_estimate",
          "processing_time_seconds"
        ],
        "json_depth": 4,
        "json_keys_list": [
          "model",
          "timestamp",
          "review",
          "review.strengths",
          "review.areas_for_improvement",
          "review.blind_spot_analysis",
          "review.blind_spot_analysis.security",
          "review.blind_spot_analysis.devops",
          "review.blind_spot_analysis.code_quality",
          "review.blind_spot_analysis.ux",
          "review.blind_spot_analysis.performance",
          "review.recommendations",
          "review.recommendations.[0].priority",
          "review.recommendations.[0].category",
          "review.recommendations.[0].recommendation",
          "review.recommendations.[0].implementation",
          "review.recommendations.[1].priority",
          "review.recommendations.[1].category",
          "review.recommendations.[1].recommendation",
          "review.recommendations.[1].implementation",
          "review.recommendations.[2].priority",
          "review.recommendations.[2].category",
          "review.recommendations.[2].recommendation",
          "review.recommendations.[2].implementation",
          "review.recommendations.[3].priority",
          "review.recommendations.[3].category",
          "review.recommendations.[3].recommendation",
          "review.recommendations.[3].implementation",
          "review.recommendations.[4].priority",
          "review.recommendations.[4].category",
          "review.recommendations.[4].recommendation",
          "review.recommendations.[4].implementation",
          "review.overall_assessment",
          "review.overall_assessment.rule_compliance_score",
          "review.overall_assessment.security_score",
          "review.overall_assessment.code_quality_score",
          "review.overall_assessment.production_readiness_score",
          "cost_estimate",
          "cost_estimate.input_tokens",
          "cost_estimate.output_tokens",
          "cost_estimate.cost_usd",
          "processing_time_seconds"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "40e6bdf6c1c249861feb4595beb2cfc2",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.971893",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/.vscode/settings.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/.vscode/settings.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 34,
        "json_keys": [
          "liveServer.settings.port"
        ],
        "json_depth": 1,
        "json_keys_list": [
          "liveServer.settings.port"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "0aa573e111124b50ad932443d0151c78",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.973079",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/src/security_first/security_policy_model.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/security_first/security_policy_model.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 1114,
        "json_keys": [
          "description",
          "credentials",
          "uuids",
          "enforcement",
          "meta"
        ],
        "json_depth": 3,
        "json_keys_list": [
          "description",
          "credentials",
          "credentials.allowed_patterns",
          "credentials.forbidden_patterns",
          "credentials.contexts",
          "credentials.contexts.example_config",
          "credentials.contexts.production_config",
          "credentials.contexts.code",
          "uuids",
          "uuids.allowed_in",
          "uuids.forbidden_in",
          "uuids.placeholder_patterns",
          "enforcement",
          "enforcement.tests",
          "enforcement.rules",
          "enforcement.scripts",
          "meta",
          "meta.version",
          "meta.last_updated",
          "meta.author"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "289d2bf16d5a87e3463680f4087405de",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.973513",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/tests/gemini_2_5_preview_pr_review_results.json": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/tests/gemini_2_5_preview_pr_review_results.json",
      "file_type": "JSON",
      "model_type": "ast",
      "model_data": {
        "json_type": "dict",
        "json_size": 2709,
        "json_keys": [
          "model",
          "timestamp",
          "review",
          "cost_estimate",
          "processing_time_seconds"
        ],
        "json_depth": 4,
        "json_keys_list": [
          "model",
          "timestamp",
          "review",
          "review.strengths",
          "review.areas_for_improvement",
          "review.blind_spot_analysis",
          "review.blind_spot_analysis.security",
          "review.blind_spot_analysis.devops",
          "review.blind_spot_analysis.code_quality",
          "review.blind_spot_analysis.ux",
          "review.blind_spot_analysis.performance",
          "review.recommendations",
          "review.recommendations.[0].priority",
          "review.recommendations.[0].category",
          "review.recommendations.[0].recommendation",
          "review.recommendations.[0].implementation",
          "review.recommendations.[1].priority",
          "review.recommendations.[1].category",
          "review.recommendations.[1].recommendation",
          "review.recommendations.[1].implementation",
          "review.recommendations.[2].priority",
          "review.recommendations.[2].category",
          "review.recommendations.[2].recommendation",
          "review.recommendations.[2].implementation",
          "review.recommendations.[3].priority",
          "review.recommendations.[3].category",
          "review.recommendations.[3].recommendation",
          "review.recommendations.[3].implementation",
          "review.recommendations.[4].priority",
          "review.recommendations.[4].category",
          "review.recommendations.[4].recommendation",
          "review.recommendations.[4].implementation",
          "review.overall_assessment",
          "review.overall_assessment.rule_compliance_score",
          "review.overall_assessment.security_score",
          "review.overall_assessment.code_quality_score",
          "review.overall_assessment.production_readiness_score",
          "cost_estimate",
          "cost_estimate.input_tokens",
          "cost_estimate.output_tokens",
          "cost_estimate.cost_usd",
          "processing_time_seconds"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "7908d3cb701446b80b6542ce255d1c96",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:06:04.976701",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/config/.pre-commit-config.yaml": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/config/.pre-commit-config.yaml",
      "file_type": "YAML",
      "model_type": "ast",
      "model_data": {
        "yaml_type": "dict",
        "yaml_size": 4549,
        "yaml_keys": [
          "repos"
        ],
        "yaml_depth": 6,
        "yaml_keys_list": [
          "repos",
          "repos.[0].repo",
          "repos.[0].hooks",
          "repos.[0].hooks.[0].id",
          "repos.[0].hooks.[0].name",
          "repos.[0].hooks.[0].entry",
          "repos.[0].hooks.[0].language",
          "repos.[0].hooks.[0].types",
          "repos.[0].hooks.[0].pass_filenames",
          "repos.[0].hooks.[0].always_run",
          "repos.[0].hooks.[0].description",
          "repos.[0].hooks.[1].id",
          "repos.[0].hooks.[1].name",
          "repos.[0].hooks.[1].entry",
          "repos.[0].hooks.[1].language",
          "repos.[0].hooks.[1].types",
          "repos.[0].hooks.[1].files",
          "repos.[0].hooks.[1].description",
          "repos.[0].hooks.[2].id",
          "repos.[0].hooks.[2].name",
          "repos.[0].hooks.[2].entry",
          "repos.[0].hooks.[2].language",
          "repos.[0].hooks.[2].types",
          "repos.[0].hooks.[2].pass_filenames",
          "repos.[0].hooks.[2].always_run",
          "repos.[0].hooks.[2].description",
          "repos.[0].hooks.[3].id",
          "repos.[0].hooks.[3].name",
          "repos.[0].hooks.[3].entry",
          "repos.[0].hooks.[3].language",
          "repos.[0].hooks.[3].types",
          "repos.[0].hooks.[3].pass_filenames",
          "repos.[0].hooks.[3].always_run",
          "repos.[0].hooks.[3].description",
          "repos.[0].hooks.[4].id",
          "repos.[0].hooks.[4].name",
          "repos.[0].hooks.[4].entry",
          "repos.[0].hooks.[4].language",
          "repos.[0].hooks.[4].types",
          "repos.[0].hooks.[4].pass_filenames",
          "repos.[0].hooks.[4].always_run",
          "repos.[0].hooks.[4].description",
          "repos.[0].hooks.[5].id",
          "repos.[0].hooks.[5].name",
          "repos.[0].hooks.[5].entry",
          "repos.[0].hooks.[5].language",
          "repos.[0].hooks.[5].types",
          "repos.[0].hooks.[5].pass_filenames",
          "repos.[0].hooks.[5].always_run",
          "repos.[0].hooks.[5].description",
          "repos.[1].repo",
          "repos.[1].rev",
          "repos.[1].hooks",
          "repos.[1].hooks.[0].id",
          "repos.[1].hooks.[1].id",
          "repos.[1].hooks.[2].id",
          "repos.[1].hooks.[2].exclude",
          "repos.[1].hooks.[3].id",
          "repos.[1].hooks.[4].id",
          "repos.[1].hooks.[4].args",
          "repos.[1].hooks.[5].id",
          "repos.[1].hooks.[6].id",
          "repos.[1].hooks.[7].id",
          "repos.[1].hooks.[8].id",
          "repos.[1].hooks.[9].id",
          "repos.[2].repo",
          "repos.[2].rev",
          "repos.[2].hooks",
          "repos.[2].hooks.[0].id",
          "repos.[2].hooks.[0].args",
          "repos.[2].hooks.[0].exclude",
          "repos.[3].repo",
          "repos.[3].rev",
          "repos.[3].hooks",
          "repos.[3].hooks.[0].id",
          "repos.[3].hooks.[0].language_version",
          "repos.[3].hooks.[0].types",
          "repos.[4].repo",
          "repos.[4].rev",
          "repos.[4].hooks",
          "repos.[4].hooks.[0].id",
          "repos.[4].hooks.[0].args",
          "repos.[5].repo",
          "repos.[5].rev",
          "repos.[5].hooks",
          "repos.[5].hooks.[0].id",
          "repos.[5].hooks.[0].args",
          "repos.[5].hooks.[0].exclude",
          "repos.[6].repo",
          "repos.[6].rev",
          "repos.[6].hooks",
          "repos.[6].hooks.[0].id",
          "repos.[6].hooks.[0].types",
          "repos.[7].repo",
          "repos.[7].rev",
          "repos.[7].hooks",
          "repos.[7].hooks.[0].id",
          "repos.[7].hooks.[0].args",
          "repos.[8].repo",
          "repos.[8].rev",
          "repos.[8].hooks",
          "repos.[8].hooks.[0].id",
          "repos.[8].hooks.[0].additional_dependencies",
          "repos.[8].hooks.[0].exclude",
          "repos.[9].repo",
          "repos.[9].hooks",
          "repos.[9].hooks.[0].id",
          "repos.[9].hooks.[0].name",
          "repos.[9].hooks.[0].entry",
          "repos.[9].hooks.[0].language",
          "repos.[9].hooks.[0].types",
          "repos.[9].hooks.[0].files",
          "repos.[9].hooks.[0].description",
          "repos.[10].repo",
          "repos.[10].hooks",
          "repos.[10].hooks.[0].id",
          "repos.[10].hooks.[0].name",
          "repos.[10].hooks.[0].entry",
          "repos.[10].hooks.[0].language",
          "repos.[10].hooks.[0].pass_filenames",
          "repos.[10].hooks.[0].always_run",
          "repos.[10].hooks.[0].stages"
        ]
      },
      "complexity_score": 1.0,
      "structure_hash": "7cab71002177e652f37ca843d1b4065e",
      "lines_of_code": 1,
      "created_at": "2025-08-03T10:07:08.396135",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/models/healthcare-cdc-infrastructure.yaml": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/models/healthcare-cdc-infrastructure.yaml",
      "file_type": "YAML",
      "model_type": "error",
      "model_data": {
        "error": "could not determine a constructor for the tag '!Ref'\n  in \"/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/models/healthcare-cdc-infrastructure.yaml\", line 447, column 12",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "56237e330bda5b88c7f7c2c77bc42733",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.409242",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/sql/merge_cdc_operations.sql": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/sql/merge_cdc_operations.sql",
      "file_type": "SQL",
      "model_type": "ast",
      "model_data": {
        "sql_statements": 4,
        "sql_tables": [],
        "sql_views": [],
        "sql_functions": [],
        "sql_content": "-- CDC Merge Operations for Healthcare Claims\n-- This file contains the SQL merge statement for CDC operations\n\nBEGIN\n-- Create temporary table with all claimIds to be processed\nCREATE OR REPLACE TEMPORARY TABLE temp_claim_ids AS\nSELECT DISTINCT claimId \nFROM {cdc_table};\n\n-- Perform the merge operation\nMERGE INTO {dest_table} tgt\n    USING {cdc_table} src\n    ON tgt.claimId = src.claimId\n\n    -- Delete rows\n    WHEN MATCHED AND src.eventName = 'REMOVE' THEN DELETE\n\n    -- Update existing rows\n    WHEN MATCHED AND src.eventName = 'MODIFY'\n    THEN\n        UPDATE SET\n            tgt.eventName = src.eventName,\n            tgt.eventCreationUnixTime = src.eventCreationUnixTime,\n            tgt.claimId = src.claimId,\n            tgt.diagnosisCodes = src.diagnosisCodes,\n            tgt.dateOfService = src.dateOfService,\n            tgt.totalCharge = src.totalCharge,\n            tgt.procedureDetails = src.procedureDetails,\n            tgt.memberId = src.memberId,\n            tgt.insurancePlan = src.insurancePlan,\n            tgt.patientZip = src.patientZip,\n            tgt.patientState = src.patientState,\n            tgt.patientCity = src.patientCity,\n            tgt.patientStreet = src.patientStreet,\n            tgt.patientGender = src.patientGender,\n            tgt.patientDOB = src.patientDOB,\n            tgt.patientLastName = src.patientLastName,\n            tgt.patientPhone = src.patientPhone,\n            tgt.patientFirstName = src.patientFirstName,\n            tgt.patientEmail = src.patientEmail,\n            tgt.claimStatus = src.claimStatus,\n            tgt.createdTimeStamp = src.createdTimeStamp,\n            tgt.providerName = src.providerName,\n            tgt.providerNPI = src.providerNPI,\n            tgt.providerZip = src.providerZip,\n            tgt.providerState = src.providerState,\n            tgt.providerCity = src.providerCity,\n            tgt.providerStreet = src.providerStreet,\n            tgt.billSubmitDate = src.billSubmitDate,\n            tgt.payerName = src.payerName,\n            tgt.payerId = src.payerId,\n            tgt.payerContactNumber = src.payerContactNumber,\n            tgt.paymentStatus = src.paymentStatus\n\n    -- Insert new rows that don't exist in target_table\n    WHEN NOT MATCHED AND src.eventName = 'INSERT' THEN\n        INSERT (eventName, eventCreationUnixTime, claimId, diagnosisCodes, dateOfService, totalCharge, procedureDetails, memberId, insurancePlan, patientZip, patientState, patientCity, patientStreet, patientGender, patientDOB, patientLastName, patientPhone, patientFirstName, patientEmail, claimStatus, createdTimeStamp, providerName, providerNPI, providerZip, providerState, providerCity, providerStreet, billSubmitDate, payerName, payerId, payerContactNumber, paymentStatus)\n        VALUES (src.eventName, src.eventCreationUnixTime, src.claimId, src.diagnosisCodes, src.dateOfService, src.totalCharge, src.procedureDetails, src.memberId, src.insurancePlan, src.patientZip, src.patientState, src.patientCity, src.patientStreet, src.patientGender, src.patientDOB, src.patientLastName, src.patientPhone, src.patientFirstName, src.patientEmail, src.claimStatus, src.createdTimeStamp, src.providerName, src.providerNPI, src.providerZip, src.providerState, src.providerCity, src.providerStreet, src.billSubmitDate, src.payerName, src.payerId, src.payerContactNumber, src.paymentStatus);\n\n-- Delete processed records in the cdc table from temp table\nDELETE FROM {cdc_table} \nWHERE claimId IN (SELECT claimId FROM temp_claim_ids);\n\nEND; "
      },
      "complexity_score": 4.0,
      "structure_hash": "05c1b552215e2d5544e774fd105a3d70",
      "lines_of_code": 64,
      "created_at": "2025-08-03T10:07:08.409783",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/progress_pacifier.html": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/progress_pacifier.html",
      "file_type": "HTML",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.421358",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/sql/healthcare-cdc-schema.sql": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/healthcare-cdc/sql/healthcare-cdc-schema.sql",
      "file_type": "SQL",
      "model_type": "ast",
      "model_data": {
        "sql_statements": 32,
        "sql_tables": [],
        "sql_views": [
          "for",
          "for"
        ],
        "sql_functions": [],
        "sql_content": "-- Healthcare CDC Snowflake Schema\n-- Based on: https://quickstarts.snowflake.com/guide/Streamline_Healthcare_CDC_DDB_And_Openflow/\n-- Original Contributors: Snowflake Inc.\n-- Enhanced by: OpenFlow Playground Team\n\n-- Set variables for the healthcare CDC setup\nSET DB = 'CDC_DB';\nSET SCHEMA = 'CDC_SCHEMA';\nSET WH = 'CDC_WH';\nSET ROLE = 'CDC_RL';\n\n-- Create role and grant permissions\nUSE ROLE ACCOUNTADMIN;\n\n-- CREATE ROLES\nCREATE OR REPLACE ROLE IDENTIFIER($ROLE);\n\n-- CREATE DATABASE AND WAREHOUSE\nCREATE DATABASE IF NOT EXISTS IDENTIFIER($DB);\nUSE DATABASE IDENTIFIER($DB);\nCREATE SCHEMA IF NOT EXISTS IDENTIFIER($SCHEMA);\nCREATE OR REPLACE WAREHOUSE IDENTIFIER($WH) WITH WAREHOUSE_SIZE = 'SMALL';\n\n-- GRANTS\n-- Removed overly permissive GRANT CREATE WAREHOUSE ON ACCOUNT statement\n\n-- DEMO ONLY: This grant is for demonstration purposes\n-- In production, use more restrictive role-based permissions\n-- For healthcare compliance, implement least privilege access controls\nGRANT ROLE IDENTIFIER($ROLE) TO USER IDENTIFIER($USER);\nGRANT ROLE IDENTIFIER($ROLE) TO ROLE ACCOUNTADMIN;\nGRANT OWNERSHIP ON DATABASE IDENTIFIER($DB) TO ROLE IDENTIFIER($ROLE);\nGRANT OWNERSHIP ON SCHEMA IDENTIFIER($SCHEMA) TO ROLE IDENTIFIER($ROLE);\nGRANT USAGE ON WAREHOUSE IDENTIFIER($WH) TO ROLE IDENTIFIER($ROLE);\n\n-- Switch to the new role and schema\nUSE ROLE IDENTIFIER($ROLE);\nUSE DATABASE IDENTIFIER($DB);\nUSE SCHEMA IDENTIFIER($SCHEMA);\nUSE WAREHOUSE IDENTIFIER($WH);\n\n-- Create destination table (synchronized with DynamoDB)\nCREATE OR REPLACE TABLE openflow_insclaim_dest_tbl (\n    eventName STRING,\n    eventCreationUnixTime NUMBER,\n    claimId STRING,\n    diagnosisCodes ARRAY,\n    dateOfService STRING,\n    totalCharge FLOAT,\n    procedureDetails VARIANT,\n    memberId STRING,\n    insurancePlan STRING,\n    patientZip STRING,\n    patientState STRING,\n    patientCity STRING,\n    patientStreet STRING,\n    patientGender STRING,\n    patientDOB STRING,\n    patientLastName STRING,\n    patientPhone STRING,\n    patientFirstName STRING,\n    patientEmail STRING,\n    claimStatus STRING,\n    createdTimeStamp STRING,\n    providerName STRING,\n    providerNPI STRING,\n    providerZip STRING,\n    providerState STRING,\n    providerCity STRING,\n    providerStreet STRING,\n    billSubmitDate STRING,\n    payerName STRING,\n    payerId STRING,\n    payerContactNumber STRING,\n    paymentStatus STRING\n);\n\n-- Create CDC table (staging area for changes)\nCREATE OR REPLACE TABLE openflow_insclaim_cdc_tbl (\n    eventName STRING,\n    eventCreationUnixTime NUMBER,\n    claimId STRING,\n    diagnosisCodes ARRAY,\n    dateOfService STRING,\n    totalCharge FLOAT,\n    procedureDetails VARIANT,\n    memberId STRING,\n    insurancePlan STRING,\n    patientZip STRING,\n    patientState STRING,\n    patientCity STRING,\n    patientStreet STRING,\n    patientGender STRING,\n    patientDOB STRING,\n    patientLastName STRING,\n    patientPhone STRING,\n    patientFirstName STRING,\n    patientEmail STRING,\n    claimStatus STRING,\n    createdTimeStamp STRING,\n    providerName STRING,\n    providerNPI STRING,\n    providerZip STRING,\n    providerState STRING,\n    providerCity STRING,\n    providerStreet STRING,\n    billSubmitDate STRING,\n    payerName STRING,\n    payerId STRING,\n    payerContactNumber STRING,\n    paymentStatus STRING\n);\n\n-- Create event history table (audit trail)\nCREATE OR REPLACE TABLE openflow_insclaim_event_hist_tbl (\n    eventName STRING,\n    eventCreationUnixTime NUMBER,\n    claimId STRING,\n    diagnosisCodes ARRAY,\n    dateOfService STRING,\n    totalCharge FLOAT,\n    procedureDetails VARIANT,\n    memberId STRING,\n    insurancePlan STRING,\n    patientZip STRING,\n    patientState STRING,\n    patientCity STRING,\n    patientStreet STRING,\n    patientGender STRING,\n    patientDOB STRING,\n    patientLastName STRING,\n    patientPhone STRING,\n    patientFirstName STRING,\n    patientEmail STRING,\n    claimStatus STRING,\n    createdTimeStamp STRING,\n    providerName STRING,\n    providerNPI STRING,\n    providerZip STRING,\n    providerState STRING,\n    providerCity STRING,\n    providerStreet STRING,\n    billSubmitDate STRING,\n    payerName STRING,\n    payerId STRING,\n    payerContactNumber STRING,\n    paymentStatus STRING\n);\n\n-- Create views for easier querying\nCREATE OR REPLACE VIEW v_healthcare_claims_summary AS\nSELECT \n    claimId,\n    claimStatus,\n    paymentStatus,\n    totalCharge,\n    insurancePlan,\n    memberId,\n    providerName,\n    patientFirstName || ' ' || patientLastName AS patientName,\n    patientEmail,\n    dateOfService,\n    createdTimeStamp,\n    TO_TIMESTAMP(TO_NUMBER(eventCreationUnixTime) / 1000000) AS eventCreationUTC\nFROM openflow_insclaim_dest_tbl\nORDER BY eventCreationUnixTime DESC;\n\n-- Create view for recent events\nCREATE OR REPLACE VIEW v_recent_events AS\nSELECT \n    eventName,\n    claimId,\n    claimStatus,\n    paymentStatus,\n    totalCharge,\n    providerName,\n    patientFirstName || ' ' || patientLastName AS patientName,\n    TO_TIMESTAMP(TO_NUMBER(eventCreationUnixTime) / 1000000) AS eventCreationUTC\nFROM openflow_insclaim_event_hist_tbl\nORDER BY eventCreationUnixTime DESC\nLIMIT 100;\n\n-- Create view for pending claims\nCREATE OR REPLACE VIEW v_pending_claims AS\nSELECT \n    claimId,\n    claimStatus,\n    paymentStatus,\n    totalCharge,\n    insurancePlan,\n    memberId,\n    providerName,\n    patientFirstName || ' ' || patientLastName AS patientName,\n    dateOfService,\n    createdTimeStamp\nFROM openflow_insclaim_dest_tbl\nWHERE claimStatus IN ('Pending', 'In Review')\nORDER BY createdTimeStamp DESC;\n\n-- Grant permissions on views\nGRANT SELECT ON VIEW v_healthcare_claims_summary TO ROLE IDENTIFIER($ROLE);\nGRANT SELECT ON VIEW v_recent_events TO ROLE IDENTIFIER($ROLE);\nGRANT SELECT ON VIEW v_pending_claims TO ROLE IDENTIFIER($ROLE);\n\n-- Create sample data for testing\nINSERT INTO openflow_insclaim_dest_tbl (\n    eventName, eventCreationUnixTime, claimId, diagnosisCodes, dateOfService, \n    totalCharge, procedureDetails, memberId, insurancePlan, patientZip, \n    patientState, patientCity, patientStreet, patientGender, patientDOB, \n    patientLastName, patientPhone, patientFirstName, patientEmail, claimStatus, \n    createdTimeStamp, providerName, providerNPI, providerZip, providerState, \n    providerCity, providerStreet, billSubmitDate, payerName, payerId, \n    payerContactNumber, paymentStatus\n) VALUES (\n    'INSERT', \n    EXTRACT(EPOCH_NANOSECOND FROM CURRENT_TIMESTAMP()), \n    'CLM-SAMPLE-001',\n    ARRAY_CONSTRUCT('E11.9', 'I10'),\n    '2024-01-15',\n    2500.00,\n    PARSE_JSON('{\"procedure_code\": \"99213\", \"description\": \"Office visit\"}'),\n    'M1001',\n    'Premium PPO',\n    '90210',\n    'CA',\n    'Anytown',\n    '123 Main St',\n    'M',\n    '1980-01-15',\n    'Doe',\n    '555-123-4567',\n    'John',\n    'john.doe@email.com',\n    'Pending',\n    '2024-01-15T10:00:00Z',\n    'City Medical Center',\n    '1234567890',\n    '90211',\n    'CA',\n    'Anytown',\n    '456 Medical Blvd',\n    '2024-01-15',\n    'Blue Cross Blue Shield',\n    'BCBS001',\n    '555-987-6543',\n    'Pending'\n);\n\n-- Verify the setup\nSELECT 'Healthcare CDC Schema Setup Complete' AS status;\nSELECT COUNT(*) AS total_claims FROM openflow_insclaim_dest_tbl;\nSELECT COUNT(*) AS total_events FROM openflow_insclaim_event_hist_tbl; "
      },
      "complexity_score": 32.0,
      "structure_hash": "ef67a610f36ff169018eb0012c598727",
      "lines_of_code": 252,
      "created_at": "2025-08-03T10:07:08.428994",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/config/Openflow-Playground.yaml": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/config/Openflow-Playground.yaml",
      "file_type": "YAML",
      "model_type": "error",
      "model_data": {
        "error": "could not determine a constructor for the tag '!Sub'\n  in \"/home/lou/Documents/OpenFlow-Playground/config/Openflow-Playground.yaml\", line 154, column 13",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "d546c20ac9758f0c04cd2e8758127e4a",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.434520",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/data/diversity_analysis_report.html": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/data/diversity_analysis_report.html",
      "file_type": "HTML",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.436453",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/pyproject.toml": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/pyproject.toml",
      "file_type": "TOML",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.437559",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/data/PR_Dashboard.html": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/data/PR_Dashboard.html",
      "file_type": "HTML",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.438214",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/requirements_streamlit.txt": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/requirements_streamlit.txt",
      "file_type": "TEXT",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.438923",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/current_files.txt": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/current_files.txt",
      "file_type": "TEXT",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.439276",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/requirements_diversity.txt": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/requirements_diversity.txt",
      "file_type": "TEXT",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.439560",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/run_live_smoke_test.sh": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/run_live_smoke_test.sh",
      "file_type": "SHELL",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.439866",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/all_files.txt": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/all_files.txt",
      "file_type": "TEXT",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.440119",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/run_live_smoke_test_direct.sh": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/run_live_smoke_test_direct.sh",
      "file_type": "SHELL",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.440875",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/rule-compliance-check.sh": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/rule-compliance-check.sh",
      "file_type": "SHELL",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.441285",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/run_live_smoke_test_1password_flexible.sh": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/run_live_smoke_test_1password_flexible.sh",
      "file_type": "SHELL",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.441567",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/security-check.sh": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/security-check.sh",
      "file_type": "SHELL",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.442381",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/monitor.sh": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/monitor.sh",
      "file_type": "SHELL",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.443577",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/src/security_first/setup-security-hooks.sh": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/src/security_first/setup-security-hooks.sh",
      "file_type": "SHELL",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.443996",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/deploy.sh": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/deploy.sh",
      "file_type": "SHELL",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.444395",
      "commit_hash": null
    },
    "/home/lou/Documents/OpenFlow-Playground/scripts/run_live_smoke_test_1password.sh": {
      "file_path": "/home/lou/Documents/OpenFlow-Playground/scripts/run_live_smoke_test_1password.sh",
      "file_type": "SHELL",
      "model_type": "error",
      "model_data": {
        "error": "ASTModel.__init__() got an unexpected keyword argument 'complexity'",
        "error_type": "parsing_error",
        "has_syntax_errors": true
      },
      "complexity_score": 0.0,
      "structure_hash": "2ea13582e8c4773ba14e9ae91d41acd3",
      "lines_of_code": 0,
      "created_at": "2025-08-03T10:07:08.444621",
      "commit_hash": null
    }
  },
  "metadata": {
    "original_file_count": 16347,
    "filtered_file_count": 292,
    "noise_removed": 16055,
    "filtering_criteria": "Excluded .mypy_cache files",
    "created_at": "2025-08-03T11:00:21.087380"
  },
  "summary": {
    "total_files": 292,
    "file_types": {
      "python": 183,
      "mdc": 25,
      "markdown": 42,
      "JSON": 20,
      "YAML": 3,
      "SQL": 2,
      "HTML": 3,
      "TOML": 1,
      "TEXT": 4,
      "SHELL": 9
    },
    "complexity_stats": {
      "avg_complexity": 45.66438356164384,
      "max_complexity": 678,
      "min_complexity": 0.0
    }
  }
}