{
  "description": "Model-driven tool orchestration registry for OpenFlow Playground. This is the single source of truth for domain detection, tool selection, and requirements traceability.",
  "version": "1.6",
  "last_updated": "2024-12-19",
  "author": "LLM + Lou (OpenFlow-Playground)",
  "domains": {
    "cloudformation": {
      "patterns": ["*.template.yaml", "config/*.yaml", "*cloudformation*.yaml"],
      "content_indicators": ["!Sub", "!Ref", "!GetAtt", "AWS::", "Type: 'AWS::"],
      "linter": "cfn-lint",
      "validator": "aws-cloudformation",
      "exclusions": [],
      "requirements": [
        "Don't lint CloudFormation with generic YAML tools",
        "Use cfn-lint for CloudFormation validation"
      ]
    },
    "python": {
      "patterns": ["*.py"],
      "content_indicators": ["import ", "def ", "class ", "#!/usr/bin/env python"],
      "linter": "flake8",
      "formatter": "black",
      "exclusions": ["__pycache__/*", "*.pyc"],
      "requirements": [
        "Use flake8 for Python linting",
        "Format Python code with black"
      ]
    },
    "streamlit": {
      "patterns": ["src/streamlit/*.py", "app.py", "pages/*.py"],
      "content_indicators": ["import streamlit", "st.", "streamlit run"],
      "linter": "flake8",
      "formatter": "black",
      "validator": "streamlit-validate",
      "exclusions": ["__pycache__/*", "*.pyc"],
      "requirements": [
        "Use flake8 for Streamlit Python linting",
        "Format Streamlit code with black",
        "Validate Streamlit app structure and security"
      ]
    },
    "security_first": {
      "patterns": ["src/security_first/*.py", "src/security_first/*.sh", "src/security_first/*.json", "**/*"],
      "content_indicators": ["credential", "password", "secret", "token", "key", "jwt", "encrypt", "hash", "https", "ssl", "csrf", "rate_limit"],
      "linter": "bandit",
      "validator": "detect-secrets",
      "formatter": "safety",
      "exclusions": [],
      "requirements": [
        "Scan for hardcoded credentials and secrets",
        "Enforce security policy via detect-secrets and bandit",
        "Check for known vulnerabilities with safety",
        "Enforce HTTPS for all connections",
        "Implement rate limiting to prevent abuse",
        "Validate CSRF tokens for session security"
      ]
    },
    "multi_agent_testing": {
      "patterns": ["src/multi_agent_testing/*.py", "*diversity*.py", "*agent*.py", "*orchestrator*.py"],
      "content_indicators": ["DiversityAgent", "BlindSpotFinding", "multi_threaded", "orchestrator"],
      "linter": "flake8",
      "formatter": "black",
      "validator": "pytest",
      "exclusions": ["__pycache__/*", "*.pyc"],
      "requirements": [
        "Use flake8 for multi-agent Python linting",
        "Format multi-agent code with black",
        "Validate multi-agent testing with pytest"
      ]
    },
    "bash": {
      "patterns": ["scripts/*.sh", "*.sh", "*.bash"],
      "content_indicators": ["#!/bin/bash", "#!/bin/sh", "export ", "source "],
      "linter": "shellcheck",
      "exclusions": [],
      "requirements": [
        "Lint shell scripts with shellcheck"
      ]
    },
    "documentation": {
      "patterns": ["docs/*.md", "*.md"],
      "content_indicators": ["# ", "## ", "### ", "**", "*"],
      "linter": "markdownlint",
      "formatter": "prettier",
      "exclusions": ["node_modules/*"],
      "requirements": [
        "Use markdownlint for documentation linting",
        "Format documentation with prettier"
      ]
    },
    "configuration": {
      "patterns": ["config/*.yaml", "config/*.yml", "config/*.json", "config/*.env", "*.config.*"],
      "content_indicators": ["config:", "settings:", "environment:", "features:"],
      "linter": "yamllint",
      "validator": "jsonschema",
      "exclusions": [],
      "requirements": [
        "Use yamllint for configuration YAML files",
        "Apply schema validation for config files"
      ]
    },
    "data": {
      "patterns": ["data/*.json", "data/*.py", "data/*.csv", "data/*.yaml", "data/*.html"],
      "content_indicators": ["results", "analysis", "output", "data"],
      "linter": "jsonlint",
      "validator": "jsonschema",
      "exclusions": [],
      "requirements": [
        "Validate JSON data files",
        "Apply schema validation for data files"
      ]
    },
    "healthcare_cdc": {
      "patterns": ["healthcare-cdc/*.py", "healthcare-cdc/*.md", "healthcare-cdc/*.sql", "healthcare-cdc/*.yaml", "healthcare-cdc/*.json"],
      "content_indicators": ["healthcare", "cdc", "medical", "patient", "clinical", "phi", "hipaa", "audit", "compliance"],
      "linter": "flake8",
      "formatter": "black",
      "validator": "pytest",
      "exclusions": ["__pycache__/*", "*.pyc"],
      "requirements": [
        "Use flake8 for healthcare CDC Python linting",
        "Format healthcare CDC code with black",
        "Validate healthcare CDC with pytest",
        "Enforce HIPAA compliance validation",
        "Implement PHI detection and validation",
        "Ensure immutable audit logging",
        "Validate healthcare data encryption",
        "Enforce access control and authentication"
      ]
    },
    "yaml": {
      "patterns": ["*.yaml", "*.yml"],
      "content_indicators": ["---", "key: value"],
      "linter": "yamllint",
      "exclusions": ["config/*.yaml", "*.template.yaml"],
      "requirements": [
        "Lint generic YAML files with yamllint",
        "Exclude CloudFormation files from generic YAML linting"
      ]
    },
    "yaml_infrastructure": {
      "patterns": ["*cloudformation*.yaml", "*infrastructure*.yaml", "*aws*.yaml", "config/*.yaml"],
      "content_indicators": ["!Sub", "!Ref", "!GetAtt", "AWS::", "Type: 'AWS::"],
      "linter": "cfn-lint",
      "validator": "aws-cloudformation",
      "exclusions": [],
      "requirements": [
        "Use cfn-lint for CloudFormation YAML files",
        "Apply AWS-specific validation for infrastructure YAML"
      ]
    },
    "yaml_config": {
      "patterns": ["config*.yaml", "settings*.yaml", "*.config.yaml"],
      "content_indicators": ["config:", "settings:", "environment:", "features:"],
      "linter": "yamllint",
      "validator": "jsonschema",
      "exclusions": [],
      "requirements": [
        "Use yamllint for configuration YAML files",
        "Apply schema validation for config files"
      ]
    },
    "yaml_cicd": {
      "patterns": [".github/*.yaml", ".gitlab-ci.yml", "*.workflow.yaml", "azure-pipelines*.yml"],
      "content_indicators": ["on:", "jobs:", "steps:", "pipeline:", "stages:"],
      "linter": "actionlint",
      "validator": "gitlab-ci-lint",
      "exclusions": [],
      "requirements": [
        "Use domain-specific CI/CD validators",
        "Apply workflow syntax validation"
      ]
    },
    "yaml_kubernetes": {
      "patterns": ["k8s/*.yaml", "kubernetes/*.yaml", "*.k8s.yaml"],
      "content_indicators": ["apiVersion:", "kind:", "metadata:", "spec:"],
      "linter": "kubectl",
      "validator": "kubeval",
      "exclusions": [],
      "requirements": [
        "Use kubectl validate for Kubernetes YAML",
        "Apply Kubernetes API validation"
      ]
    },
    "security": {
      "patterns": ["**/*"],
      "content_indicators": ["password", "secret", "key", "token", "credential"],
      "linter": "bandit",
      "validator": "detect-secrets",
      "exclusions": [],
      "requirements": [
        "Scan for hardcoded credentials and secrets",
        "Enforce security policy via detect-secrets and bandit"
      ]
    },
    "rule_compliance": {
      "patterns": ["scripts/rule-compliance-check.sh", "scripts/mdc-linter.py", ".cursor/plugins/*.py", "config/.pre-commit-config.yaml"],
      "content_indicators": ["rule-compliance", "deterministic-editing", "pre-commit", "mdc-linter"],
      "linter": "shellcheck",
      "validator": "pytest",
      "formatter": "black",
      "exclusions": [],
      "requirements": [
        "Use shellcheck for shell script linting",
        "Validate rule compliance with pytest",
        "Format Python code with black",
        "Enforce deterministic editing rules",
        "Validate .mdc file structure",
        "Provide immediate IDE feedback"
      ]
    },
    "mdc_generator": {
      "patterns": ["src/mdc_generator/*.py", "scripts/regenerate_mdc_files.py"],
      "content_indicators": ["MDCFile", "MDCFrontmatter", "MDCGenerator", "mdc_generator"],
      "linter": "flake8",
      "validator": "pytest",
      "formatter": "black",
      "exclusions": [],
      "requirements": [
        "Use flake8 for Python linting",
        "Validate MDC generator with pytest",
        "Format Python code with black",
        "Model .mdc files with Python dataclasses",
        "Generate .mdc files using standard libraries",
        "Provide simple projection from model to file"
      ]
    },
    "package_management": {
      "patterns": ["pyproject.toml", "requirements*.txt", "Pipfile", "poetry.lock", "uv.lock"],
      "content_indicators": ["uv", "pip", "poetry", "pipenv", "dependencies", "dev-dependencies"],
      "linter": "uv check",
      "validator": "uv sync",
      "formatter": "uv format",
      "exclusions": ["__pycache__/*", "*.pyc", ".venv/*", "venv/*"],
      "requirements": [
        "Use UV for all package management",
        "Enforce UV lock file usage",
        "Validate dependencies with UV check",
        "Sync dependencies with UV sync",
        "Format with UV format"
      ]
    }
  },
  "tool_selection_logic": {
    "pattern_weight": 0.4,
    "content_indicator_weight": 0.3,
    "exclusion_weight": 0.3,
    "confidence_threshold": 0.5
  },
  "file_organization": {
    "src": {
      "description": "Source code organized by domain",
      "streamlit": "Streamlit application components",
      "security_first": "Security-first architecture components",
      "multi_agent_testing": "Multi-agent testing framework components"
    },
    "tests": {
      "description": "Test files organized by domain",
      "test_basic_validation.py": "Basic validation tests",
      "test_core_concepts.py": "Core concept validation tests",
      "test_file_organization.py": "File organization validation tests"
    },
    "scripts": {
      "description": "Bash scripts and automation",
      "deploy.sh": "Deployment automation",
      "monitor.sh": "Monitoring scripts",
      "run_live_smoke_test*.sh": "Testing automation scripts"
    },
    "docs": {
      "description": "Documentation and specifications",
      "PR_*.md": "Pull request documentation",
      "*.md": "General documentation",
      "ORGANIZATION_SUMMARY.md": "File organization documentation",
      "DOCUMENTATION_INDEX.md": "Comprehensive documentation index",
      "prioritized_implementation_plan.md": "Prioritized implementation plan"
    },
    "config": {
      "description": "Configuration files",
      "config.env.example": "Environment configuration example",
      ".pre-commit-config.yaml": "Pre-commit hooks configuration",
      ".yaml-lint-ignore": "YAML linting exclusions",
      "Openflow-Playground.yaml": "Infrastructure configuration"
    },
    "data": {
      "description": "Data files and results",
      "*.json": "JSON data files",
      "cost_analysis.py": "Data analysis scripts",
      "PR_Dashboard.html": "Dashboard data",
      "diversity_analysis_report.*": "Diversity analysis reports",
      "*.png": "Analysis visualization images",
      "*.svg": "Analysis visualization vectors",
      "synthesis_*.json": "Synthesis analysis data"
    },
    "healthcare_cdc": {
      "description": "Healthcare CDC domain",
      "healthcare_cdc_domain_model.py": "Healthcare CDC domain model",
      "test_healthcare_cdc_domain_model.py": "Healthcare CDC tests",
      "README.md": "Healthcare CDC documentation"
    },
    "requirements": {
      "description": "Dependency management",
      "requirements_streamlit.txt": "Streamlit app dependencies",
      "requirements_diversity.txt": "Diversity hypothesis dependencies"
    },
    "project_level": {
      "description": "Project-level files",
      "README.md": "Main project documentation",
      "QUICKSTART.md": "Quick start guide",
      "project_model_registry.json": "Model-driven tool orchestration",
      "project_model.py": "Project model implementation",
      "setup.py": "Project setup script",
      ".gitignore": "Git ignore rules"
    },
    "domain_rules": {
      "description": "Domain-specific development rules",
      "src/streamlit/.cursor/rules/streamlit-development.mdc": "Streamlit development guidelines",
      "src/security_first/.cursor/rules/security-first.mdc": "Security-first architecture guidelines",
      "src/multi_agent_testing/.cursor/rules/multi-agent-testing.mdc": "Multi-agent testing guidelines",
      "scripts/.cursor/rules/bash-scripting.mdc": "Bash scripting guidelines",
      "docs/.cursor/rules/documentation.mdc": "Documentation guidelines",
      "config/.cursor/rules/configuration.mdc": "Configuration management guidelines",
      "data/.cursor/rules/data-management.mdc": "Data management guidelines"
    }
  },
  "requirements_traceability": [
    {
      "requirement": "Don't lint CloudFormation with generic YAML tools",
      "domain": "cloudformation",
      "implementation": "content_indicators, patterns, yamllint exclusions",
      "test": "test_requirement_1_cloudformation_detection"
    },
    {
      "requirement": "Use domain-specific tools",
      "domain": "*",
      "implementation": "linter, validator, formatter fields in each domain",
      "test": "test_requirement_2_tool_selection"
    },
    {
      "requirement": "Generate proper exclusions",
      "domain": "yaml",
      "implementation": "exclusions field in yaml domain",
      "test": "test_requirement_3_exclusion_generation"
    },
    {
      "requirement": "Intelligent content analysis",
      "domain": "*",
      "implementation": "content_indicators in each domain",
      "test": "test_requirement_4_content_analysis"
    },
    {
      "requirement": "Intelligent confidence scoring",
      "domain": "*",
      "implementation": "tool_selection_logic weights",
      "test": "test_requirement_5_confidence_scoring"
    },
    {
      "requirement": "Actual tool execution works",
      "domain": "*",
      "implementation": "validate_file() method",
      "test": "test_requirement_6_tool_execution"
    },
    {
      "requirement": "Extensible domain registry",
      "domain": "*",
      "implementation": "domains object in this file",
      "test": "test_requirement_7_domain_registry"
    },
    {
      "requirement": "YAML type-specific validation",
      "domain": "yaml_infrastructure",
      "implementation": "cfn-lint for CloudFormation, aws-cloudformation validator",
      "test": "test_requirement_8_yaml_infrastructure"
    },
    {
      "requirement": "Configuration YAML validation",
      "domain": "yaml_config", 
      "implementation": "yamllint + jsonschema for config files",
      "test": "test_requirement_9_yaml_config"
    },
    {
      "requirement": "CI/CD YAML validation",
      "domain": "yaml_cicd",
      "implementation": "actionlint for GitHub Actions, gitlab-ci-lint for GitLab CI",
      "test": "test_requirement_10_yaml_cicd"
    },
    {
      "requirement": "Kubernetes YAML validation",
      "domain": "yaml_kubernetes",
      "implementation": "kubectl validate, kubeval for K8s files",
      "test": "test_requirement_11_yaml_kubernetes"
    },
    {
      "requirement": "Streamlit app security validation",
      "domain": "streamlit",
      "implementation": "flake8 + streamlit-validate for Streamlit apps",
      "test": "test_requirement_12_streamlit_security"
    },
    {
      "requirement": "Security-first architecture enforcement",
      "domain": "security_first",
      "implementation": "bandit + detect-secrets + safety for comprehensive security",
      "test": "test_requirement_13_security_first"
    },
    {
      "requirement": "Multi-agent testing validation",
      "domain": "multi_agent_testing",
      "implementation": "flake8 + black + pytest for multi-agent systems",
      "test": "test_requirement_14_multi_agent_testing"
    },
    {
      "requirement": "Domain-based file organization",
      "domain": "*",
      "implementation": "file_organization object in this file",
      "test": "test_requirement_15_file_organization"
    },
    {
      "requirement": "Bash script validation",
      "domain": "bash",
      "implementation": "shellcheck for bash script validation",
      "test": "test_requirement_16_bash_validation"
    },
    {
      "requirement": "Documentation validation",
      "domain": "documentation",
      "implementation": "markdownlint + prettier for documentation",
      "test": "test_requirement_17_documentation_validation"
    },
    {
      "requirement": "Configuration validation",
      "domain": "configuration",
      "implementation": "yamllint + jsonschema for configuration files",
      "test": "test_requirement_18_configuration_validation"
    },
    {
      "requirement": "Data file validation",
      "domain": "data",
      "implementation": "jsonlint + jsonschema for data files",
      "test": "test_requirement_19_data_validation"
    },
    {
      "requirement": "Healthcare CDC domain validation",
      "domain": "healthcare_cdc",
      "implementation": "flake8 + black + pytest for healthcare CDC",
      "test": "test_requirement_20_healthcare_cdc_validation"
    },
    {
      "requirement": "Domain-specific rules validation",
      "domain": "*",
      "implementation": "Domain-specific .cursor/rules files for each domain",
      "test": "test_requirement_21_domain_rules_validation"
    },
    {
      "requirement": "Rule compliance enforcement system",
      "domain": "rule_compliance",
      "implementation": "Pre-commit hooks + IDE plugins + automated linting for rule compliance",
      "test": "test_requirement_22_rule_compliance_enforcement"
    },
    {
      "requirement": "Deterministic editing enforcement",
      "domain": "rule_compliance",
      "implementation": "Rule compliance checker + MDC linter for deterministic editing",
      "test": "test_requirement_23_deterministic_editing_enforcement"
    },
    {
      "requirement": "Immediate IDE feedback",
      "domain": "rule_compliance",
      "implementation": "Cursor IDE plugin for immediate rule compliance feedback",
      "test": "test_requirement_24_immediate_ide_feedback"
    },
    {
      "requirement": "MDC file modeling and generation",
      "domain": "mdc_generator",
      "implementation": "Python dataclasses and standard libraries for .mdc file generation",
      "test": "test_requirement_25_mdc_generator"
    },
    {
      "requirement": "Simple projection from model to file",
      "domain": "mdc_generator",
      "implementation": "MDCGenerator class for automated .mdc file generation",
      "test": "test_requirement_26_mdc_projection"
    },
    {
      "requirement": "HIPAA compliance validation",
      "domain": "healthcare_cdc",
      "implementation": "HIPAA validation rules and PHI detection in healthcare CDC domain",
      "test": "test_requirement_27_hipaa_compliance_validation"
    },
    {
      "requirement": "PHI detection and validation",
      "domain": "healthcare_cdc",
      "implementation": "PHI detection algorithms and validation rules in healthcare CDC",
      "test": "test_requirement_28_phi_detection_validation"
    },
    {
      "requirement": "Immutable audit logging",
      "domain": "healthcare_cdc",
      "implementation": "Immutable audit trail with S3 Object Lock for healthcare data access",
      "test": "test_requirement_29_immutable_audit_logging"
    },
    {
      "requirement": "Healthcare data encryption",
      "domain": "healthcare_cdc",
      "implementation": "AES-256 encryption at rest and TLS 1.3 for healthcare data transmission",
      "test": "test_requirement_30_healthcare_data_encryption"
    },
    {
      "requirement": "Healthcare access control and authentication",
      "domain": "healthcare_cdc",
      "implementation": "RBAC and JWT-based authentication for healthcare CDC domain",
      "test": "test_requirement_31_healthcare_access_control"
    },
    {
      "requirement": "Healthcare CDC CI/CD integration",
      "domain": "healthcare_cdc",
      "implementation": "CI/CD pipeline with healthcare-specific security scans and monitoring",
      "test": "test_requirement_32_healthcare_cdc_cicd_integration"
    },
    {
      "requirement": "HTTPS enforcement for all connections",
      "domain": "security_first",
      "implementation": "HTTPS enforcement module with TLS 1.2+ configuration and certificate validation",
      "test": "test_requirement_33_https_enforcement"
    },
    {
      "requirement": "Rate limiting to prevent abuse",
      "domain": "security_first",
      "implementation": "Redis-based rate limiting with configurable limits per endpoint and user",
      "test": "test_requirement_34_rate_limiting"
    },
    {
      "requirement": "CSRF protection for session security",
      "domain": "security_first",
      "implementation": "Session-based CSRF tokens with SHA-256 generation and validation",
      "test": "test_requirement_35_csrf_protection"
    },
    {
      "requirement": "UV package management enforcement",
      "domain": "package_management",
      "implementation": "UV lock file and dependency management for all Python packages",
      "test": "test_requirement_36_uv_package_management"
    },
    {
      "requirement": "Streamlit app dependencies with UV",
      "domain": "package_management",
      "implementation": "streamlit, boto3, redis, plotly, pandas, pydantic, bcrypt managed via UV",
      "test": "test_requirement_37_streamlit_dependencies_uv"
    },
    {
      "requirement": "Security-first dependencies with UV",
      "domain": "package_management",
      "implementation": "cryptography, PyJWT, bandit, safety managed via UV",
      "test": "test_requirement_38_security_dependencies_uv"
    },
    {
      "requirement": "Development dependencies with UV",
      "domain": "package_management",
      "implementation": "pytest, flake8, black, mypy managed via UV",
      "test": "test_requirement_39_dev_dependencies_uv"
    }
  ],
  "meta": {
    "project": "OpenFlow Playground",
    "model_type": "model-driven tool orchestration",
    "file": "project_model_registry.json",
    "tests": [
      "test_model_traceability.py"
    ],
    "rules": [
      ".cursor/rules/security-credentials.mdc",
      ".cursor/rules/deterministic-editing.mdc",
      ".cursor/rules/investigation-analysis.mdc",
      ".cursor/rules/llm-architect.mdc",
      ".cursor/rules/intelligent-policy.mdc",
      ".cursor/rules/prevention-architecture.mdc",
      ".cursor/rules/cloudformation-linting.mdc",
      ".cursor/rules/yaml-type-specific.mdc",
      "src/streamlit/.cursor/rules/streamlit-development.mdc",
      "src/security_first/.cursor/rules/security-first.mdc",
      "src/multi_agent_testing/.cursor/rules/multi-agent-testing.mdc",
      "scripts/.cursor/rules/bash-scripting.mdc",
      "docs/.cursor/rules/documentation.mdc",
      "config/.cursor/rules/configuration.mdc",
      "data/.cursor/rules/data-management.mdc"
    ]
  }
} 