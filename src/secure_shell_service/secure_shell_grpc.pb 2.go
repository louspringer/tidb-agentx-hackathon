// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: secure_shell.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecureShellService_ExecuteCommand_FullMethodName = "/secure_shell.SecureShellService/ExecuteCommand"
	SecureShellService_HealthCheck_FullMethodName    = "/secure_shell.SecureShellService/HealthCheck"
)

// SecureShellServiceClient is the client API for SecureShellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecureShellServiceClient interface {
	// ExecuteCommand - Secure command execution with timeout and validation
	ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	// HealthCheck - Service health monitoring
	HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type secureShellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecureShellServiceClient(cc grpc.ClientConnInterface) SecureShellServiceClient {
	return &secureShellServiceClient{cc}
}

func (c *secureShellServiceClient) ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, SecureShellService_ExecuteCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secureShellServiceClient) HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, SecureShellService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecureShellServiceServer is the server API for SecureShellService service.
// All implementations must embed UnimplementedSecureShellServiceServer
// for forward compatibility
type SecureShellServiceServer interface {
	// ExecuteCommand - Secure command execution with timeout and validation
	ExecuteCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	// HealthCheck - Service health monitoring
	HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedSecureShellServiceServer()
}

// UnimplementedSecureShellServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecureShellServiceServer struct {
}

func (UnimplementedSecureShellServiceServer) ExecuteCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (UnimplementedSecureShellServiceServer) HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSecureShellServiceServer) mustEmbedUnimplementedSecureShellServiceServer() {}

// UnsafeSecureShellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecureShellServiceServer will
// result in compilation errors.
type UnsafeSecureShellServiceServer interface {
	mustEmbedUnimplementedSecureShellServiceServer()
}

func RegisterSecureShellServiceServer(s grpc.ServiceRegistrar, srv SecureShellServiceServer) {
	s.RegisterService(&SecureShellService_ServiceDesc, srv)
}

func _SecureShellService_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureShellServiceServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureShellService_ExecuteCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureShellServiceServer).ExecuteCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecureShellService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecureShellServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecureShellService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecureShellServiceServer).HealthCheck(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecureShellService_ServiceDesc is the grpc.ServiceDesc for SecureShellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecureShellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secure_shell.SecureShellService",
	HandlerType: (*SecureShellServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteCommand",
			Handler:    _SecureShellService_ExecuteCommand_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _SecureShellService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secure_shell.proto",
}
