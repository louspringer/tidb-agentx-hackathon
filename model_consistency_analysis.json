[
  {
    "file_path": "scripts/mdc-linter.py",
    "has_git_history": false,
    "current_model": {
      "type": "interpreted",
      "functions": [
        {
          "name": "__init__",
          "lineno": 18,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "log_violation",
          "lineno": 26,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "log_warning",
          "lineno": 30,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "validate_yaml_frontmatter",
          "lineno": 34,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "validate_markdown_content",
          "lineno": 96,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "validate_file_organization",
          "lineno": 123,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "validate_deterministic_editing_compliance",
          "lineno": 151,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "lint_file",
          "lineno": 172,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "lint_directory",
          "lineno": 201,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "main",
          "lineno": 247,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "MDCLinter",
          "lineno": 15,
          "bases": [],
          "methods": [],
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "sys",
          "asname": null,
          "lineno": 7
        },
        {
          "type": "import",
          "module": "yaml",
          "asname": null,
          "lineno": 8
        },
        {
          "type": "import",
          "module": "re",
          "asname": null,
          "lineno": 9
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null,
          "lineno": 10
        },
        {
          "type": "import",
          "module": "Path",
          "asname": null,
          "lineno": 10
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null,
          "lineno": 11
        },
        {
          "type": "import",
          "module": "List",
          "asname": null,
          "lineno": 11
        },
        {
          "type": "import",
          "module": "argparse",
          "asname": null,
          "lineno": 12
        }
      ],
      "lines_of_code": 288,
      "content_length": 9388,
      "syntax_errors": []
    },
    "persisted_model": {
      "domain": "rule_compliance",
      "patterns": [
        "scripts/rule-compliance-check.sh",
        "scripts/mdc-linter.py",
        ".cursor/plugins/rule-compliance-checker.py"
      ],
      "content_indicators": [
        "rule-compliance",
        "mdc-linter",
        "deterministic-editing",
        "cursor-plugin"
      ],
      "linter": "shellcheck",
      "validator": "pytest",
      "formatter": "black"
    },
    "pattern_match": null,
    "is_new_artifact": true,
    "recommendations": [
      "New artifact with unknown pattern - may need new model definition"
    ]
  },
  {
    "file_path": "broken_python_interpreter.py",
    "has_git_history": false,
    "current_model": {
      "type": "ast_parsed",
      "functions": [
        {
          "name": "main",
          "lineno": 529,
          "args": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "lineno": 18,
          "args": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "interpret_broken_file",
          "lineno": 42,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "interpret_broken_file_with_content",
          "lineno": 69,
          "args": [
            "self",
            "file_path",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "analyze_valid_ast",
          "lineno": 79,
          "args": [
            "self",
            "file_path",
            "tree",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "analyze_with_tokens",
          "lineno": 95,
          "args": [
            "self",
            "file_path",
            "content",
            "syntax_error"
          ],
          "decorators": []
        },
        {
          "name": "analyze_with_regex",
          "lineno": 118,
          "args": [
            "self",
            "file_path",
            "content",
            "error"
          ],
          "decorators": []
        },
        {
          "name": "fix_indentation",
          "lineno": 137,
          "args": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "should_be_indented",
          "lineno": 152,
          "args": [
            "self",
            "line",
            "previous_lines"
          ],
          "decorators": []
        },
        {
          "name": "extract_imports_from_ast",
          "lineno": 168,
          "args": [
            "self",
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "extract_functions_from_ast",
          "lineno": 191,
          "args": [
            "self",
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "extract_classes_from_ast",
          "lineno": 206,
          "args": [
            "self",
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "extract_variables_from_ast",
          "lineno": 220,
          "args": [
            "self",
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "calculate_complexity_from_ast",
          "lineno": 234,
          "args": [
            "self",
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "extract_imports_from_tokens",
          "lineno": 244,
          "args": [
            "self",
            "tokens"
          ],
          "decorators": []
        },
        {
          "name": "extract_functions_from_tokens",
          "lineno": 274,
          "args": [
            "self",
            "tokens"
          ],
          "decorators": []
        },
        {
          "name": "extract_classes_from_tokens",
          "lineno": 294,
          "args": [
            "self",
            "tokens"
          ],
          "decorators": []
        },
        {
          "name": "extract_variables_from_tokens",
          "lineno": 313,
          "args": [
            "self",
            "tokens"
          ],
          "decorators": []
        },
        {
          "name": "identify_syntax_issues",
          "lineno": 330,
          "args": [
            "self",
            "tokens"
          ],
          "decorators": []
        },
        {
          "name": "is_indented",
          "lineno": 360,
          "args": [
            "self",
            "token"
          ],
          "decorators": []
        },
        {
          "name": "extract_imports_from_regex",
          "lineno": 364,
          "args": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_functions_from_regex",
          "lineno": 393,
          "args": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_classes_from_regex",
          "lineno": 414,
          "args": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_variables_from_regex",
          "lineno": 434,
          "args": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "identify_syntax_issues_regex",
          "lineno": 452,
          "args": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "estimate_complexity_regex",
          "lineno": 478,
          "args": [
            "self",
            "content"
          ],
          "decorators": []
        },
        {
          "name": "extract_decorator",
          "lineno": 492,
          "args": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "extract_base",
          "lineno": 501,
          "args": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "extract_class_methods",
          "lineno": 507,
          "args": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "calculate_function_complexity",
          "lineno": 520,
          "args": [
            "self",
            "node"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "BrokenPythonInterpreter",
          "lineno": 15,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "lineno": 18,
              "args": [
                "self"
              ]
            },
            {
              "name": "interpret_broken_file",
              "lineno": 42,
              "args": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "interpret_broken_file_with_content",
              "lineno": 69,
              "args": [
                "self",
                "file_path",
                "content"
              ]
            },
            {
              "name": "analyze_valid_ast",
              "lineno": 79,
              "args": [
                "self",
                "file_path",
                "tree",
                "content"
              ]
            },
            {
              "name": "analyze_with_tokens",
              "lineno": 95,
              "args": [
                "self",
                "file_path",
                "content",
                "syntax_error"
              ]
            },
            {
              "name": "analyze_with_regex",
              "lineno": 118,
              "args": [
                "self",
                "file_path",
                "content",
                "error"
              ]
            },
            {
              "name": "fix_indentation",
              "lineno": 137,
              "args": [
                "self",
                "content"
              ]
            },
            {
              "name": "should_be_indented",
              "lineno": 152,
              "args": [
                "self",
                "line",
                "previous_lines"
              ]
            },
            {
              "name": "extract_imports_from_ast",
              "lineno": 168,
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "extract_functions_from_ast",
              "lineno": 191,
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "extract_classes_from_ast",
              "lineno": 206,
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "extract_variables_from_ast",
              "lineno": 220,
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "calculate_complexity_from_ast",
              "lineno": 234,
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "extract_imports_from_tokens",
              "lineno": 244,
              "args": [
                "self",
                "tokens"
              ]
            },
            {
              "name": "extract_functions_from_tokens",
              "lineno": 274,
              "args": [
                "self",
                "tokens"
              ]
            },
            {
              "name": "extract_classes_from_tokens",
              "lineno": 294,
              "args": [
                "self",
                "tokens"
              ]
            },
            {
              "name": "extract_variables_from_tokens",
              "lineno": 313,
              "args": [
                "self",
                "tokens"
              ]
            },
            {
              "name": "identify_syntax_issues",
              "lineno": 330,
              "args": [
                "self",
                "tokens"
              ]
            },
            {
              "name": "is_indented",
              "lineno": 360,
              "args": [
                "self",
                "token"
              ]
            },
            {
              "name": "extract_imports_from_regex",
              "lineno": 364,
              "args": [
                "self",
                "content"
              ]
            },
            {
              "name": "extract_functions_from_regex",
              "lineno": 393,
              "args": [
                "self",
                "content"
              ]
            },
            {
              "name": "extract_classes_from_regex",
              "lineno": 414,
              "args": [
                "self",
                "content"
              ]
            },
            {
              "name": "extract_variables_from_regex",
              "lineno": 434,
              "args": [
                "self",
                "content"
              ]
            },
            {
              "name": "identify_syntax_issues_regex",
              "lineno": 452,
              "args": [
                "self",
                "content"
              ]
            },
            {
              "name": "estimate_complexity_regex",
              "lineno": 478,
              "args": [
                "self",
                "content"
              ]
            },
            {
              "name": "extract_decorator",
              "lineno": 492,
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "extract_base",
              "lineno": 501,
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "extract_class_methods",
              "lineno": 507,
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "calculate_function_complexity",
              "lineno": 520,
              "args": [
                "self",
                "node"
              ]
            }
          ]
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "ast",
          "asname": null,
          "lineno": 7
        },
        {
          "type": "import",
          "module": "tokenize",
          "asname": null,
          "lineno": 8
        },
        {
          "type": "import",
          "module": "io",
          "asname": null,
          "lineno": 9
        },
        {
          "type": "import",
          "module": "re",
          "asname": null,
          "lineno": 10
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null,
          "lineno": 11
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "asname": null,
          "lineno": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null,
          "lineno": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "asname": null,
          "lineno": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null,
          "lineno": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "asname": null,
          "lineno": 12
        }
      ],
      "variables": [
        {
          "name": "interpreter",
          "lineno": 534,
          "value_type": "Call"
        },
        {
          "name": "test_files",
          "lineno": 537,
          "value_type": "List"
        },
        {
          "name": "lines",
          "lineno": 120,
          "value_type": "Call"
        },
        {
          "name": "lines",
          "lineno": 139,
          "value_type": "Call"
        },
        {
          "name": "fixed_lines",
          "lineno": 140,
          "value_type": "List"
        },
        {
          "name": "prev_line",
          "lineno": 158,
          "value_type": "Call"
        },
        {
          "name": "imports",
          "lineno": 170,
          "value_type": "List"
        },
        {
          "name": "functions",
          "lineno": 193,
          "value_type": "List"
        },
        {
          "name": "classes",
          "lineno": 208,
          "value_type": "List"
        },
        {
          "name": "variables",
          "lineno": 222,
          "value_type": "List"
        },
        {
          "name": "complexity",
          "lineno": 236,
          "value_type": "Dict"
        },
        {
          "name": "imports",
          "lineno": 246,
          "value_type": "List"
        },
        {
          "name": "i",
          "lineno": 247,
          "value_type": "Constant"
        },
        {
          "name": "functions",
          "lineno": 276,
          "value_type": "List"
        },
        {
          "name": "i",
          "lineno": 277,
          "value_type": "Constant"
        },
        {
          "name": "classes",
          "lineno": 296,
          "value_type": "List"
        },
        {
          "name": "i",
          "lineno": 297,
          "value_type": "Constant"
        },
        {
          "name": "variables",
          "lineno": 315,
          "value_type": "List"
        },
        {
          "name": "i",
          "lineno": 316,
          "value_type": "Constant"
        },
        {
          "name": "issues",
          "lineno": 332,
          "value_type": "List"
        },
        {
          "name": "i",
          "lineno": 333,
          "value_type": "Constant"
        },
        {
          "name": "imports",
          "lineno": 366,
          "value_type": "List"
        },
        {
          "name": "lines",
          "lineno": 367,
          "value_type": "Call"
        },
        {
          "name": "functions",
          "lineno": 395,
          "value_type": "List"
        },
        {
          "name": "lines",
          "lineno": 396,
          "value_type": "Call"
        },
        {
          "name": "classes",
          "lineno": 416,
          "value_type": "List"
        },
        {
          "name": "lines",
          "lineno": 417,
          "value_type": "Call"
        },
        {
          "name": "variables",
          "lineno": 436,
          "value_type": "List"
        },
        {
          "name": "lines",
          "lineno": 437,
          "value_type": "Call"
        },
        {
          "name": "issues",
          "lineno": 454,
          "value_type": "List"
        },
        {
          "name": "lines",
          "lineno": 455,
          "value_type": "Call"
        },
        {
          "name": "complexity",
          "lineno": 480,
          "value_type": "Dict"
        },
        {
          "name": "lines",
          "lineno": 481,
          "value_type": "Call"
        },
        {
          "name": "methods",
          "lineno": 509,
          "value_type": "List"
        },
        {
          "name": "complexity",
          "lineno": 522,
          "value_type": "Constant"
        },
        {
          "name": "tree",
          "lineno": 56,
          "value_type": "Call"
        },
        {
          "name": "tree",
          "lineno": 72,
          "value_type": "Call"
        },
        {
          "name": "tokens",
          "lineno": 98,
          "value_type": "Call"
        },
        {
          "name": "token",
          "lineno": 249,
          "value_type": "Subscript"
        },
        {
          "name": "token",
          "lineno": 279,
          "value_type": "Subscript"
        },
        {
          "name": "token",
          "lineno": 299,
          "value_type": "Subscript"
        },
        {
          "name": "token",
          "lineno": 318,
          "value_type": "Subscript"
        },
        {
          "name": "token",
          "lineno": 335,
          "value_type": "Subscript"
        },
        {
          "name": "line",
          "lineno": 370,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 399,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 420,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 440,
          "value_type": "Call"
        },
        {
          "name": "match",
          "lineno": 442,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 484,
          "value_type": "Call"
        },
        {
          "name": "interpretation",
          "lineno": 546,
          "value_type": "Call"
        },
        {
          "name": "content",
          "lineno": 46,
          "value_type": "Call"
        },
        {
          "name": "fixed_content",
          "lineno": 63,
          "value_type": "Call"
        },
        {
          "name": "match",
          "lineno": 372,
          "value_type": "Call"
        },
        {
          "name": "match",
          "lineno": 401,
          "value_type": "Call"
        },
        {
          "name": "match",
          "lineno": 422,
          "value_type": "Call"
        },
        {
          "name": "next_line",
          "lineno": 468,
          "value_type": "Call"
        },
        {
          "name": "interp",
          "lineno": 550,
          "value_type": "Subscript"
        },
        {
          "name": "line",
          "lineno": 147,
          "value_type": "BinOp"
        },
        {
          "name": "next_token",
          "lineno": 340,
          "value_type": "Subscript"
        },
        {
          "name": "match",
          "lineno": 381,
          "value_type": "Call"
        },
        {
          "name": "module",
          "lineno": 262,
          "value_type": "IfExp"
        }
      ],
      "lines_of_code": 562,
      "content_length": 22606,
      "ast_nodes": 3398
    },
    "persisted_model": {
      "error": "No persisted model found",
      "content": ""
    },
    "pattern_match": null,
    "is_new_artifact": true,
    "recommendations": [
      "New artifact with unknown pattern - may need new model definition"
    ]
  },
  {
    "file_path": "git_enhanced_ast_fixer.py",
    "has_git_history": false,
    "current_model": {
      "type": "ast_parsed",
      "functions": [
        {
          "name": "main",
          "lineno": 456,
          "args": [],
          "decorators": []
        },
        {
          "name": "__init__",
          "lineno": 20,
          "args": [
            "self"
          ],
          "decorators": []
        },
        {
          "name": "fix_file_with_git_history",
          "lineno": 24,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "find_previous_working_version",
          "lineno": 66,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "restore_to_temp",
          "lineno": 110,
          "args": [
            "self",
            "file_path",
            "commit_hash"
          ],
          "decorators": []
        },
        {
          "name": "parse_previous_version",
          "lineno": 138,
          "args": [
            "self",
            "temp_file"
          ],
          "decorators": []
        },
        {
          "name": "extract_functions_from_ast",
          "lineno": 161,
          "args": [
            "self",
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "extract_classes_from_ast",
          "lineno": 175,
          "args": [
            "self",
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "extract_imports_from_ast",
          "lineno": 189,
          "args": [
            "self",
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "extract_variables_from_ast",
          "lineno": 212,
          "args": [
            "self",
            "tree"
          ],
          "decorators": []
        },
        {
          "name": "extract_decorator",
          "lineno": 226,
          "args": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "extract_base",
          "lineno": 235,
          "args": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "extract_class_methods",
          "lineno": 241,
          "args": [
            "self",
            "node"
          ],
          "decorators": []
        },
        {
          "name": "is_valid_python_file",
          "lineno": 254,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "reconstruct_with_guidance",
          "lineno": 264,
          "args": [
            "self",
            "file_path",
            "current_interpretation",
            "previous_ast"
          ],
          "decorators": []
        },
        {
          "name": "apply_guided_reconstruction",
          "lineno": 282,
          "args": [
            "self",
            "current_content",
            "previous_content",
            "current_interpretation",
            "previous_ast"
          ],
          "decorators": []
        },
        {
          "name": "apply_structure_based_fixes",
          "lineno": 318,
          "args": [
            "self",
            "current_content",
            "previous_ast",
            "current_interpretation"
          ],
          "decorators": []
        },
        {
          "name": "fix_import_based_on_previous",
          "lineno": 356,
          "args": [
            "self",
            "line",
            "previous_imports"
          ],
          "decorators": []
        },
        {
          "name": "fix_function_based_on_previous",
          "lineno": 369,
          "args": [
            "self",
            "line",
            "previous_functions"
          ],
          "decorators": []
        },
        {
          "name": "fix_class_based_on_previous",
          "lineno": 389,
          "args": [
            "self",
            "line",
            "previous_classes"
          ],
          "decorators": []
        },
        {
          "name": "fix_indentation_based_on_previous",
          "lineno": 410,
          "args": [
            "self",
            "line",
            "line_num",
            "all_lines",
            "previous_ast"
          ],
          "decorators": []
        },
        {
          "name": "is_in_function_context",
          "lineno": 420,
          "args": [
            "self",
            "line_num",
            "all_lines"
          ],
          "decorators": []
        },
        {
          "name": "fix_without_git_history",
          "lineno": 430,
          "args": [
            "self",
            "file_path"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_temp_file",
          "lineno": 439,
          "args": [
            "self",
            "temp_file"
          ],
          "decorators": []
        },
        {
          "name": "cleanup_temp_dir",
          "lineno": 447,
          "args": [
            "self"
          ],
          "decorators": []
        }
      ],
      "classes": [
        {
          "name": "GitEnhancedASTFixer",
          "lineno": 17,
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "lineno": 20,
              "args": [
                "self"
              ]
            },
            {
              "name": "fix_file_with_git_history",
              "lineno": 24,
              "args": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "find_previous_working_version",
              "lineno": 66,
              "args": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "restore_to_temp",
              "lineno": 110,
              "args": [
                "self",
                "file_path",
                "commit_hash"
              ]
            },
            {
              "name": "parse_previous_version",
              "lineno": 138,
              "args": [
                "self",
                "temp_file"
              ]
            },
            {
              "name": "extract_functions_from_ast",
              "lineno": 161,
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "extract_classes_from_ast",
              "lineno": 175,
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "extract_imports_from_ast",
              "lineno": 189,
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "extract_variables_from_ast",
              "lineno": 212,
              "args": [
                "self",
                "tree"
              ]
            },
            {
              "name": "extract_decorator",
              "lineno": 226,
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "extract_base",
              "lineno": 235,
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "extract_class_methods",
              "lineno": 241,
              "args": [
                "self",
                "node"
              ]
            },
            {
              "name": "is_valid_python_file",
              "lineno": 254,
              "args": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "reconstruct_with_guidance",
              "lineno": 264,
              "args": [
                "self",
                "file_path",
                "current_interpretation",
                "previous_ast"
              ]
            },
            {
              "name": "apply_guided_reconstruction",
              "lineno": 282,
              "args": [
                "self",
                "current_content",
                "previous_content",
                "current_interpretation",
                "previous_ast"
              ]
            },
            {
              "name": "apply_structure_based_fixes",
              "lineno": 318,
              "args": [
                "self",
                "current_content",
                "previous_ast",
                "current_interpretation"
              ]
            },
            {
              "name": "fix_import_based_on_previous",
              "lineno": 356,
              "args": [
                "self",
                "line",
                "previous_imports"
              ]
            },
            {
              "name": "fix_function_based_on_previous",
              "lineno": 369,
              "args": [
                "self",
                "line",
                "previous_functions"
              ]
            },
            {
              "name": "fix_class_based_on_previous",
              "lineno": 389,
              "args": [
                "self",
                "line",
                "previous_classes"
              ]
            },
            {
              "name": "fix_indentation_based_on_previous",
              "lineno": 410,
              "args": [
                "self",
                "line",
                "line_num",
                "all_lines",
                "previous_ast"
              ]
            },
            {
              "name": "is_in_function_context",
              "lineno": 420,
              "args": [
                "self",
                "line_num",
                "all_lines"
              ]
            },
            {
              "name": "fix_without_git_history",
              "lineno": 430,
              "args": [
                "self",
                "file_path"
              ]
            },
            {
              "name": "cleanup_temp_file",
              "lineno": 439,
              "args": [
                "self",
                "temp_file"
              ]
            },
            {
              "name": "cleanup_temp_dir",
              "lineno": 447,
              "args": [
                "self"
              ]
            }
          ]
        }
      ],
      "imports": [
        {
          "type": "import",
          "module": "subprocess",
          "asname": null,
          "lineno": 7
        },
        {
          "type": "import",
          "module": "tempfile",
          "asname": null,
          "lineno": 8
        },
        {
          "type": "import",
          "module": "os",
          "asname": null,
          "lineno": 9
        },
        {
          "type": "import",
          "module": "ast",
          "asname": null,
          "lineno": 10
        },
        {
          "type": "import",
          "module": "shutil",
          "asname": null,
          "lineno": 11
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null,
          "lineno": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "asname": null,
          "lineno": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null,
          "lineno": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Any",
          "asname": null,
          "lineno": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Optional",
          "asname": null,
          "lineno": 13
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Tuple",
          "asname": null,
          "lineno": 13
        },
        {
          "type": "from_import",
          "module": "broken_python_interpreter",
          "name": "BrokenPythonInterpreter",
          "asname": null,
          "lineno": 14
        },
        {
          "type": "import",
          "module": "re",
          "asname": null,
          "lineno": 372
        },
        {
          "type": "import",
          "module": "re",
          "asname": null,
          "lineno": 392
        },
        {
          "type": "from_import",
          "module": "semantic_reconstructor",
          "name": "SemanticReconstructor",
          "asname": null,
          "lineno": 435
        },
        {
          "type": "import",
          "module": "shutil",
          "asname": null,
          "lineno": 475
        }
      ],
      "variables": [
        {
          "name": "fixer",
          "lineno": 461,
          "value_type": "Call"
        },
        {
          "name": "test_files",
          "lineno": 464,
          "value_type": "List"
        },
        {
          "name": "previous_working",
          "lineno": 29,
          "value_type": "Call"
        },
        {
          "name": "temp_file",
          "lineno": 37,
          "value_type": "Call"
        },
        {
          "name": "previous_ast",
          "lineno": 43,
          "value_type": "Call"
        },
        {
          "name": "current_interpretation",
          "lineno": 54,
          "value_type": "Call"
        },
        {
          "name": "reconstructed_content",
          "lineno": 57,
          "value_type": "Call"
        },
        {
          "name": "functions",
          "lineno": 163,
          "value_type": "List"
        },
        {
          "name": "classes",
          "lineno": 177,
          "value_type": "List"
        },
        {
          "name": "imports",
          "lineno": 191,
          "value_type": "List"
        },
        {
          "name": "variables",
          "lineno": 214,
          "value_type": "List"
        },
        {
          "name": "methods",
          "lineno": 243,
          "value_type": "List"
        },
        {
          "name": "previous_content",
          "lineno": 273,
          "value_type": "Subscript"
        },
        {
          "name": "reconstructed",
          "lineno": 276,
          "value_type": "Call"
        },
        {
          "name": "reconstructed_lines",
          "lineno": 287,
          "value_type": "Call"
        },
        {
          "name": "current_functions",
          "lineno": 290,
          "value_type": "Call"
        },
        {
          "name": "current_classes",
          "lineno": 291,
          "value_type": "Call"
        },
        {
          "name": "current_imports",
          "lineno": 292,
          "value_type": "Call"
        },
        {
          "name": "previous_functions",
          "lineno": 295,
          "value_type": "Call"
        },
        {
          "name": "previous_classes",
          "lineno": 296,
          "value_type": "Call"
        },
        {
          "name": "previous_imports",
          "lineno": 297,
          "value_type": "Call"
        },
        {
          "name": "fixed_content",
          "lineno": 312,
          "value_type": "Call"
        },
        {
          "name": "lines",
          "lineno": 321,
          "value_type": "Call"
        },
        {
          "name": "fixed_lines",
          "lineno": 322,
          "value_type": "List"
        },
        {
          "name": "previous_imports",
          "lineno": 325,
          "value_type": "ListComp"
        },
        {
          "name": "previous_functions",
          "lineno": 328,
          "value_type": "DictComp"
        },
        {
          "name": "previous_classes",
          "lineno": 331,
          "value_type": "DictComp"
        },
        {
          "name": "match",
          "lineno": 373,
          "value_type": "Call"
        },
        {
          "name": "match",
          "lineno": 393,
          "value_type": "Call"
        },
        {
          "name": "reconstructor",
          "lineno": 436,
          "value_type": "Call"
        },
        {
          "name": "result",
          "lineno": 70,
          "value_type": "Call"
        },
        {
          "name": "commits",
          "lineno": 79,
          "value_type": "Call"
        },
        {
          "name": "result",
          "lineno": 118,
          "value_type": "Call"
        },
        {
          "name": "temp_file",
          "lineno": 128,
          "value_type": "Call"
        },
        {
          "name": "tree",
          "lineno": 145,
          "value_type": "Call"
        },
        {
          "name": "current_content",
          "lineno": 270,
          "value_type": "Call"
        },
        {
          "name": "stripped",
          "lineno": 334,
          "value_type": "Call"
        },
        {
          "name": "func_name",
          "lineno": 375,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 385,
          "value_type": "BinOp"
        },
        {
          "name": "class_name",
          "lineno": 395,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 406,
          "value_type": "BinOp"
        },
        {
          "name": "line",
          "lineno": 423,
          "value_type": "Call"
        },
        {
          "name": "backup_path",
          "lineno": 473,
          "value_type": "JoinedStr"
        },
        {
          "name": "fixed_content",
          "lineno": 480,
          "value_type": "Call"
        },
        {
          "name": "commit_hash",
          "lineno": 86,
          "value_type": "Subscript"
        },
        {
          "name": "temp_file",
          "lineno": 89,
          "value_type": "Call"
        },
        {
          "name": "content",
          "lineno": 142,
          "value_type": "Call"
        },
        {
          "name": "content",
          "lineno": 258,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 338,
          "value_type": "Call"
        },
        {
          "name": "prev_func",
          "lineno": 379,
          "value_type": "Subscript"
        },
        {
          "name": "args",
          "lineno": 380,
          "value_type": "Call"
        },
        {
          "name": "prev_class",
          "lineno": 399,
          "value_type": "Subscript"
        },
        {
          "name": "bases",
          "lineno": 400,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 342,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 346,
          "value_type": "Call"
        },
        {
          "name": "line",
          "lineno": 350,
          "value_type": "Call"
        }
      ],
      "lines_of_code": 505,
      "content_length": 20831,
      "ast_nodes": 2697
    },
    "persisted_model": {
      "error": "No persisted model found",
      "content": ""
    },
    "pattern_match": null,
    "is_new_artifact": true,
    "recommendations": [
      "New artifact with unknown pattern - may need new model definition"
    ]
  },
  {
    "file_path": ".cursor/plugins/rule-compliance-checker.py",
    "has_git_history": false,
    "current_model": {
      "type": "interpreted",
      "functions": [
        {
          "name": "__init__",
          "lineno": 20,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "check_file_compliance",
          "lineno": 25,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "check_mdc_compliance",
          "lineno": 50,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "get_rule_summary",
          "lineno": 75,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "validate_deterministic_editing",
          "lineno": 99,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "provide_immediate_feedback",
          "lineno": 113,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        },
        {
          "name": "main",
          "lineno": 140,
          "args": "unknown",
          "decorators": [],
          "docstring": null,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "RuleComplianceChecker",
          "lineno": 17,
          "bases": [],
          "methods": [],
          "docstring": null
        }
      ],
      "imports": [
        {
          "type": "from_import",
          "module": "typing",
          "name": "List",
          "asname": null,
          "lineno": 3
        },
        {
          "type": "import",
          "module": "sys",
          "asname": null,
          "lineno": 9
        },
        {
          "type": "import",
          "module": "json",
          "asname": null,
          "lineno": 10
        },
        {
          "type": "import",
          "module": "subprocess",
          "asname": null,
          "lineno": 11
        },
        {
          "type": "from_import",
          "module": "pathlib",
          "name": "Path",
          "asname": null,
          "lineno": 12
        },
        {
          "type": "from_import",
          "module": "typing",
          "name": "Dict",
          "asname": null,
          "lineno": 13
        },
        {
          "type": "import",
          "module": "re",
          "asname": null,
          "lineno": 14
        },
        {
          "type": "import",
          "module": "yaml",
          "asname": null,
          "lineno": 87
        },
        {
          "type": "import",
          "module": "argparse",
          "asname": null,
          "lineno": 142
        }
      ],
      "lines_of_code": 167,
      "content_length": 5483,
      "syntax_errors": []
    },
    "persisted_model": {
      "domain": "rule_compliance",
      "patterns": [
        "scripts/rule-compliance-check.sh",
        "scripts/mdc-linter.py",
        ".cursor/plugins/rule-compliance-checker.py"
      ],
      "content_indicators": [
        "rule-compliance",
        "mdc-linter",
        "deterministic-editing",
        "cursor-plugin"
      ],
      "linter": "shellcheck",
      "validator": "pytest",
      "formatter": "black"
    },
    "pattern_match": null,
    "is_new_artifact": true,
    "recommendations": [
      "New artifact with unknown pattern - may need new model definition"
    ]
  }
]