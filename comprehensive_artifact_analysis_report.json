{
  "summary": {
    "total_artifacts": 525,
    "traced_artifacts": 318,
    "untraced_artifacts": 207,
    "coverage_percentage": 60.57142857142858
  },
  "domain_analysis": {
    "domain_counts": {
      "python": 182,
      "model_driven_projection": 28,
      "package_management": 12,
      "cloudformation": 6,
      "healthcare_cdc": 7,
      "ghostbusters_gcp": 1,
      "ghostbusters": 46,
      "ide_performance": 2,
      "streamlit": 6,
      "security_first": 11,
      "mdc_generator": 2,
      "mcp_integration": 1,
      "rule_compliance": 2,
      "secure_shell": 10,
      "go": 2
    },
    "missing_domains": [],
    "artifacts_by_domain": {
      "python": [
        {
          "path": "projected_verify_ide_linting_hypothesis.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 11229,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "time",
                "asname": null,
                "lineno": 5
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 279,
                "args": [],
                "decorators": [],
                "docstring": "Main function to run the hypothesis verification."
              },
              {
                "name": "__init__",
                "lineno": 39,
                "args": [
                  "self",
                  "project_root"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "collect_data_points",
                "lineno": 43,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Collect data points from different sources to test the hypothesis."
              },
              {
                "name": "_get_command_line_data",
                "lineno": 64,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get data from command line linters."
              },
              {
                "name": "_get_ide_cache_data",
                "lineno": 127,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get data from IDE cache files."
              },
              {
                "name": "_get_linting_process_data",
                "lineno": 157,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get data from running linting processes."
              },
              {
                "name": "_analyze_data_fragmentation",
                "lineno": 210,
                "args": [
                  "self",
                  "data_points"
                ],
                "decorators": [],
                "docstring": "Analyze if the data is fragmented and unreliable."
              },
              {
                "name": "generate_verification_report",
                "lineno": 256,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate a comprehensive verification report."
              }
            ],
            "classes": [
              {
                "name": "LintingDataPoint",
                "lineno": 26,
                "bases": [],
                "methods": [],
                "docstring": "A single data point for linting verification."
              },
              {
                "name": "IDELintingHypothesisVerifier",
                "lineno": 36,
                "bases": [],
                "methods": [
                  "__init__",
                  "collect_data_points",
                  "_get_command_line_data",
                  "_get_ide_cache_data",
                  "_get_linting_process_data",
                  "_analyze_data_fragmentation",
                  "generate_verification_report"
                ],
                "docstring": "Verify the hypothesis that IDE linting data is fragmented and unreliable."
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 10,
                "value_type": "Dict"
              },
              {
                "name": "AWS_CONFIG",
                "lineno": 18,
                "value_type": "Dict"
              },
              {
                "name": "verifier",
                "lineno": 281,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 285,
                "value_type": "Call"
              },
              {
                "name": "verification_data",
                "lineno": 45,
                "value_type": "Dict"
              },
              {
                "name": "cl_data",
                "lineno": 54,
                "value_type": "Call"
              },
              {
                "name": "ide_data",
                "lineno": 56,
                "value_type": "Call"
              },
              {
                "name": "process_data",
                "lineno": 58,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 60,
                "value_type": "Call"
              },
              {
                "name": "data_points",
                "lineno": 66,
                "value_type": "List"
              },
              {
                "name": "timestamp",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "data_points",
                "lineno": 129,
                "value_type": "List"
              },
              {
                "name": "timestamp",
                "lineno": 130,
                "value_type": "Call"
              },
              {
                "name": "mypy_cache",
                "lineno": 131,
                "value_type": "BinOp"
              },
              {
                "name": "ruff_cache",
                "lineno": 143,
                "value_type": "BinOp"
              },
              {
                "name": "data_points",
                "lineno": 159,
                "value_type": "List"
              },
              {
                "name": "timestamp",
                "lineno": 160,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 215,
                "value_type": "Dict"
              },
              {
                "name": "unique_sources",
                "lineno": 231,
                "value_type": "Call"
              },
              {
                "name": "unique_linters",
                "lineno": 232,
                "value_type": "Call"
              },
              {
                "name": "total_points",
                "lineno": 233,
                "value_type": "Call"
              },
              {
                "name": "error_counts",
                "lineno": 238,
                "value_type": "ListComp"
              },
              {
                "name": "data",
                "lineno": 258,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 259,
                "value_type": "JoinedStr"
              },
              {
                "name": "result",
                "lineno": 69,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 97,
                "value_type": "Call"
              },
              {
                "name": "error_count",
                "lineno": 103,
                "value_type": "Call"
              },
              {
                "name": "cache_files",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "cache_files",
                "lineno": 145,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 162,
                "value_type": "Call"
              },
              {
                "name": "variance",
                "lineno": 240,
                "value_type": "IfExp"
              },
              {
                "name": "error_count",
                "lineno": 76,
                "value_type": "Call"
              },
              {
                "name": "processes",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "flake8_processes",
                "lineno": 170,
                "value_type": "Call"
              },
              {
                "name": "mypy_processes",
                "lineno": 171,
                "value_type": "Call"
              },
              {
                "name": "ruff_processes",
                "lineno": 172,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 291,
            "code_lines": 270
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "cloudbuild_github_rest_api.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 5648,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "run_gcloud_auth",
                "lineno": 13,
                "args": [],
                "decorators": [],
                "docstring": "Get access token for REST API calls."
              },
              {
                "name": "make_rest_call",
                "lineno": 24,
                "args": [
                  "method",
                  "url",
                  "data",
                  "token"
                ],
                "decorators": [],
                "docstring": "Make REST API call to Google Cloud."
              },
              {
                "name": "create_github_connection",
                "lineno": 64,
                "args": [
                  "token"
                ],
                "decorators": [],
                "docstring": "Create GitHub connection using REST API."
              },
              {
                "name": "create_repository",
                "lineno": 89,
                "args": [
                  "connection_name",
                  "token"
                ],
                "decorators": [],
                "docstring": "Create repository link using REST API."
              },
              {
                "name": "create_trigger",
                "lineno": 103,
                "args": [
                  "repository_name",
                  "token"
                ],
                "decorators": [],
                "docstring": "Create build trigger using REST API."
              },
              {
                "name": "main",
                "lineno": 140,
                "args": [],
                "decorators": [],
                "docstring": "Main setup function using REST API."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 15,
                "value_type": "Call"
              },
              {
                "name": "cmd",
                "lineno": 34,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "url",
                "lineno": 69,
                "value_type": "Constant"
              },
              {
                "name": "data",
                "lineno": 71,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 79,
                "value_type": "Call"
              },
              {
                "name": "url",
                "lineno": 94,
                "value_type": "Constant"
              },
              {
                "name": "data",
                "lineno": 96,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 98,
                "value_type": "Call"
              },
              {
                "name": "url",
                "lineno": 108,
                "value_type": "Constant"
              },
              {
                "name": "data",
                "lineno": 110,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 135,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 32,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 150,
                "value_type": "Call"
              },
              {
                "name": "connection_name",
                "lineno": 154,
                "value_type": "Call"
              },
              {
                "name": "repository_name",
                "lineno": 157,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 68,
                "content": "Include connection ID in the URL"
              },
              {
                "line": 93,
                "content": "Use full URL for repository creation"
              },
              {
                "line": 107,
                "content": "Use v1 endpoint with correct format for 2nd-gen connections"
              },
              {
                "line": 149,
                "content": "Get access token"
              },
              {
                "line": 153,
                "content": "Create GitHub connection"
              },
              {
                "line": 156,
                "content": "Create repository link"
              },
              {
                "line": 159,
                "content": "Create trigger"
              }
            ],
            "total_lines": 187,
            "code_lines": 141
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "proven_ASTAnalyzer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1055,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "dataclasses",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "logging",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 20,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "analyze_file",
                "lineno": 24,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze file using AST with quality rules"
              },
              {
                "name": "detect_violations",
                "lineno": 30,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Detect all quality violations"
              },
              {
                "name": "generate_fixes",
                "lineno": 36,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate fixes for all violations"
              }
            ],
            "classes": [
              {
                "name": "ASTAnalyzer",
                "lineno": 15,
                "bases": [],
                "methods": [
                  "__init__",
                  "analyze_file",
                  "detect_violations",
                  "generate_fixes"
                ],
                "docstring": "AST-based code analyzer with quality rule integration"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 21,
                "content": "TODO: Initialize based on requirements: ['AST parsing', 'rule integration', 'violation detection', 'syntactic boundary awareness', 'performance optimization']"
              },
              {
                "line": 28,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 34,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 40,
                "content": "TODO: Implement based on requirements: []"
              }
            ],
            "total_lines": 41,
            "code_lines": 28
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_remaining_type_issues.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 6566,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "fix_return_value_issues",
                "lineno": 12,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Fix functions that return values when they shouldn't"
              },
              {
                "name": "fix_missing_library_stubs",
                "lineno": 106,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Add type ignore comments for missing library stubs"
              },
              {
                "name": "main",
                "lineno": 142,
                "args": [],
                "decorators": [],
                "docstring": "Fix remaining type annotation issues"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "python_files",
                "lineno": 146,
                "value_type": "List"
              },
              {
                "name": "return_fixes",
                "lineno": 153,
                "value_type": "Constant"
              },
              {
                "name": "stub_fixes",
                "lineno": 154,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "original_content",
                "lineno": 18,
                "value_type": "Name"
              },
              {
                "name": "lines",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 20,
                "value_type": "List"
              },
              {
                "name": "i",
                "lineno": 22,
                "value_type": "Constant"
              },
              {
                "name": "fixed_content",
                "lineno": 92,
                "value_type": "Call"
              },
              {
                "name": "original_content",
                "lineno": 112,
                "value_type": "Name"
              },
              {
                "name": "lines",
                "lineno": 113,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 114,
                "value_type": "List"
              },
              {
                "name": "fixed_content",
                "lineno": 128,
                "value_type": "Call"
              },
              {
                "name": "error_lines",
                "lineno": 178,
                "value_type": "ListComp"
              },
              {
                "name": "error_count",
                "lineno": 179,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 24,
                "value_type": "Subscript"
              },
              {
                "name": "content",
                "lineno": 110,
                "value_type": "Call"
              },
              {
                "name": "func_body",
                "lineno": 29,
                "value_type": "List"
              },
              {
                "name": "indent_level",
                "lineno": 30,
                "value_type": "BinOp"
              },
              {
                "name": "j",
                "lineno": 33,
                "value_type": "BinOp"
              },
              {
                "name": "has_return_value",
                "lineno": 49,
                "value_type": "Constant"
              },
              {
                "name": "line",
                "lineno": 124,
                "value_type": "BinOp"
              },
              {
                "name": "next_line",
                "lineno": 35,
                "value_type": "Subscript"
              },
              {
                "name": "next_indent",
                "lineno": 41,
                "value_type": "BinOp"
              },
              {
                "name": "line",
                "lineno": 62,
                "value_type": "Call"
              },
              {
                "name": "import_added",
                "lineno": 66,
                "value_type": "Constant"
              },
              {
                "name": "has_return_value",
                "lineno": 57,
                "value_type": "Constant"
              },
              {
                "name": "import_added",
                "lineno": 79,
                "value_type": "Constant"
              },
              {
                "name": "import_added",
                "lineno": 72,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 26,
                "content": "Look for function definitions that return values but shouldn't"
              },
              {
                "line": 28,
                "content": "Find the function body and check for return statements"
              },
              {
                "line": 32,
                "content": "Collect function body"
              },
              {
                "line": 48,
                "content": "Check if function has return statements that return values"
              },
              {
                "line": 52,
                "content": "Check if it's not just \"return\" or \"return None\""
              },
              {
                "line": 61,
                "content": "Change return type from None to Any"
              },
              {
                "line": 63,
                "content": "Add import if needed"
              },
              {
                "line": 65,
                "content": "Find import section and add typing import"
              },
              {
                "line": 69,
                "content": "Add Any to existing typing import"
              },
              {
                "line": 77,
                "content": "Insert new typing import before this line"
              },
              {
                "line": 83,
                "content": "Add at the beginning"
              },
              {
                "line": 117,
                "content": "Add type ignore for yaml import"
              },
              {
                "line": 145,
                "content": "Get all Python files in src/"
              },
              {
                "line": 165,
                "content": "Test MyPy again"
              },
              {
                "line": 167,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              }
            ],
            "total_lines": 191,
            "code_lines": 136
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_flake8_issues.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 7800,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "fix_unused_imports",
                "lineno": 13,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Remove unused imports"
              },
              {
                "name": "fix_f_strings",
                "lineno": 104,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Fix f-strings without placeholders"
              },
              {
                "name": "fix_unused_variables",
                "lineno": 141,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Fix unused variables by adding underscore prefix"
              },
              {
                "name": "main",
                "lineno": 196,
                "args": [],
                "decorators": [],
                "docstring": "Main function to fix Flake8 issues"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "src_path",
                "lineno": 202,
                "value_type": "Call"
              },
              {
                "name": "python_files",
                "lineno": 203,
                "value_type": "Call"
              },
              {
                "name": "total_fixed",
                "lineno": 205,
                "value_type": "Constant"
              },
              {
                "name": "lines",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 20,
                "value_type": "List"
              },
              {
                "name": "changes_made",
                "lineno": 21,
                "value_type": "Constant"
              },
              {
                "name": "i",
                "lineno": 37,
                "value_type": "Constant"
              },
              {
                "name": "lines",
                "lineno": 110,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 111,
                "value_type": "List"
              },
              {
                "name": "changes_made",
                "lineno": 112,
                "value_type": "Constant"
              },
              {
                "name": "lines",
                "lineno": 147,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 148,
                "value_type": "List"
              },
              {
                "name": "changes_made",
                "lineno": 149,
                "value_type": "Constant"
              },
              {
                "name": "file_fixed",
                "lineno": 208,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 234,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 25,
                "value_type": "Call"
              },
              {
                "name": "used_names",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 39,
                "value_type": "Subscript"
              },
              {
                "name": "fixed_content",
                "lineno": 92,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 108,
                "value_type": "Call"
              },
              {
                "name": "fixed_content",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 145,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 153,
                "value_type": "Call"
              },
              {
                "name": "used_names",
                "lineno": 154,
                "value_type": "Call"
              },
              {
                "name": "fixed_content",
                "lineno": 184,
                "value_type": "Call"
              },
              {
                "name": "file_fixed",
                "lineno": 212,
                "value_type": "Constant"
              },
              {
                "name": "file_fixed",
                "lineno": 216,
                "value_type": "Constant"
              },
              {
                "name": "file_fixed",
                "lineno": 220,
                "value_type": "Constant"
              },
              {
                "name": "errors",
                "lineno": 241,
                "value_type": "ListComp"
              },
              {
                "name": "match",
                "lineno": 44,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 165,
                "value_type": "Call"
              },
              {
                "name": "module",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "import_list",
                "lineno": 50,
                "value_type": "List"
              },
              {
                "name": "match",
                "lineno": 76,
                "value_type": "Call"
              },
              {
                "name": "new_line",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "changes_made",
                "lineno": 122,
                "value_type": "Constant"
              },
              {
                "name": "var_name",
                "lineno": 168,
                "value_type": "Call"
              },
              {
                "name": "imp",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "new_line",
                "lineno": 65,
                "value_type": "JoinedStr"
              },
              {
                "name": "changes_made",
                "lineno": 69,
                "value_type": "Constant"
              },
              {
                "name": "module",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "new_line",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "changes_made",
                "lineno": 175,
                "value_type": "Constant"
              },
              {
                "name": "name",
                "lineno": 54,
                "value_type": "Call"
              },
              {
                "name": "name",
                "lineno": 56,
                "value_type": "Call"
              },
              {
                "name": "changes_made",
                "lineno": 62,
                "value_type": "Constant"
              },
              {
                "name": "changes_made",
                "lineno": 80,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 23,
                "content": "Parse the file to find used names"
              },
              {
                "line": 34,
                "content": "If parsing fails, skip this file"
              },
              {
                "line": 41,
                "content": "Check for import lines"
              },
              {
                "line": 43,
                "content": "Parse the import"
              },
              {
                "line": 49,
                "content": "Parse individual imports"
              },
              {
                "line": 58,
                "content": "Check if this import is actually used"
              },
              {
                "line": 68,
                "content": "All imports unused, skip the line"
              },
              {
                "line": 75,
                "content": "Simple import"
              },
              {
                "line": 115,
                "content": "Find f-strings without placeholders"
              },
              {
                "line": 117,
                "content": "Check if there are any placeholders"
              },
              {
                "line": 119,
                "content": "Replace f-string with regular string"
              },
              {
                "line": 151,
                "content": "Parse to find used variables"
              },
              {
                "line": 163,
                "content": "Look for variable assignments"
              },
              {
                "line": 170,
                "content": "Check if variable is used"
              },
              {
                "line": 172,
                "content": "Prefix with underscore to indicate unused"
              },
              {
                "line": 201,
                "content": "Find all Python files"
              },
              {
                "line": 210,
                "content": "Fix unused imports"
              },
              {
                "line": 214,
                "content": "Fix f-strings"
              },
              {
                "line": 218,
                "content": "Fix unused variables"
              },
              {
                "line": 232,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              }
            ],
            "total_lines": 249,
            "code_lines": 182
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_flake8.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 595,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "code_generator",
                "names": [
                  "CodeGenerator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 19,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "PerfectCodeGenerator",
                "lineno": 13,
                "bases": [
                  "CodeGenerator"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Generator that CANNOT emit non-conforming code\nIntegrates with linting tools and validates before emission"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 28,
            "code_lines": 21
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_type_annotations.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 5381,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "fix_type_annotations_in_file",
                "lineno": 12,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Fix common type annotation issues in a Python file"
              },
              {
                "name": "add_missing_imports",
                "lineno": 53,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Add missing imports for common type issues"
              },
              {
                "name": "main",
                "lineno": 118,
                "args": [],
                "decorators": [],
                "docstring": "Fix type annotations in all Python files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "python_files",
                "lineno": 122,
                "value_type": "List"
              },
              {
                "name": "type_fixes",
                "lineno": 129,
                "value_type": "Constant"
              },
              {
                "name": "import_fixes",
                "lineno": 130,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 145,
                "value_type": "Call"
              },
              {
                "name": "original_content",
                "lineno": 18,
                "value_type": "Name"
              },
              {
                "name": "lines",
                "lineno": 21,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 22,
                "value_type": "List"
              },
              {
                "name": "fixed_content",
                "lineno": 38,
                "value_type": "Call"
              },
              {
                "name": "original_content",
                "lineno": 59,
                "value_type": "Name"
              },
              {
                "name": "imports_to_add",
                "lineno": 62,
                "value_type": "List"
              },
              {
                "name": "error_count",
                "lineno": 154,
                "value_type": "BinOp"
              },
              {
                "name": "content",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 57,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 83,
                "value_type": "Call"
              },
              {
                "name": "new_lines",
                "lineno": 84,
                "value_type": "List"
              },
              {
                "name": "import_section_end",
                "lineno": 87,
                "value_type": "Constant"
              },
              {
                "name": "fixed_content",
                "lineno": 103,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 34,
                "value_type": "Call"
              },
              {
                "name": "import_section_end",
                "lineno": 92,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 20,
                "content": "Fix missing return type annotations for functions"
              },
              {
                "line": 25,
                "content": "Fix function definitions missing return type annotations"
              },
              {
                "line": 27,
                "content": "Add -> None for functions without return type"
              },
              {
                "line": 31,
                "content": "Fix function definitions with parameters but no return type"
              },
              {
                "line": 33,
                "content": "Add None for incomplete return type"
              },
              {
                "line": 61,
                "content": "Add missing imports"
              },
              {
                "line": 64,
                "content": "Check if we need to add typing imports"
              },
              {
                "line": 74,
                "content": "Add missing standard library imports"
              },
              {
                "line": 86,
                "content": "Find the right place to insert imports"
              },
              {
                "line": 96,
                "content": "Insert imports"
              },
              {
                "line": 121,
                "content": "Get all Python files in src/"
              },
              {
                "line": 141,
                "content": "Test MyPy again"
              },
              {
                "line": 143,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              }
            ],
            "total_lines": 164,
            "code_lines": 112
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "round_trip_model_system.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 14648,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 325,
                "args": [],
                "decorators": [],
                "docstring": "Demonstrate round-trip model system"
              },
              {
                "name": "__init__",
                "lineno": 43,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "create_model_from_design",
                "lineno": 46,
                "args": [
                  "self",
                  "design_spec"
                ],
                "decorators": [],
                "docstring": "Create a model directly from design specification (NO reverse engineering)"
              },
              {
                "name": "generate_code_from_model",
                "lineno": 79,
                "args": [
                  "self",
                  "model_name"
                ],
                "decorators": [],
                "docstring": "Generate code from a design model (NO reverse engineering)"
              },
              {
                "name": "_generate_function_code",
                "lineno": 112,
                "args": [
                  "self",
                  "component"
                ],
                "decorators": [],
                "docstring": "Generate function code from component design"
              },
              {
                "name": "_generate_class_code",
                "lineno": 144,
                "args": [
                  "self",
                  "component"
                ],
                "decorators": [],
                "docstring": "Generate class code from component design"
              },
              {
                "name": "_generate_module_code",
                "lineno": 188,
                "args": [
                  "self",
                  "component"
                ],
                "decorators": [],
                "docstring": "Generate module code from component design"
              },
              {
                "name": "_generate_domain_code",
                "lineno": 216,
                "args": [
                  "self",
                  "component"
                ],
                "decorators": [],
                "docstring": "Generate domain code from component design"
              },
              {
                "name": "save_model",
                "lineno": 260,
                "args": [
                  "self",
                  "model_name",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Save a design model to JSON"
              },
              {
                "name": "load_model",
                "lineno": 292,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Load a design model from JSON"
              }
            ],
            "classes": [
              {
                "name": "ModelComponent",
                "lineno": 18,
                "bases": [],
                "methods": [],
                "docstring": "A component in our design model"
              },
              {
                "name": "DesignModel",
                "lineno": 30,
                "bases": [],
                "methods": [],
                "docstring": "A complete design model that can be converted to/from code"
              },
              {
                "name": "RoundTripModelSystem",
                "lineno": 40,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_model_from_design",
                  "generate_code_from_model",
                  "_generate_function_code",
                  "_generate_class_code",
                  "_generate_module_code",
                  "_generate_domain_code",
                  "save_model",
                  "load_model"
                ],
                "docstring": "System that can create models from design AND generate code from models"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 14,
                "value_type": "Call"
              },
              {
                "name": "system",
                "lineno": 327,
                "value_type": "Call"
              },
              {
                "name": "design_spec",
                "lineno": 330,
                "value_type": "Dict"
              },
              {
                "name": "model",
                "lineno": 417,
                "value_type": "Call"
              },
              {
                "name": "generated_files",
                "lineno": 426,
                "value_type": "Call"
              },
              {
                "name": "loaded_model",
                "lineno": 437,
                "value_type": "Call"
              },
              {
                "name": "components",
                "lineno": 53,
                "value_type": "List"
              },
              {
                "name": "design_model",
                "lineno": 66,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 85,
                "value_type": "Subscript"
              },
              {
                "name": "generated_files",
                "lineno": 88,
                "value_type": "Dict"
              },
              {
                "name": "params",
                "lineno": 115,
                "value_type": "Call"
              },
              {
                "name": "return_type",
                "lineno": 116,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 119,
                "value_type": "JoinedStr"
              },
              {
                "name": "methods",
                "lineno": 146,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 148,
                "value_type": "JoinedStr"
              },
              {
                "name": "code",
                "lineno": 190,
                "value_type": "JoinedStr"
              },
              {
                "name": "code",
                "lineno": 218,
                "value_type": "JoinedStr"
              },
              {
                "name": "model",
                "lineno": 266,
                "value_type": "Subscript"
              },
              {
                "name": "model_data",
                "lineno": 269,
                "value_type": "Dict"
              },
              {
                "name": "components",
                "lineno": 298,
                "value_type": "List"
              },
              {
                "name": "model",
                "lineno": 311,
                "value_type": "Call"
              },
              {
                "name": "component",
                "lineno": 55,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 82,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 263,
                "value_type": "JoinedStr"
              },
              {
                "name": "model_data",
                "lineno": 295,
                "value_type": "Call"
              },
              {
                "name": "component",
                "lineno": 300,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 93,
                "value_type": "Call"
              },
              {
                "name": "filename",
                "lineno": 94,
                "value_type": "JoinedStr"
              },
              {
                "name": "code",
                "lineno": 97,
                "value_type": "Call"
              },
              {
                "name": "filename",
                "lineno": 98,
                "value_type": "JoinedStr"
              },
              {
                "name": "code",
                "lineno": 101,
                "value_type": "Call"
              },
              {
                "name": "filename",
                "lineno": 102,
                "value_type": "JoinedStr"
              },
              {
                "name": "code",
                "lineno": 105,
                "value_type": "Call"
              },
              {
                "name": "filename",
                "lineno": 106,
                "value_type": "JoinedStr"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Setup logging"
              },
              {
                "line": 52,
                "content": "Extract design components"
              },
              {
                "line": 65,
                "content": "Create the design model"
              },
              {
                "line": 90,
                "content": "Generate code for each component"
              },
              {
                "line": 114,
                "content": "Extract function signature from metadata"
              },
              {
                "line": 118,
                "content": "Generate function code"
              },
              {
                "line": 128,
                "content": "Add imports based on dependencies"
              },
              {
                "line": 138,
                "content": "TODO: Implement based on requirements: {component.requirements}"
              },
              {
                "line": 158,
                "content": "Add imports based on dependencies"
              },
              {
                "line": 171,
                "content": "TODO: Initialize based on requirements: {component.requirements}"
              },
              {
                "line": 175,
                "content": "Add methods"
              },
              {
                "line": 182,
                "content": "TODO: Implement based on requirements: {method.get('requirements', [])}"
              },
              {
                "line": 198,
                "content": "Module imports"
              },
              {
                "line": 201,
                "content": "Add imports based on dependencies"
              },
              {
                "line": 207,
                "content": "Module-level variables and constants"
              },
              {
                "line": 208,
                "content": "TODO: Add based on requirements: {component.requirements}"
              },
              {
                "line": 210,
                "content": "Module-level functions"
              },
              {
                "line": 211,
                "content": "TODO: Add based on requirements: {component.requirements}"
              },
              {
                "line": 232,
                "content": "Add imports based on dependencies"
              },
              {
                "line": 244,
                "content": "Domain-specific fields"
              },
              {
                "line": 245,
                "content": "TODO: Add based on requirements: {component.requirements}"
              },
              {
                "line": 249,
                "content": "TODO: Initialize based on requirements: {component.requirements}"
              },
              {
                "line": 254,
                "content": "TODO: Implement validation based on requirements: {component.requirements}"
              },
              {
                "line": 268,
                "content": "Convert to JSON-serializable format"
              },
              {
                "line": 297,
                "content": "Reconstruct components"
              },
              {
                "line": 310,
                "content": "Reconstruct model"
              },
              {
                "line": 329,
                "content": "STEP 1: Create model from design (NO reverse engineering)"
              },
              {
                "line": 420,
                "content": "STEP 2: Save model to JSON"
              },
              {
                "line": 424,
                "content": "STEP 3: Generate code from model"
              },
              {
                "line": 428,
                "content": "STEP 4: Save generated code"
              },
              {
                "line": 435,
                "content": "STEP 5: Load model from JSON (round-trip)"
              }
            ],
            "total_lines": 448,
            "code_lines": 336
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "ghostbusters_pr_review.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 8785,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "src.ghostbusters.agents",
                "names": [
                  "ArchitectureExpert",
                  "BuildExpert",
                  "CodeQualityExpert",
                  "ModelExpert",
                  "SecurityExpert",
                  "TestExpert"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "src.ghostbusters.recovery",
                "names": [
                  "ImportResolver",
                  "IndentationFixer",
                  "SyntaxRecoveryEngine",
                  "TypeAnnotationFixer"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 18
              },
              {
                "module": "src.ghostbusters.validators",
                "names": [
                  "ArchitectureValidator",
                  "BuildValidator",
                  "CodeQualityValidator",
                  "ModelValidator",
                  "SecurityValidator",
                  "TestValidator"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 24
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 32
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 38,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "GhostbustersPRReview",
                "lineno": 35,
                "bases": [],
                "methods": [
                  "__init__"
                ],
                "docstring": "Comprehensive PR review using Ghostbusters agents"
              }
            ],
            "variables": [
              {
                "name": "reviewer",
                "lineno": 221,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 222,
                "value_type": "Await"
              },
              {
                "name": "pr_assessment",
                "lineno": 229,
                "value_type": "Subscript"
              },
              {
                "name": "service_analysis",
                "lineno": 236,
                "value_type": "Subscript"
              },
              {
                "name": "delusion_results",
                "lineno": 71,
                "value_type": "List"
              },
              {
                "name": "validation_results",
                "lineno": 86,
                "value_type": "List"
              },
              {
                "name": "service_analysis",
                "lineno": 101,
                "value_type": "Await"
              },
              {
                "name": "pr_assessment",
                "lineno": 107,
                "value_type": "Await"
              },
              {
                "name": "critical_issues",
                "lineno": 183,
                "value_type": "Constant"
              },
              {
                "name": "test_status",
                "lineno": 194,
                "value_type": "IfExp"
              },
              {
                "name": "service_status",
                "lineno": 197,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 200,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 127,
                "value_type": "Call"
              },
              {
                "name": "running_services",
                "lineno": 128,
                "value_type": "List"
              },
              {
                "name": "security_concerns",
                "lineno": 138,
                "value_type": "List"
              },
              {
                "name": "resource_concerns",
                "lineno": 148,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 156,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 74,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 89,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 9,
                "content": "Import Ghostbusters components"
              },
              {
                "line": 67,
                "content": "Phase 1: Detect Delusions"
              },
              {
                "line": 82,
                "content": "Phase 2: Validate Findings"
              },
              {
                "line": 97,
                "content": "Phase 3: Service Management Analysis"
              },
              {
                "line": 103,
                "content": "Phase 4: PR Readiness Assessment"
              },
              {
                "line": 123,
                "content": "Check for running services"
              },
              {
                "line": 124,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 137,
                "content": "Security concerns"
              },
              {
                "line": 147,
                "content": "Resource concerns"
              },
              {
                "line": 155,
                "content": "Recommendations"
              },
              {
                "line": 182,
                "content": "Count critical issues"
              },
              {
                "line": 193,
                "content": "Test status"
              },
              {
                "line": 196,
                "content": "Service management status"
              },
              {
                "line": 199,
                "content": "Recommendations"
              },
              {
                "line": 228,
                "content": "PR Readiness"
              },
              {
                "line": 235,
                "content": "Service Management"
              },
              {
                "line": 246,
                "content": "Recommendations"
              },
              {
                "line": 254,
                "content": "Final verdict"
              }
            ],
            "total_lines": 265,
            "code_lines": 205
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "projected_complex_model_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 15749,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "create_complex_model",
                "lineno": 387,
                "args": [],
                "decorators": [],
                "docstring": "Create and return a complex model"
              },
              {
                "name": "__post_init__",
                "lineno": 60,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the complex model"
              },
              {
                "name": "_build_flake8_model",
                "lineno": 66,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build Flake8 model with all rules and patterns"
              },
              {
                "name": "_build_mypy_model",
                "lineno": 135,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build MyPy model with all rules and patterns"
              },
              {
                "name": "_build_combined_understanding",
                "lineno": 180,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build combined understanding of code patterns and fix strategies"
              },
              {
                "name": "analyze_file",
                "lineno": 219,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Analyze a file using the complex model"
              },
              {
                "name": "_simulate_flake8_analysis",
                "lineno": 233,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Simulate Flake8 analysis based on our model"
              },
              {
                "name": "_simulate_mypy_analysis",
                "lineno": 280,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Simulate MyPy analysis based on our model"
              },
              {
                "name": "_generate_fix_strategies",
                "lineno": 329,
                "args": [
                  "self",
                  "flake8_issues",
                  "mypy_issues"
                ],
                "decorators": [],
                "docstring": "Generate fix strategies based on detected issues"
              },
              {
                "name": "generate_perfect_code",
                "lineno": 349,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Generate perfect code based on the complex model"
              },
              {
                "name": "_apply_flake8_fix",
                "lineno": 361,
                "args": [
                  "self",
                  "content",
                  "issue"
                ],
                "decorators": [],
                "docstring": "Apply Flake8 fix to content"
              },
              {
                "name": "_apply_mypy_fix",
                "lineno": 377,
                "args": [
                  "self",
                  "content",
                  "issue"
                ],
                "decorators": [],
                "docstring": "Apply MyPy fix to content"
              }
            ],
            "classes": [
              {
                "name": "Flake8Rule",
                "lineno": 25,
                "bases": [],
                "methods": [],
                "docstring": "Flake8 rule definition"
              },
              {
                "name": "MyPyRule",
                "lineno": 37,
                "bases": [],
                "methods": [],
                "docstring": "MyPy rule definition"
              },
              {
                "name": "ComplexModel",
                "lineno": 49,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "_build_flake8_model",
                  "_build_mypy_model",
                  "_build_combined_understanding",
                  "analyze_file",
                  "_simulate_flake8_analysis",
                  "_simulate_mypy_analysis",
                  "_generate_fix_strategies",
                  "generate_perfect_code",
                  "_apply_flake8_fix",
                  "_apply_mypy_fix"
                ],
                "docstring": "Complex model combining Enhanced AST + Flake8 + MyPy"
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 9,
                "value_type": "Dict"
              },
              {
                "name": "AWS_CONFIG",
                "lineno": 17,
                "value_type": "Dict"
              },
              {
                "name": "ast_result",
                "lineno": 221,
                "value_type": "Call"
              },
              {
                "name": "flake8_issues",
                "lineno": 222,
                "value_type": "Call"
              },
              {
                "name": "mypy_issues",
                "lineno": 223,
                "value_type": "Call"
              },
              {
                "name": "issues",
                "lineno": 235,
                "value_type": "List"
              },
              {
                "name": "issues",
                "lineno": 282,
                "value_type": "List"
              },
              {
                "name": "strategies",
                "lineno": 335,
                "value_type": "List"
              },
              {
                "name": "analysis",
                "lineno": 351,
                "value_type": "Call"
              },
              {
                "name": "fixed_content",
                "lineno": 354,
                "value_type": "Name"
              },
              {
                "name": "lines",
                "lineno": 363,
                "value_type": "Call"
              },
              {
                "name": "strategy",
                "lineno": 337,
                "value_type": "Dict"
              },
              {
                "name": "content",
                "lineno": 353,
                "value_type": "Call"
              },
              {
                "name": "fixed_content",
                "lineno": 356,
                "value_type": "Call"
              },
              {
                "name": "fixed_content",
                "lineno": 358,
                "value_type": "Call"
              },
              {
                "name": "line_idx",
                "lineno": 365,
                "value_type": "BinOp"
              },
              {
                "name": "content",
                "lineno": 380,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 238,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 239,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 285,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 287,
                "value_type": "Call"
              },
              {
                "name": "line_idx",
                "lineno": 371,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 394,
            "code_lines": 365
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "cloudbuild_webhook_trigger.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3895,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "run_gcloud_auth",
                "lineno": 13,
                "args": [],
                "decorators": [],
                "docstring": "Get access token for REST API calls."
              },
              {
                "name": "make_rest_call",
                "lineno": 24,
                "args": [
                  "method",
                  "url",
                  "data",
                  "token"
                ],
                "decorators": [],
                "docstring": "Make REST API call to Google Cloud."
              },
              {
                "name": "create_webhook_trigger",
                "lineno": 64,
                "args": [
                  "token"
                ],
                "decorators": [],
                "docstring": "Create webhook-based build trigger."
              },
              {
                "name": "main",
                "lineno": 101,
                "args": [],
                "decorators": [],
                "docstring": "Main setup function using webhook trigger."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 15,
                "value_type": "Call"
              },
              {
                "name": "cmd",
                "lineno": 34,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "url",
                "lineno": 68,
                "value_type": "Constant"
              },
              {
                "name": "data",
                "lineno": 70,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 91,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 32,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 111,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 110,
                "content": "Get access token"
              },
              {
                "line": 114,
                "content": "Create webhook trigger"
              }
            ],
            "total_lines": 140,
            "code_lines": 111
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_regenerated.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1088,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "test_regenerated_code",
                "lineno": 9,
                "args": [],
                "decorators": [],
                "docstring": "Test that the regenerated code is valid Python"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "content",
                "lineno": 16,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 23,
                "content": "Show some key differences"
              }
            ],
            "total_lines": 40,
            "code_lines": 27
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_flake8_imports.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2646,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "fix_import_order",
                "lineno": 9,
                "args": [
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix import order in a file"
              },
              {
                "name": "main",
                "lineno": 80,
                "args": [],
                "decorators": [],
                "docstring": "Fix all Python files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "src_dir",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "fixed_count",
                "lineno": 85,
                "value_type": "Constant"
              },
              {
                "name": "lines",
                "lineno": 15,
                "value_type": "Call"
              },
              {
                "name": "import_lines",
                "lineno": 18,
                "value_type": "List"
              },
              {
                "name": "other_lines",
                "lineno": 19,
                "value_type": "List"
              },
              {
                "name": "in_docstring",
                "lineno": 20,
                "value_type": "Constant"
              },
              {
                "name": "fixed_lines",
                "lineno": 46,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 13,
                "value_type": "Call"
              },
              {
                "name": "stripped",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "in_docstring",
                "lineno": 32,
                "value_type": "UnaryOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Find all import lines"
              },
              {
                "line": 25,
                "content": "Skip empty lines and comments"
              },
              {
                "line": 30,
                "content": "Check if we're in a docstring"
              },
              {
                "line": 34,
                "content": "If in docstring, treat as other content"
              },
              {
                "line": 39,
                "content": "Check if it's an import"
              },
              {
                "line": 45,
                "content": "Reconstruct file with imports at top"
              },
              {
                "line": 48,
                "content": "Add shebang if present"
              },
              {
                "line": 53,
                "content": "Add docstring if present"
              },
              {
                "line": 62,
                "content": "Add all imports"
              },
              {
                "line": 67,
                "content": "Add remaining content"
              },
              {
                "line": 70,
                "content": "Write fixed content"
              }
            ],
            "total_lines": 97,
            "code_lines": 60
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "cloudbuild_github_setup_spore.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3646,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "importlib",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "google.cloud",
                "asname": null,
                "lineno": 34
              },
              {
                "module": "pkgutil",
                "asname": null,
                "lineno": 37
              },
              {
                "module": "google.cloud",
                "names": [
                  "cloudbuild_v1",
                  "secretmanager_v1"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 49
              },
              {
                "module": "google.cloud.devtools",
                "names": [
                  "cloudbuild_v2"
                ],
                "asnames": [
                  null
                ],
                "lineno": 50
              }
            ],
            "functions": [
              {
                "name": "ensure_package",
                "lineno": 13,
                "args": [
                  "pkg_name",
                  "import_name"
                ],
                "decorators": [],
                "docstring": "Ensure a package is installed, install if missing."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "PROJECT_ID",
                "lineno": 58,
                "value_type": "Constant"
              },
              {
                "name": "REGION",
                "lineno": 59,
                "value_type": "Constant"
              },
              {
                "name": "REPO_NAME",
                "lineno": 60,
                "value_type": "Constant"
              },
              {
                "name": "REPO_URI",
                "lineno": 61,
                "value_type": "JoinedStr"
              },
              {
                "name": "CONNECTION_ID",
                "lineno": 62,
                "value_type": "Constant"
              },
              {
                "name": "SECRET_ID",
                "lineno": 63,
                "value_type": "Constant"
              },
              {
                "name": "SECRET_VERSION",
                "lineno": 64,
                "value_type": "Constant"
              },
              {
                "name": "TRIGGER_NAME",
                "lineno": 65,
                "value_type": "Constant"
              },
              {
                "name": "BRANCH_PATTERN",
                "lineno": 66,
                "value_type": "Constant"
              },
              {
                "name": "BUILD_CONFIG_FILE",
                "lineno": 67,
                "value_type": "Constant"
              },
              {
                "name": "PARENT",
                "lineno": 69,
                "value_type": "JoinedStr"
              },
              {
                "name": "SECRET_VERSION_PATH",
                "lineno": 70,
                "value_type": "JoinedStr"
              },
              {
                "name": "CONNECTION_RESOURCE",
                "lineno": 73,
                "value_type": "JoinedStr"
              },
              {
                "name": "REPO_RESOURCE",
                "lineno": 74,
                "value_type": "JoinedStr"
              },
              {
                "name": "sm_client",
                "lineno": 77,
                "value_type": "Call"
              },
              {
                "name": "cb2_client",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "cb1_client",
                "lineno": 79,
                "value_type": "Call"
              },
              {
                "name": "conn",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "conn_op",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "repo",
                "lineno": 98,
                "value_type": "Call"
              },
              {
                "name": "repo_op",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "trigger",
                "lineno": 108,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 24,
                "content": "Diagnostic: Check installed packages"
              },
              {
                "line": 28,
                "content": "Ensure correct Google packages are installed"
              },
              {
                "line": 32,
                "content": "Diagnostic: Check google.cloud structure"
              },
              {
                "line": 47,
                "content": "Try imports"
              },
              {
                "line": 76,
                "content": "Init clients"
              },
              {
                "line": 81,
                "content": "Step 1: Create GitHub connection"
              },
              {
                "line": 97,
                "content": "Step 2: Link repository"
              },
              {
                "line": 107,
                "content": "Step 3: Create build trigger"
              }
            ],
            "total_lines": 120,
            "code_lines": 93
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "projected_dynamic_rule_updater.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1930,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 41,
                "args": [
                  "self",
                  "rules_dir"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_load_rule_templates",
                "lineno": 46,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load rule templates for different violation types"
              }
            ],
            "classes": [
              {
                "name": "ViolationPattern",
                "lineno": 26,
                "bases": [],
                "methods": [],
                "docstring": "Represents a violation pattern for rule learning"
              },
              {
                "name": "DynamicRuleUpdater",
                "lineno": 38,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_rule_templates"
                ],
                "docstring": "Updates Cursor rules dynamically based on violations"
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 10,
                "value_type": "Dict"
              },
              {
                "name": "AWS_CONFIG",
                "lineno": 18,
                "value_type": "Dict"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 61,
            "code_lines": 47
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_syntax_errors.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3193,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "fix_file",
                "lineno": 10,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Fix syntax errors in a Python file"
              },
              {
                "name": "main",
                "lineno": 74,
                "args": [],
                "decorators": [],
                "docstring": "Fix syntax errors in Python files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "problematic_files",
                "lineno": 79,
                "value_type": "List"
              },
              {
                "name": "fixed_count",
                "lineno": 91,
                "value_type": "Constant"
              },
              {
                "name": "original_content",
                "lineno": 16,
                "value_type": "Name"
              },
              {
                "name": "lines",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 20,
                "value_type": "List"
              },
              {
                "name": "fixed_content",
                "lineno": 58,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 14,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 18,
                "content": "Fix common indentation issues"
              },
              {
                "line": 23,
                "content": "Skip lines that are clearly not Python code"
              },
              {
                "line": 42,
                "content": "Fix indentation issues"
              },
              {
                "line": 49,
                "content": "This might be a class or function definition that needs proper indentation"
              },
              {
                "line": 53,
                "content": "Skip malformed lines"
              },
              {
                "line": 60,
                "content": "Only write if content changed"
              },
              {
                "line": 78,
                "content": "List of files with known issues"
              }
            ],
            "total_lines": 101,
            "code_lines": 74
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "generated_ASTGuidedCodeGenerator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 983,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "dataclasses",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "logging",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "src.artifact_forge.agents.artifact_parser_enhanced",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 22,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "analyze_file_ast",
                "lineno": 26,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze file using AST with linting rule integration"
              },
              {
                "name": "generate_perfect_code",
                "lineno": 32,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate perfect code using AST-guided approach"
              }
            ],
            "classes": [
              {
                "name": "ASTGuidedCodeGenerator",
                "lineno": 17,
                "bases": [],
                "methods": [
                  "__init__",
                  "analyze_file_ast",
                  "generate_perfect_code"
                ],
                "docstring": "AST-guided code generator that respects syntactic boundaries"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 23,
                "content": "TODO: Initialize based on requirements: ['AST parsing', 'linting rule integration', 'syntactic boundary detection', 'fix strategy generation']"
              },
              {
                "line": 30,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 36,
                "content": "TODO: Implement based on requirements: []"
              }
            ],
            "total_lines": 37,
            "code_lines": 25
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "generated_ASTNode.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 535,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "typing",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 17,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__post_init__",
                "lineno": 21,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize default values"
              }
            ],
            "classes": [
              {
                "name": "ASTNode",
                "lineno": 12,
                "bases": [],
                "methods": [
                  "__init__",
                  "__post_init__"
                ],
                "docstring": "Represents an AST node with metadata"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 18,
                "content": "TODO: Initialize based on requirements: ['dataclass', 'metadata support', 'parent-child relationships']"
              },
              {
                "line": 25,
                "content": "TODO: Implement based on requirements: []"
              }
            ],
            "total_lines": 26,
            "code_lines": 17
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "comprehensive_artifact_analysis.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 25280,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "ast",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 14
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              },
              {
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 16
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "asdict"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 17
              },
              {
                "module": "collections",
                "names": [
                  "defaultdict"
                ],
                "asnames": [
                  null
                ],
                "lineno": 18
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 551,
                "args": [],
                "decorators": [],
                "docstring": "Main analysis function"
              },
              {
                "name": "__init__",
                "lineno": 51,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "parse_file",
                "lineno": 59,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse a Python file and extract comprehensive information"
              },
              {
                "name": "_get_decorator_name",
                "lineno": 150,
                "args": [
                  "self",
                  "decorator"
                ],
                "decorators": [],
                "docstring": "Extract decorator name"
              },
              {
                "name": "_get_base_name",
                "lineno": 159,
                "args": [
                  "self",
                  "base"
                ],
                "decorators": [],
                "docstring": "Extract base class name"
              },
              {
                "name": "__init__",
                "lineno": 168,
                "args": [
                  "self",
                  "project_root"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_load_model",
                "lineno": 198,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load the project model registry"
              },
              {
                "name": "_get_file_type",
                "lineno": 207,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Determine file type based on extension and content"
              },
              {
                "name": "_detect_domain",
                "lineno": 229,
                "args": [
                  "self",
                  "file_path",
                  "file_type"
                ],
                "decorators": [],
                "docstring": "Detect domain based on file path and project model patterns"
              },
              {
                "name": "_calculate_pattern_score",
                "lineno": 272,
                "args": [
                  "self",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Calculate pattern specificity score"
              },
              {
                "name": "_matches_pattern",
                "lineno": 294,
                "args": [
                  "self",
                  "file_path",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Check if file path matches pattern"
              },
              {
                "name": "_trace_requirements",
                "lineno": 313,
                "args": [
                  "self",
                  "domain",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Trace artifact to requirements in the project model"
              },
              {
                "name": "discover_artifacts",
                "lineno": 327,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Discover all artifacts in the project"
              },
              {
                "name": "_load_gitignore_patterns",
                "lineno": 381,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load gitignore patterns"
              },
              {
                "name": "_is_ignored",
                "lineno": 398,
                "args": [
                  "self",
                  "file_path",
                  "patterns"
                ],
                "decorators": [],
                "docstring": "Check if file should be ignored based on gitignore patterns"
              },
              {
                "name": "analyze_model_coverage",
                "lineno": 405,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze model coverage and completeness"
              },
              {
                "name": "generate_report",
                "lineno": 472,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate comprehensive analysis report"
              },
              {
                "name": "_generate_recommendations",
                "lineno": 526,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate recommendations based on analysis"
              }
            ],
            "classes": [
              {
                "name": "ArtifactInfo",
                "lineno": 21,
                "bases": [],
                "methods": [],
                "docstring": "Information about a project artifact"
              },
              {
                "name": "ModelAnalysis",
                "lineno": 34,
                "bases": [],
                "methods": [],
                "docstring": "Analysis of the project model"
              },
              {
                "name": "EnhancedASTParser",
                "lineno": 48,
                "bases": [],
                "methods": [
                  "__init__",
                  "parse_file",
                  "_get_decorator_name",
                  "_get_base_name"
                ],
                "docstring": "Enhanced AST parser for reverse engineering Python artifacts"
              },
              {
                "name": "ArtifactAnalyzer",
                "lineno": 165,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_model",
                  "_get_file_type",
                  "_detect_domain",
                  "_calculate_pattern_score",
                  "_matches_pattern",
                  "_trace_requirements",
                  "discover_artifacts",
                  "_load_gitignore_patterns",
                  "_is_ignored",
                  "analyze_model_coverage",
                  "generate_report",
                  "_generate_recommendations"
                ],
                "docstring": "Comprehensive artifact analyzer"
              }
            ],
            "variables": [
              {
                "name": "analyzer",
                "lineno": 557,
                "value_type": "Call"
              },
              {
                "name": "artifacts",
                "lineno": 561,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 566,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 570,
                "value_type": "Call"
              },
              {
                "name": "report_file",
                "lineno": 608,
                "value_type": "Constant"
              },
              {
                "name": "path",
                "lineno": 209,
                "value_type": "Call"
              },
              {
                "name": "ext",
                "lineno": 210,
                "value_type": "Call"
              },
              {
                "name": "name",
                "lineno": 211,
                "value_type": "Call"
              },
              {
                "name": "file_path_str",
                "lineno": 234,
                "value_type": "Call"
              },
              {
                "name": "best_match",
                "lineno": 235,
                "value_type": "Constant"
              },
              {
                "name": "best_score",
                "lineno": 236,
                "value_type": "Constant"
              },
              {
                "name": "requirements",
                "lineno": 315,
                "value_type": "List"
              },
              {
                "name": "artifacts",
                "lineno": 329,
                "value_type": "List"
              },
              {
                "name": "gitignore_patterns",
                "lineno": 332,
                "value_type": "Call"
              },
              {
                "name": "gitignore_file",
                "lineno": 383,
                "value_type": "BinOp"
              },
              {
                "name": "patterns",
                "lineno": 384,
                "value_type": "List"
              },
              {
                "name": "domain_counts",
                "lineno": 411,
                "value_type": "Call"
              },
              {
                "name": "traced_artifacts",
                "lineno": 412,
                "value_type": "Constant"
              },
              {
                "name": "untraced_artifacts",
                "lineno": 413,
                "value_type": "Constant"
              },
              {
                "name": "python_artifacts",
                "lineno": 414,
                "value_type": "Constant"
              },
              {
                "name": "ast_success",
                "lineno": 415,
                "value_type": "Constant"
              },
              {
                "name": "ast_failures",
                "lineno": 416,
                "value_type": "Constant"
              },
              {
                "name": "model_domains",
                "lineno": 434,
                "value_type": "Call"
              },
              {
                "name": "artifact_domains",
                "lineno": 435,
                "value_type": "Call"
              },
              {
                "name": "missing_domains",
                "lineno": 436,
                "value_type": "Call"
              },
              {
                "name": "all_requirements",
                "lineno": 439,
                "value_type": "Call"
              },
              {
                "name": "traced_requirements",
                "lineno": 440,
                "value_type": "Call"
              },
              {
                "name": "missing_requirements",
                "lineno": 448,
                "value_type": "Call"
              },
              {
                "name": "requirements_coverage",
                "lineno": 451,
                "value_type": "Dict"
              },
              {
                "name": "artifacts_by_domain",
                "lineno": 478,
                "value_type": "Call"
              },
              {
                "name": "python_issues",
                "lineno": 484,
                "value_type": "ListComp"
              },
              {
                "name": "large_files",
                "lineno": 487,
                "value_type": "ListComp"
              },
              {
                "name": "report",
                "lineno": 489,
                "value_type": "Dict"
              },
              {
                "name": "recommendations",
                "lineno": 528,
                "value_type": "List"
              },
              {
                "name": "large_files",
                "lineno": 545,
                "value_type": "ListComp"
              },
              {
                "name": "tree",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 76,
                "value_type": "Call"
              },
              {
                "name": "patterns",
                "lineno": 239,
                "value_type": "Call"
              },
              {
                "name": "content_indicators",
                "lineno": 240,
                "value_type": "Call"
              },
              {
                "name": "pattern_parts",
                "lineno": 299,
                "value_type": "Call"
              },
              {
                "name": "file_parts",
                "lineno": 300,
                "value_type": "Call"
              },
              {
                "name": "pattern_idx",
                "lineno": 303,
                "value_type": "Constant"
              },
              {
                "name": "req_name",
                "lineno": 453,
                "value_type": "Subscript"
              },
              {
                "name": "count",
                "lineno": 454,
                "value_type": "Call"
              },
              {
                "name": "domain",
                "lineno": 480,
                "value_type": "BoolOp"
              },
              {
                "name": "content",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "stripped",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "content_indicators",
                "lineno": 254,
                "value_type": "Call"
              },
              {
                "name": "file_path",
                "lineno": 339,
                "value_type": "BinOp"
              },
              {
                "name": "relative_path",
                "lineno": 340,
                "value_type": "Call"
              },
              {
                "name": "first_line",
                "lineno": 221,
                "value_type": "Call"
              },
              {
                "name": "score",
                "lineno": 245,
                "value_type": "Call"
              },
              {
                "name": "parts",
                "lineno": 280,
                "value_type": "Call"
              },
              {
                "name": "specificity",
                "lineno": 282,
                "value_type": "Call"
              },
              {
                "name": "stat",
                "lineno": 348,
                "value_type": "Call"
              },
              {
                "name": "file_type",
                "lineno": 349,
                "value_type": "Call"
              },
              {
                "name": "domain",
                "lineno": 350,
                "value_type": "Call"
              },
              {
                "name": "requirements",
                "lineno": 351,
                "value_type": "Call"
              },
              {
                "name": "artifact",
                "lineno": 357,
                "value_type": "Call"
              },
              {
                "name": "best_score",
                "lineno": 247,
                "value_type": "Name"
              },
              {
                "name": "best_match",
                "lineno": 248,
                "value_type": "Name"
              },
              {
                "name": "ast_result",
                "lineno": 368,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 390,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 258,
                "value_type": "Call"
              },
              {
                "name": "score",
                "lineno": 262,
                "value_type": "Constant"
              },
              {
                "name": "best_score",
                "lineno": 264,
                "value_type": "Name"
              },
              {
                "name": "best_match",
                "lineno": 265,
                "value_type": "Name"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 67,
                "content": "Reset state"
              },
              {
                "line": 75,
                "content": "Extract line-by-line information"
              },
              {
                "line": 78,
                "content": "Analyze AST"
              },
              {
                "line": 119,
                "content": "Extract comments (simple approach)"
              },
              {
                "line": 176,
                "content": "Load project model"
              },
              {
                "line": 179,
                "content": "Define file type patterns"
              },
              {
                "line": 217,
                "content": "Check for Python files with shebang"
              },
              {
                "line": 242,
                "content": "Check patterns with scoring"
              },
              {
                "line": 249,
                "content": "print(f\"    \ud83c\udfaf New best match: {domain_name} with pattern '{pattern}' (score: {score})\")"
              },
              {
                "line": 251,
                "content": "Check content indicators for Python files (only if no specific pattern matched)"
              },
              {
                "line": 261,
                "content": "Content indicators get medium priority (lower than specific patterns)"
              },
              {
                "line": 266,
                "content": "print(f\"    \ud83c\udfaf Content indicator match: {domain_name} (score: {score})\")"
              },
              {
                "line": 279,
                "content": "Count path segments for specificity"
              },
              {
                "line": 281,
                "content": "More specific patterns (with more path segments) get higher scores"
              },
              {
                "line": 283,
                "content": "Exact path matches get bonus points"
              },
              {
                "line": 286,
                "content": "Domain-specific patterns get higher priority"
              },
              {
                "line": 291,
                "content": "Exact match gets highest priority"
              },
              {
                "line": 296,
                "content": "Simple pattern matching - could be enhanced with glob"
              },
              {
                "line": 298,
                "content": "Convert glob pattern to simple matching"
              },
              {
                "line": 302,
                "content": "Check if pattern parts are in file parts"
              },
              {
                "line": 320,
                "content": "Find requirements for this domain"
              },
              {
                "line": 331,
                "content": "Get gitignore patterns"
              },
              {
                "line": 335,
                "content": "Skip git and cache directories"
              },
              {
                "line": 342,
                "content": "Skip if in gitignore"
              },
              {
                "line": 346,
                "content": "Get file info"
              },
              {
                "line": 353,
                "content": "Debug: Check for specific files"
              },
              {
                "line": 366,
                "content": "Analyze Python files with AST"
              },
              {
                "line": 410,
                "content": "Count artifacts by domain"
              },
              {
                "line": 433,
                "content": "Find missing domains"
              },
              {
                "line": 438,
                "content": "Find missing requirements"
              },
              {
                "line": 450,
                "content": "Count requirements coverage"
              },
              {
                "line": 477,
                "content": "Group artifacts by domain"
              },
              {
                "line": 483,
                "content": "Find Python artifacts with issues"
              },
              {
                "line": 486,
                "content": "Find large files"
              },
              {
                "line": 520,
                "content": "Add file type counts"
              },
              {
                "line": 530,
                "content": "Coverage recommendations"
              },
              {
                "line": 540,
                "content": "Python analysis recommendations"
              },
              {
                "line": 544,
                "content": "Large file recommendations"
              },
              {
                "line": 556,
                "content": "Initialize analyzer"
              },
              {
                "line": 559,
                "content": "Discover artifacts"
              },
              {
                "line": 564,
                "content": "Analyze model coverage"
              },
              {
                "line": 568,
                "content": "Generate report"
              },
              {
                "line": 572,
                "content": "Print summary"
              },
              {
                "line": 583,
                "content": "Print domain analysis"
              },
              {
                "line": 592,
                "content": "Print requirements analysis"
              },
              {
                "line": 601,
                "content": "Print recommendations"
              },
              {
                "line": 607,
                "content": "Save detailed report"
              }
            ],
            "total_lines": 618,
            "code_lines": 472
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "generate_perfect_code.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2110,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "src.complex_model_generator",
                "names": [
                  "create_complex_model"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "ast",
                "asname": null,
                "lineno": 57
              }
            ],
            "functions": [
              {
                "name": "generate_perfect_code",
                "lineno": 10,
                "args": [],
                "decorators": [],
                "docstring": "Generate perfect code using our complex model"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "model",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 21,
                "value_type": "Constant"
              },
              {
                "name": "perfect_code",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 34,
                "value_type": "Call"
              },
              {
                "name": "perfect_file",
                "lineno": 46,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Create complex model"
              },
              {
                "line": 20,
                "content": "Test file to generate perfect code for"
              },
              {
                "line": 25,
                "content": "Generate perfect code"
              },
              {
                "line": 33,
                "content": "Show first few lines"
              },
              {
                "line": 45,
                "content": "Save perfect code"
              },
              {
                "line": 53,
                "content": "Test the perfect code"
              },
              {
                "line": 56,
                "content": "Test AST parsing"
              },
              {
                "line": 62,
                "content": "Test basic syntax"
              }
            ],
            "total_lines": 80,
            "code_lines": 48
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "cloudbuild_github_1stgen.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4082,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "run_gcloud_auth",
                "lineno": 13,
                "args": [],
                "decorators": [],
                "docstring": "Get access token for REST API calls."
              },
              {
                "name": "make_rest_call",
                "lineno": 24,
                "args": [
                  "method",
                  "url",
                  "data",
                  "token"
                ],
                "decorators": [],
                "docstring": "Make REST API call to Google Cloud."
              },
              {
                "name": "create_1stgen_trigger",
                "lineno": 64,
                "args": [
                  "token"
                ],
                "decorators": [],
                "docstring": "Create build trigger using 1st-gen GitHub integration."
              },
              {
                "name": "main",
                "lineno": 104,
                "args": [],
                "decorators": [],
                "docstring": "Main setup function using 1st-gen GitHub integration."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 15,
                "value_type": "Call"
              },
              {
                "name": "cmd",
                "lineno": 34,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "url",
                "lineno": 68,
                "value_type": "Constant"
              },
              {
                "name": "data",
                "lineno": 70,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 95,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 32,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 115,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 114,
                "content": "Get access token"
              },
              {
                "line": 118,
                "content": "Create 1st-gen trigger"
              }
            ],
            "total_lines": 144,
            "code_lines": 115
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "proven_QualityOrchestrator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1154,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "logging",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 20,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "load_rules",
                "lineno": 24,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load quality rules from configuration"
              },
              {
                "name": "process_files",
                "lineno": 30,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Process files with quality checks"
              },
              {
                "name": "apply_fixes",
                "lineno": 36,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Apply fixes to files"
              },
              {
                "name": "generate_report",
                "lineno": 42,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate quality report"
              }
            ],
            "classes": [
              {
                "name": "QualityOrchestrator",
                "lineno": 15,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_rules",
                  "process_files",
                  "apply_fixes",
                  "generate_report"
                ],
                "docstring": "Main orchestrator for code quality operations"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 21,
                "content": "TODO: Initialize based on requirements: ['rule management', 'file processing', 'fix application', 'reporting', 'configuration management']"
              },
              {
                "line": 28,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 34,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 40,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 46,
                "content": "TODO: Implement based on requirements: []"
              }
            ],
            "total_lines": 47,
            "code_lines": 32
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "generate_billing_analyzer_with_recursion.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1521,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "generate_billing_analyzer",
                "names": [
                  "generate_gemini_billing_analyzer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "recursive_code_generator",
                "names": [
                  "RecursiveCodeGenerator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Generate billing analyzer with recursive decomposition"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "generator",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "analyzer_file",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 34,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 35,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 22,
                "content": "Create recursive generator"
              },
              {
                "line": 25,
                "content": "Generate the billing analyzer model"
              },
              {
                "line": 29,
                "content": "Generate with recursive decomposition"
              },
              {
                "line": 33,
                "content": "Write to file"
              },
              {
                "line": 42,
                "content": "Show decomposition summary"
              }
            ],
            "total_lines": 52,
            "code_lines": 30
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "generated_LintingRule.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 574,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "typing",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 17,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__post_init__",
                "lineno": 21,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize default values"
              }
            ],
            "classes": [
              {
                "name": "LintingRule",
                "lineno": 12,
                "bases": [],
                "methods": [
                  "__init__",
                  "__post_init__"
                ],
                "docstring": "Represents a linting rule with AST-aware patterns"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 18,
                "content": "TODO: Initialize based on requirements: ['rule code', 'description', 'severity', 'AST patterns', 'fix strategy']"
              },
              {
                "line": 25,
                "content": "TODO: Implement based on requirements: []"
              }
            ],
            "total_lines": 26,
            "code_lines": 17
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "perfect_analyze_codebase.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3381,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "artifact_forge.agents.artifact_parser_enhanced",
                "names": [
                  "EnhancedArtifactParser"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "analyze_codebase",
                "lineno": 16,
                "args": [],
                "decorators": [],
                "docstring": "Analyze current codebase with Enhanced AST Models"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "parser",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "python_files",
                "lineno": 26,
                "value_type": "List"
              },
              {
                "name": "total_functions",
                "lineno": 36,
                "value_type": "Constant"
              },
              {
                "name": "total_classes",
                "lineno": 37,
                "value_type": "Constant"
              },
              {
                "name": "total_imports",
                "lineno": 38,
                "value_type": "Constant"
              },
              {
                "name": "files_with_errors",
                "lineno": 39,
                "value_type": "Constant"
              },
              {
                "name": "model_issues",
                "lineno": 40,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 45,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "classes",
                "lineno": 48,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 49,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 10,
                "content": "Add src to path"
              },
              {
                "line": 22,
                "content": "Initialize Enhanced AST Parser"
              },
              {
                "line": 25,
                "content": "Find all Python files"
              },
              {
                "line": 35,
                "content": "Analyze files"
              }
            ],
            "total_lines": 109,
            "code_lines": 82
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "cloudbuild_github_2ndgen_trigger.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4145,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "run_gcloud_auth",
                "lineno": 13,
                "args": [],
                "decorators": [],
                "docstring": "Get access token for REST API calls."
              },
              {
                "name": "make_rest_call",
                "lineno": 24,
                "args": [
                  "method",
                  "url",
                  "data",
                  "token"
                ],
                "decorators": [],
                "docstring": "Make REST API call to Google Cloud."
              },
              {
                "name": "create_2ndgen_trigger",
                "lineno": 64,
                "args": [
                  "token"
                ],
                "decorators": [],
                "docstring": "Create build trigger using 2nd-gen connection."
              },
              {
                "name": "main",
                "lineno": 104,
                "args": [],
                "decorators": [],
                "docstring": "Main setup function using 2nd-gen connection."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 15,
                "value_type": "Call"
              },
              {
                "name": "cmd",
                "lineno": 34,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "url",
                "lineno": 68,
                "value_type": "Constant"
              },
              {
                "name": "data",
                "lineno": 70,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 95,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 32,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 115,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 114,
                "content": "Get access token"
              },
              {
                "line": 118,
                "content": "Create 2nd-gen trigger"
              }
            ],
            "total_lines": 145,
            "code_lines": 116
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_return_value_issues.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 6457,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "find_return_value_issues",
                "lineno": 14,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Find functions with return value issues"
              },
              {
                "name": "fix_return_value_issues",
                "lineno": 51,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Fix return value issues in a file"
              },
              {
                "name": "main",
                "lineno": 141,
                "args": [],
                "decorators": [],
                "docstring": "Main function to fix return value issues"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "issues",
                "lineno": 16,
                "value_type": "List"
              },
              {
                "name": "src_path",
                "lineno": 147,
                "value_type": "Call"
              },
              {
                "name": "python_files",
                "lineno": 148,
                "value_type": "Call"
              },
              {
                "name": "total_issues",
                "lineno": 150,
                "value_type": "Constant"
              },
              {
                "name": "total_fixed",
                "lineno": 151,
                "value_type": "Constant"
              },
              {
                "name": "tree",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 57,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 58,
                "value_type": "List"
              },
              {
                "name": "changes_made",
                "lineno": 59,
                "value_type": "Constant"
              },
              {
                "name": "i",
                "lineno": 61,
                "value_type": "Constant"
              },
              {
                "name": "issues",
                "lineno": 154,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 172,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 55,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 63,
                "value_type": "Subscript"
              },
              {
                "name": "fixed_content",
                "lineno": 128,
                "value_type": "Call"
              },
              {
                "name": "errors",
                "lineno": 179,
                "value_type": "ListComp"
              },
              {
                "name": "indent_level",
                "lineno": 70,
                "value_type": "BinOp"
              },
              {
                "name": "func_body",
                "lineno": 71,
                "value_type": "List"
              },
              {
                "name": "j",
                "lineno": 72,
                "value_type": "BinOp"
              },
              {
                "name": "has_return_value",
                "lineno": 89,
                "value_type": "Constant"
              },
              {
                "name": "next_line",
                "lineno": 75,
                "value_type": "Subscript"
              },
              {
                "name": "next_indent",
                "lineno": 81,
                "value_type": "BinOp"
              },
              {
                "name": "line",
                "lineno": 101,
                "value_type": "Call"
              },
              {
                "name": "changes_made",
                "lineno": 102,
                "value_type": "Constant"
              },
              {
                "name": "import_added",
                "lineno": 107,
                "value_type": "Constant"
              },
              {
                "name": "has_return_value",
                "lineno": 96,
                "value_type": "Constant"
              },
              {
                "name": "import_added",
                "lineno": 118,
                "value_type": "Constant"
              },
              {
                "name": "import_added",
                "lineno": 112,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 22,
                "content": "Parse the file"
              },
              {
                "line": 27,
                "content": "Check if function has -> None annotation"
              },
              {
                "line": 33,
                "content": "Check if function actually returns something"
              },
              {
                "line": 65,
                "content": "Look for function definitions with -> None"
              },
              {
                "line": 69,
                "content": "Find function body"
              },
              {
                "line": 88,
                "content": "Check if function returns a value"
              },
              {
                "line": 100,
                "content": "Fix the annotation"
              },
              {
                "line": 104,
                "content": "Add Any import if needed"
              },
              {
                "line": 106,
                "content": "Find where to insert import"
              },
              {
                "line": 146,
                "content": "Find all Python files"
              },
              {
                "line": 170,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              }
            ],
            "total_lines": 187,
            "code_lines": 137
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "create_notebook.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 8525,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "nbformat",
                "asname": "nbf",
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "create_ghostbusters_notebook",
                "lineno": 10,
                "args": [],
                "decorators": [],
                "docstring": "Create a Jupyter notebook for Ghostbusters battle analysis"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "nb",
                "lineno": 14,
                "value_type": "Call"
              },
              {
                "name": "title_cell",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "imports_cell",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "run_cell",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "analysis_cell",
                "lineno": 38,
                "value_type": "Call"
              },
              {
                "name": "structure_cell",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "structure_code",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "delusions_cell",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "delusions_code",
                "lineno": 70,
                "value_type": "Call"
              },
              {
                "name": "recovery_cell",
                "lineno": 94,
                "value_type": "Call"
              },
              {
                "name": "recovery_code",
                "lineno": 97,
                "value_type": "Call"
              },
              {
                "name": "validation_cell",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "validation_code",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "recovery_results_cell",
                "lineno": 137,
                "value_type": "Call"
              },
              {
                "name": "recovery_results_code",
                "lineno": 142,
                "value_type": "Call"
              },
              {
                "name": "metadata_cell",
                "lineno": 155,
                "value_type": "Call"
              },
              {
                "name": "metadata_code",
                "lineno": 158,
                "value_type": "Call"
              },
              {
                "name": "battle_cell",
                "lineno": 171,
                "value_type": "Call"
              },
              {
                "name": "battle_code",
                "lineno": 174,
                "value_type": "Call"
              },
              {
                "name": "deep_dive_cell",
                "lineno": 202,
                "value_type": "Call"
              },
              {
                "name": "deep_dive_code",
                "lineno": 207,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 13,
                "content": "Create a new notebook"
              },
              {
                "line": 16,
                "content": "Add title cell"
              },
              {
                "line": 23,
                "content": "Add imports cell"
              },
              {
                "line": 30,
                "content": "Import Ghostbusters"
              },
              {
                "line": 34,
                "content": "Add running analysis cell"
              },
              {
                "line": 37,
                "content": "Add analysis code cell"
              },
              {
                "line": 45,
                "content": "Add state structure cell"
              },
              {
                "line": 48,
                "content": "Add structure analysis code"
              },
              {
                "line": 56,
                "content": "Show all state attributes"
              },
              {
                "line": 66,
                "content": "Add delusions analysis cell"
              },
              {
                "line": 69,
                "content": "Add delusions code"
              },
              {
                "line": 75,
                "content": "Show first few delusions"
              },
              {
                "line": 81,
                "content": "Analyze delusion types"
              },
              {
                "line": 93,
                "content": "Add recovery actions cell"
              },
              {
                "line": 96,
                "content": "Add recovery code"
              },
              {
                "line": 102,
                "content": "Show first few recovery actions"
              },
              {
                "line": 108,
                "content": "Analyze recovery action types"
              },
              {
                "line": 120,
                "content": "Add validation results cell"
              },
              {
                "line": 123,
                "content": "Add validation code"
              },
              {
                "line": 136,
                "content": "Add recovery results cell"
              },
              {
                "line": 141,
                "content": "Add recovery results code"
              },
              {
                "line": 154,
                "content": "Add metadata cell"
              },
              {
                "line": 157,
                "content": "Add metadata code"
              },
              {
                "line": 170,
                "content": "Add battle readiness cell"
              },
              {
                "line": 173,
                "content": "Add battle code"
              },
              {
                "line": 201,
                "content": "Add deep dive cell"
              },
              {
                "line": 206,
                "content": "Add deep dive code"
              },
              {
                "line": 212,
                "content": "Convert state to dict for easier exploration"
              },
              {
                "line": 218,
                "content": "Show detailed breakdown"
              },
              {
                "line": 237,
                "content": "Add all cells to notebook"
              },
              {
                "line": 261,
                "content": "Write the notebook"
              }
            ],
            "total_lines": 272,
            "code_lines": 195
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_mypy_compliant_code.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 952,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 3
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 4
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 13,
                "args": [
                  "self",
                  "name"
                ],
                "decorators": [],
                "docstring": "Initialize the base expert"
              },
              {
                "name": "detect_delusions",
                "lineno": 18,
                "args": [
                  "self",
                  "project_path"
                ],
                "decorators": [],
                "docstring": "Detect delusions in the project"
              },
              {
                "name": "__init__",
                "lineno": 26,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the security expert"
              },
              {
                "name": "detect_delusions",
                "lineno": 30,
                "args": [
                  "self",
                  "project_path"
                ],
                "decorators": [],
                "docstring": "Detect security vulnerabilities"
              }
            ],
            "classes": [
              {
                "name": "BaseExpert",
                "lineno": 7,
                "bases": [],
                "methods": [
                  "__init__",
                  "detect_delusions"
                ],
                "docstring": "Base class for all expert agents"
              },
              {
                "name": "SecurityExpert",
                "lineno": 23,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [
                  "__init__",
                  "detect_delusions"
                ],
                "docstring": "Expert agent for detecting security vulnerabilities"
              }
            ],
            "variables": [],
            "comments": [],
            "total_lines": 33,
            "code_lines": 22
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_test_return_values.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4874,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "fix_test_return_values",
                "lineno": 12,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Fix test functions that return values when they shouldn't"
              },
              {
                "name": "main",
                "lineno": 103,
                "args": [],
                "decorators": [],
                "docstring": "Main function to fix test return value issues"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "src_path",
                "lineno": 109,
                "value_type": "Call"
              },
              {
                "name": "python_files",
                "lineno": 110,
                "value_type": "Call"
              },
              {
                "name": "total_fixed",
                "lineno": 112,
                "value_type": "Constant"
              },
              {
                "name": "lines",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 19,
                "value_type": "List"
              },
              {
                "name": "changes_made",
                "lineno": 20,
                "value_type": "Constant"
              },
              {
                "name": "i",
                "lineno": 22,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 127,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 24,
                "value_type": "Subscript"
              },
              {
                "name": "fixed_content",
                "lineno": 90,
                "value_type": "Call"
              },
              {
                "name": "return_value_errors",
                "lineno": 134,
                "value_type": "ListComp"
              },
              {
                "name": "func_name",
                "lineno": 28,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 34,
                "value_type": "Call"
              },
              {
                "name": "indent_level",
                "lineno": 37,
                "value_type": "BinOp"
              },
              {
                "name": "func_body",
                "lineno": 38,
                "value_type": "List"
              },
              {
                "name": "j",
                "lineno": 39,
                "value_type": "BinOp"
              },
              {
                "name": "has_return_value",
                "lineno": 56,
                "value_type": "Constant"
              },
              {
                "name": "next_line",
                "lineno": 42,
                "value_type": "Subscript"
              },
              {
                "name": "next_indent",
                "lineno": 48,
                "value_type": "BinOp"
              },
              {
                "name": "modified_body",
                "lineno": 68,
                "value_type": "List"
              },
              {
                "name": "i",
                "lineno": 83,
                "value_type": "Name"
              },
              {
                "name": "has_return_value",
                "lineno": 63,
                "value_type": "Constant"
              },
              {
                "name": "indent",
                "lineno": 72,
                "value_type": "BinOp"
              },
              {
                "name": "changes_made",
                "lineno": 76,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 26,
                "content": "Look for test function definitions with -> None"
              },
              {
                "line": 36,
                "content": "Find function body"
              },
              {
                "line": 55,
                "content": "Check if function returns a value"
              },
              {
                "line": 67,
                "content": "Remove return statements from test functions"
              },
              {
                "line": 71,
                "content": "Replace return value with pass or comment"
              },
              {
                "line": 80,
                "content": "Replace the function body"
              },
              {
                "line": 108,
                "content": "Find all Python files"
              },
              {
                "line": 125,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              }
            ],
            "total_lines": 146,
            "code_lines": 107
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_secure_shell.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4006,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 61
              }
            ],
            "functions": [
              {
                "name": "test_go_service",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "Test the Go service directly"
              },
              {
                "name": "test_python_client",
                "lineno": 56,
                "args": [],
                "decorators": [],
                "docstring": "Test the Python client"
              },
              {
                "name": "test_security_improvements",
                "lineno": 83,
                "args": [],
                "decorators": [],
                "docstring": "Test security improvements over subprocess"
              },
              {
                "name": "main",
                "lineno": 99,
                "args": [],
                "decorators": [],
                "docstring": "Run all tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "service_path",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 104,
                "value_type": "List"
              },
              {
                "name": "results",
                "lineno": 110,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 125,
                "value_type": "Call"
              },
              {
                "name": "total",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "status",
                "lineno": 122,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 21,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 65,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 70,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 113,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Check if service is built"
              },
              {
                "line": 42,
                "content": "Check if service can be executed (don't actually start it as it's a long-running service)"
              },
              {
                "line": 45,
                "content": "Just check if the file exists and is executable"
              },
              {
                "line": 64,
                "content": "Test basic command execution"
              },
              {
                "line": 69,
                "content": "Test timeout"
              },
              {
                "line": 87,
                "content": "Test command injection prevention (mock)"
              },
              {
                "line": 90,
                "content": "Test timeout enforcement (mock)"
              },
              {
                "line": 93,
                "content": "Test resource limits (mock)"
              }
            ],
            "total_lines": 138,
            "code_lines": 98
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "recursive_code_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 15606,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              },
              {
                "module": "code_generator",
                "names": [
                  "ClassDefinition",
                  "CodeFile",
                  "CodeGenerator",
                  "FunctionDefinition",
                  "ImportStatement"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 408,
                "args": [],
                "decorators": [],
                "docstring": "Test the recursive code generator"
              },
              {
                "name": "__init__",
                "lineno": 50,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_build_patterns",
                "lineno": 58,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build decomposition patterns based on reverse engineering research"
              },
              {
                "name": "decompose_string",
                "lineno": 98,
                "args": [
                  "self",
                  "string",
                  "depth"
                ],
                "decorators": [],
                "docstring": "Recursively decompose strings using established reverse engineering patterns\nBased on de4py AST analysis and Python-Reversal-Bot bytecode patterns"
              },
              {
                "name": "_decompose_with_pattern",
                "lineno": 153,
                "args": [
                  "self",
                  "string",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Decompose string using specific pattern"
              },
              {
                "name": "_decompose_import_statement",
                "lineno": 174,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose import statement using AST analysis (de4py pattern)"
              },
              {
                "name": "_decompose_function_call",
                "lineno": 199,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose function call using AST analysis"
              },
              {
                "name": "_decompose_class_definition",
                "lineno": 227,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose class definition using AST analysis"
              },
              {
                "name": "_decompose_variable_assignment",
                "lineno": 251,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose variable assignment"
              },
              {
                "name": "_decompose_string_literal",
                "lineno": 274,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose string literal (memory analysis pattern from de4py)"
              },
              {
                "name": "_validate_decomposition",
                "lineno": 289,
                "args": [
                  "self",
                  "original",
                  "decomposed_model"
                ],
                "decorators": [],
                "docstring": "Validate decomposition mathematically\nInput == Output validation"
              },
              {
                "name": "generate_with_recursion",
                "lineno": 323,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate code with recursive decomposition\nEnhanced version that analyzes and decomposes generated strings"
              },
              {
                "name": "_extract_strings_from_code",
                "lineno": 355,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Extract potential strings for decomposition from generated code"
              },
              {
                "name": "_log_decomposition_summary",
                "lineno": 384,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Log summary of decomposition analysis"
              }
            ],
            "classes": [
              {
                "name": "DecompositionResult",
                "lineno": 23,
                "bases": [],
                "methods": [],
                "docstring": "Result of string decomposition analysis"
              },
              {
                "name": "StringPattern",
                "lineno": 35,
                "bases": [],
                "methods": [],
                "docstring": "Pattern for string decomposition"
              },
              {
                "name": "RecursiveCodeGenerator",
                "lineno": 44,
                "bases": [
                  "CodeGenerator"
                ],
                "methods": [
                  "__init__",
                  "_build_patterns",
                  "decompose_string",
                  "_decompose_with_pattern",
                  "_decompose_import_statement",
                  "_decompose_function_call",
                  "_decompose_class_definition",
                  "_decompose_variable_assignment",
                  "_decompose_string_literal",
                  "_validate_decomposition",
                  "generate_with_recursion",
                  "_extract_strings_from_code",
                  "_log_decomposition_summary"
                ],
                "docstring": "Enhanced code generator with recursive AST-based decomposition\nBased on de4py and Python-Reversal-Bot reverse engineering patterns"
              }
            ],
            "variables": [
              {
                "name": "generator",
                "lineno": 415,
                "value_type": "Call"
              },
              {
                "name": "test_strings",
                "lineno": 418,
                "value_type": "List"
              },
              {
                "name": "string",
                "lineno": 159,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 329,
                "value_type": "Call"
              },
              {
                "name": "strings_to_analyze",
                "lineno": 334,
                "value_type": "Call"
              },
              {
                "name": "decompositions_found",
                "lineno": 339,
                "value_type": "Constant"
              },
              {
                "name": "strings",
                "lineno": 357,
                "value_type": "List"
              },
              {
                "name": "import_pattern",
                "lineno": 360,
                "value_type": "Constant"
              },
              {
                "name": "func_pattern",
                "lineno": 369,
                "value_type": "Constant"
              },
              {
                "name": "class_pattern",
                "lineno": 376,
                "value_type": "Constant"
              },
              {
                "name": "by_type",
                "lineno": 394,
                "value_type": "Dict"
              },
              {
                "name": "validated",
                "lineno": 404,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 429,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 206,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 234,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 258,
                "value_type": "Call"
              },
              {
                "name": "validation_passed",
                "lineno": 312,
                "value_type": "Compare"
              },
              {
                "name": "decomposition",
                "lineno": 341,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 364,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 371,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 378,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 190,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 208,
                "value_type": "Call"
              },
              {
                "name": "args_str",
                "lineno": 209,
                "value_type": "Call"
              },
              {
                "name": "args",
                "lineno": 212,
                "value_type": "ListComp"
              },
              {
                "name": "class_name",
                "lineno": 236,
                "value_type": "Call"
              },
              {
                "name": "inheritance",
                "lineno": 237,
                "value_type": "IfExp"
              },
              {
                "name": "var_name",
                "lineno": 260,
                "value_type": "Call"
              },
              {
                "name": "var_value",
                "lineno": 261,
                "value_type": "Call"
              },
              {
                "name": "generated",
                "lineno": 297,
                "value_type": "Call"
              },
              {
                "name": "decomposed_model",
                "lineno": 125,
                "value_type": "Call"
              },
              {
                "name": "module",
                "lineno": 185,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 186,
                "value_type": "ListComp"
              },
              {
                "name": "module",
                "lineno": 192,
                "value_type": "Call"
              },
              {
                "name": "generated",
                "lineno": 309,
                "value_type": "Call"
              },
              {
                "name": "validation_passed",
                "lineno": 128,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "generated",
                "lineno": 301,
                "value_type": "JoinedStr"
              },
              {
                "name": "generated",
                "lineno": 305,
                "value_type": "JoinedStr"
              },
              {
                "name": "generated",
                "lineno": 307,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 61,
                "content": "Import patterns (AST-based, from de4py)"
              },
              {
                "line": 68,
                "content": "Function call patterns (AST-based)"
              },
              {
                "line": 75,
                "content": "Class definition patterns (AST-based)"
              },
              {
                "line": 82,
                "content": "Variable assignment patterns (AST-based)"
              },
              {
                "line": 89,
                "content": "String literal patterns (Memory analysis, from de4py)"
              },
              {
                "line": 107,
                "content": "Safety limits"
              },
              {
                "line": 116,
                "content": "Try each pattern"
              },
              {
                "line": 123,
                "content": "Attempt decomposition"
              },
              {
                "line": 127,
                "content": "Validate decomposition mathematically"
              },
              {
                "line": 177,
                "content": "Parse with AST to validate"
              },
              {
                "line": 180,
                "content": "Extract components using regex"
              },
              {
                "line": 182,
                "content": "\"from typing import Optional, List\""
              },
              {
                "line": 189,
                "content": "\"import typing\""
              },
              {
                "line": 202,
                "content": "Parse with AST to validate"
              },
              {
                "line": 205,
                "content": "Extract function name and arguments"
              },
              {
                "line": 211,
                "content": "Parse arguments"
              },
              {
                "line": 230,
                "content": "Parse with AST to validate"
              },
              {
                "line": 233,
                "content": "Extract class name and inheritance"
              },
              {
                "line": 254,
                "content": "Parse with AST to validate"
              },
              {
                "line": 257,
                "content": "Extract variable name and value"
              },
              {
                "line": 277,
                "content": "Validate it's a proper string literal"
              },
              {
                "line": 295,
                "content": "Generate code from decomposed model"
              },
              {
                "line": 299,
                "content": "Handle custom models"
              },
              {
                "line": 311,
                "content": "Mathematical validation"
              },
              {
                "line": 328,
                "content": "Generate initial code using the model's to_code method"
              },
              {
                "line": 333,
                "content": "Extract all strings from the generated code"
              },
              {
                "line": 338,
                "content": "Analyze each string for decomposition opportunities"
              },
              {
                "line": 350,
                "content": "Log decomposition history"
              },
              {
                "line": 359,
                "content": "Extract import statements"
              },
              {
                "line": 368,
                "content": "Extract function calls"
              },
              {
                "line": 375,
                "content": "Extract class definitions"
              },
              {
                "line": 393,
                "content": "Group by type"
              },
              {
                "line": 403,
                "content": "Validation stats"
              },
              {
                "line": 414,
                "content": "Create recursive generator"
              },
              {
                "line": 417,
                "content": "Test decomposition patterns"
              }
            ],
            "total_lines": 441,
            "code_lines": 331
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "proven_QualityRule.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 995,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "enum",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 19,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__post_init__",
                "lineno": 23,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Validate rule configuration"
              },
              {
                "name": "detect_violations",
                "lineno": 29,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Detect rule violations in code"
              },
              {
                "name": "generate_fix",
                "lineno": 35,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate fix for violations"
              }
            ],
            "classes": [
              {
                "name": "QualityRule",
                "lineno": 14,
                "bases": [],
                "methods": [
                  "__init__",
                  "__post_init__",
                  "detect_violations",
                  "generate_fix"
                ],
                "docstring": "Represents a code quality rule with detection and fix strategies"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 20,
                "content": "TODO: Initialize based on requirements: ['rule identifier', 'severity level', 'detection pattern', 'fix strategy', 'AST-aware validation']"
              },
              {
                "line": 27,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 33,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 39,
                "content": "TODO: Implement based on requirements: []"
              }
            ],
            "total_lines": 40,
            "code_lines": 27
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "prove_round_trip.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 10082,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "round_trip_model_system",
                "names": [
                  "RoundTripModelSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "create_real_design_spec",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "Create a real design specification for a code quality system"
              },
              {
                "name": "prove_round_trip",
                "lineno": 133,
                "args": [],
                "decorators": [],
                "docstring": "Prove the round-trip system works with real data"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "system",
                "lineno": 139,
                "value_type": "Call"
              },
              {
                "name": "design_spec",
                "lineno": 143,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 150,
                "value_type": "Call"
              },
              {
                "name": "model_file",
                "lineno": 156,
                "value_type": "Constant"
              },
              {
                "name": "generated_files",
                "lineno": 162,
                "value_type": "Call"
              },
              {
                "name": "loaded_model",
                "lineno": 177,
                "value_type": "Call"
              },
              {
                "name": "original_components",
                "lineno": 183,
                "value_type": "DictComp"
              },
              {
                "name": "loaded_components",
                "lineno": 184,
                "value_type": "DictComp"
              },
              {
                "name": "original_names",
                "lineno": 192,
                "value_type": "Call"
              },
              {
                "name": "loaded_names",
                "lineno": 193,
                "value_type": "Call"
              },
              {
                "name": "model_data",
                "lineno": 227,
                "value_type": "Call"
              },
              {
                "name": "output_file",
                "lineno": 170,
                "value_type": "JoinedStr"
              },
              {
                "name": "original",
                "lineno": 198,
                "value_type": "Subscript"
              },
              {
                "name": "loaded",
                "lineno": 199,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 217,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 138,
                "content": "Initialize system"
              },
              {
                "line": 141,
                "content": "STEP 1: Create real design specification"
              },
              {
                "line": 148,
                "content": "STEP 2: Create model from design (NO reverse engineering)"
              },
              {
                "line": 154,
                "content": "STEP 3: Save model to JSON"
              },
              {
                "line": 160,
                "content": "STEP 4: Generate code from model"
              },
              {
                "line": 167,
                "content": "STEP 5: Save generated code"
              },
              {
                "line": 175,
                "content": "STEP 6: Load model from JSON (round-trip)"
              },
              {
                "line": 181,
                "content": "STEP 7: Verify round-trip integrity"
              },
              {
                "line": 186,
                "content": "Check component count"
              },
              {
                "line": 191,
                "content": "Check component names"
              },
              {
                "line": 196,
                "content": "Check component details"
              },
              {
                "line": 214,
                "content": "STEP 8: Show generated code quality"
              },
              {
                "line": 225,
                "content": "STEP 9: Demonstrate model persistence"
              }
            ],
            "total_lines": 256,
            "code_lines": 217
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_pattern_matching.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1633,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [
              {
                "name": "matches_pattern",
                "lineno": 6,
                "args": [
                  "file_path",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Check if file path matches pattern"
              },
              {
                "name": "test_specific_patterns",
                "lineno": 24,
                "args": [],
                "decorators": [],
                "docstring": "Test specific pattern matching"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "test_cases",
                "lineno": 27,
                "value_type": "List"
              },
              {
                "name": "pattern_parts",
                "lineno": 10,
                "value_type": "Call"
              },
              {
                "name": "file_parts",
                "lineno": 11,
                "value_type": "Call"
              },
              {
                "name": "pattern_idx",
                "lineno": 14,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 39,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 9,
                "content": "Convert glob pattern to simple matching"
              },
              {
                "line": 13,
                "content": "Check if pattern parts are in file parts"
              }
            ],
            "total_lines": 47,
            "code_lines": 36
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "final_projection.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3984,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 6
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "jwt",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "redis",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "streamlit",
                "asname": "st",
                "lineno": 11
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 13
              },
              {
                "module": "html",
                "asname": null,
                "lineno": 99
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 104,
                "args": [],
                "decorators": [],
                "docstring": "Main Streamlit application"
              },
              {
                "name": "__init__",
                "lineno": 61,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "get_credential_secure",
                "lineno": 65,
                "args": [
                  "self",
                  "key"
                ],
                "decorators": [],
                "docstring": "Retrieve credential securely from Redis"
              },
              {
                "name": "decrypt_credential",
                "lineno": 72,
                "args": [
                  "self",
                  "encrypted_value"
                ],
                "decorators": [],
                "docstring": "Decrypt credential (placeholder implementation)"
              },
              {
                "name": "create_session_token",
                "lineno": 76,
                "args": [
                  "self",
                  "user_id",
                  "role"
                ],
                "decorators": [],
                "docstring": "Create JWT session token"
              },
              {
                "name": "validate_uuid",
                "lineno": 88,
                "args": [
                  "uuid_str"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate UUID format"
              },
              {
                "name": "sanitize_input",
                "lineno": 97,
                "args": [
                  "input_str"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Sanitize user input to prevent injection attacks"
              }
            ],
            "classes": [
              {
                "name": "SnowflakeConfig",
                "lineno": 30,
                "bases": [
                  "BaseModel"
                ],
                "methods": [],
                "docstring": null
              },
              {
                "name": "OpenFlowConfig",
                "lineno": 39,
                "bases": [
                  "BaseModel"
                ],
                "methods": [],
                "docstring": null
              },
              {
                "name": "DeploymentStatus",
                "lineno": 48,
                "bases": [],
                "methods": [],
                "docstring": null
              },
              {
                "name": "SecurityManager",
                "lineno": 58,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_credential_secure",
                  "decrypt_credential",
                  "create_session_token",
                  "validate_uuid",
                  "sanitize_input"
                ],
                "docstring": "Security manager for credential handling and session management"
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 15,
                "value_type": "Dict"
              },
              {
                "name": "AWS_CONFIG",
                "lineno": 23,
                "value_type": "Dict"
              },
              {
                "name": "encrypted_value",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "timeout_minutes",
                "lineno": 78,
                "value_type": "Subscript"
              },
              {
                "name": "payload",
                "lineno": 80,
                "value_type": "Dict"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 115,
            "code_lines": 91
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "call_ghostbusters.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4547,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.ghostbusters",
                "names": [
                  "run_ghostbusters"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 13,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 29,
                "value_type": "Await"
              },
              {
                "name": "round_trip_issues",
                "lineno": 72,
                "value_type": "List"
              },
              {
                "name": "round_trip_recoveries",
                "lineno": 90,
                "value_type": "List"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Setup logging"
              },
              {
                "line": 27,
                "content": "Call Ghostbusters"
              },
              {
                "line": 40,
                "content": "Display delusions if any"
              },
              {
                "line": 48,
                "content": "Display recovery actions if any"
              },
              {
                "line": 56,
                "content": "Display errors if any"
              },
              {
                "line": 62,
                "content": "Display warnings if any"
              },
              {
                "line": 71,
                "content": "Analyze round-trip model system specifically"
              },
              {
                "line": 89,
                "content": "Check for recovery actions related to round-trip"
              }
            ],
            "total_lines": 123,
            "code_lines": 91
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_enhanced_round_trip.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 8777,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "src.round_trip_model_system",
                "names": [
                  "RoundTripModelSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "ast",
                "asname": null,
                "lineno": 147
              }
            ],
            "functions": [
              {
                "name": "create_test_design_spec",
                "lineno": 11,
                "args": [],
                "decorators": [],
                "docstring": "Create a test design specification with proper dependencies"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "system",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "design_spec",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 134,
                "value_type": "Call"
              },
              {
                "name": "generated_files",
                "lineno": 139,
                "value_type": "Call"
              },
              {
                "name": "json_path",
                "lineno": 156,
                "value_type": "Constant"
              },
              {
                "name": "loaded_model",
                "lineno": 162,
                "value_type": "Call"
              },
              {
                "name": "regenerated_files",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "integrity_check",
                "lineno": 174,
                "value_type": "Constant"
              },
              {
                "name": "dependency_check",
                "lineno": 189,
                "value_type": "Constant"
              },
              {
                "name": "success_rate",
                "lineno": 213,
                "value_type": "IfExp"
              },
              {
                "name": "integrity_check",
                "lineno": 185,
                "value_type": "Constant"
              },
              {
                "name": "integrity_check",
                "lineno": 182,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 125,
                "content": "Create system"
              },
              {
                "line": 128,
                "content": "Create design specification"
              },
              {
                "line": 132,
                "content": "Step 1: Create model from design"
              },
              {
                "line": 137,
                "content": "Step 2: Generate code from model"
              },
              {
                "line": 145,
                "content": "Test AST parsing"
              },
              {
                "line": 154,
                "content": "Step 3: Save model to JSON"
              },
              {
                "line": 160,
                "content": "Step 4: Load model from JSON"
              },
              {
                "line": 167,
                "content": "Step 5: Generate code from loaded model"
              },
              {
                "line": 172,
                "content": "Step 6: Verify round-trip integrity"
              },
              {
                "line": 187,
                "content": "Step 7: Test dependency resolution"
              },
              {
                "line": 192,
                "content": "Check for proper imports"
              },
              {
                "line": 203,
                "content": "Final results"
              },
              {
                "line": 212,
                "content": "Calculate success rate"
              }
            ],
            "total_lines": 224,
            "code_lines": 183
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_domain_detection.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3195,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "test_domain_detection",
                "lineno": 9,
                "args": [],
                "decorators": [],
                "docstring": "Test domain detection for specific files"
              },
              {
                "name": "calculate_pattern_score",
                "lineno": 63,
                "args": [
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Calculate pattern specificity score"
              },
              {
                "name": "matches_pattern",
                "lineno": 75,
                "args": [
                  "file_path",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Simple pattern matching"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "test_files",
                "lineno": 17,
                "value_type": "List"
              },
              {
                "name": "model_data",
                "lineno": 14,
                "value_type": "Call"
              },
              {
                "name": "best_match",
                "lineno": 36,
                "value_type": "Constant"
              },
              {
                "name": "best_score",
                "lineno": 37,
                "value_type": "Constant"
              },
              {
                "name": "best_pattern",
                "lineno": 38,
                "value_type": "Constant"
              },
              {
                "name": "pattern_parts",
                "lineno": 79,
                "value_type": "Call"
              },
              {
                "name": "file_parts",
                "lineno": 80,
                "value_type": "Call"
              },
              {
                "name": "pattern_idx",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "patterns",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "parts",
                "lineno": 69,
                "value_type": "Call"
              },
              {
                "name": "patterns",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "score",
                "lineno": 45,
                "value_type": "Call"
              },
              {
                "name": "best_score",
                "lineno": 47,
                "value_type": "Name"
              },
              {
                "name": "best_match",
                "lineno": 48,
                "value_type": "Name"
              },
              {
                "name": "best_pattern",
                "lineno": 49,
                "value_type": "Name"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Load the model"
              },
              {
                "line": 16,
                "content": "Test files"
              },
              {
                "line": 30,
                "content": "Check if file exists"
              },
              {
                "line": 35,
                "content": "Test pattern matching with scoring"
              },
              {
                "line": 56,
                "content": "Show available patterns"
              },
              {
                "line": 68,
                "content": "Count path segments for specificity"
              },
              {
                "line": 72,
                "content": "Exact match gets highest priority"
              },
              {
                "line": 78,
                "content": "Convert glob pattern to simple matching"
              },
              {
                "line": 82,
                "content": "Check if pattern parts are in file parts"
              }
            ],
            "total_lines": 95,
            "code_lines": 68
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "ast_guided_code_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 11200,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "src.artifact_forge.agents.artifact_parser_enhanced",
                "names": [
                  "EnhancedArtifactParser"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 284,
                "args": [],
                "decorators": [],
                "docstring": "Main function to demonstrate AST-guided code generation"
              },
              {
                "name": "__post_init__",
                "lineno": 30,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 52,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_build_linting_rules",
                "lineno": 56,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build AST-aware linting rules"
              },
              {
                "name": "analyze_file_ast",
                "lineno": 85,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Analyze file using AST with linting rule integration"
              },
              {
                "name": "_extract_ast_nodes",
                "lineno": 123,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Extract AST nodes with metadata"
              },
              {
                "name": "_detect_ast_aware_issues",
                "lineno": 147,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Detect issues using AST-aware patterns"
              },
              {
                "name": "_check_rule_against_node",
                "lineno": 163,
                "args": [
                  "self",
                  "rule",
                  "node"
                ],
                "decorators": [],
                "docstring": "Check if a rule applies to a specific AST node"
              },
              {
                "name": "_generate_ast_aware_fixes",
                "lineno": 200,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Generate AST-aware fixes based on detected issues"
              },
              {
                "name": "_identify_syntactic_boundaries",
                "lineno": 217,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Identify syntactic boundaries for guided generation"
              },
              {
                "name": "_fallback_analysis",
                "lineno": 238,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fallback analysis when AST parsing fails"
              },
              {
                "name": "generate_perfect_code",
                "lineno": 249,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Generate perfect code using AST-guided approach"
              },
              {
                "name": "_generate_ast_guided_code",
                "lineno": 266,
                "args": [
                  "self",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Generate code using AST-guided approach"
              }
            ],
            "classes": [
              {
                "name": "ASTNode",
                "lineno": 20,
                "bases": [],
                "methods": [
                  "__post_init__"
                ],
                "docstring": "Represents an AST node with metadata"
              },
              {
                "name": "LintingRule",
                "lineno": 38,
                "bases": [],
                "methods": [],
                "docstring": "Represents a linting rule with AST-aware patterns"
              },
              {
                "name": "ASTGuidedCodeGenerator",
                "lineno": 49,
                "bases": [],
                "methods": [
                  "__init__",
                  "_build_linting_rules",
                  "analyze_file_ast",
                  "_extract_ast_nodes",
                  "_detect_ast_aware_issues",
                  "_check_rule_against_node",
                  "_generate_ast_aware_fixes",
                  "_identify_syntactic_boundaries",
                  "_fallback_analysis",
                  "generate_perfect_code",
                  "_generate_ast_guided_code"
                ],
                "docstring": "AST-guided code generator that respects syntactic boundaries"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 286,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 289,
                "value_type": "Constant"
              },
              {
                "name": "analysis",
                "lineno": 295,
                "value_type": "Call"
              },
              {
                "name": "perfect_code",
                "lineno": 306,
                "value_type": "Call"
              },
              {
                "name": "parsed_artifact",
                "lineno": 90,
                "value_type": "Call"
              },
              {
                "name": "nodes",
                "lineno": 125,
                "value_type": "List"
              },
              {
                "name": "issues",
                "lineno": 149,
                "value_type": "List"
              },
              {
                "name": "issues",
                "lineno": 202,
                "value_type": "Call"
              },
              {
                "name": "fixes",
                "lineno": 203,
                "value_type": "List"
              },
              {
                "name": "boundaries",
                "lineno": 219,
                "value_type": "List"
              },
              {
                "name": "analysis",
                "lineno": 254,
                "value_type": "Call"
              },
              {
                "name": "generated_code",
                "lineno": 261,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 100,
                "value_type": "Call"
              },
              {
                "name": "ast_analysis",
                "lineno": 103,
                "value_type": "Dict"
              },
              {
                "name": "merged_analysis",
                "lineno": 112,
                "value_type": "Dict"
              },
              {
                "name": "node_type",
                "lineno": 152,
                "value_type": "Attribute"
              },
              {
                "name": "fix",
                "lineno": 206,
                "value_type": "Dict"
              },
              {
                "name": "content",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "ast_node",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "boundary",
                "lineno": 223,
                "value_type": "Dict"
              },
              {
                "name": "issue",
                "lineno": 157,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 14,
                "content": "Configure logging"
              },
              {
                "line": 89,
                "content": "Use existing EnhancedArtifactParser"
              },
              {
                "line": 96,
                "content": "Extract AST tree for detailed analysis"
              },
              {
                "line": 102,
                "content": "AST-guided analysis"
              },
              {
                "line": 111,
                "content": "Merge with existing parser results"
              },
              {
                "line": 154,
                "content": "Check each linting rule against this node type"
              },
              {
                "line": 170,
                "content": "Check for unused imports (simplified)"
              },
              {
                "line": 179,
                "content": "Check for missing blank lines (simplified)"
              },
              {
                "line": 188,
                "content": "Check for missing type annotations"
              },
              {
                "line": 253,
                "content": "Analyze with AST guidance"
              },
              {
                "line": 260,
                "content": "Generate code respecting syntactic boundaries"
              },
              {
                "line": 268,
                "content": "This is where we'd implement the actual code generation"
              },
              {
                "line": 269,
                "content": "For now, return a placeholder"
              },
              {
                "line": 273,
                "content": "AST Analysis Results:"
              },
              {
                "line": 274,
                "content": "- {len(analysis.get('ast_nodes', []))} AST nodes"
              },
              {
                "line": 275,
                "content": "- {len(analysis.get('linting_issues', []))} linting issues"
              },
              {
                "line": 276,
                "content": "- {len(analysis.get('fix_strategies', []))} fix strategies"
              },
              {
                "line": 277,
                "content": "- {len(analysis.get('syntactic_boundaries', []))} syntactic boundaries"
              },
              {
                "line": 279,
                "content": "TODO: Implement actual AST-guided code generation"
              },
              {
                "line": 280,
                "content": "This would respect syntactic boundaries and apply AST-aware fixes"
              },
              {
                "line": 288,
                "content": "Test with a sample file"
              },
              {
                "line": 294,
                "content": "Analyze with AST guidance"
              },
              {
                "line": 305,
                "content": "Generate perfect code"
              }
            ],
            "total_lines": 313,
            "code_lines": 233
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "analyze_artifact_findings.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 6568,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "load_analysis_report",
                "lineno": 13,
                "args": [],
                "decorators": [],
                "docstring": "Load the comprehensive analysis report"
              },
              {
                "name": "analyze_untraced_artifacts",
                "lineno": 23,
                "args": [
                  "report"
                ],
                "decorators": [],
                "docstring": "Analyze untraced artifacts to identify patterns"
              },
              {
                "name": "analyze_missing_domains",
                "lineno": 34,
                "args": [
                  "report"
                ],
                "decorators": [],
                "docstring": "Get missing domains from the analysis"
              },
              {
                "name": "analyze_missing_requirements",
                "lineno": 38,
                "args": [
                  "report"
                ],
                "decorators": [],
                "docstring": "Get missing requirements from the analysis"
              },
              {
                "name": "analyze_python_issues",
                "lineno": 42,
                "args": [
                  "report"
                ],
                "decorators": [],
                "docstring": "Get Python files with AST parsing issues"
              },
              {
                "name": "generate_action_plan",
                "lineno": 46,
                "args": [
                  "report"
                ],
                "decorators": [],
                "docstring": "Generate actionable plan based on analysis findings"
              },
              {
                "name": "print_findings_summary",
                "lineno": 93,
                "args": [
                  "report"
                ],
                "decorators": [],
                "docstring": "Print a comprehensive findings summary"
              },
              {
                "name": "print_action_plan",
                "lineno": 143,
                "args": [
                  "action_plan"
                ],
                "decorators": [],
                "docstring": "Print the action plan"
              },
              {
                "name": "main",
                "lineno": 154,
                "args": [],
                "decorators": [],
                "docstring": "Main function to analyze findings"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "report_file",
                "lineno": 15,
                "value_type": "Call"
              },
              {
                "name": "untraced",
                "lineno": 25,
                "value_type": "List"
              },
              {
                "name": "action_plan",
                "lineno": 48,
                "value_type": "Dict"
              },
              {
                "name": "summary",
                "lineno": 57,
                "value_type": "Call"
              },
              {
                "name": "missing_domains",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "missing_requirements",
                "lineno": 71,
                "value_type": "Call"
              },
              {
                "name": "python_issues",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "summary",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "domain_analysis",
                "lineno": 107,
                "value_type": "Call"
              },
              {
                "name": "missing_domains",
                "lineno": 112,
                "value_type": "Call"
              },
              {
                "name": "req_analysis",
                "lineno": 119,
                "value_type": "Call"
              },
              {
                "name": "missing_reqs",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "python_analysis",
                "lineno": 131,
                "value_type": "Call"
              },
              {
                "name": "python_issues",
                "lineno": 137,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 159,
                "value_type": "Call"
              },
              {
                "name": "action_plan",
                "lineno": 167,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 56,
                "content": "Immediate actions"
              },
              {
                "line": 63,
                "content": "Domain improvements"
              },
              {
                "line": 70,
                "content": "Requirements implementation"
              },
              {
                "line": 77,
                "content": "Python fixes"
              },
              {
                "line": 84,
                "content": "Model updates"
              },
              {
                "line": 98,
                "content": "Summary statistics"
              },
              {
                "line": 106,
                "content": "Domain analysis"
              },
              {
                "line": 118,
                "content": "Requirements analysis"
              },
              {
                "line": 130,
                "content": "Python analysis"
              },
              {
                "line": 158,
                "content": "Load report"
              },
              {
                "line": 163,
                "content": "Print findings summary"
              },
              {
                "line": 166,
                "content": "Generate and print action plan"
              },
              {
                "line": 170,
                "content": "Save action plan"
              }
            ],
            "total_lines": 178,
            "code_lines": 129
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_simple_type_issues.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4108,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "fix_yaml_imports",
                "lineno": 12,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Add type ignore for yaml imports"
              },
              {
                "name": "fix_return_value_issues_simple",
                "lineno": 30,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Fix functions that return values when they shouldn't - simple approach"
              },
              {
                "name": "main",
                "lineno": 81,
                "args": [],
                "decorators": [],
                "docstring": "Fix simple type annotation issues"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "python_files",
                "lineno": 85,
                "value_type": "List"
              },
              {
                "name": "yaml_fixes",
                "lineno": 92,
                "value_type": "Constant"
              },
              {
                "name": "return_fixes",
                "lineno": 93,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 108,
                "value_type": "Call"
              },
              {
                "name": "original_content",
                "lineno": 36,
                "value_type": "Name"
              },
              {
                "name": "lines",
                "lineno": 39,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 40,
                "value_type": "List"
              },
              {
                "name": "fixed_content",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "error_lines",
                "lineno": 117,
                "value_type": "ListComp"
              },
              {
                "name": "error_count",
                "lineno": 118,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 34,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 48,
                "value_type": "Call"
              },
              {
                "name": "func_start",
                "lineno": 50,
                "value_type": "Call"
              },
              {
                "name": "func_end",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "func_body",
                "lineno": 55,
                "value_type": "Subscript"
              },
              {
                "name": "func_end",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 58,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 38,
                "content": "Find functions that return values but are marked as -> None"
              },
              {
                "line": 43,
                "content": "If line has -> None and contains return with a value, change to -> Any"
              },
              {
                "line": 45,
                "content": "Check if this function has return statements with values"
              },
              {
                "line": 49,
                "content": "Look for return statements with values in the function"
              },
              {
                "line": 57,
                "content": "Function returns a value, change to Any"
              },
              {
                "line": 59,
                "content": "Add typing import if needed"
              },
              {
                "line": 61,
                "content": "Add import at the top"
              },
              {
                "line": 84,
                "content": "Get all Python files in src/"
              },
              {
                "line": 104,
                "content": "Test MyPy again"
              },
              {
                "line": 106,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              }
            ],
            "total_lines": 127,
            "code_lines": 88
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "generate_perfect_billing_analyzer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1253,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "generate_billing_analyzer",
                "names": [
                  "generate_gemini_billing_analyzer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "perfect_code_generator",
                "names": [
                  "PerfectCodeGenerator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 14,
                "args": [],
                "decorators": [],
                "docstring": "Generate perfect billing analyzer"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "generator",
                "lineno": 22,
                "value_type": "Call"
              },
              {
                "name": "analyzer_file",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 31,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 21,
                "content": "Create perfect generator"
              },
              {
                "line": 24,
                "content": "Generate the billing analyzer model"
              },
              {
                "line": 28,
                "content": "Generate perfect code"
              }
            ],
            "total_lines": 43,
            "code_lines": 27
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_complex_model.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1970,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "src.complex_model_generator",
                "names": [
                  "create_complex_model"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "test_complex_model",
                "lineno": 10,
                "args": [],
                "decorators": [],
                "docstring": "Test the complex model on real files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "model",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 26,
                "value_type": "Constant"
              },
              {
                "name": "analysis",
                "lineno": 30,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Create complex model"
              },
              {
                "line": 25,
                "content": "Test on analyze_codebase.py"
              }
            ],
            "total_lines": 62,
            "code_lines": 44
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "infinite_queue_learning_system.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 15656,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "tempfile",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 12
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 15
              }
            ],
            "functions": [
              {
                "name": "test_infinite_queue_learning_system",
                "lineno": 439,
                "args": [],
                "decorators": [],
                "docstring": "Test the infinite queue learning system"
              },
              {
                "name": "emit_telemetry",
                "lineno": 88,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Emit telemetry for every failure"
              },
              {
                "name": "_send_to_learning_queue",
                "lineno": 105,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Send to infinite queue for continuous learning"
              },
              {
                "name": "_serialize_model_state",
                "lineno": 122,
                "args": [
                  "self",
                  "model_state"
                ],
                "decorators": [],
                "docstring": "Serialize model state for telemetry"
              },
              {
                "name": "_store_telemetry",
                "lineno": 131,
                "args": [
                  "self",
                  "queue_data"
                ],
                "decorators": [],
                "docstring": "Store telemetry data for analysis"
              },
              {
                "name": "get_current_state",
                "lineno": 137,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get current model state"
              },
              {
                "name": "__init__",
                "lineno": 150,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "send",
                "lineno": 154,
                "args": [
                  "self",
                  "data"
                ],
                "decorators": [],
                "docstring": "Send data to infinite queue"
              },
              {
                "name": "receive",
                "lineno": 160,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Receive all data from queue"
              },
              {
                "name": "__init__",
                "lineno": 174,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_and_learn",
                "lineno": 179,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate code and learn from any failures"
              },
              {
                "name": "_generate_intelligent_perfect_code",
                "lineno": 243,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate intelligent perfect code"
              },
              {
                "name": "_run_linting_check",
                "lineno": 250,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Run linting check on generated code"
              },
              {
                "name": "_get_context",
                "lineno": 275,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get current context"
              },
              {
                "name": "_learn_from_failure",
                "lineno": 284,
                "args": [
                  "self",
                  "errors",
                  "model"
                ],
                "decorators": [],
                "docstring": "Learn from every failure"
              },
              {
                "name": "_improved_model",
                "lineno": 295,
                "args": [
                  "self",
                  "original_model",
                  "errors"
                ],
                "decorators": [],
                "docstring": "Create improved model based on errors"
              },
              {
                "name": "__init__",
                "lineno": 308,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "detect_delusions",
                "lineno": 311,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Detect delusions in code"
              },
              {
                "name": "__init__",
                "lineno": 351,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_with_learning",
                "lineno": 357,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate code and learn from any failures"
              },
              {
                "name": "_serialize_model",
                "lineno": 415,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Serialize model for telemetry"
              },
              {
                "name": "_get_context",
                "lineno": 424,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get current context"
              },
              {
                "name": "_improved_model",
                "lineno": 432,
                "args": [
                  "self",
                  "model",
                  "delusions"
                ],
                "decorators": [],
                "docstring": "Create improved model based on delusions"
              },
              {
                "name": "to_code",
                "lineno": 449,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "TelemetryData",
                "lineno": 23,
                "bases": [],
                "methods": [],
                "docstring": "Telemetry data for learning from failures"
              },
              {
                "name": "ErrorContext",
                "lineno": 38,
                "bases": [],
                "methods": [],
                "docstring": "Context for error analysis"
              },
              {
                "name": "LintingContext",
                "lineno": 49,
                "bases": [],
                "methods": [],
                "docstring": "Context for linting failures"
              },
              {
                "name": "StackTrace",
                "lineno": 59,
                "bases": [],
                "methods": [],
                "docstring": "Stack trace information"
              },
              {
                "name": "ModelMetrics",
                "lineno": 68,
                "bases": [],
                "methods": [],
                "docstring": "Metrics for model performance"
              },
              {
                "name": "TelemetryModel",
                "lineno": 78,
                "bases": [],
                "methods": [
                  "emit_telemetry",
                  "_send_to_learning_queue",
                  "_serialize_model_state",
                  "_store_telemetry",
                  "get_current_state"
                ],
                "docstring": "Model that learns from every failure"
              },
              {
                "name": "InfiniteQueue",
                "lineno": 147,
                "bases": [],
                "methods": [
                  "__init__",
                  "send",
                  "receive"
                ],
                "docstring": "Infinite queue for telemetry data"
              },
              {
                "name": "ContinuousLearningModel",
                "lineno": 171,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_and_learn",
                  "_generate_intelligent_perfect_code",
                  "_run_linting_check",
                  "_get_context",
                  "_learn_from_failure",
                  "_improved_model"
                ],
                "docstring": "Model that learns from every failure"
              },
              {
                "name": "GhostbustersOrchestrator",
                "lineno": 305,
                "bases": [],
                "methods": [
                  "__init__",
                  "detect_delusions"
                ],
                "docstring": "Ghostbusters orchestrator for validation"
              },
              {
                "name": "InfiniteQueueLearningSystem",
                "lineno": 348,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_with_learning",
                  "_serialize_model",
                  "_get_context",
                  "_improved_model"
                ],
                "docstring": "System that learns from every failure"
              },
              {
                "name": "TestModel",
                "lineno": 445,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "system",
                "lineno": 463,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 466,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 467,
                "value_type": "Call"
              },
              {
                "name": "queue_data",
                "lineno": 109,
                "value_type": "Dict"
              },
              {
                "name": "telemetry_file",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 162,
                "value_type": "List"
              },
              {
                "name": "start_time",
                "lineno": 181,
                "value_type": "Call"
              },
              {
                "name": "learning_entry",
                "lineno": 286,
                "value_type": "Dict"
              },
              {
                "name": "delusions",
                "lineno": 314,
                "value_type": "List"
              },
              {
                "name": "code",
                "lineno": 184,
                "value_type": "Call"
              },
              {
                "name": "linting_errors",
                "lineno": 187,
                "value_type": "Call"
              },
              {
                "name": "generation_time",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 259,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 362,
                "value_type": "Call"
              },
              {
                "name": "delusions",
                "lineno": 365,
                "value_type": "Call"
              },
              {
                "name": "temp_file",
                "lineno": 256,
                "value_type": "Attribute"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Configure logging"
              },
              {
                "line": 102,
                "content": "Send to infinite queue for analysis"
              },
              {
                "line": 107,
                "content": "NO PRIVACY CONCERNS - alpha stage shenanigans"
              },
              {
                "line": 108,
                "content": "Rich and famous later, guardrails then"
              },
              {
                "line": 118,
                "content": "Send to infinite queue (for now, just log)"
              },
              {
                "line": 186,
                "content": "Validate with linting"
              },
              {
                "line": 189,
                "content": "Emit telemetry for learning"
              },
              {
                "line": 205,
                "content": "Learn from failure"
              },
              {
                "line": 208,
                "content": "Retry with learned improvements"
              },
              {
                "line": 213,
                "content": "Success - record metrics"
              },
              {
                "line": 227,
                "content": "Emit telemetry for learning"
              },
              {
                "line": 237,
                "content": "Learn from failure"
              },
              {
                "line": 240,
                "content": "Retry with learned improvements"
              },
              {
                "line": 245,
                "content": "This would call our intelligent model generator"
              },
              {
                "line": 253,
                "content": "Create temporary file"
              },
              {
                "line": 258,
                "content": "Run flake8"
              },
              {
                "line": 265,
                "content": "Clean up"
              },
              {
                "line": 300,
                "content": "For now, return the original model"
              },
              {
                "line": 301,
                "content": "In a real implementation, this would analyze errors and improve the model"
              },
              {
                "line": 313,
                "content": "Simulate Ghostbusters analysis"
              },
              {
                "line": 316,
                "content": "Check for common issues"
              },
              {
                "line": 364,
                "content": "Validate with Ghostbusters"
              },
              {
                "line": 372,
                "content": "Emit telemetry for learning"
              },
              {
                "line": 383,
                "content": "Learn and improve"
              },
              {
                "line": 389,
                "content": "Retry with improved model"
              },
              {
                "line": 400,
                "content": "Emit telemetry for learning"
              },
              {
                "line": 411,
                "content": "Learn and retry"
              },
              {
                "line": 438,
                "content": "Test the system"
              },
              {
                "line": 443,
                "content": "Create a simple model for testing"
              },
              {
                "line": 462,
                "content": "Initialize the system"
              },
              {
                "line": 465,
                "content": "Test generation with learning"
              }
            ],
            "total_lines": 478,
            "code_lines": 354
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "debug_domain_detection.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3822,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "debug_domain_detection",
                "lineno": 9,
                "args": [],
                "decorators": [],
                "docstring": "Debug why domain detection isn't working"
              },
              {
                "name": "matches_pattern",
                "lineno": 64,
                "args": [
                  "file_path",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Simple pattern matching"
              },
              {
                "name": "calculate_pattern_score",
                "lineno": 82,
                "args": [
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Calculate pattern specificity score"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "test_files",
                "lineno": 17,
                "value_type": "List"
              },
              {
                "name": "model_data",
                "lineno": 14,
                "value_type": "Call"
              },
              {
                "name": "best_match",
                "lineno": 36,
                "value_type": "Constant"
              },
              {
                "name": "best_score",
                "lineno": 37,
                "value_type": "Constant"
              },
              {
                "name": "best_pattern",
                "lineno": 38,
                "value_type": "Constant"
              },
              {
                "name": "best_domain",
                "lineno": 39,
                "value_type": "Constant"
              },
              {
                "name": "pattern_parts",
                "lineno": 68,
                "value_type": "Call"
              },
              {
                "name": "file_parts",
                "lineno": 69,
                "value_type": "Call"
              },
              {
                "name": "pattern_idx",
                "lineno": 72,
                "value_type": "Constant"
              },
              {
                "name": "patterns",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "missing_domains",
                "lineno": 58,
                "value_type": "List"
              },
              {
                "name": "parts",
                "lineno": 90,
                "value_type": "Call"
              },
              {
                "name": "specificity",
                "lineno": 92,
                "value_type": "Call"
              },
              {
                "name": "score",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "patterns",
                "lineno": 61,
                "value_type": "Call"
              },
              {
                "name": "best_score",
                "lineno": 48,
                "value_type": "Name"
              },
              {
                "name": "best_match",
                "lineno": 49,
                "value_type": "Name"
              },
              {
                "name": "best_domain",
                "lineno": 50,
                "value_type": "Name"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Load the model"
              },
              {
                "line": 16,
                "content": "Test specific files that should be detected"
              },
              {
                "line": 30,
                "content": "Check if file exists"
              },
              {
                "line": 35,
                "content": "Test pattern matching for each domain"
              },
              {
                "line": 57,
                "content": "Show what patterns exist for missing domains"
              },
              {
                "line": 67,
                "content": "Convert glob pattern to simple matching"
              },
              {
                "line": 71,
                "content": "Check if pattern parts are in file parts"
              },
              {
                "line": 89,
                "content": "Count path segments for specificity"
              },
              {
                "line": 91,
                "content": "More specific patterns (with more path segments) get higher scores"
              },
              {
                "line": 93,
                "content": "Exact path matches get bonus points"
              },
              {
                "line": 96,
                "content": "Domain-specific patterns get higher priority"
              },
              {
                "line": 101,
                "content": "Exact match gets highest priority"
              }
            ],
            "total_lines": 106,
            "code_lines": 76
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "analyze_codebase.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3381,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "artifact_forge.agents.artifact_parser_enhanced",
                "names": [
                  "EnhancedArtifactParser"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "analyze_codebase",
                "lineno": 16,
                "args": [],
                "decorators": [],
                "docstring": "Analyze current codebase with Enhanced AST Models"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "parser",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "python_files",
                "lineno": 26,
                "value_type": "List"
              },
              {
                "name": "total_functions",
                "lineno": 36,
                "value_type": "Constant"
              },
              {
                "name": "total_classes",
                "lineno": 37,
                "value_type": "Constant"
              },
              {
                "name": "total_imports",
                "lineno": 38,
                "value_type": "Constant"
              },
              {
                "name": "files_with_errors",
                "lineno": 39,
                "value_type": "Constant"
              },
              {
                "name": "model_issues",
                "lineno": 40,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 45,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "classes",
                "lineno": 48,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 49,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 10,
                "content": "Add src to path"
              },
              {
                "line": 22,
                "content": "Initialize Enhanced AST Parser"
              },
              {
                "line": 25,
                "content": "Find all Python files"
              },
              {
                "line": 35,
                "content": "Analyze files"
              }
            ],
            "total_lines": 109,
            "code_lines": 82
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "create_pr.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4938,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "run_command",
                "lineno": 24,
                "args": [
                  "cmd",
                  "capture_output"
                ],
                "decorators": [],
                "docstring": "Run a command and return the result"
              },
              {
                "name": "get_current_branch",
                "lineno": 44,
                "args": [],
                "decorators": [],
                "docstring": "Get current git branch"
              },
              {
                "name": "get_diff_summary",
                "lineno": 52,
                "args": [],
                "decorators": [],
                "docstring": "Get summary of changes"
              },
              {
                "name": "create_pr",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Create GitHub PR"
              },
              {
                "name": "main",
                "lineno": 137,
                "args": [],
                "decorators": [],
                "docstring": "Main function"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 21,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 54,
                "value_type": "Call"
              },
              {
                "name": "current_branch",
                "lineno": 62,
                "value_type": "Call"
              },
              {
                "name": "changed_files",
                "lineno": 70,
                "value_type": "Call"
              },
              {
                "name": "pr_body",
                "lineno": 74,
                "value_type": "JoinedStr"
              },
              {
                "name": "cmd",
                "lineno": 122,
                "value_type": "JoinedStr"
              },
              {
                "name": "result",
                "lineno": 128,
                "value_type": "Call"
              },
              {
                "name": "current_branch",
                "lineno": 142,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 151,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 28,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 6,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 12,
                "content": "Set up logging"
              },
              {
                "line": 69,
                "content": "Get list of changed files"
              },
              {
                "line": 73,
                "content": "Create PR body"
              },
              {
                "line": 76,
                "content": "## **Problem:**"
              },
              {
                "line": 80,
                "content": "## **Solution:**"
              },
              {
                "line": 84,
                "content": "## **\ud83d\udd27 Security Fixes Applied:**"
              },
              {
                "line": 86,
                "content": "### **1. Shell Script Security** - `scripts/run_live_smoke_test_direct.sh`"
              },
              {
                "line": 92,
                "content": "Before (potentially unsafe)"
              },
              {
                "line": 98,
                "content": "After (secure whitelist approach)"
              },
              {
                "line": 103,
                "content": "## **\u2705 Validation:**"
              },
              {
                "line": 109,
                "content": "## **\ud83c\udfaf Ready for Merge:**"
              },
              {
                "line": 113,
                "content": "## **\ud83d\udccb Files Changed:**"
              },
              {
                "line": 116,
                "content": "## **\ud83d\udd17 Related:**"
              },
              {
                "line": 121,
                "content": "Create PR using GitHub CLI"
              },
              {
                "line": 141,
                "content": "Check if we're on the right branch"
              },
              {
                "line": 150,
                "content": "Create the PR"
              }
            ],
            "total_lines": 171,
            "code_lines": 117
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/cost_analysis.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 12739,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": false,
            "error": "unexpected indent (<unknown>, line 219)",
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": []
          },
          "model_coverage": false,
          "issues": [
            "AST parsing failed: unexpected indent (<unknown>, line 219)"
          ]
        },
        {
          "path": "tests/test_rule_compliance.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_file_organization.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_cline_plan_blind_spots.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_data_fresh_cline_plan.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_gemini_2_5_flash_lite_pr_review.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_code_quality_comprehensive.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2928,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_python_syntax",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test that Python files have valid syntax"
              },
              {
                "name": "test_code_structure",
                "lineno": 45,
                "args": [],
                "decorators": [],
                "docstring": "Test that code has expected structure"
              },
              {
                "name": "run_code_quality_tests",
                "lineno": 83,
                "args": [],
                "decorators": [],
                "docstring": "Run all code quality tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "test_files",
                "lineno": 17,
                "value_type": "List"
              },
              {
                "name": "streamlit_file",
                "lineno": 48,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 87,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 92,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 93,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 56,
                "value_type": "Constant"
              },
              {
                "name": "functions",
                "lineno": 57,
                "value_type": "Constant"
              },
              {
                "name": "classes",
                "lineno": 58,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 27,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 29,
                "content": "Parse with AST to check syntax"
              },
              {
                "line": 47,
                "content": "Test streamlit app structure"
              },
              {
                "line": 55,
                "content": "Count elements"
              },
              {
                "line": 73,
                "content": "Basic structure validation"
              }
            ],
            "total_lines": 111,
            "code_lines": 79
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_python_quality_enforcement.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 10217,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "_test_black_formatting",
                "lineno": 27,
                "args": [
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Test if a file passes Black formatting"
              },
              {
                "name": "_test_flake8_linting",
                "lineno": 50,
                "args": [
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Test if a file passes Flake8 linting"
              },
              {
                "name": "_test_ast_parsing",
                "lineno": 71,
                "args": [
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Test if a file passes AST parsing"
              },
              {
                "name": "find_reasonable_python_files",
                "lineno": 88,
                "args": [],
                "decorators": [],
                "docstring": "Find reasonable Python files for testing - focus on core functionality"
              },
              {
                "name": "test_python_quality_enforcement",
                "lineno": 123,
                "args": [],
                "decorators": [],
                "docstring": "Test that core Python files pass quality enforcement"
              },
              {
                "name": "test_zero_linter_errors",
                "lineno": 189,
                "args": [],
                "decorators": [],
                "docstring": "Test that core files have zero linter errors"
              },
              {
                "name": "test_ast_parsing_compliance",
                "lineno": 231,
                "args": [],
                "decorators": [],
                "docstring": "Test that core files pass AST parsing"
              },
              {
                "name": "main",
                "lineno": 261,
                "args": [],
                "decorators": [],
                "docstring": "Main test function"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "core_files",
                "lineno": 91,
                "value_type": "List"
              },
              {
                "name": "existing_files",
                "lineno": 101,
                "value_type": "List"
              },
              {
                "name": "python_files",
                "lineno": 128,
                "value_type": "Call"
              },
              {
                "name": "all_passed",
                "lineno": 171,
                "value_type": "Call"
              },
              {
                "name": "python_files",
                "lineno": 194,
                "value_type": "Call"
              },
              {
                "name": "total_errors",
                "lineno": 200,
                "value_type": "Constant"
              },
              {
                "name": "python_files",
                "lineno": 236,
                "value_type": "Call"
              },
              {
                "name": "failed_files",
                "lineno": 242,
                "value_type": "List"
              },
              {
                "name": "tests",
                "lineno": 266,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 272,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 273,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 299,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 31,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 37,
                "value_type": "Compare"
              },
              {
                "name": "result",
                "lineno": 54,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 60,
                "value_type": "Compare"
              },
              {
                "name": "msg",
                "lineno": 131,
                "value_type": "Constant"
              },
              {
                "name": "msg",
                "lineno": 197,
                "value_type": "Constant"
              },
              {
                "name": "msg",
                "lineno": 239,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 76,
                "value_type": "Call"
              },
              {
                "name": "failed_files",
                "lineno": 180,
                "value_type": "BinOp"
              },
              {
                "name": "result",
                "lineno": 204,
                "value_type": "Call"
              },
              {
                "name": "error_count",
                "lineno": 212,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 246,
                "value_type": "Call"
              },
              {
                "name": "line_count",
                "lineno": 107,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Set up logging"
              },
              {
                "line": 90,
                "content": "Define specific files that should be tested"
              },
              {
                "line": 100,
                "content": "Only test files that actually exist and are reasonable size"
              },
              {
                "line": 104,
                "content": "Check file size - exclude massive files"
              },
              {
                "line": 145,
                "content": "Test Black formatting"
              },
              {
                "line": 151,
                "content": "Test Flake8 linting"
              },
              {
                "line": 157,
                "content": "Test AST parsing"
              },
              {
                "line": 163,
                "content": "Print results"
              },
              {
                "line": 170,
                "content": "Check if all files pass all tests"
              },
              {
                "line": 178,
                "content": "Show which files failed which tests"
              },
              {
                "line": 203,
                "content": "Run flake8 with specific error codes using uv"
              }
            ],
            "total_lines": 301,
            "code_lines": 237
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/validate_healthcare_cdc_simple.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3056,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "load_project_model",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "Load project model registry."
              },
              {
                "name": "test_requirement_27_hipaa_compliance_validation",
                "lineno": 23,
                "args": [],
                "decorators": [],
                "docstring": "Test HIPAA compliance validation requirement."
              },
              {
                "name": "test_requirement_28_phi_detection_validation",
                "lineno": 28,
                "args": [],
                "decorators": [],
                "docstring": "Test PHI detection and validation requirement."
              },
              {
                "name": "test_requirement_29_immutable_audit_logging",
                "lineno": 33,
                "args": [],
                "decorators": [],
                "docstring": "Test immutable audit logging requirement."
              },
              {
                "name": "test_requirement_30_healthcare_data_encryption",
                "lineno": 38,
                "args": [],
                "decorators": [],
                "docstring": "Test healthcare data encryption requirement."
              },
              {
                "name": "test_requirement_31_healthcare_access_control",
                "lineno": 43,
                "args": [],
                "decorators": [],
                "docstring": "Test healthcare access control requirement."
              },
              {
                "name": "test_requirement_32_healthcare_cdc_cicd_integration",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test healthcare CDC CI/CD integration requirement."
              },
              {
                "name": "test_healthcare_cdc_domain_completeness",
                "lineno": 53,
                "args": [],
                "decorators": [],
                "docstring": "Test healthcare CDC domain completeness."
              },
              {
                "name": "main",
                "lineno": 58,
                "args": [],
                "decorators": [],
                "docstring": "Main validation function."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "model_file",
                "lineno": 14,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 16,
                "value_type": "Constant"
              },
              {
                "name": "model",
                "lineno": 65,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 64,
                "content": "Load project model"
              },
              {
                "line": 68,
                "content": "Check for healthcare domain"
              },
              {
                "line": 74,
                "content": "Test all requirements"
              }
            ],
            "total_lines": 96,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_mdc_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_file_existence.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 141,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 6,
            "code_lines": 4
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_security_enhancements.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2664,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_configuration",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test security configuration"
              },
              {
                "name": "test_credential_encryption",
                "lineno": 32,
                "args": [],
                "decorators": [],
                "docstring": "Test credential encryption"
              },
              {
                "name": "test_input_validation",
                "lineno": 46,
                "args": [],
                "decorators": [],
                "docstring": "Test input validation"
              },
              {
                "name": "test_https_enforcement",
                "lineno": 58,
                "args": [],
                "decorators": [],
                "docstring": "Test HTTPS enforcement"
              },
              {
                "name": "run_security_tests",
                "lineno": 73,
                "args": [],
                "decorators": [],
                "docstring": "Run all security tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 18,
                "value_type": "Dict"
              },
              {
                "name": "SecurityManager",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "test_credential",
                "lineno": 37,
                "value_type": "Constant"
              },
              {
                "name": "InputValidator",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 50,
                "value_type": "Call"
              },
              {
                "name": "invalid_urls",
                "lineno": 60,
                "value_type": "List"
              },
              {
                "name": "tests",
                "lineno": 77,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 84,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 85,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock SECURITY_CONFIG"
              },
              {
                "line": 24,
                "content": "Test security configuration"
              },
              {
                "line": 34,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 39,
                "content": "Test that credentials are encrypted"
              },
              {
                "line": 48,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 52,
                "content": "Test that input validation works"
              },
              {
                "line": 67,
                "content": "Test that invalid URLs are detected"
              }
            ],
            "total_lines": 103,
            "code_lines": 67
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_basic_validation_simple.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_code_quality_system.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 9848,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "shutil",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "tempfile",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.code_quality_system.quality_model",
                "names": [
                  "CodeQualityModel",
                  "LintingRule"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "test_code_quality_integration",
                "lineno": 274,
                "args": [],
                "decorators": [],
                "docstring": "Test integration of code quality system"
              },
              {
                "name": "test_code_quality_performance",
                "lineno": 307,
                "args": [],
                "decorators": [],
                "docstring": "Test performance of code quality system"
              },
              {
                "name": "setup_method",
                "lineno": 17,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Set up test fixtures"
              },
              {
                "name": "teardown_method",
                "lineno": 22,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Clean up test fixtures"
              },
              {
                "name": "test_model_initialization",
                "lineno": 26,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that the model initializes correctly"
              },
              {
                "name": "test_rules_definition",
                "lineno": 34,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that all rules are properly defined"
              },
              {
                "name": "test_fixers_definition",
                "lineno": 45,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that all fixers are properly defined"
              },
              {
                "name": "create_test_file",
                "lineno": 53,
                "args": [
                  "self",
                  "content",
                  "filename"
                ],
                "decorators": [],
                "docstring": "Create a test file with given content"
              },
              {
                "name": "test_fix_unused_imports",
                "lineno": 60,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test fixing unused imports"
              },
              {
                "name": "test_fix_f_strings",
                "lineno": 85,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test fixing f-strings without placeholders"
              },
              {
                "name": "test_fix_trailing_whitespace",
                "lineno": 109,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test fixing trailing whitespace"
              },
              {
                "name": "test_fix_bare_except",
                "lineno": 131,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test fixing bare except clauses"
              },
              {
                "name": "test_analyze_file",
                "lineno": 153,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test file analysis"
              },
              {
                "name": "test_fix_file",
                "lineno": 172,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test fixing a single file"
              },
              {
                "name": "test_fix_all_files",
                "lineno": 191,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test fixing all files in a directory"
              },
              {
                "name": "test_linting_rule_creation",
                "lineno": 220,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test creating a linting rule"
              },
              {
                "name": "test_linting_rule_application",
                "lineno": 237,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test applying a linting rule"
              },
              {
                "name": "dummy_fix",
                "lineno": 223,
                "args": [
                  "file_path"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "test_fix",
                "lineno": 246,
                "args": [
                  "file_path"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "TestCodeQualityModel",
                "lineno": 14,
                "bases": [],
                "methods": [
                  "setup_method",
                  "teardown_method",
                  "test_model_initialization",
                  "test_rules_definition",
                  "test_fixers_definition",
                  "create_test_file",
                  "test_fix_unused_imports",
                  "test_fix_f_strings",
                  "test_fix_trailing_whitespace",
                  "test_fix_bare_except",
                  "test_analyze_file",
                  "test_fix_file",
                  "test_fix_all_files"
                ],
                "docstring": "Test the code quality model"
              },
              {
                "name": "TestLintingRule",
                "lineno": 217,
                "bases": [],
                "methods": [
                  "test_linting_rule_creation",
                  "test_linting_rule_application"
                ],
                "docstring": "Test the LintingRule dataclass"
              }
            ],
            "variables": [
              {
                "name": "model",
                "lineno": 276,
                "value_type": "Call"
              },
              {
                "name": "test_dir",
                "lineno": 279,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 309,
                "value_type": "Call"
              },
              {
                "name": "test_dir",
                "lineno": 312,
                "value_type": "Call"
              },
              {
                "name": "test_dir",
                "lineno": 239,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 281,
                "value_type": "BinOp"
              },
              {
                "name": "analysis",
                "lineno": 294,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 299,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 328,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 242,
                "value_type": "BinOp"
              },
              {
                "name": "rule",
                "lineno": 254,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 262,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 315,
                "value_type": "BinOp"
              },
              {
                "name": "content",
                "lineno": 267,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 249,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 72,
                "content": "Apply fix"
              },
              {
                "line": 76,
                "content": "Check result"
              },
              {
                "line": 80,
                "content": "Should remove unused imports"
              },
              {
                "line": 95,
                "content": "Apply fix"
              },
              {
                "line": 99,
                "content": "Check result"
              },
              {
                "line": 103,
                "content": "Should convert f-strings without placeholders"
              },
              {
                "line": 106,
                "content": "Should keep f-strings with placeholders"
              },
              {
                "line": 118,
                "content": "Apply fix"
              },
              {
                "line": 122,
                "content": "Check result"
              },
              {
                "line": 126,
                "content": "Should remove trailing whitespace"
              },
              {
                "line": 142,
                "content": "Apply fix"
              },
              {
                "line": 146,
                "content": "Check result"
              },
              {
                "line": 150,
                "content": "Should convert bare except to specific exception"
              },
              {
                "line": 162,
                "content": "Analyze file"
              },
              {
                "line": 181,
                "content": "Fix file"
              },
              {
                "line": 193,
                "content": "Create test files"
              },
              {
                "line": 208,
                "content": "Fix all files"
              },
              {
                "line": 241,
                "content": "Create test file"
              },
              {
                "line": 247,
                "content": "Simple fix that adds a comment"
              },
              {
                "line": 261,
                "content": "Apply rule"
              },
              {
                "line": 265,
                "content": "Check result"
              },
              {
                "line": 278,
                "content": "Test with a simple file"
              },
              {
                "line": 293,
                "content": "Analyze file"
              },
              {
                "line": 298,
                "content": "Fix file"
              },
              {
                "line": 311,
                "content": "Create multiple test files"
              },
              {
                "line": 327,
                "content": "Process all files"
              }
            ],
            "total_lines": 333,
            "code_lines": 241
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_basic_validation_pytest.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4052,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "setup_method",
                "lineno": 18,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_credential_encryption",
                "lineno": 27,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test credential encryption"
              },
              {
                "name": "setup_method",
                "lineno": 37,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_input_validation",
                "lineno": 43,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test input validation"
              },
              {
                "name": "setup_method",
                "lineno": 52,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_https_enforcement",
                "lineno": 61,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test HTTPS enforcement"
              },
              {
                "name": "setup_method",
                "lineno": 70,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_deployment_management",
                "lineno": 76,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test deployment management"
              },
              {
                "name": "setup_method",
                "lineno": 85,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_monitoring_dashboard",
                "lineno": 92,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test monitoring dashboard"
              },
              {
                "name": "setup_method",
                "lineno": 101,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_streamlit_app",
                "lineno": 107,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test Streamlit app"
              },
              {
                "name": "setup_method",
                "lineno": 116,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_security_configuration",
                "lineno": 125,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test security configuration"
              }
            ],
            "classes": [
              {
                "name": "TestSecurityManager",
                "lineno": 15,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_credential_encryption"
                ],
                "docstring": "Test SecurityManager functionality"
              },
              {
                "name": "TestInputValidator",
                "lineno": 34,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_input_validation"
                ],
                "docstring": "Test InputValidator functionality"
              },
              {
                "name": "TestHTTPSEnforcement",
                "lineno": 49,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_https_enforcement"
                ],
                "docstring": "Test HTTPS enforcement"
              },
              {
                "name": "TestDeploymentManager",
                "lineno": 67,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_deployment_management"
                ],
                "docstring": "Test DeploymentManager functionality"
              },
              {
                "name": "TestMonitoringDashboard",
                "lineno": 82,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_monitoring_dashboard"
                ],
                "docstring": "Test MonitoringDashboard functionality"
              },
              {
                "name": "TestOpenFlowQuickstartApp",
                "lineno": 98,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_streamlit_app"
                ],
                "docstring": "Test OpenFlowQuickstartApp functionality"
              },
              {
                "name": "TestSecurityConfiguration",
                "lineno": 113,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_security_configuration"
                ],
                "docstring": "Test security configuration"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 20,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 29,
                "content": "Test that credentials are encrypted"
              },
              {
                "line": 39,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 45,
                "content": "Test that input validation works"
              },
              {
                "line": 63,
                "content": "Test that invalid URLs are detected"
              },
              {
                "line": 72,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 78,
                "content": "Test that deployment manager works"
              },
              {
                "line": 87,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 94,
                "content": "Test that monitoring dashboard works"
              },
              {
                "line": 103,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 109,
                "content": "Test that Streamlit app works"
              },
              {
                "line": 118,
                "content": "Mock SECURITY_CONFIG"
              },
              {
                "line": 127,
                "content": "Test security configuration"
              }
            ],
            "total_lines": 131,
            "code_lines": 85
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_uv_package_management.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2922,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "test_pyproject_toml_exists",
                "lineno": 14,
                "args": [],
                "decorators": [],
                "docstring": "Test that pyproject.toml exists"
              },
              {
                "name": "test_uv_lock_exists",
                "lineno": 22,
                "args": [],
                "decorators": [],
                "docstring": "Test that uv.lock exists"
              },
              {
                "name": "test_pyproject_toml_structure",
                "lineno": 30,
                "args": [],
                "decorators": [],
                "docstring": "Test pyproject.toml structure"
              },
              {
                "name": "test_dependencies_defined",
                "lineno": 46,
                "args": [],
                "decorators": [],
                "docstring": "Test that dependencies are properly defined"
              },
              {
                "name": "test_dev_dependencies_defined",
                "lineno": 66,
                "args": [],
                "decorators": [],
                "docstring": "Test that dev dependencies are properly defined"
              },
              {
                "name": "run_uv_package_tests",
                "lineno": 84,
                "args": [],
                "decorators": [],
                "docstring": "Run all UV package management tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "pyproject_file",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "uv_lock_file",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "pyproject_file",
                "lineno": 32,
                "value_type": "Call"
              },
              {
                "name": "dependencies",
                "lineno": 49,
                "value_type": "Dict"
              },
              {
                "name": "dev_dependencies",
                "lineno": 69,
                "value_type": "Dict"
              },
              {
                "name": "tests",
                "lineno": 88,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 96,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 97,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 35,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 10,
                "content": "Add src to path for imports"
              },
              {
                "line": 37,
                "content": "Test that it contains required sections"
              },
              {
                "line": 48,
                "content": "Mock dependencies"
              },
              {
                "line": 58,
                "content": "Test dependencies"
              },
              {
                "line": 68,
                "content": "Mock dev dependencies"
              },
              {
                "line": 76,
                "content": "Test dev dependencies"
              }
            ],
            "total_lines": 115,
            "code_lines": 78
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_type_safety.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 8969,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "test_type_safety_enforcement",
                "lineno": 140,
                "args": [],
                "decorators": [],
                "docstring": "Test that type safety is properly enforced (efficiently)"
              },
              {
                "name": "test_mypy_configuration",
                "lineno": 167,
                "args": [],
                "decorators": [],
                "docstring": "Test that mypy is properly configured (efficiently)"
              },
              {
                "name": "test_type_annotation_coverage",
                "lineno": 197,
                "args": [],
                "decorators": [],
                "docstring": "Test that type annotations are properly covered (efficiently)"
              },
              {
                "name": "main",
                "lineno": 222,
                "args": [],
                "decorators": [],
                "docstring": "Run all type safety tests (efficiently)"
              },
              {
                "name": "__init__",
                "lineno": 19,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the validator"
              },
              {
                "name": "find_python_files",
                "lineno": 25,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Find all Python files in the project (efficiently)"
              },
              {
                "name": "validate_file_type_annotations",
                "lineno": 41,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Validate type annotations in a single file (efficiently)"
              },
              {
                "name": "run_mypy_check",
                "lineno": 75,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Run mypy on a single file (with timeout)"
              },
              {
                "name": "validate_all_files",
                "lineno": 94,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Validate type safety across all Python files (efficiently)"
              },
              {
                "name": "generate_type_safety_report",
                "lineno": 119,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate a comprehensive type safety report (efficiently)"
              }
            ],
            "classes": [
              {
                "name": "TypeSafetyValidator",
                "lineno": 16,
                "bases": [],
                "methods": [
                  "__init__",
                  "find_python_files",
                  "validate_file_type_annotations",
                  "run_mypy_check",
                  "validate_all_files",
                  "generate_type_safety_report"
                ],
                "docstring": "Validates type safety across the codebase efficiently"
              }
            ],
            "variables": [
              {
                "name": "validator",
                "lineno": 144,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 145,
                "value_type": "Call"
              },
              {
                "name": "compliance_rate",
                "lineno": 152,
                "value_type": "Subscript"
              },
              {
                "name": "validator",
                "lineno": 201,
                "value_type": "Call"
              },
              {
                "name": "python_files",
                "lineno": 202,
                "value_type": "Call"
              },
              {
                "name": "test_files",
                "lineno": 209,
                "value_type": "Subscript"
              },
              {
                "name": "total_annotation_errors",
                "lineno": 210,
                "value_type": "Constant"
              },
              {
                "name": "tests",
                "lineno": 227,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 233,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 234,
                "value_type": "Call"
              },
              {
                "name": "source_dirs",
                "lineno": 28,
                "value_type": "List"
              },
              {
                "name": "python_files",
                "lineno": 96,
                "value_type": "Call"
              },
              {
                "name": "files_to_check",
                "lineno": 100,
                "value_type": "Subscript"
              },
              {
                "name": "all_errors",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "total_files",
                "lineno": 123,
                "value_type": "Call"
              },
              {
                "name": "files_with_errors",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "total_errors",
                "lineno": 125,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 184,
                "value_type": "Call"
              },
              {
                "name": "errors",
                "lineno": 213,
                "value_type": "Call"
              },
              {
                "name": "source_path",
                "lineno": 32,
                "value_type": "BinOp"
              },
              {
                "name": "result",
                "lineno": 79,
                "value_type": "Call"
              },
              {
                "name": "annotation_errors",
                "lineno": 106,
                "value_type": "Call"
              },
              {
                "name": "mypy_errors",
                "lineno": 111,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 27,
                "content": "Only check source files, not test files or cache"
              },
              {
                "line": 49,
                "content": "Only check public functions and classes"
              },
              {
                "line": 52,
                "content": "Skip private functions"
              },
              {
                "line": 56,
                "content": "Check function parameters (only public ones)"
              },
              {
                "line": 64,
                "content": "Check return type"
              },
              {
                "line": 99,
                "content": "Only check a subset of files for performance"
              },
              {
                "line": 105,
                "content": "Check type annotations (fast)"
              },
              {
                "line": 109,
                "content": "Only run mypy on files with annotation errors or key files"
              },
              {
                "line": 147,
                "content": "Check that we have Python files to test"
              },
              {
                "line": 151,
                "content": "Check compliance rate (should be reasonable)"
              },
              {
                "line": 156,
                "content": "Check that we can identify type errors"
              },
              {
                "line": 171,
                "content": "Check that mypy is available"
              },
              {
                "line": 182,
                "content": "Only test on a simple file"
              },
              {
                "line": 187,
                "content": "mypy might have some errors, but it should run"
              },
              {
                "line": 204,
                "content": "Check that we can parse Python files"
              },
              {
                "line": 208,
                "content": "Test annotation validation on a few files only"
              }
            ],
            "total_lines": 256,
            "code_lines": 184
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_makefile_integration.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_gemini_2_5_preview_pr_review.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_rule_compliance_enforcement.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_code_quality.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3056,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_python_syntax",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test that Python files have valid syntax"
              },
              {
                "name": "test_code_structure",
                "lineno": 45,
                "args": [],
                "decorators": [],
                "docstring": "Test that code has expected structure"
              },
              {
                "name": "run_code_quality_tests",
                "lineno": 81,
                "args": [],
                "decorators": [],
                "docstring": "Run all code quality tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "test_files",
                "lineno": 17,
                "value_type": "List"
              },
              {
                "name": "streamlit_file",
                "lineno": 48,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 85,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 90,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 91,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 56,
                "value_type": "Constant"
              },
              {
                "name": "functions",
                "lineno": 57,
                "value_type": "Constant"
              },
              {
                "name": "classes",
                "lineno": 58,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "error_msg",
                "lineno": 35,
                "value_type": "JoinedStr"
              },
              {
                "name": "error_msg",
                "lineno": 39,
                "value_type": "JoinedStr"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 29,
                "content": "Parse with AST to check syntax"
              },
              {
                "line": 47,
                "content": "Test streamlit app structure"
              },
              {
                "line": 55,
                "content": "Count elements"
              },
              {
                "line": 73,
                "content": "Basic structure validation"
              }
            ],
            "total_lines": 108,
            "code_lines": 78
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_core_concepts.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_ghostbusters_integration.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 7781,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "test_ghostbusters_domain_in_model",
                "lineno": 10,
                "args": [],
                "decorators": [],
                "docstring": "Test that Ghostbusters domain is properly configured in project model"
              },
              {
                "name": "test_ghostbusters_requirements_traceability",
                "lineno": 99,
                "args": [],
                "decorators": [],
                "docstring": "Test that Ghostbusters requirements are properly traced"
              },
              {
                "name": "test_ghostbusters_rule_exists",
                "lineno": 136,
                "args": [],
                "decorators": [],
                "docstring": "Test that Ghostbusters rule file exists and is properly configured"
              },
              {
                "name": "test_ghostbusters_component_structure",
                "lineno": 157,
                "args": [],
                "decorators": [],
                "docstring": "Test that Ghostbusters component has proper structure"
              },
              {
                "name": "test_ghostbusters_file_organization",
                "lineno": 185,
                "args": [],
                "decorators": [],
                "docstring": "Test that Ghostbusters is properly included in file organization"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "ghostbusters_domain",
                "lineno": 21,
                "value_type": "Subscript"
              },
              {
                "name": "patterns",
                "lineno": 40,
                "value_type": "Subscript"
              },
              {
                "name": "content_indicators",
                "lineno": 50,
                "value_type": "Subscript"
              },
              {
                "name": "expected_indicators",
                "lineno": 51,
                "value_type": "List"
              },
              {
                "name": "requirements",
                "lineno": 80,
                "value_type": "Subscript"
              },
              {
                "name": "expected_requirements",
                "lineno": 83,
                "value_type": "List"
              },
              {
                "name": "requirements_traceability",
                "lineno": 106,
                "value_type": "Subscript"
              },
              {
                "name": "ghostbusters_requirements",
                "lineno": 109,
                "value_type": "ListComp"
              },
              {
                "name": "requirement_texts",
                "lineno": 118,
                "value_type": "ListComp"
              },
              {
                "name": "expected_requirements",
                "lineno": 120,
                "value_type": "List"
              },
              {
                "name": "rule_file",
                "lineno": 138,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 142,
                "value_type": "Call"
              },
              {
                "name": "component_files",
                "lineno": 160,
                "value_type": "List"
              },
              {
                "name": "test_files",
                "lineno": 174,
                "value_type": "List"
              },
              {
                "name": "file_organization",
                "lineno": 192,
                "value_type": "Subscript"
              },
              {
                "name": "domain_rules",
                "lineno": 193,
                "value_type": "Subscript"
              },
              {
                "name": "ghostbusters_rule",
                "lineno": 196,
                "value_type": "Constant"
              },
              {
                "name": "model_data",
                "lineno": 14,
                "value_type": "Call"
              },
              {
                "name": "model_data",
                "lineno": 103,
                "value_type": "Call"
              },
              {
                "name": "model_data",
                "lineno": 189,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Load project model"
              },
              {
                "line": 16,
                "content": "Check that ghostbusters domain exists"
              },
              {
                "line": 23,
                "content": "Check required fields"
              },
              {
                "line": 39,
                "content": "Check patterns"
              },
              {
                "line": 49,
                "content": "Check content indicators"
              },
              {
                "line": 68,
                "content": "Check tools"
              },
              {
                "line": 79,
                "content": "Check requirements"
              },
              {
                "line": 101,
                "content": "Load project model"
              },
              {
                "line": 105,
                "content": "Check requirements traceability"
              },
              {
                "line": 108,
                "content": "Find Ghostbusters requirements"
              },
              {
                "line": 117,
                "content": "Check for key requirements"
              },
              {
                "line": 141,
                "content": "Check that the file has content"
              },
              {
                "line": 145,
                "content": "Check for key sections"
              },
              {
                "line": 151,
                "content": "Check for component documentation"
              },
              {
                "line": 159,
                "content": "Check main component files"
              },
              {
                "line": 173,
                "content": "Check test files"
              },
              {
                "line": 187,
                "content": "Load project model"
              },
              {
                "line": 191,
                "content": "Check file organization"
              },
              {
                "line": 195,
                "content": "Check that Ghostbusters rule is included"
              },
              {
                "line": 207,
                "content": "Run all tests"
              }
            ],
            "total_lines": 215,
            "code_lines": 156
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_healthcare_cdc_requirements.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2963,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_healthcare_cdc_domain_model",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test healthcare CDC domain model"
              },
              {
                "name": "test_patient_info_structure",
                "lineno": 27,
                "args": [],
                "decorators": [],
                "docstring": "Test patient info structure"
              },
              {
                "name": "test_provider_info_structure",
                "lineno": 46,
                "args": [],
                "decorators": [],
                "docstring": "Test provider info structure"
              },
              {
                "name": "test_healthcare_claim_structure",
                "lineno": 65,
                "args": [],
                "decorators": [],
                "docstring": "Test healthcare claim structure"
              },
              {
                "name": "run_healthcare_tests",
                "lineno": 86,
                "args": [],
                "decorators": [],
                "docstring": "Run all healthcare CDC tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "HealthcareCDCDomainModel",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "domain_model",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "patient_info",
                "lineno": 30,
                "value_type": "Dict"
              },
              {
                "name": "provider_info",
                "lineno": 49,
                "value_type": "Dict"
              },
              {
                "name": "claim",
                "lineno": 68,
                "value_type": "Dict"
              },
              {
                "name": "tests",
                "lineno": 90,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 97,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 98,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the healthcare CDC domain model"
              },
              {
                "line": 21,
                "content": "Test that domain model can be initialized"
              },
              {
                "line": 29,
                "content": "Mock patient info structure"
              },
              {
                "line": 37,
                "content": "Test patient info structure"
              },
              {
                "line": 48,
                "content": "Mock provider info structure"
              },
              {
                "line": 56,
                "content": "Test provider info structure"
              },
              {
                "line": 67,
                "content": "Mock healthcare claim structure"
              },
              {
                "line": 76,
                "content": "Test claim structure"
              }
            ],
            "total_lines": 116,
            "code_lines": 79
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_cline_fresh_plan_blind_spots.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2881,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_security_manager_initialization",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Test SecurityManager initialization"
              },
              {
                "name": "test_input_validator_methods",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test InputValidator methods"
              },
              {
                "name": "test_deployment_manager_initialization",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test DeploymentManager initialization"
              },
              {
                "name": "test_monitoring_dashboard_initialization",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test MonitoringDashboard initialization"
              },
              {
                "name": "test_openflow_app_initialization",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Test OpenFlowQuickstartApp initialization"
              },
              {
                "name": "run_basic_tests",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Run all basic validation tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "SecurityManager",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "InputValidator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "validator",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "DeploymentManager",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "MonitoringDashboard",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "deployment_manager",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "monitoring_dashboard",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "OpenFlowQuickstartApp",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 84,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add src to path for imports"
              },
              {
                "line": 17,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 21,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 28,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 32,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 39,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 43,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 50,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 55,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 62,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 66,
                "content": "Test that Streamlit app can be initialized"
              }
            ],
            "total_lines": 102,
            "code_lines": 64
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_basic_validation.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 160,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 7,
            "code_lines": 4
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/verify_ide_linting_hypothesis.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 11432,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "time",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 332,
                "args": [],
                "decorators": [],
                "docstring": "Main function to run the hypothesis verification."
              },
              {
                "name": "__init__",
                "lineno": 27,
                "args": [
                  "self",
                  "project_root"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "collect_data_points",
                "lineno": 31,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Collect data points from different sources to test the hypothesis."
              },
              {
                "name": "_get_command_line_data",
                "lineno": 64,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get data from command line linters."
              },
              {
                "name": "_get_ide_cache_data",
                "lineno": 132,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get data from IDE cache files."
              },
              {
                "name": "_get_linting_process_data",
                "lineno": 167,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get data from running linting processes."
              },
              {
                "name": "_analyze_data_fragmentation",
                "lineno": 226,
                "args": [
                  "self",
                  "data_points"
                ],
                "decorators": [],
                "docstring": "Analyze if the data is fragmented and unreliable."
              },
              {
                "name": "generate_verification_report",
                "lineno": 288,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate a comprehensive verification report."
              }
            ],
            "classes": [
              {
                "name": "LintingDataPoint",
                "lineno": 14,
                "bases": [],
                "methods": [],
                "docstring": "A single data point for linting verification."
              },
              {
                "name": "IDELintingHypothesisVerifier",
                "lineno": 24,
                "bases": [],
                "methods": [
                  "__init__",
                  "collect_data_points",
                  "_get_command_line_data",
                  "_get_ide_cache_data",
                  "_get_linting_process_data",
                  "_analyze_data_fragmentation",
                  "generate_verification_report"
                ],
                "docstring": "Verify the hypothesis that IDE linting data is fragmented and unreliable."
              }
            ],
            "variables": [
              {
                "name": "verifier",
                "lineno": 334,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 340,
                "value_type": "Call"
              },
              {
                "name": "verification_data",
                "lineno": 34,
                "value_type": "Dict"
              },
              {
                "name": "cl_data",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "ide_data",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "process_data",
                "lineno": 55,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "data_points",
                "lineno": 66,
                "value_type": "List"
              },
              {
                "name": "timestamp",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "data_points",
                "lineno": 134,
                "value_type": "List"
              },
              {
                "name": "timestamp",
                "lineno": 135,
                "value_type": "Call"
              },
              {
                "name": "mypy_cache",
                "lineno": 138,
                "value_type": "BinOp"
              },
              {
                "name": "ruff_cache",
                "lineno": 152,
                "value_type": "BinOp"
              },
              {
                "name": "data_points",
                "lineno": 169,
                "value_type": "List"
              },
              {
                "name": "timestamp",
                "lineno": 170,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 232,
                "value_type": "Dict"
              },
              {
                "name": "unique_sources",
                "lineno": 254,
                "value_type": "Call"
              },
              {
                "name": "unique_linters",
                "lineno": 255,
                "value_type": "Call"
              },
              {
                "name": "total_points",
                "lineno": 256,
                "value_type": "Call"
              },
              {
                "name": "error_counts",
                "lineno": 265,
                "value_type": "ListComp"
              },
              {
                "name": "data",
                "lineno": 290,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 292,
                "value_type": "JoinedStr"
              },
              {
                "name": "result",
                "lineno": 71,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 101,
                "value_type": "Call"
              },
              {
                "name": "error_count",
                "lineno": 107,
                "value_type": "Call"
              },
              {
                "name": "cache_files",
                "lineno": 140,
                "value_type": "Call"
              },
              {
                "name": "cache_files",
                "lineno": 154,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "variance",
                "lineno": 267,
                "value_type": "IfExp"
              },
              {
                "name": "error_count",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "processes",
                "lineno": 182,
                "value_type": "Call"
              },
              {
                "name": "flake8_processes",
                "lineno": 184,
                "value_type": "Call"
              },
              {
                "name": "mypy_processes",
                "lineno": 185,
                "value_type": "Call"
              },
              {
                "name": "ruff_processes",
                "lineno": 186,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 41,
                "content": "Test 1: Command line vs IDE real-time"
              },
              {
                "line": 46,
                "content": "Get command line data"
              },
              {
                "line": 50,
                "content": "Get IDE cache data"
              },
              {
                "line": 54,
                "content": "Get process data"
              },
              {
                "line": 58,
                "content": "Analyze the data"
              },
              {
                "line": 70,
                "content": "Flake8 command line"
              },
              {
                "line": 100,
                "content": "MyPy command line"
              },
              {
                "line": 137,
                "content": "Check MyPy cache"
              },
              {
                "line": 151,
                "content": "Check Ruff cache"
              },
              {
                "line": 181,
                "content": "Count different types of linting processes"
              },
              {
                "line": 241,
                "content": "Group by source"
              },
              {
                "line": 247,
                "content": "Group by linter"
              },
              {
                "line": 253,
                "content": "Calculate fragmentation score"
              },
              {
                "line": 258,
                "content": "Fragmentation: more sources = more fragmented"
              },
              {
                "line": 264,
                "content": "Reliability: consistent data = more reliable"
              },
              {
                "line": 270,
                "content": "Generate conclusions"
              },
              {
                "line": 320,
                "content": "Final verdict"
              }
            ],
            "total_lines": 346,
            "code_lines": 271
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/round_trip_model_system.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 17014,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 377,
                "args": [],
                "decorators": [],
                "docstring": "Demonstrate round-trip model system"
              },
              {
                "name": "__init__",
                "lineno": 43,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "create_model_from_design",
                "lineno": 47,
                "args": [
                  "self",
                  "design_spec"
                ],
                "decorators": [],
                "docstring": "Create a model directly from design specification (NO reverse engineering)"
              },
              {
                "name": "_build_dependency_graph",
                "lineno": 84,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Build dependency graph for proper import resolution"
              },
              {
                "name": "generate_code_from_model",
                "lineno": 94,
                "args": [
                  "self",
                  "model_name"
                ],
                "decorators": [],
                "docstring": "Generate code from a design model (NO reverse engineering)"
              },
              {
                "name": "_generate_function_code",
                "lineno": 126,
                "args": [
                  "self",
                  "component",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate function code from component design"
              },
              {
                "name": "_generate_class_code",
                "lineno": 161,
                "args": [
                  "self",
                  "component",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate class code from component design with proper dependency resolution"
              },
              {
                "name": "_resolve_imports",
                "lineno": 215,
                "args": [
                  "self",
                  "component",
                  "model"
                ],
                "decorators": [],
                "docstring": "Resolve all imports needed for a component"
              },
              {
                "name": "_resolve_type_reference",
                "lineno": 259,
                "args": [
                  "self",
                  "type_ref",
                  "model"
                ],
                "decorators": [],
                "docstring": "Resolve type references to internal components"
              },
              {
                "name": "_generate_module_code",
                "lineno": 271,
                "args": [
                  "self",
                  "component",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate module code from component design"
              },
              {
                "name": "_generate_domain_code",
                "lineno": 291,
                "args": [
                  "self",
                  "component",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate domain code from component design"
              },
              {
                "name": "save_model",
                "lineno": 311,
                "args": [
                  "self",
                  "model_name",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Save a design model to JSON file"
              },
              {
                "name": "load_model",
                "lineno": 343,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Load a design model from JSON file"
              }
            ],
            "classes": [
              {
                "name": "ModelComponent",
                "lineno": 18,
                "bases": [],
                "methods": [],
                "docstring": "A component in our design model"
              },
              {
                "name": "DesignModel",
                "lineno": 30,
                "bases": [],
                "methods": [],
                "docstring": "A complete design model that can be converted to/from code"
              },
              {
                "name": "RoundTripModelSystem",
                "lineno": 40,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_model_from_design",
                  "_build_dependency_graph",
                  "generate_code_from_model",
                  "_generate_function_code",
                  "_generate_class_code",
                  "_resolve_imports",
                  "_resolve_type_reference",
                  "_generate_module_code",
                  "_generate_domain_code",
                  "save_model",
                  "load_model"
                ],
                "docstring": "System that can create models from design AND generate code from models"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 14,
                "value_type": "Call"
              },
              {
                "name": "system",
                "lineno": 379,
                "value_type": "Call"
              },
              {
                "name": "design_spec",
                "lineno": 382,
                "value_type": "Dict"
              },
              {
                "name": "model",
                "lineno": 469,
                "value_type": "Call"
              },
              {
                "name": "generated_files",
                "lineno": 478,
                "value_type": "Call"
              },
              {
                "name": "loaded_model",
                "lineno": 489,
                "value_type": "Call"
              },
              {
                "name": "components",
                "lineno": 54,
                "value_type": "List"
              },
              {
                "name": "design_model",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 100,
                "value_type": "Subscript"
              },
              {
                "name": "generated_files",
                "lineno": 103,
                "value_type": "Dict"
              },
              {
                "name": "imports",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 134,
                "value_type": "JoinedStr"
              },
              {
                "name": "return_type",
                "lineno": 144,
                "value_type": "Call"
              },
              {
                "name": "params",
                "lineno": 145,
                "value_type": "Call"
              },
              {
                "name": "param_str",
                "lineno": 147,
                "value_type": "Call"
              },
              {
                "name": "param_str",
                "lineno": 148,
                "value_type": "IfExp"
              },
              {
                "name": "imports",
                "lineno": 167,
                "value_type": "Call"
              },
              {
                "name": "methods",
                "lineno": 168,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 170,
                "value_type": "JoinedStr"
              },
              {
                "name": "standard_imports",
                "lineno": 224,
                "value_type": "Dict"
              },
              {
                "name": "methods",
                "lineno": 246,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 277,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 297,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 317,
                "value_type": "Subscript"
              },
              {
                "name": "model_data",
                "lineno": 320,
                "value_type": "Dict"
              },
              {
                "name": "components",
                "lineno": 349,
                "value_type": "List"
              },
              {
                "name": "design_model",
                "lineno": 362,
                "value_type": "Call"
              },
              {
                "name": "component",
                "lineno": 56,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 97,
                "value_type": "JoinedStr"
              },
              {
                "name": "return_type",
                "lineno": 193,
                "value_type": "Call"
              },
              {
                "name": "params",
                "lineno": 197,
                "value_type": "Call"
              },
              {
                "name": "param_str",
                "lineno": 199,
                "value_type": "Call"
              },
              {
                "name": "param_str",
                "lineno": 202,
                "value_type": "IfExp"
              },
              {
                "name": "return_type",
                "lineno": 248,
                "value_type": "Call"
              },
              {
                "name": "inner_type",
                "lineno": 263,
                "value_type": "Subscript"
              },
              {
                "name": "msg",
                "lineno": 314,
                "value_type": "JoinedStr"
              },
              {
                "name": "model_data",
                "lineno": 346,
                "value_type": "Call"
              },
              {
                "name": "component",
                "lineno": 351,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 108,
                "value_type": "Call"
              },
              {
                "name": "filename",
                "lineno": 109,
                "value_type": "JoinedStr"
              },
              {
                "name": "inner_type",
                "lineno": 251,
                "value_type": "Subscript"
              },
              {
                "name": "code",
                "lineno": 112,
                "value_type": "Call"
              },
              {
                "name": "filename",
                "lineno": 113,
                "value_type": "JoinedStr"
              },
              {
                "name": "code",
                "lineno": 116,
                "value_type": "Call"
              },
              {
                "name": "filename",
                "lineno": 117,
                "value_type": "JoinedStr"
              },
              {
                "name": "code",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "filename",
                "lineno": 121,
                "value_type": "JoinedStr"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Setup logging"
              },
              {
                "line": 53,
                "content": "Extract design components"
              },
              {
                "line": 66,
                "content": "Create the design model"
              },
              {
                "line": 77,
                "content": "Build dependency graph"
              },
              {
                "line": 105,
                "content": "Generate code for each component"
              },
              {
                "line": 143,
                "content": "Generate function signature"
              },
              {
                "line": 155,
                "content": "TODO: Implement based on requirements: {component.requirements}"
              },
              {
                "line": 187,
                "content": "TODO: Initialize based on requirements: {component.requirements}"
              },
              {
                "line": 191,
                "content": "Add methods with proper type hints"
              },
              {
                "line": 209,
                "content": "TODO: Implement based on requirements: {method.get('requirements', [])}"
              },
              {
                "line": 223,
                "content": "Standard library imports"
              },
              {
                "line": 235,
                "content": "Add standard imports based on dependencies"
              },
              {
                "line": 240,
                "content": "Add relative imports for internal dependencies"
              },
              {
                "line": 245,
                "content": "Add imports for type references in methods"
              },
              {
                "line": 250,
                "content": "Extract type from List[Type]"
              },
              {
                "line": 262,
                "content": "Handle List[InternalType] cases"
              },
              {
                "line": 319,
                "content": "Convert to JSON-serializable format"
              },
              {
                "line": 348,
                "content": "Reconstruct components"
              },
              {
                "line": 361,
                "content": "Create design model"
              },
              {
                "line": 381,
                "content": "STEP 1: Create model from design (NO reverse engineering)"
              },
              {
                "line": 472,
                "content": "STEP 2: Save model to JSON"
              },
              {
                "line": 476,
                "content": "STEP 3: Generate code from model"
              },
              {
                "line": 480,
                "content": "STEP 4: Save generated code"
              },
              {
                "line": 487,
                "content": "STEP 5: Load model from JSON (round-trip)"
              }
            ],
            "total_lines": 500,
            "code_lines": 393
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/complex_model_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 16879,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.artifact_forge.agents.artifact_parser_enhanced",
                "names": [
                  "EnhancedArtifactParser"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "create_complex_model",
                "lineno": 439,
                "args": [],
                "decorators": [],
                "docstring": "Create and return a complex model"
              },
              {
                "name": "__post_init__",
                "lineno": 57,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the complex model"
              },
              {
                "name": "_build_flake8_model",
                "lineno": 63,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build Flake8 model with all rules and patterns"
              },
              {
                "name": "_build_mypy_model",
                "lineno": 132,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build MyPy model with all rules and patterns"
              },
              {
                "name": "_build_combined_understanding",
                "lineno": 177,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build combined understanding of code patterns and fix strategies"
              },
              {
                "name": "analyze_file",
                "lineno": 217,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Analyze a file using the complex model"
              },
              {
                "name": "_simulate_flake8_analysis",
                "lineno": 239,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Simulate Flake8 analysis based on our model"
              },
              {
                "name": "_simulate_mypy_analysis",
                "lineno": 296,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Simulate MyPy analysis based on our model"
              },
              {
                "name": "_generate_fix_strategies",
                "lineno": 355,
                "args": [
                  "self",
                  "flake8_issues",
                  "mypy_issues"
                ],
                "decorators": [],
                "docstring": "Generate fix strategies based on detected issues"
              },
              {
                "name": "generate_perfect_code",
                "lineno": 377,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Generate perfect code based on the complex model"
              },
              {
                "name": "_apply_flake8_fix",
                "lineno": 400,
                "args": [
                  "self",
                  "content",
                  "issue"
                ],
                "decorators": [],
                "docstring": "Apply Flake8 fix to content"
              },
              {
                "name": "_apply_mypy_fix",
                "lineno": 423,
                "args": [
                  "self",
                  "content",
                  "issue"
                ],
                "decorators": [],
                "docstring": "Apply MyPy fix to content"
              }
            ],
            "classes": [
              {
                "name": "Flake8Rule",
                "lineno": 15,
                "bases": [],
                "methods": [],
                "docstring": "Flake8 rule definition"
              },
              {
                "name": "MyPyRule",
                "lineno": 27,
                "bases": [],
                "methods": [],
                "docstring": "MyPy rule definition"
              },
              {
                "name": "ComplexModel",
                "lineno": 39,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "_build_flake8_model",
                  "_build_mypy_model",
                  "_build_combined_understanding",
                  "analyze_file",
                  "_simulate_flake8_analysis",
                  "_simulate_mypy_analysis",
                  "_generate_fix_strategies",
                  "generate_perfect_code",
                  "_apply_flake8_fix",
                  "_apply_mypy_fix"
                ],
                "docstring": "Complex model combining Enhanced AST + Flake8 + MyPy"
              }
            ],
            "variables": [
              {
                "name": "model",
                "lineno": 446,
                "value_type": "Call"
              },
              {
                "name": "ast_result",
                "lineno": 221,
                "value_type": "Call"
              },
              {
                "name": "flake8_issues",
                "lineno": 224,
                "value_type": "Call"
              },
              {
                "name": "mypy_issues",
                "lineno": 227,
                "value_type": "Call"
              },
              {
                "name": "issues",
                "lineno": 241,
                "value_type": "List"
              },
              {
                "name": "issues",
                "lineno": 298,
                "value_type": "List"
              },
              {
                "name": "strategies",
                "lineno": 361,
                "value_type": "List"
              },
              {
                "name": "analysis",
                "lineno": 381,
                "value_type": "Call"
              },
              {
                "name": "fixed_content",
                "lineno": 388,
                "value_type": "Name"
              },
              {
                "name": "lines",
                "lineno": 402,
                "value_type": "Call"
              },
              {
                "name": "strategy",
                "lineno": 364,
                "value_type": "Dict"
              },
              {
                "name": "content",
                "lineno": 385,
                "value_type": "Call"
              },
              {
                "name": "fixed_content",
                "lineno": 392,
                "value_type": "Call"
              },
              {
                "name": "fixed_content",
                "lineno": 396,
                "value_type": "Call"
              },
              {
                "name": "line_idx",
                "lineno": 406,
                "value_type": "BinOp"
              },
              {
                "name": "description",
                "lineno": 428,
                "value_type": "Subscript"
              },
              {
                "name": "content",
                "lineno": 245,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 246,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 302,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 306,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 430,
                "value_type": "Subscript"
              },
              {
                "name": "content",
                "lineno": 431,
                "value_type": "Call"
              },
              {
                "name": "line_idx",
                "lineno": 416,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 42,
                "content": "Enhanced AST Models"
              },
              {
                "line": 47,
                "content": "Flake8 Model"
              },
              {
                "line": 50,
                "content": "MyPy Model"
              },
              {
                "line": 53,
                "content": "Combined understanding"
              },
              {
                "line": 220,
                "content": "Step 1: Enhanced AST Analysis"
              },
              {
                "line": 223,
                "content": "Step 2: Flake8 Analysis (simulated)"
              },
              {
                "line": 226,
                "content": "Step 3: MyPy Analysis (simulated)"
              },
              {
                "line": 229,
                "content": "Step 4: Combined Analysis"
              },
              {
                "line": 248,
                "content": "Check for common Flake8 issues"
              },
              {
                "line": 250,
                "content": "Check for trailing whitespace"
              },
              {
                "line": 261,
                "content": "Check for missing newline at end"
              },
              {
                "line": 272,
                "content": "Check for function/class definitions without proper spacing"
              },
              {
                "line": 304,
                "content": "Parse AST to check for type issues"
              },
              {
                "line": 310,
                "content": "Check for missing return type annotations"
              },
              {
                "line": 321,
                "content": "Check for missing parameter type annotations"
              },
              {
                "line": 380,
                "content": "Analyze the file"
              },
              {
                "line": 383,
                "content": "Read the original content"
              },
              {
                "line": 387,
                "content": "Apply fixes based on the complex model"
              },
              {
                "line": 390,
                "content": "Apply Flake8 fixes"
              },
              {
                "line": 394,
                "content": "Apply MyPy fixes"
              },
              {
                "line": 405,
                "content": "Remove trailing whitespace"
              },
              {
                "line": 410,
                "content": "Add newline at end"
              },
              {
                "line": 415,
                "content": "Add blank lines before definition"
              },
              {
                "line": 425,
                "content": "This is a simplified version - in practice, you'd need more sophisticated AST manipulation"
              },
              {
                "line": 427,
                "content": "Add return type annotation"
              },
              {
                "line": 445,
                "content": "Test the complex model"
              }
            ],
            "total_lines": 454,
            "code_lines": 366
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/dynamic_rule_updater.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1412,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 33,
                "args": [
                  "self",
                  "rules_dir"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_load_rule_templates",
                "lineno": 38,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load rule templates for different violation types"
              }
            ],
            "classes": [
              {
                "name": "ViolationPattern",
                "lineno": 18,
                "bases": [],
                "methods": [],
                "docstring": "Represents a violation pattern for rule learning"
              },
              {
                "name": "DynamicRuleUpdater",
                "lineno": 30,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_rule_templates"
                ],
                "docstring": "Updates Cursor rules dynamically based on violations"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 14,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Set up logging"
              }
            ],
            "total_lines": 49,
            "code_lines": 37
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/perfect_ast_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 8228,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 230
              }
            ],
            "functions": [
              {
                "name": "test_perfect_ast_generator",
                "lineno": 189,
                "args": [],
                "decorators": [],
                "docstring": "Test the perfect AST generator"
              },
              {
                "name": "__init__",
                "lineno": 28,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_perfect_code",
                "lineno": 31,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate perfect code that passes all linting checks"
              },
              {
                "name": "_generate_initial_code",
                "lineno": 49,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate initial code from the model"
              },
              {
                "name": "_generate_perfect_code_from_analysis",
                "lineno": 84,
                "args": [
                  "self",
                  "initial_code",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Generate perfect code by removing unused elements"
              },
              {
                "name": "_is_import_used",
                "lineno": 109,
                "args": [
                  "self",
                  "import_line",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Check if an import is actually used"
              },
              {
                "name": "_validate_syntax",
                "lineno": 120,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Validate that the generated code has correct syntax"
              },
              {
                "name": "__init__",
                "lineno": 131,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "analyze_code",
                "lineno": 134,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_visit_node",
                "lineno": 144,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "PerfectCodeModel",
                "lineno": 12,
                "bases": [],
                "methods": [],
                "docstring": "Perfect code model that knows about AST usage and linting rules"
              },
              {
                "name": "PerfectASTGenerator",
                "lineno": 22,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_perfect_code",
                  "_generate_initial_code",
                  "_generate_perfect_code_from_analysis",
                  "_is_import_used",
                  "_validate_syntax"
                ],
                "docstring": "The ultimate code generator that can't emit imperfect code\nUses AST analysis to ensure only used imports and variables are included"
              },
              {
                "name": "ASTUsageTracker",
                "lineno": 128,
                "bases": [],
                "methods": [
                  "__init__",
                  "analyze_code",
                  "_visit_node"
                ],
                "docstring": "AST-based usage tracker (copied from ast_usage_tracker.py)"
              },
              {
                "name": "UsageAnalysis",
                "lineno": 176,
                "bases": [],
                "methods": [],
                "docstring": "Results of AST usage analysis"
              }
            ],
            "variables": [
              {
                "name": "model",
                "lineno": 193,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 219,
                "value_type": "Call"
              },
              {
                "name": "perfect_code",
                "lineno": 220,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 232,
                "value_type": "Call"
              },
              {
                "name": "initial_code",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 39,
                "value_type": "Call"
              },
              {
                "name": "perfect_code",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 51,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 90,
                "value_type": "Call"
              },
              {
                "name": "perfect_lines",
                "lineno": 91,
                "value_type": "List"
              },
              {
                "name": "imported_name",
                "lineno": 112,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 136,
                "value_type": "Call"
              },
              {
                "name": "var_name",
                "lineno": 101,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 114,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 116,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 35,
                "content": "Phase 1: Generate initial code from model"
              },
              {
                "line": 38,
                "content": "Phase 2: Analyze with AST to find actual usage"
              },
              {
                "line": 41,
                "content": "Phase 3: Generate perfect code with only used elements"
              },
              {
                "line": 44,
                "content": "Phase 4: Validate with AST to ensure syntax is correct"
              },
              {
                "line": 53,
                "content": "Module docstring"
              },
              {
                "line": 58,
                "content": "Imports"
              },
              {
                "line": 65,
                "content": "Classes"
              },
              {
                "line": 70,
                "content": "Functions"
              },
              {
                "line": 75,
                "content": "Main execution block"
              },
              {
                "line": 94,
                "content": "Skip unused imports"
              },
              {
                "line": 99,
                "content": "Skip unused variable assignments"
              },
              {
                "line": 188,
                "content": "Test the perfect AST generator"
              },
              {
                "line": 192,
                "content": "Create a perfect billing analyzer model"
              },
              {
                "line": 218,
                "content": "Generate perfect code"
              },
              {
                "line": 225,
                "content": "Test with flake8"
              }
            ],
            "total_lines": 252,
            "code_lines": 185
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/complex_model_simple_code_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 10239,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 302
              }
            ],
            "functions": [
              {
                "name": "test_complex_model_simple_code_generator",
                "lineno": 282,
                "args": [],
                "decorators": [],
                "docstring": "Test the complex model that generates simple, mypy-compliant code"
              },
              {
                "name": "to_code",
                "lineno": 40,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate mypy-compliant function code"
              },
              {
                "name": "to_code",
                "lineno": 69,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate mypy-compliant parameter code"
              },
              {
                "name": "to_code",
                "lineno": 86,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate mypy-compliant class code"
              },
              {
                "name": "to_code",
                "lineno": 125,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate mypy-compliant attribute code"
              },
              {
                "name": "to_code",
                "lineno": 141,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate mypy-compliant import code"
              },
              {
                "name": "__init__",
                "lineno": 158,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_mypy_compliant_code",
                "lineno": 161,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate mypy-compliant code from complex model"
              },
              {
                "name": "create_ghostbusters_agent_model",
                "lineno": 189,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Create a complex model for Ghostbusters agents"
              }
            ],
            "classes": [
              {
                "name": "MypyCompliantCodeModel",
                "lineno": 12,
                "bases": [],
                "methods": [],
                "docstring": "Complex model that generates simple, mypy-compliant code"
              },
              {
                "name": "MypyCompliantFunction",
                "lineno": 30,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Function definition that's mypy-compliant by design"
              },
              {
                "name": "MypyCompliantParameter",
                "lineno": 62,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Parameter with proper type annotation"
              },
              {
                "name": "MypyCompliantClass",
                "lineno": 77,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Class definition that's mypy-compliant by design"
              },
              {
                "name": "MypyCompliantAttribute",
                "lineno": 118,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Class attribute with proper type annotation"
              },
              {
                "name": "MypyCompliantImport",
                "lineno": 133,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Import statement that's mypy-compliant by design"
              },
              {
                "name": "ComplexModelSimpleCodeGenerator",
                "lineno": 155,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_mypy_compliant_code",
                  "create_ghostbusters_agent_model"
                ],
                "docstring": "Complex model that generates simple, mypy-compliant code"
              }
            ],
            "variables": [
              {
                "name": "generator",
                "lineno": 288,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 289,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 292,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 304,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 42,
                "value_type": "List"
              },
              {
                "name": "params",
                "lineno": 45,
                "value_type": "Call"
              },
              {
                "name": "async_prefix",
                "lineno": 46,
                "value_type": "IfExp"
              },
              {
                "name": "signature",
                "lineno": 47,
                "value_type": "JoinedStr"
              },
              {
                "name": "lines",
                "lineno": 88,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 163,
                "value_type": "List"
              },
              {
                "name": "imports",
                "lineno": 193,
                "value_type": "List"
              },
              {
                "name": "base_class",
                "lineno": 205,
                "value_type": "Call"
              },
              {
                "name": "security_expert",
                "lineno": 242,
                "value_type": "Call"
              },
              {
                "name": "bases_str",
                "lineno": 92,
                "value_type": "Call"
              },
              {
                "name": "method_code",
                "lineno": 107,
                "value_type": "Call"
              },
              {
                "name": "indented_method",
                "lineno": 109,
                "value_type": "Call"
              },
              {
                "name": "items_str",
                "lineno": 145,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Mypy-aware function definitions"
              },
              {
                "line": 22,
                "content": "Mypy compliance rules"
              },
              {
                "line": 44,
                "content": "Function signature with proper type annotations"
              },
              {
                "line": 50,
                "content": "Docstring"
              },
              {
                "line": 54,
                "content": "Body with proper indentation"
              },
              {
                "line": 90,
                "content": "Class definition"
              },
              {
                "line": 97,
                "content": "Docstring"
              },
              {
                "line": 101,
                "content": "Attributes"
              },
              {
                "line": 105,
                "content": "Methods"
              },
              {
                "line": 108,
                "content": "Indent method code"
              },
              {
                "line": 165,
                "content": "Module docstring"
              },
              {
                "line": 170,
                "content": "Imports"
              },
              {
                "line": 177,
                "content": "Classes"
              },
              {
                "line": 182,
                "content": "Functions"
              },
              {
                "line": 192,
                "content": "Mypy-compliant imports"
              },
              {
                "line": 204,
                "content": "Mypy-compliant base class"
              },
              {
                "line": 241,
                "content": "Mypy-compliant security expert"
              },
              {
                "line": 281,
                "content": "Test the complex model, simple code generator"
              },
              {
                "line": 287,
                "content": "Create complex model"
              },
              {
                "line": 291,
                "content": "Generate simple, mypy-compliant code"
              },
              {
                "line": 297,
                "content": "Test with mypy"
              }
            ],
            "total_lines": 324,
            "code_lines": 240
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ast_usage_tracker.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 11646,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "test_ast_usage_tracker",
                "lineno": 276,
                "args": [],
                "decorators": [],
                "docstring": "Test the AST usage tracker with sample code"
              },
              {
                "name": "__init__",
                "lineno": 33,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "analyze_code",
                "lineno": 36,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Analyze code using AST to find what's actually used"
              },
              {
                "name": "_visit_node",
                "lineno": 49,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Recursively visit AST nodes to extract usage"
              },
              {
                "name": "_analyze_function_mypy_rules",
                "lineno": 97,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Analyze function with mypy type checking rules"
              },
              {
                "name": "_check_for_unexpected_returns",
                "lineno": 126,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Check for unexpected return statements in -> None functions"
              },
              {
                "name": "find_unused_imports",
                "lineno": 134,
                "args": [
                  "self",
                  "imports",
                  "used_names"
                ],
                "decorators": [],
                "docstring": "Find imports that are not actually used"
              },
              {
                "name": "find_unused_variables",
                "lineno": 151,
                "args": [
                  "self",
                  "assignments",
                  "used_names"
                ],
                "decorators": [],
                "docstring": "Find variables that are assigned but not used"
              },
              {
                "name": "__init__",
                "lineno": 172,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_perfect_code",
                "lineno": 175,
                "args": [
                  "self",
                  "initial_code"
                ],
                "decorators": [],
                "docstring": "Generate perfect code with mypy compliance"
              },
              {
                "name": "_apply_mypy_fixes",
                "lineno": 186,
                "args": [
                  "self",
                  "code",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Apply mypy fixes to code"
              },
              {
                "name": "_has_return_statement",
                "lineno": 207,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Check if function has return statements"
              },
              {
                "name": "_generate_perfect_code_from_analysis",
                "lineno": 211,
                "args": [
                  "self",
                  "initial_code",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Generate perfect code by analyzing usage and removing unused elements"
              },
              {
                "name": "_is_import_used",
                "lineno": 263,
                "args": [
                  "self",
                  "import_line",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Check if an import line is actually used"
              }
            ],
            "classes": [
              {
                "name": "UsageAnalysis",
                "lineno": 12,
                "bases": [],
                "methods": [],
                "docstring": "Results of AST usage analysis"
              },
              {
                "name": "ASTUsageTracker",
                "lineno": 28,
                "bases": [],
                "methods": [
                  "__init__",
                  "analyze_code",
                  "_visit_node",
                  "_analyze_function_mypy_rules",
                  "_check_for_unexpected_returns",
                  "find_unused_imports",
                  "find_unused_variables"
                ],
                "docstring": "AST-based usage tracker that analyzes Python code to find actual usage"
              },
              {
                "name": "ASTBasedCodeGenerator",
                "lineno": 167,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_perfect_code",
                  "_apply_mypy_fixes",
                  "_has_return_statement",
                  "_generate_perfect_code_from_analysis",
                  "_is_import_used"
                ],
                "docstring": "Code generator that uses AST analysis to ensure only used imports/variables are included"
              }
            ],
            "variables": [
              {
                "name": "sample_code",
                "lineno": 279,
                "value_type": "Constant"
              },
              {
                "name": "tracker",
                "lineno": 302,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 303,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 312,
                "value_type": "Call"
              },
              {
                "name": "perfect_code",
                "lineno": 313,
                "value_type": "Call"
              },
              {
                "name": "missing_param_types",
                "lineno": 107,
                "value_type": "List"
              },
              {
                "name": "unused",
                "lineno": 136,
                "value_type": "Call"
              },
              {
                "name": "unused",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 178,
                "value_type": "Call"
              },
              {
                "name": "fixed_code",
                "lineno": 181,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 188,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 218,
                "value_type": "Call"
              },
              {
                "name": "filtered_lines",
                "lineno": 219,
                "value_type": "List"
              },
              {
                "name": "final_lines",
                "lineno": 229,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 241,
                "value_type": "Call"
              },
              {
                "name": "filtered_lines",
                "lineno": 242,
                "value_type": "List"
              },
              {
                "name": "final_lines",
                "lineno": 252,
                "value_type": "List"
              },
              {
                "name": "tree",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "var_name",
                "lineno": 160,
                "value_type": "Call"
              },
              {
                "name": "line_num",
                "lineno": 192,
                "value_type": "BinOp"
              },
              {
                "name": "imported_name",
                "lineno": 266,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 140,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 194,
                "value_type": "Subscript"
              },
              {
                "name": "var_name",
                "lineno": 233,
                "value_type": "Call"
              },
              {
                "name": "var_name",
                "lineno": 256,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 268,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 270,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 142,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 144,
                "value_type": "Call"
              },
              {
                "name": "fixed_line",
                "lineno": 198,
                "value_type": "Call"
              },
              {
                "name": "fixed_line",
                "lineno": 202,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 22,
                "content": "Mypy-enhanced analysis"
              },
              {
                "line": 53,
                "content": "Track variable/function names"
              },
              {
                "line": 57,
                "content": "Track attribute access (e.g., logging.getLogger)"
              },
              {
                "line": 63,
                "content": "Track module imports"
              },
              {
                "line": 68,
                "content": "Track from imports"
              },
              {
                "line": 75,
                "content": "Track function definitions"
              },
              {
                "line": 77,
                "content": "Mypy-enhanced analysis"
              },
              {
                "line": 81,
                "content": "Track class definitions"
              },
              {
                "line": 85,
                "content": "Track function calls"
              },
              {
                "line": 93,
                "content": "Recursively visit child nodes"
              },
              {
                "line": 99,
                "content": "Check for missing return type annotation"
              },
              {
                "line": 106,
                "content": "Check for missing parameter type annotations"
              },
              {
                "line": 118,
                "content": "Check for return statements in functions marked as -> None"
              },
              {
                "line": 138,
                "content": "Extract the imported name from the import statement"
              },
              {
                "line": 159,
                "content": "Extract variable name from assignment"
              },
              {
                "line": 177,
                "content": "First, analyze the code with mypy rules"
              },
              {
                "line": 180,
                "content": "Apply mypy fixes"
              },
              {
                "line": 183,
                "content": "Then apply existing AST-based improvements"
              },
              {
                "line": 190,
                "content": "Fix missing return type annotations"
              },
              {
                "line": 197,
                "content": "Add -> None for functions without return statements"
              },
              {
                "line": 201,
                "content": "Add -> Any for functions with return statements"
              },
              {
                "line": 217,
                "content": "Phase 1: Remove unused imports"
              },
              {
                "line": 222,
                "content": "Skip unused import lines"
              },
              {
                "line": 228,
                "content": "Phase 2: Remove unused variable assignments"
              },
              {
                "line": 231,
                "content": "Skip unused variable assignments"
              },
              {
                "line": 240,
                "content": "Phase 2: Remove unused imports"
              },
              {
                "line": 245,
                "content": "Skip unused import lines"
              },
              {
                "line": 251,
                "content": "Phase 3: Remove unused variable assignments"
              },
              {
                "line": 254,
                "content": "Skip unused variable assignments"
              },
              {
                "line": 275,
                "content": "Test the AST usage tracker"
              },
              {
                "line": 301,
                "content": "Test analysis"
              },
              {
                "line": 311,
                "content": "Test perfect code generation"
              }
            ],
            "total_lines": 323,
            "code_lines": 229
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_manager.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 9980,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "shutil",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "tempfile",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "hashlib",
                "asname": null,
                "lineno": 49
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 34,
                "args": [
                  "self",
                  "models_dir"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_create_backup",
                "lineno": 39,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Create a backup of a model file before modification"
              },
              {
                "name": "_validate_json",
                "lineno": 61,
                "args": [
                  "self",
                  "data"
                ],
                "decorators": [],
                "docstring": "Validate JSON structure"
              },
              {
                "name": "_safe_load_json",
                "lineno": 71,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Safely load JSON with error handling"
              },
              {
                "name": "_safe_save_json",
                "lineno": 82,
                "args": [
                  "self",
                  "file_path",
                  "data",
                  "backup"
                ],
                "decorators": [],
                "docstring": "Safely save JSON with backup and validation"
              },
              {
                "name": "load_model",
                "lineno": 115,
                "args": [
                  "self",
                  "model_name"
                ],
                "decorators": [],
                "docstring": "Load a model file safely"
              },
              {
                "name": "save_model",
                "lineno": 120,
                "args": [
                  "self",
                  "model_name",
                  "data",
                  "backup"
                ],
                "decorators": [],
                "docstring": "Save a model file safely with backup"
              },
              {
                "name": "update_model_field",
                "lineno": 130,
                "args": [
                  "self",
                  "model_name",
                  "field_path",
                  "value"
                ],
                "decorators": [],
                "docstring": "Safely update a specific field in a model"
              },
              {
                "name": "add_model_entry",
                "lineno": 158,
                "args": [
                  "self",
                  "model_name",
                  "entry_path",
                  "entry_data"
                ],
                "decorators": [],
                "docstring": "Safely add a new entry to a model"
              },
              {
                "name": "remove_model_entry",
                "lineno": 186,
                "args": [
                  "self",
                  "model_name",
                  "entry_path"
                ],
                "decorators": [],
                "docstring": "Safely remove an entry from a model"
              },
              {
                "name": "validate_model_structure",
                "lineno": 210,
                "args": [
                  "self",
                  "model_name",
                  "schema"
                ],
                "decorators": [],
                "docstring": "Validate model structure against a schema"
              },
              {
                "name": "_validate_against_schema",
                "lineno": 219,
                "args": [
                  "self",
                  "data",
                  "schema"
                ],
                "decorators": [],
                "docstring": "Recursively validate data against schema"
              },
              {
                "name": "list_backups",
                "lineno": 239,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "List all available backups"
              },
              {
                "name": "restore_backup",
                "lineno": 264,
                "args": [
                  "self",
                  "backup"
                ],
                "decorators": [],
                "docstring": "Restore a model from backup"
              }
            ],
            "classes": [
              {
                "name": "ModelBackup",
                "lineno": 22,
                "bases": [],
                "methods": [],
                "docstring": "Backup information for model files"
              },
              {
                "name": "ModelManager",
                "lineno": 31,
                "bases": [],
                "methods": [
                  "__init__",
                  "_create_backup",
                  "_validate_json",
                  "_safe_load_json",
                  "_safe_save_json",
                  "load_model",
                  "save_model",
                  "update_model_field",
                  "add_model_entry",
                  "remove_model_entry",
                  "validate_model_structure",
                  "_validate_against_schema",
                  "list_backups",
                  "restore_backup"
                ],
                "docstring": "Safe JSON model manipulation with backup and validation"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "manager",
                "lineno": 288,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 291,
                "value_type": "Call"
              },
              {
                "name": "backups",
                "lineno": 303,
                "value_type": "Call"
              },
              {
                "name": "timestamp",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "backup_name",
                "lineno": 42,
                "value_type": "JoinedStr"
              },
              {
                "name": "backup_path",
                "lineno": 43,
                "value_type": "BinOp"
              },
              {
                "name": "temp_file",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "file_path",
                "lineno": 117,
                "value_type": "BinOp"
              },
              {
                "name": "file_path",
                "lineno": 127,
                "value_type": "BinOp"
              },
              {
                "name": "backups",
                "lineno": 241,
                "value_type": "List"
              },
              {
                "name": "checksum",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "backup_info",
                "lineno": 90,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 139,
                "value_type": "Call"
              },
              {
                "name": "current",
                "lineno": 142,
                "value_type": "Name"
              },
              {
                "name": "data",
                "lineno": 166,
                "value_type": "Call"
              },
              {
                "name": "current",
                "lineno": 169,
                "value_type": "Name"
              },
              {
                "name": "data",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "current",
                "lineno": 192,
                "value_type": "Name"
              },
              {
                "name": "data",
                "lineno": 213,
                "value_type": "Call"
              },
              {
                "name": "parts",
                "lineno": 244,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 75,
                "value_type": "Call"
              },
              {
                "name": "current",
                "lineno": 146,
                "value_type": "Subscript"
              },
              {
                "name": "current",
                "lineno": 173,
                "value_type": "Subscript"
              },
              {
                "name": "current",
                "lineno": 197,
                "value_type": "Subscript"
              },
              {
                "name": "timestamp_str",
                "lineno": 246,
                "value_type": "JoinedStr"
              },
              {
                "name": "timestamp",
                "lineno": 248,
                "value_type": "Call"
              },
              {
                "name": "original_name",
                "lineno": 249,
                "value_type": "Call"
              },
              {
                "name": "original_path",
                "lineno": 250,
                "value_type": "BinOp"
              },
              {
                "name": "backup",
                "lineno": 252,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Configure logging"
              },
              {
                "line": 45,
                "content": "Create backup"
              },
              {
                "line": 48,
                "content": "Calculate checksum"
              },
              {
                "line": 64,
                "content": "Test serialization"
              },
              {
                "line": 93,
                "content": "Validate data before saving"
              },
              {
                "line": 98,
                "content": "Use temporary file for atomic write"
              },
              {
                "line": 104,
                "content": "Atomic move"
              },
              {
                "line": 138,
                "content": "Load current model"
              },
              {
                "line": 141,
                "content": "Navigate to field"
              },
              {
                "line": 148,
                "content": "Update field"
              },
              {
                "line": 151,
                "content": "Save with backup"
              },
              {
                "line": 168,
                "content": "Navigate to entry location"
              },
              {
                "line": 175,
                "content": "Add entry"
              },
              {
                "line": 191,
                "content": "Navigate to entry location"
              },
              {
                "line": 199,
                "content": "Remove entry"
              },
              {
                "line": 243,
                "content": "Parse backup info from filename"
              },
              {
                "line": 271,
                "content": "Create backup of current file if it exists"
              },
              {
                "line": 275,
                "content": "Restore from backup"
              },
              {
                "line": 285,
                "content": "Example usage and testing"
              },
              {
                "line": 287,
                "content": "Initialize model manager"
              },
              {
                "line": 290,
                "content": "Example: Safely update a model"
              },
              {
                "line": 302,
                "content": "List available backups"
              }
            ],
            "total_lines": 305,
            "code_lines": 228
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/intelligent_linter_system.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 19394,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "src.dynamic_rule_updater",
                "names": [
                  "DynamicRuleUpdater"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "src.linter_api_integration",
                "names": [
                  "LinterAPIIntegration",
                  "LinterViolation"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 15
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 16
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 538,
                "args": [],
                "decorators": [],
                "docstring": "Test the intelligent linter system"
              },
              {
                "name": "__init__",
                "lineno": 26,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "setup_ai_powered_linters",
                "lineno": 31,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup AI-powered linters (Ruff, etc.)"
              },
              {
                "name": "query_all_linter_apis",
                "lineno": 85,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Query all available linter APIs for a file"
              },
              {
                "name": "prevent_violations_before_writing",
                "lineno": 119,
                "args": [
                  "self",
                  "file_path",
                  "code_block"
                ],
                "decorators": [],
                "docstring": "Prevent violations before writing code"
              },
              {
                "name": "update_rules_on_violations",
                "lineno": 163,
                "args": [
                  "self",
                  "violations"
                ],
                "decorators": [],
                "docstring": "Update rules when violations are detected"
              },
              {
                "name": "create_pre_commit_config",
                "lineno": 212,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Create pre-commit configuration with AI-powered linters"
              },
              {
                "name": "create_ruff_config",
                "lineno": 276,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Create Ruff configuration for AI-powered linting"
              },
              {
                "name": "run_comprehensive_analysis",
                "lineno": 380,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Run comprehensive analysis of a file"
              },
              {
                "name": "_generate_recommendations",
                "lineno": 442,
                "args": [
                  "self",
                  "violations",
                  "ai_suggestions"
                ],
                "decorators": [],
                "docstring": "Generate recommendations based on analysis"
              },
              {
                "name": "generate_summary_report",
                "lineno": 492,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate summary report of all activities"
              }
            ],
            "classes": [
              {
                "name": "IntelligentLinterSystem",
                "lineno": 23,
                "bases": [],
                "methods": [
                  "__init__",
                  "setup_ai_powered_linters",
                  "query_all_linter_apis",
                  "prevent_violations_before_writing",
                  "update_rules_on_violations",
                  "create_pre_commit_config",
                  "create_ruff_config",
                  "run_comprehensive_analysis",
                  "_generate_recommendations",
                  "generate_summary_report"
                ],
                "docstring": "Comprehensive intelligent linter system"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "system",
                "lineno": 543,
                "value_type": "Call"
              },
              {
                "name": "setup_results",
                "lineno": 546,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 550,
                "value_type": "Constant"
              },
              {
                "name": "setup_results",
                "lineno": 36,
                "value_type": "Dict"
              },
              {
                "name": "results",
                "lineno": 91,
                "value_type": "Dict"
              },
              {
                "name": "ai_suggestions",
                "lineno": 112,
                "value_type": "Call"
              },
              {
                "name": "prevention_result",
                "lineno": 130,
                "value_type": "Call"
              },
              {
                "name": "update_results",
                "lineno": 172,
                "value_type": "Dict"
              },
              {
                "name": "learning_report",
                "lineno": 199,
                "value_type": "Call"
              },
              {
                "name": "config_content",
                "lineno": 214,
                "value_type": "Constant"
              },
              {
                "name": "config_content",
                "lineno": 278,
                "value_type": "Constant"
              },
              {
                "name": "linter_results",
                "lineno": 387,
                "value_type": "Call"
              },
              {
                "name": "ai_suggestions",
                "lineno": 390,
                "value_type": "Call"
              },
              {
                "name": "analysis_report",
                "lineno": 421,
                "value_type": "Dict"
              },
              {
                "name": "recommendations",
                "lineno": 448,
                "value_type": "List"
              },
              {
                "name": "violation_types",
                "lineno": 451,
                "value_type": "Dict"
              },
              {
                "name": "total_violations",
                "lineno": 498,
                "value_type": "Call"
              },
              {
                "name": "unique_rules",
                "lineno": 499,
                "value_type": "SetComp"
              },
              {
                "name": "unique_files",
                "lineno": 500,
                "value_type": "SetComp"
              },
              {
                "name": "rule_frequencies",
                "lineno": 503,
                "value_type": "Dict"
              },
              {
                "name": "summary",
                "lineno": 511,
                "value_type": "Dict"
              },
              {
                "name": "result",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 62,
                "value_type": "Call"
              },
              {
                "name": "update_results",
                "lineno": 412,
                "value_type": "Call"
              },
              {
                "name": "update_results",
                "lineno": 414,
                "value_type": "Dict"
              },
              {
                "name": "rule_code",
                "lineno": 453,
                "value_type": "Subscript"
              },
              {
                "name": "rule_code",
                "lineno": 505,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 9,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 18,
                "content": "Set up logging"
              },
              {
                "line": 38,
                "content": "Check if Ruff is available"
              },
              {
                "line": 60,
                "content": "Check if pre-commit is available"
              },
              {
                "line": 93,
                "content": "Query each linter"
              },
              {
                "line": 111,
                "content": "Get AI suggestions if Ruff is available"
              },
              {
                "line": 129,
                "content": "Get prevention analysis"
              },
              {
                "line": 135,
                "content": "Log potential violations"
              },
              {
                "line": 147,
                "content": "Log prevention suggestions"
              },
              {
                "line": 153,
                "content": "Log auto-fixes"
              },
              {
                "line": 184,
                "content": "Update rules for this violation"
              },
              {
                "line": 189,
                "content": "Add to violation history"
              },
              {
                "line": 198,
                "content": "Learn from all violations"
              },
              {
                "line": 215,
                "content": "AI-powered linter configuration"
              },
              {
                "line": 218,
                "content": "Ruff (AI-powered Python linter)"
              },
              {
                "line": 224,
                "content": "AI-powered auto-fixing"
              },
              {
                "line": 226,
                "content": "AI-powered formatting"
              },
              {
                "line": 228,
                "content": "MyPy (Type checking)"
              },
              {
                "line": 234,
                "content": "AI-powered type checking"
              },
              {
                "line": 236,
                "content": "Black (Code formatting)"
              },
              {
                "line": 243,
                "content": "Flake8 (Style checking)"
              },
              {
                "line": 250,
                "content": "Custom hooks for our intelligent system"
              },
              {
                "line": 279,
                "content": "AI-powered Python linter configuration"
              },
              {
                "line": 284,
                "content": "Enable AI-powered features"
              },
              {
                "line": 330,
                "content": "Ignore specific rules"
              },
              {
                "line": 339,
                "content": "Allow autofix for all rules"
              },
              {
                "line": 342,
                "content": "Unfixable rules"
              },
              {
                "line": 345,
                "content": "Exclude files"
              },
              {
                "line": 357,
                "content": "Per-file-ignores"
              },
              {
                "line": 363,
                "content": "Import sorting"
              },
              {
                "line": 368,
                "content": "Type checking"
              },
              {
                "line": 370,
                "content": "Enable all type checking rules"
              },
              {
                "line": 386,
                "content": "Query all linter APIs"
              },
              {
                "line": 389,
                "content": "Get AI suggestions"
              },
              {
                "line": 392,
                "content": "Analyze violation patterns"
              },
              {
                "line": 410,
                "content": "Update rules based on violations"
              },
              {
                "line": 420,
                "content": "Generate comprehensive report"
              },
              {
                "line": 450,
                "content": "Analyze violation patterns"
              },
              {
                "line": 458,
                "content": "Generate recommendations based on patterns"
              },
              {
                "line": 484,
                "content": "Add AI-specific recommendations"
              },
              {
                "line": 497,
                "content": "Analyze violation history"
              },
              {
                "line": 502,
                "content": "Calculate statistics"
              },
              {
                "line": 510,
                "content": "Generate summary"
              },
              {
                "line": 545,
                "content": "Setup AI-powered linters"
              },
              {
                "line": 549,
                "content": "Test with a sample file"
              },
              {
                "line": 553,
                "content": "Run comprehensive analysis"
              },
              {
                "line": 556,
                "content": "Generate summary report"
              },
              {
                "line": 559,
                "content": "Create configuration files"
              }
            ],
            "total_lines": 576,
            "code_lines": 439
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/generate_linting_aware_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 12254,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "linting_aware_model",
                "names": [
                  "LintingAwareClassDefinition",
                  "LintingAwareCodeFile",
                  "LintingAwareCodeGenerator",
                  "LintingAwareFunctionDefinition",
                  "LintingAwareImportStatement"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "create_linting_aware_code_generator",
                "lineno": 19,
                "args": [],
                "decorators": [],
                "docstring": "Create a perfect code generator using linting-aware model"
              },
              {
                "name": "main",
                "lineno": 285,
                "args": [],
                "decorators": [],
                "docstring": "Generate the perfect linting-aware code generator"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "imports",
                "lineno": 23,
                "value_type": "List"
              },
              {
                "name": "import_statement_class",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "function_definition_class",
                "lineno": 100,
                "value_type": "Call"
              },
              {
                "name": "code_generator_class",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "main_function",
                "lineno": 238,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 293,
                "value_type": "Call"
              },
              {
                "name": "perfect_generator_file",
                "lineno": 297,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 300,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 301,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 22,
                "content": "Imports that track usage"
              },
              {
                "line": 46,
                "content": "LintingAwareImportStatement class"
              },
              {
                "line": 99,
                "content": "LintingAwareFunctionDefinition class"
              },
              {
                "line": 188,
                "content": "LintingAwareCodeGenerator class"
              },
              {
                "line": 237,
                "content": "Main function"
              },
              {
                "line": 292,
                "content": "Create linting-aware generator"
              },
              {
                "line": 295,
                "content": "Generate the perfect code generator"
              },
              {
                "line": 299,
                "content": "Write perfect file"
              }
            ],
            "total_lines": 314,
            "code_lines": 285
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_battle_visualizer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4426,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "run_ghostbusters"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "create_battle_visualization",
                "lineno": 29,
                "args": [
                  "state"
                ],
                "decorators": [],
                "docstring": "Create battle visualization from Ghostbusters state"
              },
              {
                "name": "print_battle_visualization",
                "lineno": 62,
                "args": [
                  "viz"
                ],
                "decorators": [],
                "docstring": "Print ASCII battle visualization"
              }
            ],
            "classes": [
              {
                "name": "BattleVisualization",
                "lineno": 16,
                "bases": [],
                "methods": [],
                "docstring": "Battle readiness visualization data"
              }
            ],
            "variables": [
              {
                "name": "agent_status",
                "lineno": 33,
                "value_type": "Dict"
              },
              {
                "name": "recovery_engine_status",
                "lineno": 43,
                "value_type": "Dict"
              },
              {
                "name": "confidence_bar",
                "lineno": 71,
                "value_type": "BinOp"
              },
              {
                "name": "state",
                "lineno": 137,
                "value_type": "Await"
              },
              {
                "name": "viz",
                "lineno": 140,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Import Ghostbusters"
              },
              {
                "line": 32,
                "content": "Agent status (all ready based on our check)"
              },
              {
                "line": 42,
                "content": "Recovery engine status (all ready based on our check)"
              },
              {
                "line": 70,
                "content": "Confidence Score"
              },
              {
                "line": 78,
                "content": "Delusions Detected"
              },
              {
                "line": 83,
                "content": "Recovery Actions"
              },
              {
                "line": 88,
                "content": "Phase Status"
              },
              {
                "line": 92,
                "content": "Error/Warning Status"
              },
              {
                "line": 97,
                "content": "Agent Status"
              },
              {
                "line": 103,
                "content": "Recovery Engines"
              },
              {
                "line": 109,
                "content": "Battle Readiness Assessment"
              },
              {
                "line": 123,
                "content": "Battle Conclusion"
              },
              {
                "line": 136,
                "content": "Run Ghostbusters"
              },
              {
                "line": 139,
                "content": "Create visualization"
              },
              {
                "line": 142,
                "content": "Print visualization"
              }
            ],
            "total_lines": 151,
            "code_lines": 103
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ultimate_perfect_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 8880,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 251
              }
            ],
            "functions": [
              {
                "name": "test_ultimate_perfect_generator",
                "lineno": 210,
                "args": [],
                "decorators": [],
                "docstring": "Test the ultimate perfect generator"
              },
              {
                "name": "__init__",
                "lineno": 27,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_ultimate_perfect_code",
                "lineno": 30,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate ultimate perfect code that passes ALL linting checks"
              },
              {
                "name": "_generate_initial_code",
                "lineno": 51,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate initial code from the model"
              },
              {
                "name": "_generate_perfect_code_from_analysis",
                "lineno": 85,
                "args": [
                  "self",
                  "initial_code",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Generate perfect code by removing unused elements"
              },
              {
                "name": "_fix_remaining_issues",
                "lineno": 110,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Fix remaining linting issues"
              },
              {
                "name": "_is_import_used",
                "lineno": 129,
                "args": [
                  "self",
                  "import_line",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Check if an import is actually used"
              },
              {
                "name": "_validate_syntax",
                "lineno": 140,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Validate that the generated code has correct syntax"
              },
              {
                "name": "__init__",
                "lineno": 152,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "analyze_code",
                "lineno": 155,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_visit_node",
                "lineno": 165,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "UltimateCodeModel",
                "lineno": 12,
                "bases": [],
                "methods": [],
                "docstring": "Ultimate code model that knows about ALL linting rules"
              },
              {
                "name": "UltimatePerfectGenerator",
                "lineno": 22,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_ultimate_perfect_code",
                  "_generate_initial_code",
                  "_generate_perfect_code_from_analysis",
                  "_fix_remaining_issues",
                  "_is_import_used",
                  "_validate_syntax"
                ],
                "docstring": "The ULTIMATE code generator that can't emit ANY linting errors"
              },
              {
                "name": "ASTUsageTracker",
                "lineno": 149,
                "bases": [],
                "methods": [
                  "__init__",
                  "analyze_code",
                  "_visit_node"
                ],
                "docstring": "AST-based usage tracker"
              },
              {
                "name": "UsageAnalysis",
                "lineno": 197,
                "bases": [],
                "methods": [],
                "docstring": "Results of AST usage analysis"
              }
            ],
            "variables": [
              {
                "name": "model",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 240,
                "value_type": "Call"
              },
              {
                "name": "ultimate_code",
                "lineno": 241,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 253,
                "value_type": "Call"
              },
              {
                "name": "initial_code",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 38,
                "value_type": "Call"
              },
              {
                "name": "perfect_code",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "ultimate_code",
                "lineno": 44,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 53,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 91,
                "value_type": "Call"
              },
              {
                "name": "perfect_lines",
                "lineno": 92,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 112,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 113,
                "value_type": "List"
              },
              {
                "name": "imported_name",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "var_name",
                "lineno": 102,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 134,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 136,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 34,
                "content": "Phase 1: Generate initial code"
              },
              {
                "line": 37,
                "content": "Phase 2: Analyze with AST"
              },
              {
                "line": 40,
                "content": "Phase 3: Generate perfect code"
              },
              {
                "line": 43,
                "content": "Phase 4: Fix remaining linting issues"
              },
              {
                "line": 46,
                "content": "Phase 5: Final validation"
              },
              {
                "line": 55,
                "content": "Module docstring"
              },
              {
                "line": 60,
                "content": "Imports"
              },
              {
                "line": 67,
                "content": "Classes"
              },
              {
                "line": 72,
                "content": "Functions"
              },
              {
                "line": 77,
                "content": "Main execution block"
              },
              {
                "line": 95,
                "content": "Skip unused imports"
              },
              {
                "line": 100,
                "content": "Skip unused variable assignments"
              },
              {
                "line": 116,
                "content": "Fix E302: Add blank line before function definitions"
              },
              {
                "line": 121,
                "content": "Fix F811: Remove duplicate imports in main block"
              },
              {
                "line": 209,
                "content": "Test the ultimate perfect generator"
              },
              {
                "line": 213,
                "content": "Create an ultimate billing analyzer model"
              },
              {
                "line": 239,
                "content": "Generate ultimate perfect code"
              },
              {
                "line": 246,
                "content": "Test with flake8"
              }
            ],
            "total_lines": 272,
            "code_lines": 197
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/linting_aware_model.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 10648,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "create_linting_aware_billing_analyzer",
                "lineno": 222,
                "args": [],
                "decorators": [],
                "docstring": "Create a billing analyzer model that knows about linting rules"
              },
              {
                "name": "to_code",
                "lineno": 21,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate import code, only including used items"
              },
              {
                "name": "to_code",
                "lineno": 47,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate function code with proper spacing and logger references"
              },
              {
                "name": "to_code",
                "lineno": 105,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate class code with proper spacing"
              },
              {
                "name": "to_code",
                "lineno": 149,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate complete file code with linting rules built-in"
              },
              {
                "name": "__init__",
                "lineno": 193,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_perfect_code",
                "lineno": 196,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate code that is perfect by design\nNo linting fixes needed - the model encodes the rules!"
              },
              {
                "name": "write_perfect_file",
                "lineno": 203,
                "args": [
                  "self",
                  "model",
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Write perfect code file to disk"
              }
            ],
            "classes": [
              {
                "name": "LintingAwareImportStatement",
                "lineno": 13,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Import statement that knows about F401 (unused imports)"
              },
              {
                "name": "LintingAwareFunctionDefinition",
                "lineno": 35,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Function definition that knows about E302 (blank lines) and F821 (undefined names)"
              },
              {
                "name": "LintingAwareClassDefinition",
                "lineno": 95,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Class definition that knows about E302 (blank lines)"
              },
              {
                "name": "LintingAwareCodeFile",
                "lineno": 140,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Code file that knows about all linting rules"
              },
              {
                "name": "LintingAwareCodeGenerator",
                "lineno": 187,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_perfect_code",
                  "write_perfect_file"
                ],
                "docstring": "Code generator that encodes linting rules in the model itself\nNo post-generation fixes needed!"
              }
            ],
            "variables": [
              {
                "name": "imports",
                "lineno": 226,
                "value_type": "List"
              },
              {
                "name": "main_function",
                "lineno": 260,
                "value_type": "Call"
              },
              {
                "name": "analyzer_class",
                "lineno": 276,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 306,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 307,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 312,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 49,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 107,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 151,
                "value_type": "List"
              },
              {
                "name": "params",
                "lineno": 68,
                "value_type": "Call"
              },
              {
                "name": "signature",
                "lineno": 69,
                "value_type": "JoinedStr"
              },
              {
                "name": "bases_str",
                "lineno": 115,
                "value_type": "Call"
              },
              {
                "name": "method_code",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "import_code",
                "lineno": 160,
                "value_type": "Call"
              },
              {
                "name": "perfect_code",
                "lineno": 206,
                "value_type": "Call"
              },
              {
                "name": "filepath_obj",
                "lineno": 208,
                "value_type": "Call"
              },
              {
                "name": "used_items",
                "lineno": 26,
                "value_type": "ListComp"
              },
              {
                "name": "params",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "signature",
                "lineno": 60,
                "value_type": "JoinedStr"
              },
              {
                "name": "line",
                "lineno": 88,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 25,
                "content": "Only include items that are actually used"
              },
              {
                "line": 51,
                "content": "Add blank line before function (E302)"
              },
              {
                "line": 55,
                "content": "Decorators"
              },
              {
                "line": 58,
                "content": "Use async def instead of @asyncio.coroutine"
              },
              {
                "line": 67,
                "content": "Regular function"
              },
              {
                "line": 75,
                "content": "Add other decorators"
              },
              {
                "line": 80,
                "content": "Docstring"
              },
              {
                "line": 84,
                "content": "Body with proper logger references"
              },
              {
                "line": 86,
                "content": "Fix logger references (F821)"
              },
              {
                "line": 109,
                "content": "Add blank line before class (E302)"
              },
              {
                "line": 113,
                "content": "Class definition"
              },
              {
                "line": 120,
                "content": "Docstring"
              },
              {
                "line": 124,
                "content": "Attributes"
              },
              {
                "line": 128,
                "content": "Methods"
              },
              {
                "line": 130,
                "content": "Don't add extra blank line before first method"
              },
              {
                "line": 153,
                "content": "Module docstring"
              },
              {
                "line": 158,
                "content": "Imports (only used ones)"
              },
              {
                "line": 167,
                "content": "Classes"
              },
              {
                "line": 172,
                "content": "Functions"
              },
              {
                "line": 177,
                "content": "Add main execution block if this is the main module"
              },
              {
                "line": 221,
                "content": "Example: How the model would look with linting rules built-in"
              },
              {
                "line": 225,
                "content": "Imports that track usage"
              },
              {
                "line": 259,
                "content": "Function that knows about logger usage"
              },
              {
                "line": 275,
                "content": "Class that knows about spacing"
              },
              {
                "line": 305,
                "content": "Test the linting-aware model"
              }
            ],
            "total_lines": 315,
            "code_lines": 233
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/enhanced_linting_aware_model.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 11971,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "create_enhanced_linting_aware_billing_analyzer",
                "lineno": 246,
                "args": [],
                "decorators": [],
                "docstring": "Create a billing analyzer model that knows about ALL linting rules"
              },
              {
                "name": "to_code",
                "lineno": 22,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate import code, only including used items and avoiding redefinitions"
              },
              {
                "name": "to_code",
                "lineno": 54,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate function code with proper spacing, logger references, and used variables"
              },
              {
                "name": "to_code",
                "lineno": 123,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate class code with proper spacing"
              },
              {
                "name": "to_code",
                "lineno": 169,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate complete file code with enhanced linting rules built-in"
              },
              {
                "name": "__init__",
                "lineno": 213,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_perfect_code",
                "lineno": 216,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate code that is perfect by design\nNo linting fixes needed - the model encodes ALL the rules!"
              },
              {
                "name": "write_perfect_file",
                "lineno": 223,
                "args": [
                  "self",
                  "model",
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Write perfect code file to disk"
              }
            ],
            "classes": [
              {
                "name": "EnhancedLintingAwareImportStatement",
                "lineno": 13,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Import statement that knows about F401 and F811 (unused/redefined imports)"
              },
              {
                "name": "EnhancedLintingAwareFunctionDefinition",
                "lineno": 39,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Function definition that knows about E302, F821, and F841"
              },
              {
                "name": "EnhancedLintingAwareClassDefinition",
                "lineno": 113,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Class definition that knows about E302 (blank lines)"
              },
              {
                "name": "EnhancedLintingAwareCodeFile",
                "lineno": 158,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Code file that knows about all linting rules including F841 and F811"
              },
              {
                "name": "EnhancedLintingAwareCodeGenerator",
                "lineno": 207,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_perfect_code",
                  "write_perfect_file"
                ],
                "docstring": "Enhanced code generator that encodes ALL linting rules in the model itself\nNo post-generation fixes needed!"
              }
            ],
            "variables": [
              {
                "name": "imports",
                "lineno": 250,
                "value_type": "List"
              },
              {
                "name": "main_function",
                "lineno": 287,
                "value_type": "Call"
              },
              {
                "name": "analyzer_class",
                "lineno": 304,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 335,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 336,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 341,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 56,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 125,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 171,
                "value_type": "List"
              },
              {
                "name": "params",
                "lineno": 75,
                "value_type": "Call"
              },
              {
                "name": "signature",
                "lineno": 76,
                "value_type": "JoinedStr"
              },
              {
                "name": "bases_str",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "method_code",
                "lineno": 150,
                "value_type": "Call"
              },
              {
                "name": "import_code",
                "lineno": 180,
                "value_type": "Call"
              },
              {
                "name": "perfect_code",
                "lineno": 230,
                "value_type": "Call"
              },
              {
                "name": "filepath",
                "lineno": 232,
                "value_type": "Call"
              },
              {
                "name": "used_items",
                "lineno": 30,
                "value_type": "ListComp"
              },
              {
                "name": "params",
                "lineno": 66,
                "value_type": "Call"
              },
              {
                "name": "signature",
                "lineno": 67,
                "value_type": "JoinedStr"
              },
              {
                "name": "line",
                "lineno": 95,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 29,
                "content": "Only include items that are actually used"
              },
              {
                "line": 58,
                "content": "Add blank line before function (E302)"
              },
              {
                "line": 62,
                "content": "Decorators"
              },
              {
                "line": 65,
                "content": "Use async def instead of @asyncio.coroutine"
              },
              {
                "line": 74,
                "content": "Regular function"
              },
              {
                "line": 82,
                "content": "Add other decorators"
              },
              {
                "line": 87,
                "content": "Docstring"
              },
              {
                "line": 91,
                "content": "Body with proper logger references and used variables"
              },
              {
                "line": 93,
                "content": "Fix logger references (F821)"
              },
              {
                "line": 97,
                "content": "Skip lines with unused variables (F841)"
              },
              {
                "line": 127,
                "content": "Add blank line before class (E302)"
              },
              {
                "line": 131,
                "content": "Class definition"
              },
              {
                "line": 138,
                "content": "Docstring"
              },
              {
                "line": 142,
                "content": "Attributes"
              },
              {
                "line": 146,
                "content": "Methods"
              },
              {
                "line": 148,
                "content": "Don't add extra blank line before first method"
              },
              {
                "line": 173,
                "content": "Module docstring"
              },
              {
                "line": 178,
                "content": "Imports (only used ones, no redefinitions)"
              },
              {
                "line": 187,
                "content": "Classes"
              },
              {
                "line": 192,
                "content": "Functions"
              },
              {
                "line": 197,
                "content": "Add main execution block if this is the main module"
              },
              {
                "line": 245,
                "content": "Example: Enhanced billing analyzer that fixes F841 and F811"
              },
              {
                "line": 249,
                "content": "Imports that track usage and avoid redefinitions"
              },
              {
                "line": 286,
                "content": "Function that knows about logger usage and used variables"
              },
              {
                "line": 303,
                "content": "Class that knows about spacing"
              },
              {
                "line": 334,
                "content": "Test the enhanced linting-aware model"
              }
            ],
            "total_lines": 344,
            "code_lines": 258
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/perfect_code_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 15477,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "code_generator",
                "names": [
                  "ClassDefinition",
                  "CodeFile",
                  "CodeGenerator",
                  "FunctionDefinition",
                  "ImportStatement"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "generate_perfect_code_generator",
                "lineno": 255,
                "args": [],
                "decorators": [],
                "docstring": "Generate the PerfectCodeGenerator using structured models"
              },
              {
                "name": "main",
                "lineno": 404,
                "args": [],
                "decorators": [],
                "docstring": "Generate the perfect code generator"
              },
              {
                "name": "__init__",
                "lineno": 27,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_perfect_code",
                "lineno": 37,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate code that MUST pass all linting\nNever emits non-conforming code"
              },
              {
                "name": "_is_perfect",
                "lineno": 65,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Check if code passes all linting checks"
              },
              {
                "name": "_validate_ast",
                "lineno": 91,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Validate code parses correctly with AST"
              },
              {
                "name": "_check_black_formatting",
                "lineno": 103,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Check if code is properly formatted with Black"
              },
              {
                "name": "_run_black",
                "lineno": 117,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Format code with Black"
              },
              {
                "name": "_run_flake8",
                "lineno": 135,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Check code with Flake8"
              },
              {
                "name": "_fix_linting_issues",
                "lineno": 153,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Automatically fix common linting issues"
              },
              {
                "name": "_fix_imports",
                "lineno": 167,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Fix import-related issues"
              },
              {
                "name": "_fix_unused_variables",
                "lineno": 180,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Fix unused variable issues"
              },
              {
                "name": "_fix_f_strings",
                "lineno": 194,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Fix f-string logging issues"
              },
              {
                "name": "_fix_return_statements",
                "lineno": 208,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Fix unnecessary else after return statements"
              },
              {
                "name": "_fix_private_access",
                "lineno": 222,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Fix private member access issues"
              },
              {
                "name": "write_perfect_file",
                "lineno": 236,
                "args": [
                  "self",
                  "model",
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Write perfect code file to disk"
              }
            ],
            "classes": [
              {
                "name": "PerfectCodeGenerator",
                "lineno": 21,
                "bases": [
                  "CodeGenerator"
                ],
                "methods": [
                  "__init__",
                  "generate_perfect_code",
                  "_is_perfect",
                  "_validate_ast",
                  "_check_black_formatting",
                  "_run_black",
                  "_run_flake8",
                  "_fix_linting_issues",
                  "_fix_imports",
                  "_fix_unused_variables",
                  "_fix_f_strings",
                  "_fix_return_statements",
                  "_fix_private_access",
                  "write_perfect_file"
                ],
                "docstring": "Generator that CANNOT emit non-conforming code\nIntegrates with linting tools and validates before emission"
              }
            ],
            "variables": [
              {
                "name": "imports",
                "lineno": 259,
                "value_type": "List"
              },
              {
                "name": "perfect_generator_class",
                "lineno": 284,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 413,
                "value_type": "Call"
              },
              {
                "name": "perfect_generator_file",
                "lineno": 417,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 420,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 421,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 45,
                "value_type": "Call"
              },
              {
                "name": "attempts",
                "lineno": 49,
                "value_type": "Constant"
              },
              {
                "name": "msg",
                "lineno": 62,
                "value_type": "Constant"
              },
              {
                "name": "code",
                "lineno": 158,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 161,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 162,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 163,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 164,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 170,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 182,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 183,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 196,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 197,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 210,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 211,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 224,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 225,
                "value_type": "List"
              },
              {
                "name": "code",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "flake8_errors",
                "lineno": 79,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 106,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 138,
                "value_type": "Call"
              },
              {
                "name": "perfect_code",
                "lineno": 239,
                "value_type": "Call"
              },
              {
                "name": "filepath",
                "lineno": 241,
                "value_type": "Call"
              },
              {
                "name": "errors",
                "lineno": 145,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 203,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 231,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 44,
                "content": "Generate initial code"
              },
              {
                "line": 48,
                "content": "Validate and fix until perfect"
              },
              {
                "line": 58,
                "content": "Fix linting issues"
              },
              {
                "line": 61,
                "content": "If we can't fix it, raise an error"
              },
              {
                "line": 68,
                "content": "AST validation"
              },
              {
                "line": 73,
                "content": "Black formatting check"
              },
              {
                "line": 78,
                "content": "Flake8 check"
              },
              {
                "line": 157,
                "content": "Apply Black formatting"
              },
              {
                "line": 160,
                "content": "Fix specific issues"
              },
              {
                "line": 173,
                "content": "Fix unused imports"
              },
              {
                "line": 186,
                "content": "Add underscore prefix to unused variables"
              },
              {
                "line": 188,
                "content": "This is a complex fix - for now, we'll skip problematic lines"
              },
              {
                "line": 200,
                "content": "Fix f-string logging (G004)"
              },
              {
                "line": 202,
                "content": "Convert f-string to % formatting for logging"
              },
              {
                "line": 214,
                "content": "Fix RET505 - unnecessary else after return"
              },
              {
                "line": 216,
                "content": "Remove unnecessary else"
              },
              {
                "line": 228,
                "content": "Fix SLF001 - private member access"
              },
              {
                "line": 230,
                "content": "Make the method public"
              },
              {
                "line": 258,
                "content": "Imports"
              },
              {
                "line": 283,
                "content": "PerfectCodeGenerator class"
              },
              {
                "line": 412,
                "content": "Create perfect generator"
              },
              {
                "line": 415,
                "content": "Generate the perfect code generator"
              },
              {
                "line": 419,
                "content": "Write perfect file"
              }
            ],
            "total_lines": 434,
            "code_lines": 352
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/quick_state_explorer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3705,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "run_ghostbusters"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "state",
                "lineno": 19,
                "value_type": "Await"
              },
              {
                "name": "value",
                "lineno": 29,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 18,
                "content": "Run Ghostbusters"
              },
              {
                "line": 32,
                "content": "Show first few items if it's a list"
              },
              {
                "line": 40,
                "content": "Explore delusions"
              },
              {
                "line": 46,
                "content": "Explore recovery actions"
              },
              {
                "line": 52,
                "content": "Explore validation results"
              },
              {
                "line": 63,
                "content": "Explore recovery results"
              },
              {
                "line": 74,
                "content": "Explore metadata"
              }
            ],
            "total_lines": 97,
            "code_lines": 70
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/intelligent_model_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 7184,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 210
              },
              {
                "module": "ast",
                "asname": null,
                "lineno": 142
              }
            ],
            "functions": [
              {
                "name": "test_intelligent_model_generator",
                "lineno": 152,
                "args": [],
                "decorators": [],
                "docstring": "Test the intelligent model generator"
              },
              {
                "name": "to_code",
                "lineno": 20,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate import code - model knows if it should be included"
              },
              {
                "name": "to_code",
                "lineno": 45,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate function code - model knows all spacing rules"
              },
              {
                "name": "to_code",
                "lineno": 83,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate perfect code - model knows ALL rules"
              },
              {
                "name": "generate_intelligent_perfect_code",
                "lineno": 127,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate intelligent perfect code - model knows everything"
              },
              {
                "name": "_validate_syntax",
                "lineno": 139,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Validate that the generated code has correct syntax"
              }
            ],
            "classes": [
              {
                "name": "IntelligentImportModel",
                "lineno": 11,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Import model that knows about usage and linting rules"
              },
              {
                "name": "IntelligentFunctionModel",
                "lineno": 35,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Function model that knows about spacing and linting rules"
              },
              {
                "name": "IntelligentCodeModel",
                "lineno": 74,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Intelligent code model that knows ALL linting rules"
              },
              {
                "name": "IntelligentModelGenerator",
                "lineno": 122,
                "bases": [],
                "methods": [
                  "generate_intelligent_perfect_code",
                  "_validate_syntax"
                ],
                "docstring": "Intelligent model-driven generator - the model IS the intelligence"
              }
            ],
            "variables": [
              {
                "name": "model",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 199,
                "value_type": "Call"
              },
              {
                "name": "intelligent_code",
                "lineno": 200,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 212,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 47,
                "value_type": "List"
              },
              {
                "name": "args_str",
                "lineno": 58,
                "value_type": "IfExp"
              },
              {
                "name": "lines",
                "lineno": 85,
                "value_type": "List"
              },
              {
                "name": "import_lines",
                "lineno": 93,
                "value_type": "List"
              },
              {
                "name": "perfect_code",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 95,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 110,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 49,
                "content": "Model knows E302: Add blank line before function"
              },
              {
                "line": 53,
                "content": "Decorators"
              },
              {
                "line": 57,
                "content": "Function signature"
              },
              {
                "line": 61,
                "content": "Body - model knows all lines are used"
              },
              {
                "line": 65,
                "content": "Model knows E305: Add 2 blank lines after function"
              },
              {
                "line": 87,
                "content": "Module docstring"
              },
              {
                "line": 92,
                "content": "Imports - model knows which are used"
              },
              {
                "line": 103,
                "content": "Classes"
              },
              {
                "line": 108,
                "content": "Functions - model knows all spacing rules"
              },
              {
                "line": 114,
                "content": "Main execution block"
              },
              {
                "line": 131,
                "content": "The model IS the intelligence - no post-processing needed"
              },
              {
                "line": 134,
                "content": "Validate syntax"
              },
              {
                "line": 151,
                "content": "Test the intelligent model generator"
              },
              {
                "line": 155,
                "content": "Create an intelligent billing analyzer model"
              },
              {
                "line": 156,
                "content": "The model KNOWS everything - no edge cases possible"
              },
              {
                "line": 198,
                "content": "Generate intelligent perfect code"
              },
              {
                "line": 205,
                "content": "Test with flake8"
              }
            ],
            "total_lines": 232,
            "code_lines": 166
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/scaled_complex_model_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 23436,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 109
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 415
              }
            ],
            "functions": [
              {
                "name": "test_scaled_complex_model_generator",
                "lineno": 578,
                "args": [],
                "decorators": [],
                "docstring": "Test the scaled complex model generator"
              },
              {
                "name": "__init__",
                "lineno": 72,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "scan_all_files",
                "lineno": 93,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Scan all 123 Python files for mypy errors"
              },
              {
                "name": "analyze_comprehensive_errors",
                "lineno": 105,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze BOTH mypy AND flake8 errors and update the model"
              },
              {
                "name": "fix_all_errors",
                "lineno": 224,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Fix all 151 mypy errors using complex model approach"
              },
              {
                "name": "_fix_missing_return_type",
                "lineno": 235,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix missing return type annotations"
              },
              {
                "name": "_fix_unexpected_return",
                "lineno": 257,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix unexpected return values"
              },
              {
                "name": "_fix_attribute_error",
                "lineno": 279,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix attribute errors"
              },
              {
                "name": "_fix_assignment_error",
                "lineno": 301,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix assignment errors"
              },
              {
                "name": "_fix_import_error",
                "lineno": 323,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix import errors"
              },
              {
                "name": "_fix_arg_type_error",
                "lineno": 345,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix argument type errors"
              },
              {
                "name": "_fix_unreachable_error",
                "lineno": 367,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix unreachable statement errors"
              },
              {
                "name": "_fix_unknown_error",
                "lineno": 389,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix unknown error types"
              },
              {
                "name": "analyze_flake8_errors",
                "lineno": 411,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze flake8 errors and update the model"
              },
              {
                "name": "fix_all_flake8_errors",
                "lineno": 472,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Fix all flake8 errors"
              },
              {
                "name": "_fix_import_order",
                "lineno": 483,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix import order issues"
              },
              {
                "name": "_fix_missing_blank_lines",
                "lineno": 510,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix missing blank lines"
              },
              {
                "name": "_fix_trailing_whitespace",
                "lineno": 529,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix trailing whitespace"
              },
              {
                "name": "_fix_missing_newline",
                "lineno": 549,
                "args": [
                  "self",
                  "error"
                ],
                "decorators": [],
                "docstring": "Fix missing newline at end of file"
              },
              {
                "name": "generate_report",
                "lineno": 566,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate comprehensive report"
              }
            ],
            "classes": [
              {
                "name": "MypyErrorFix",
                "lineno": 12,
                "bases": [],
                "methods": [],
                "docstring": "Represents a mypy error that needs fixing"
              },
              {
                "name": "ScaledComplexModel",
                "lineno": 23,
                "bases": [],
                "methods": [],
                "docstring": "Scaled complex model for fixing all mypy AND flake8 errors"
              },
              {
                "name": "ScaledComplexModelGenerator",
                "lineno": 69,
                "bases": [],
                "methods": [
                  "__init__",
                  "scan_all_files",
                  "analyze_comprehensive_errors",
                  "fix_all_errors",
                  "_fix_missing_return_type",
                  "_fix_unexpected_return",
                  "_fix_attribute_error",
                  "_fix_assignment_error",
                  "_fix_import_error",
                  "_fix_arg_type_error",
                  "_fix_unreachable_error",
                  "_fix_unknown_error",
                  "analyze_flake8_errors",
                  "fix_all_flake8_errors",
                  "_fix_import_order",
                  "_fix_missing_blank_lines",
                  "_fix_trailing_whitespace",
                  "_fix_missing_newline",
                  "generate_report"
                ],
                "docstring": "Scaled complex model generator for all 151 mypy errors"
              }
            ],
            "variables": [
              {
                "name": "generator",
                "lineno": 585,
                "value_type": "Call"
              },
              {
                "name": "src_path",
                "lineno": 97,
                "value_type": "Call"
              },
              {
                "name": "python_files",
                "lineno": 98,
                "value_type": "Call"
              },
              {
                "name": "total_errors",
                "lineno": 209,
                "value_type": "BinOp"
              },
              {
                "name": "mypy_result",
                "lineno": 113,
                "value_type": "Call"
              },
              {
                "name": "mypy_errors",
                "lineno": 120,
                "value_type": "List"
              },
              {
                "name": "flake8_result",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "flake8_errors",
                "lineno": 176,
                "value_type": "List"
              },
              {
                "name": "line_num",
                "lineno": 241,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 263,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 285,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 307,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 329,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 351,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 373,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 395,
                "value_type": "BinOp"
              },
              {
                "name": "result",
                "lineno": 418,
                "value_type": "Call"
              },
              {
                "name": "import_lines",
                "lineno": 490,
                "value_type": "List"
              },
              {
                "name": "other_lines",
                "lineno": 491,
                "value_type": "List"
              },
              {
                "name": "fixed_lines",
                "lineno": 500,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 516,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 535,
                "value_type": "BinOp"
              },
              {
                "name": "error_lines",
                "lineno": 122,
                "value_type": "Call"
              },
              {
                "name": "error_lines",
                "lineno": 178,
                "value_type": "Call"
              },
              {
                "name": "fix_strategy",
                "lineno": 230,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 239,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 243,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 261,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 265,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 283,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 287,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 305,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 309,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 327,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 331,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 349,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 353,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 371,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 375,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 393,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 397,
                "value_type": "Subscript"
              },
              {
                "name": "error_lines",
                "lineno": 426,
                "value_type": "Call"
              },
              {
                "name": "flake8_errors",
                "lineno": 427,
                "value_type": "List"
              },
              {
                "name": "fix_strategy",
                "lineno": 478,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 487,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 514,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 533,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 537,
                "value_type": "Subscript"
              },
              {
                "name": "fixed_line",
                "lineno": 538,
                "value_type": "BinOp"
              },
              {
                "name": "lines",
                "lineno": 553,
                "value_type": "Call"
              },
              {
                "name": "fixed_line",
                "lineno": 246,
                "value_type": "Call"
              },
              {
                "name": "fixed_line",
                "lineno": 268,
                "value_type": "Call"
              },
              {
                "name": "fixed_line",
                "lineno": 290,
                "value_type": "BinOp"
              },
              {
                "name": "fixed_line",
                "lineno": 312,
                "value_type": "BinOp"
              },
              {
                "name": "fixed_line",
                "lineno": 334,
                "value_type": "BinOp"
              },
              {
                "name": "fixed_line",
                "lineno": 356,
                "value_type": "BinOp"
              },
              {
                "name": "fixed_line",
                "lineno": 378,
                "value_type": "BinOp"
              },
              {
                "name": "fixed_line",
                "lineno": 400,
                "value_type": "BinOp"
              },
              {
                "name": "parts",
                "lineno": 125,
                "value_type": "Call"
              },
              {
                "name": "parts",
                "lineno": 184,
                "value_type": "Call"
              },
              {
                "name": "parts",
                "lineno": 434,
                "value_type": "Call"
              },
              {
                "name": "file_path",
                "lineno": 127,
                "value_type": "Subscript"
              },
              {
                "name": "line_number",
                "lineno": 128,
                "value_type": "Call"
              },
              {
                "name": "error_message",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "error_type",
                "lineno": 131,
                "value_type": "Constant"
              },
              {
                "name": "fix_strategy",
                "lineno": 132,
                "value_type": "Constant"
              },
              {
                "name": "file_path",
                "lineno": 186,
                "value_type": "Subscript"
              },
              {
                "name": "line_number",
                "lineno": 187,
                "value_type": "Call"
              },
              {
                "name": "error_code",
                "lineno": 188,
                "value_type": "Call"
              },
              {
                "name": "error_message",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "file_path",
                "lineno": 436,
                "value_type": "Subscript"
              },
              {
                "name": "line_number",
                "lineno": 437,
                "value_type": "Call"
              },
              {
                "name": "error_code",
                "lineno": 438,
                "value_type": "Call"
              },
              {
                "name": "error_message",
                "lineno": 439,
                "value_type": "Call"
              },
              {
                "name": "error_type",
                "lineno": 135,
                "value_type": "Constant"
              },
              {
                "name": "fix_strategy",
                "lineno": 136,
                "value_type": "Constant"
              },
              {
                "name": "error_type",
                "lineno": 138,
                "value_type": "Constant"
              },
              {
                "name": "fix_strategy",
                "lineno": 139,
                "value_type": "Constant"
              },
              {
                "name": "error_type",
                "lineno": 141,
                "value_type": "Constant"
              },
              {
                "name": "fix_strategy",
                "lineno": 142,
                "value_type": "Constant"
              },
              {
                "name": "error_type",
                "lineno": 144,
                "value_type": "Constant"
              },
              {
                "name": "fix_strategy",
                "lineno": 145,
                "value_type": "Constant"
              },
              {
                "name": "error_type",
                "lineno": 147,
                "value_type": "Constant"
              },
              {
                "name": "fix_strategy",
                "lineno": 148,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 33,
                "content": "COMPREHENSIVE COMPLIANCE MODEL"
              },
              {
                "line": 56,
                "content": "GENERATION RULES"
              },
              {
                "line": 111,
                "content": "ANALYZE MYPY ERRORS"
              },
              {
                "line": 167,
                "content": "ANALYZE FLAKE8 ERRORS"
              },
              {
                "line": 208,
                "content": "UPDATE MODEL WITH COMPREHENSIVE RULES"
              },
              {
                "line": 216,
                "content": "UPDATE COMPLIANCE RULES BASED ON FINDINGS"
              },
              {
                "line": 245,
                "content": "Add -> None for functions without return statements"
              },
              {
                "line": 267,
                "content": "Remove return value for -> None functions"
              },
              {
                "line": 288,
                "content": "Add type ignore for attribute errors"
              },
              {
                "line": 310,
                "content": "Add type ignore for assignment errors"
              },
              {
                "line": 332,
                "content": "Add type ignore for import errors"
              },
              {
                "line": 354,
                "content": "Add type ignore for arg-type errors"
              },
              {
                "line": 376,
                "content": "Add type ignore for unreachable errors"
              },
              {
                "line": 398,
                "content": "Add general type ignore for unknown errors"
              },
              {
                "line": 451,
                "content": "UPDATE THE MODEL with flake8 compliance rules"
              },
              {
                "line": 489,
                "content": "Move imports to top"
              },
              {
                "line": 499,
                "content": "Reconstruct file with imports at top"
              },
              {
                "line": 518,
                "content": "Add blank line before definition"
              },
              {
                "line": 577,
                "content": "Test the scaled complex model generator"
              },
              {
                "line": 584,
                "content": "Create scaled complex model"
              },
              {
                "line": 587,
                "content": "Scan all files"
              },
              {
                "line": 590,
                "content": "Analyze mypy errors"
              },
              {
                "line": 593,
                "content": "Fix all errors"
              },
              {
                "line": 596,
                "content": "Generate report"
              }
            ],
            "total_lines": 604,
            "code_lines": 465
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/recursive_code_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 15682,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              },
              {
                "module": "code_generator",
                "names": [
                  "ClassDefinition",
                  "CodeFile",
                  "CodeGenerator",
                  "FunctionDefinition",
                  "ImportStatement"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 408,
                "args": [],
                "decorators": [],
                "docstring": "Test the recursive code generator"
              },
              {
                "name": "__init__",
                "lineno": 50,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_build_patterns",
                "lineno": 58,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build decomposition patterns based on reverse engineering research"
              },
              {
                "name": "decompose_string",
                "lineno": 98,
                "args": [
                  "self",
                  "string",
                  "depth"
                ],
                "decorators": [],
                "docstring": "Recursively decompose strings using established reverse engineering patterns\nBased on de4py AST analysis and Python-Reversal-Bot bytecode patterns"
              },
              {
                "name": "_decompose_with_pattern",
                "lineno": 153,
                "args": [
                  "self",
                  "string",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Decompose string using specific pattern"
              },
              {
                "name": "_decompose_import_statement",
                "lineno": 174,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose import statement using AST analysis (de4py pattern)"
              },
              {
                "name": "_decompose_function_call",
                "lineno": 199,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose function call using AST analysis"
              },
              {
                "name": "_decompose_class_definition",
                "lineno": 227,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose class definition using AST analysis"
              },
              {
                "name": "_decompose_variable_assignment",
                "lineno": 251,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose variable assignment"
              },
              {
                "name": "_decompose_string_literal",
                "lineno": 274,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose string literal (memory analysis pattern from de4py)"
              },
              {
                "name": "_validate_decomposition",
                "lineno": 289,
                "args": [
                  "self",
                  "original",
                  "decomposed_model"
                ],
                "decorators": [],
                "docstring": "Validate decomposition mathematically\nInput == Output validation"
              },
              {
                "name": "generate_with_recursion",
                "lineno": 323,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate code with recursive decomposition\nEnhanced version that analyzes and decomposes generated strings"
              },
              {
                "name": "_extract_strings_from_code",
                "lineno": 355,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Extract potential strings for decomposition from generated code"
              },
              {
                "name": "_log_decomposition_summary",
                "lineno": 384,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Log summary of decomposition analysis"
              }
            ],
            "classes": [
              {
                "name": "DecompositionResult",
                "lineno": 23,
                "bases": [],
                "methods": [],
                "docstring": "Result of string decomposition analysis"
              },
              {
                "name": "StringPattern",
                "lineno": 35,
                "bases": [],
                "methods": [],
                "docstring": "Pattern for string decomposition"
              },
              {
                "name": "RecursiveCodeGenerator",
                "lineno": 44,
                "bases": [
                  "CodeGenerator"
                ],
                "methods": [
                  "__init__",
                  "_build_patterns",
                  "decompose_string",
                  "_decompose_with_pattern",
                  "_decompose_import_statement",
                  "_decompose_function_call",
                  "_decompose_class_definition",
                  "_decompose_variable_assignment",
                  "_decompose_string_literal",
                  "_validate_decomposition",
                  "generate_with_recursion",
                  "_extract_strings_from_code",
                  "_log_decomposition_summary"
                ],
                "docstring": "Enhanced code generator with recursive AST-based decomposition\nBased on de4py and Python-Reversal-Bot reverse engineering patterns"
              }
            ],
            "variables": [
              {
                "name": "generator",
                "lineno": 416,
                "value_type": "Call"
              },
              {
                "name": "test_strings",
                "lineno": 419,
                "value_type": "List"
              },
              {
                "name": "string",
                "lineno": 159,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 329,
                "value_type": "Call"
              },
              {
                "name": "strings_to_analyze",
                "lineno": 334,
                "value_type": "Call"
              },
              {
                "name": "decompositions_found",
                "lineno": 339,
                "value_type": "Constant"
              },
              {
                "name": "strings",
                "lineno": 357,
                "value_type": "List"
              },
              {
                "name": "import_pattern",
                "lineno": 360,
                "value_type": "Constant"
              },
              {
                "name": "func_pattern",
                "lineno": 369,
                "value_type": "Constant"
              },
              {
                "name": "class_pattern",
                "lineno": 376,
                "value_type": "Constant"
              },
              {
                "name": "by_type",
                "lineno": 394,
                "value_type": "Dict"
              },
              {
                "name": "validated",
                "lineno": 404,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 430,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 206,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 234,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 258,
                "value_type": "Call"
              },
              {
                "name": "validation_passed",
                "lineno": 312,
                "value_type": "Compare"
              },
              {
                "name": "decomposition",
                "lineno": 341,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 364,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 371,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 378,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 190,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 208,
                "value_type": "Call"
              },
              {
                "name": "args_str",
                "lineno": 209,
                "value_type": "Call"
              },
              {
                "name": "args",
                "lineno": 212,
                "value_type": "ListComp"
              },
              {
                "name": "class_name",
                "lineno": 236,
                "value_type": "Call"
              },
              {
                "name": "inheritance",
                "lineno": 237,
                "value_type": "IfExp"
              },
              {
                "name": "var_name",
                "lineno": 260,
                "value_type": "Call"
              },
              {
                "name": "var_value",
                "lineno": 261,
                "value_type": "Call"
              },
              {
                "name": "generated",
                "lineno": 297,
                "value_type": "Call"
              },
              {
                "name": "decomposed_model",
                "lineno": 125,
                "value_type": "Call"
              },
              {
                "name": "module",
                "lineno": 185,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 186,
                "value_type": "ListComp"
              },
              {
                "name": "module",
                "lineno": 192,
                "value_type": "Call"
              },
              {
                "name": "generated",
                "lineno": 309,
                "value_type": "Call"
              },
              {
                "name": "validation_passed",
                "lineno": 128,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "generated",
                "lineno": 301,
                "value_type": "JoinedStr"
              },
              {
                "name": "generated",
                "lineno": 305,
                "value_type": "JoinedStr"
              },
              {
                "name": "generated",
                "lineno": 307,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 61,
                "content": "Import patterns (AST-based, from de4py)"
              },
              {
                "line": 68,
                "content": "Function call patterns (AST-based)"
              },
              {
                "line": 75,
                "content": "Class definition patterns (AST-based)"
              },
              {
                "line": 82,
                "content": "Variable assignment patterns (AST-based)"
              },
              {
                "line": 89,
                "content": "String literal patterns (Memory analysis, from de4py)"
              },
              {
                "line": 107,
                "content": "Safety limits"
              },
              {
                "line": 116,
                "content": "Try each pattern"
              },
              {
                "line": 123,
                "content": "Attempt decomposition"
              },
              {
                "line": 127,
                "content": "Validate decomposition mathematically"
              },
              {
                "line": 177,
                "content": "Parse with AST to validate"
              },
              {
                "line": 180,
                "content": "Extract components using regex"
              },
              {
                "line": 182,
                "content": "\"from typing import Optional, List\""
              },
              {
                "line": 189,
                "content": "\"import typing\""
              },
              {
                "line": 202,
                "content": "Parse with AST to validate"
              },
              {
                "line": 205,
                "content": "Extract function name and arguments"
              },
              {
                "line": 211,
                "content": "Parse arguments"
              },
              {
                "line": 230,
                "content": "Parse with AST to validate"
              },
              {
                "line": 233,
                "content": "Extract class name and inheritance"
              },
              {
                "line": 254,
                "content": "Parse with AST to validate"
              },
              {
                "line": 257,
                "content": "Extract variable name and value"
              },
              {
                "line": 277,
                "content": "Validate it's a proper string literal"
              },
              {
                "line": 295,
                "content": "Generate code from decomposed model"
              },
              {
                "line": 299,
                "content": "Handle custom models"
              },
              {
                "line": 311,
                "content": "Mathematical validation"
              },
              {
                "line": 328,
                "content": "Generate initial code"
              },
              {
                "line": 333,
                "content": "Extract all strings from the generated code"
              },
              {
                "line": 338,
                "content": "Analyze each string for decomposition opportunities"
              },
              {
                "line": 350,
                "content": "Log decomposition history"
              },
              {
                "line": 359,
                "content": "Extract import statements"
              },
              {
                "line": 368,
                "content": "Extract function calls"
              },
              {
                "line": 375,
                "content": "Extract class definitions"
              },
              {
                "line": 393,
                "content": "Group by type"
              },
              {
                "line": 403,
                "content": "Validation stats"
              },
              {
                "line": 415,
                "content": "Create recursive generator"
              },
              {
                "line": 418,
                "content": "Test decomposition patterns"
              }
            ],
            "total_lines": 442,
            "code_lines": 332
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/prove_round_trip.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 10082,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "round_trip_model_system",
                "names": [
                  "RoundTripModelSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "create_real_design_spec",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "Create a real design specification for a code quality system"
              },
              {
                "name": "prove_round_trip",
                "lineno": 133,
                "args": [],
                "decorators": [],
                "docstring": "Prove the round-trip system works with real data"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "system",
                "lineno": 139,
                "value_type": "Call"
              },
              {
                "name": "design_spec",
                "lineno": 143,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 150,
                "value_type": "Call"
              },
              {
                "name": "model_file",
                "lineno": 156,
                "value_type": "Constant"
              },
              {
                "name": "generated_files",
                "lineno": 162,
                "value_type": "Call"
              },
              {
                "name": "loaded_model",
                "lineno": 177,
                "value_type": "Call"
              },
              {
                "name": "original_components",
                "lineno": 183,
                "value_type": "DictComp"
              },
              {
                "name": "loaded_components",
                "lineno": 184,
                "value_type": "DictComp"
              },
              {
                "name": "original_names",
                "lineno": 192,
                "value_type": "Call"
              },
              {
                "name": "loaded_names",
                "lineno": 193,
                "value_type": "Call"
              },
              {
                "name": "model_data",
                "lineno": 227,
                "value_type": "Call"
              },
              {
                "name": "output_file",
                "lineno": 170,
                "value_type": "JoinedStr"
              },
              {
                "name": "original",
                "lineno": 198,
                "value_type": "Subscript"
              },
              {
                "name": "loaded",
                "lineno": 199,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 217,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 138,
                "content": "Initialize system"
              },
              {
                "line": 141,
                "content": "STEP 1: Create real design specification"
              },
              {
                "line": 148,
                "content": "STEP 2: Create model from design (NO reverse engineering)"
              },
              {
                "line": 154,
                "content": "STEP 3: Save model to JSON"
              },
              {
                "line": 160,
                "content": "STEP 4: Generate code from model"
              },
              {
                "line": 167,
                "content": "STEP 5: Save generated code"
              },
              {
                "line": 175,
                "content": "STEP 6: Load model from JSON (round-trip)"
              },
              {
                "line": 181,
                "content": "STEP 7: Verify round-trip integrity"
              },
              {
                "line": 186,
                "content": "Check component count"
              },
              {
                "line": 191,
                "content": "Check component names"
              },
              {
                "line": 196,
                "content": "Check component details"
              },
              {
                "line": 214,
                "content": "STEP 8: Show generated code quality"
              },
              {
                "line": 225,
                "content": "STEP 9: Demonstrate model persistence"
              }
            ],
            "total_lines": 256,
            "code_lines": 217
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/mypy_enhanced_ast_parser.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 8888,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "test_mypy_enhanced_ast_parser",
                "lineno": 198,
                "args": [],
                "decorators": [],
                "docstring": "Test the mypy-enhanced AST parser"
              },
              {
                "name": "__init__",
                "lineno": 37,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "analyze_code",
                "lineno": 43,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Analyze code with mypy-aware AST parsing"
              },
              {
                "name": "_visit_node",
                "lineno": 54,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Visit AST node with mypy rules"
              },
              {
                "name": "_analyze_function_def",
                "lineno": 71,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Analyze function definition with mypy rules"
              },
              {
                "name": "_analyze_async_function_def",
                "lineno": 100,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Analyze async function definition with mypy rules"
              },
              {
                "name": "_analyze_class_def",
                "lineno": 105,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Analyze class definition with mypy rules"
              },
              {
                "name": "_analyze_import",
                "lineno": 117,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Analyze import statement with mypy rules"
              },
              {
                "name": "_analyze_import_from",
                "lineno": 122,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Analyze import from statement with mypy rules"
              },
              {
                "name": "_check_for_unexpected_returns",
                "lineno": 127,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Check for unexpected return statements in -> None functions"
              },
              {
                "name": "generate_mypy_fixes",
                "lineno": 135,
                "args": [
                  "self",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Generate mypy-aware fixes based on analysis"
              },
              {
                "name": "_has_return_statement",
                "lineno": 152,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Check if function has return statements"
              },
              {
                "name": "__init__",
                "lineno": 160,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_mypy_compliant_code",
                "lineno": 163,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Generate mypy-compliant code with automatic type annotation fixes"
              },
              {
                "name": "_apply_mypy_fixes",
                "lineno": 171,
                "args": [
                  "self",
                  "code",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Apply mypy fixes to code"
              },
              {
                "name": "_has_return_statement",
                "lineno": 192,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Check if function has return statements"
              }
            ],
            "classes": [
              {
                "name": "MypyASTNode",
                "lineno": 12,
                "bases": [],
                "methods": [],
                "docstring": "AST node with mypy-aware type information"
              },
              {
                "name": "MypyASTAnalysis",
                "lineno": 24,
                "bases": [],
                "methods": [],
                "docstring": "Results of mypy-enhanced AST analysis"
              },
              {
                "name": "MypyEnhancedASTParser",
                "lineno": 34,
                "bases": [],
                "methods": [
                  "__init__",
                  "analyze_code",
                  "_visit_node",
                  "_analyze_function_def",
                  "_analyze_async_function_def",
                  "_analyze_class_def",
                  "_analyze_import",
                  "_analyze_import_from",
                  "_check_for_unexpected_returns",
                  "generate_mypy_fixes",
                  "_has_return_statement"
                ],
                "docstring": "AST parser enhanced with mypy type checking rules"
              },
              {
                "name": "MypyEnhancedCodeGenerator",
                "lineno": 157,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_mypy_compliant_code",
                  "_apply_mypy_fixes",
                  "_has_return_statement"
                ],
                "docstring": "Code generator with mypy-aware AST parsing"
              }
            ],
            "variables": [
              {
                "name": "test_code",
                "lineno": 202,
                "value_type": "Constant"
              },
              {
                "name": "parser",
                "lineno": 219,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 220,
                "value_type": "Call"
              },
              {
                "name": "fixes",
                "lineno": 232,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 236,
                "value_type": "Call"
              },
              {
                "name": "fixed_code",
                "lineno": 237,
                "value_type": "Call"
              },
              {
                "name": "missing_param_types",
                "lineno": 81,
                "value_type": "List"
              },
              {
                "name": "fixes",
                "lineno": 137,
                "value_type": "List"
              },
              {
                "name": "analysis",
                "lineno": 166,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "line_num",
                "lineno": 177,
                "value_type": "BinOp"
              },
              {
                "name": "line",
                "lineno": 179,
                "value_type": "Subscript"
              },
              {
                "name": "fixed_line",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "fixed_line",
                "lineno": 187,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 67,
                "content": "Visit child nodes"
              },
              {
                "line": 73,
                "content": "Check for missing return type annotation"
              },
              {
                "line": 80,
                "content": "Check for missing parameter type annotations"
              },
              {
                "line": 92,
                "content": "Check for return statements in functions marked as -> None"
              },
              {
                "line": 102,
                "content": "Same analysis as regular functions"
              },
              {
                "line": 109,
                "content": "Check for missing __init__ return type"
              },
              {
                "line": 139,
                "content": "Fix missing return type annotations"
              },
              {
                "line": 146,
                "content": "Fix missing parameter type annotations"
              },
              {
                "line": 165,
                "content": "Analyze code with mypy rules"
              },
              {
                "line": 168,
                "content": "Apply mypy fixes"
              },
              {
                "line": 175,
                "content": "Fix missing return type annotations"
              },
              {
                "line": 182,
                "content": "Add -> None for functions without return statements"
              },
              {
                "line": 186,
                "content": "Add -> Any for functions with return statements"
              },
              {
                "line": 197,
                "content": "Test the mypy-enhanced AST parser"
              },
              {
                "line": 201,
                "content": "Test code with mypy issues"
              },
              {
                "line": 218,
                "content": "Analyze with mypy rules"
              },
              {
                "line": 231,
                "content": "Generate fixes"
              },
              {
                "line": 235,
                "content": "Generate mypy-compliant code"
              }
            ],
            "total_lines": 245,
            "code_lines": 175
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/generate_code_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 12872,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "code_generator",
                "names": [
                  "ClassDefinition",
                  "CodeFile",
                  "CodeGenerator",
                  "FunctionDefinition",
                  "ImportStatement"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "generate_code_generator",
                "lineno": 19,
                "args": [],
                "decorators": [],
                "docstring": "Generate the CodeGenerator using structured models - META-RECURSIVE!"
              },
              {
                "name": "main",
                "lineno": 317,
                "args": [],
                "decorators": [],
                "docstring": "Generate the code generator using the code generator - META-RECURSIVE!"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "imports",
                "lineno": 23,
                "value_type": "List"
              },
              {
                "name": "import_statement_class",
                "lineno": 31,
                "value_type": "Call"
              },
              {
                "name": "function_definition_class",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "class_definition_class",
                "lineno": 116,
                "value_type": "Call"
              },
              {
                "name": "code_file_class",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "code_generator_class",
                "lineno": 217,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 327,
                "value_type": "Call"
              },
              {
                "name": "code_generator_file",
                "lineno": 331,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 334,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 335,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 22,
                "content": "Imports for the code generator"
              },
              {
                "line": 30,
                "content": "ImportStatement class"
              },
              {
                "line": 62,
                "content": "FunctionDefinition class"
              },
              {
                "line": 115,
                "content": "ClassDefinition class"
              },
              {
                "line": 168,
                "content": "CodeFile class"
              },
              {
                "line": 216,
                "content": "CodeGenerator class"
              },
              {
                "line": 326,
                "content": "Create generator"
              },
              {
                "line": 329,
                "content": "Generate the code generator"
              },
              {
                "line": 333,
                "content": "Write to file"
              }
            ],
            "total_lines": 348,
            "code_lines": 317
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/linter_api_integration.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 19301,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 12
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 490,
                "args": [],
                "decorators": [],
                "docstring": "Test the linter API integration"
              },
              {
                "name": "__init__",
                "lineno": 50,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "query_linter_api",
                "lineno": 82,
                "args": [
                  "self",
                  "linter_name",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Query a specific linter API"
              },
              {
                "name": "_query_flake8_api",
                "lineno": 109,
                "args": [
                  "self",
                  "file_path",
                  "config"
                ],
                "decorators": [],
                "docstring": "Query flake8 API"
              },
              {
                "name": "_query_black_api",
                "lineno": 159,
                "args": [
                  "self",
                  "file_path",
                  "config"
                ],
                "decorators": [],
                "docstring": "Query black API"
              },
              {
                "name": "_query_mypy_api",
                "lineno": 200,
                "args": [
                  "self",
                  "file_path",
                  "config"
                ],
                "decorators": [],
                "docstring": "Query mypy API"
              },
              {
                "name": "_query_ruff_api",
                "lineno": 243,
                "args": [
                  "self",
                  "file_path",
                  "config"
                ],
                "decorators": [],
                "docstring": "Query Ruff API (AI-powered)"
              },
              {
                "name": "get_ai_suggestions",
                "lineno": 291,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Get AI-powered suggestions from Ru"
              },
              {
                "name": "prevent_violations_before_writing",
                "lineno": 323,
                "args": [
                  "self",
                  "file_path",
                  "code_block"
                ],
                "decorators": [],
                "docstring": "Prevent violations before writing code"
              },
              {
                "name": "_analyze_code_block",
                "lineno": 358,
                "args": [
                  "self",
                  "code_block",
                  "linter_results"
                ],
                "decorators": [],
                "docstring": "Analyze code block for potential violations"
              },
              {
                "name": "_generate_prevention_suggestions",
                "lineno": 416,
                "args": [
                  "self",
                  "violations"
                ],
                "decorators": [],
                "docstring": "Generate prevention suggestions"
              },
              {
                "name": "_get_auto_fixes",
                "lineno": 437,
                "args": [
                  "self",
                  "violations",
                  "ai_suggestions"
                ],
                "decorators": [],
                "docstring": "Get automatic fixes for violations"
              },
              {
                "name": "suggest_ignore_directive",
                "lineno": 476,
                "args": [
                  "self",
                  "violation"
                ],
                "decorators": [],
                "docstring": "Suggest appropriate ignore directive"
              }
            ],
            "classes": [
              {
                "name": "LinterViolation",
                "lineno": 22,
                "bases": [],
                "methods": [],
                "docstring": "Represents a linter violation"
              },
              {
                "name": "LinterConfig",
                "lineno": 36,
                "bases": [],
                "methods": [],
                "docstring": "Linter configuration"
              },
              {
                "name": "LinterAPIIntegration",
                "lineno": 47,
                "bases": [],
                "methods": [
                  "__init__",
                  "query_linter_api",
                  "_query_flake8_api",
                  "_query_black_api",
                  "_query_mypy_api",
                  "_query_ruff_api",
                  "get_ai_suggestions",
                  "prevent_violations_before_writing",
                  "_analyze_code_block",
                  "_generate_prevention_suggestions",
                  "_get_auto_fixes",
                  "suggest_ignore_directive"
                ],
                "docstring": "Direct integration with linter APIs"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "integration",
                "lineno": 495,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 498,
                "value_type": "Constant"
              },
              {
                "name": "linter_config",
                "lineno": 92,
                "value_type": "Subscript"
              },
              {
                "name": "all_violations",
                "lineno": 332,
                "value_type": "Dict"
              },
              {
                "name": "ai_suggestions",
                "lineno": 338,
                "value_type": "Call"
              },
              {
                "name": "potential_violations",
                "lineno": 341,
                "value_type": "Call"
              },
              {
                "name": "prevention_suggestions",
                "lineno": 344,
                "value_type": "Call"
              },
              {
                "name": "auto_fixes",
                "lineno": 349,
                "value_type": "Call"
              },
              {
                "name": "potential_violations",
                "lineno": 364,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 367,
                "value_type": "Call"
              },
              {
                "name": "suggestions",
                "lineno": 421,
                "value_type": "List"
              },
              {
                "name": "auto_fixes",
                "lineno": 443,
                "value_type": "List"
              },
              {
                "name": "ai_suggestions",
                "lineno": 519,
                "value_type": "Call"
              },
              {
                "name": "sample_code",
                "lineno": 532,
                "value_type": "Constant"
              },
              {
                "name": "cmd",
                "lineno": 116,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 127,
                "value_type": "Call"
              },
              {
                "name": "violations",
                "lineno": 132,
                "value_type": "List"
              },
              {
                "name": "cmd",
                "lineno": 166,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "violations",
                "lineno": 175,
                "value_type": "List"
              },
              {
                "name": "cmd",
                "lineno": 207,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "violations",
                "lineno": 216,
                "value_type": "List"
              },
              {
                "name": "cmd",
                "lineno": 250,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 257,
                "value_type": "Call"
              },
              {
                "name": "violations",
                "lineno": 259,
                "value_type": "List"
              },
              {
                "name": "cmd",
                "lineno": 294,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 295,
                "value_type": "Call"
              },
              {
                "name": "suggestions",
                "lineno": 297,
                "value_type": "List"
              },
              {
                "name": "violations",
                "lineno": 334,
                "value_type": "Call"
              },
              {
                "name": "violations",
                "lineno": 506,
                "value_type": "Call"
              },
              {
                "name": "flake8_output",
                "lineno": 135,
                "value_type": "Call"
              },
              {
                "name": "mypy_output",
                "lineno": 219,
                "value_type": "Call"
              },
              {
                "name": "ruff_output",
                "lineno": 262,
                "value_type": "Call"
              },
              {
                "name": "ruff_output",
                "lineno": 300,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Set up logging"
              },
              {
                "line": 177,
                "content": "Black needs formatting"
              },
              {
                "line": 331,
                "content": "Query all linter APIs"
              },
              {
                "line": 337,
                "content": "Get AI suggestions"
              },
              {
                "line": 340,
                "content": "Analyze code block for potential violations"
              },
              {
                "line": 343,
                "content": "Generate prevention suggestions"
              },
              {
                "line": 348,
                "content": "Get auto-fixes"
              },
              {
                "line": 366,
                "content": "Check for common patterns that cause violations"
              },
              {
                "line": 370,
                "content": "Check for unused imports"
              },
              {
                "line": 381,
                "content": "Check for f-strings without placeholders"
              },
              {
                "line": 391,
                "content": "Check for missing blank lines"
              },
              {
                "line": 403,
                "content": "Check for trailing whitespace"
              },
              {
                "line": 463,
                "content": "Add AI suggestions as auto-fixes"
              },
              {
                "line": 497,
                "content": "Test with a sample file"
              },
              {
                "line": 503,
                "content": "Query all linters"
              },
              {
                "line": 517,
                "content": "Test AI suggestions"
              },
              {
                "line": 530,
                "content": "Test prevention"
              }
            ],
            "total_lines": 538,
            "code_lines": 438
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/complete_linting_aware_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 19029,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "linting_aware_model",
                "names": [
                  "LintingAwareClassDefinition",
                  "LintingAwareCodeFile",
                  "LintingAwareCodeGenerator",
                  "LintingAwareFunctionDefinition",
                  "LintingAwareImportStatement"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "create_complete_linting_aware_generator",
                "lineno": 19,
                "args": [],
                "decorators": [],
                "docstring": "Create a complete perfect code generator using linting-aware model"
              },
              {
                "name": "main",
                "lineno": 443,
                "args": [],
                "decorators": [],
                "docstring": "Generate the complete perfect linting-aware code generator"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "imports",
                "lineno": 23,
                "value_type": "List"
              },
              {
                "name": "import_statement_class",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "function_definition_class",
                "lineno": 100,
                "value_type": "Call"
              },
              {
                "name": "class_definition_class",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "code_file_class",
                "lineno": 266,
                "value_type": "Call"
              },
              {
                "name": "code_generator_class",
                "lineno": 345,
                "value_type": "Call"
              },
              {
                "name": "main_function",
                "lineno": 394,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 451,
                "value_type": "Call"
              },
              {
                "name": "perfect_generator_file",
                "lineno": 455,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 458,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 459,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 22,
                "content": "Imports that track usage"
              },
              {
                "line": 46,
                "content": "LintingAwareImportStatement class"
              },
              {
                "line": 99,
                "content": "LintingAwareFunctionDefinition class"
              },
              {
                "line": 188,
                "content": "LintingAwareClassDefinition class"
              },
              {
                "line": 265,
                "content": "LintingAwareCodeFile class"
              },
              {
                "line": 344,
                "content": "LintingAwareCodeGenerator class"
              },
              {
                "line": 393,
                "content": "Main function"
              },
              {
                "line": 450,
                "content": "Create linting-aware generator"
              },
              {
                "line": 453,
                "content": "Generate the perfect code generator"
              },
              {
                "line": 457,
                "content": "Write perfect file"
              }
            ],
            "total_lines": 472,
            "code_lines": 439
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/complete_model_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 9907,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 272
              }
            ],
            "functions": [
              {
                "name": "test_complete_model_generator",
                "lineno": 208,
                "args": [],
                "decorators": [],
                "docstring": "Test the complete model generator"
              },
              {
                "name": "to_code",
                "lineno": 21,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate import code with only used items"
              },
              {
                "name": "to_code",
                "lineno": 47,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate function code with proper spacing and only used variables"
              },
              {
                "name": "to_code",
                "lineno": 88,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate perfect code that passes ALL linting checks"
              },
              {
                "name": "generate_complete_perfect_code",
                "lineno": 141,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate complete perfect code - no post-generation fixes needed"
              },
              {
                "name": "_generate_perfect_code_from_analysis",
                "lineno": 159,
                "args": [
                  "self",
                  "initial_code",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Generate perfect code by removing unused elements"
              },
              {
                "name": "_is_import_used",
                "lineno": 186,
                "args": [
                  "self",
                  "import_line",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Check if an import is actually used"
              },
              {
                "name": "_validate_syntax",
                "lineno": 197,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Validate that the generated code has correct syntax"
              }
            ],
            "classes": [
              {
                "name": "CompleteImportModel",
                "lineno": 12,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Complete import model that knows about usage"
              },
              {
                "name": "CompleteFunctionModel",
                "lineno": 37,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Complete function model that knows about spacing and usage"
              },
              {
                "name": "CompleteCodeModel",
                "lineno": 79,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Complete code model that encodes ALL linting rules"
              },
              {
                "name": "CompleteModelGenerator",
                "lineno": 136,
                "bases": [],
                "methods": [
                  "generate_complete_perfect_code",
                  "_generate_perfect_code_from_analysis",
                  "_is_import_used",
                  "_validate_syntax"
                ],
                "docstring": "Complete model-driven generator that can't emit imperfect code"
              }
            ],
            "variables": [
              {
                "name": "model",
                "lineno": 212,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 261,
                "value_type": "Call"
              },
              {
                "name": "complete_code",
                "lineno": 262,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 274,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 49,
                "value_type": "List"
              },
              {
                "name": "args_str",
                "lineno": 60,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 71,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 90,
                "value_type": "List"
              },
              {
                "name": "import_lines",
                "lineno": 98,
                "value_type": "List"
              },
              {
                "name": "initial_code",
                "lineno": 146,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 149,
                "value_type": "Call"
              },
              {
                "name": "perfect_code",
                "lineno": 152,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 161,
                "value_type": "Call"
              },
              {
                "name": "perfect_lines",
                "lineno": 162,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 179,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 100,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 116,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 182,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "used_items",
                "lineno": 26,
                "value_type": "ListComp"
              },
              {
                "name": "func_lines",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "var_name",
                "lineno": 172,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 191,
                "value_type": "Call"
              },
              {
                "name": "imported_name",
                "lineno": 193,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 25,
                "content": "Only include items that are actually used"
              },
              {
                "line": 51,
                "content": "Add blank line before function (E302)"
              },
              {
                "line": 55,
                "content": "Decorators"
              },
              {
                "line": 59,
                "content": "Function signature"
              },
              {
                "line": 63,
                "content": "Body - include all lines, let AST determine usage"
              },
              {
                "line": 67,
                "content": "Add blank lines after function (E305)"
              },
              {
                "line": 92,
                "content": "Module docstring"
              },
              {
                "line": 97,
                "content": "Imports (only used items)"
              },
              {
                "line": 108,
                "content": "Classes"
              },
              {
                "line": 113,
                "content": "Functions (with proper spacing)"
              },
              {
                "line": 120,
                "content": "Split the function code into lines and add them"
              },
              {
                "line": 123,
                "content": "Ensure we have proper spacing after the function"
              },
              {
                "line": 125,
                "content": "Function already ends with blank line, add one more for E305"
              },
              {
                "line": 128,
                "content": "Main execution block"
              },
              {
                "line": 145,
                "content": "Generate initial code from model"
              },
              {
                "line": 148,
                "content": "Use AST to determine actual usage"
              },
              {
                "line": 151,
                "content": "Generate perfect code with only used elements"
              },
              {
                "line": 154,
                "content": "Validate syntax"
              },
              {
                "line": 165,
                "content": "Skip unused imports"
              },
              {
                "line": 170,
                "content": "Skip unused variable assignments"
              },
              {
                "line": 178,
                "content": "Ensure proper spacing after functions (E305)"
              },
              {
                "line": 181,
                "content": "Add blank line before if __name__ block"
              },
              {
                "line": 207,
                "content": "Test the complete model generator"
              },
              {
                "line": 211,
                "content": "Create a complete billing analyzer model with ALL linting rules encoded"
              },
              {
                "line": 260,
                "content": "Generate complete perfect code"
              },
              {
                "line": 267,
                "content": "Test with flake8"
              }
            ],
            "total_lines": 294,
            "code_lines": 211
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/code_quality_system/quality_model.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 9247,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "__post_init__",
                "lineno": 31,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_define_rules",
                "lineno": 35,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Define all linting rules with their fixes"
              },
              {
                "name": "_define_fixers",
                "lineno": 80,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Define automated fixers for each rule type"
              },
              {
                "name": "_run_autoflake",
                "lineno": 88,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Run autoflake to fix unused imports and variables"
              },
              {
                "name": "_run_black",
                "lineno": 108,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Run black to format code"
              },
              {
                "name": "_apply_custom_fixes",
                "lineno": 120,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Apply custom fixes for specific issues"
              },
              {
                "name": "_fix_unused_imports",
                "lineno": 164,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix unused imports"
              },
              {
                "name": "_fix_f_strings",
                "lineno": 168,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix f-string issues"
              },
              {
                "name": "_fix_trailing_whitespace",
                "lineno": 172,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix trailing whitespace"
              },
              {
                "name": "_fix_bare_except",
                "lineno": 176,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix bare except clauses"
              },
              {
                "name": "_fix_import_order",
                "lineno": 180,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix import order issues"
              },
              {
                "name": "_fix_unused_variables",
                "lineno": 185,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix unused variables"
              },
              {
                "name": "analyze_file",
                "lineno": 189,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Analyze a single file for all linting issues"
              },
              {
                "name": "fix_file",
                "lineno": 218,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix all issues in a file"
              },
              {
                "name": "fix_all_files",
                "lineno": 238,
                "args": [
                  "self",
                  "directories"
                ],
                "decorators": [],
                "docstring": "Fix all files in the project"
              }
            ],
            "classes": [
              {
                "name": "LintingRule",
                "lineno": 16,
                "bases": [],
                "methods": [],
                "docstring": "Defines a linting rule and its fix"
              },
              {
                "name": "CodeQualityModel",
                "lineno": 28,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "_define_rules",
                  "_define_fixers",
                  "_run_autoflake",
                  "_run_black",
                  "_apply_custom_fixes",
                  "_fix_unused_imports",
                  "_fix_f_strings",
                  "_fix_trailing_whitespace",
                  "_fix_bare_except",
                  "_fix_import_order",
                  "_fix_unused_variables",
                  "analyze_file",
                  "fix_file",
                  "fix_all_files"
                ],
                "docstring": "Model-driven code quality system"
              }
            ],
            "variables": [
              {
                "name": "result",
                "lineno": 91,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 111,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 127,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 136,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 147,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 150,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 195,
                "value_type": "Call"
              },
              {
                "name": "directories",
                "lineno": 241,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "parts",
                "lineno": 203,
                "value_type": "Call"
              },
              {
                "name": "before_analysis",
                "lineno": 257,
                "value_type": "Call"
              },
              {
                "name": "fix_result",
                "lineno": 263,
                "value_type": "Call"
              },
              {
                "name": "after_analysis",
                "lineno": 270,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 126,
                "content": "Fix f-strings without placeholders"
              },
              {
                "line": 146,
                "content": "Fix trailing whitespace"
              },
              {
                "line": 149,
                "content": "Fix bare except clauses"
              },
              {
                "line": 182,
                "content": "This is complex and often requires manual intervention"
              },
              {
                "line": 193,
                "content": "Run flake8"
              },
              {
                "line": 226,
                "content": "Apply all fixers"
              },
              {
                "line": 256,
                "content": "Analyze before"
              },
              {
                "line": 262,
                "content": "Apply fixes"
              },
              {
                "line": 269,
                "content": "Analyze after"
              }
            ],
            "total_lines": 274,
            "code_lines": 223
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/round_trip_generated/proven_ASTAnalyzer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 968,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 16,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "analyze_file",
                "lineno": 20,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze file using AST with quality rules"
              },
              {
                "name": "detect_violations",
                "lineno": 26,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Detect all quality violations"
              },
              {
                "name": "generate_fixes",
                "lineno": 32,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate fixes for all violations"
              }
            ],
            "classes": [
              {
                "name": "ASTAnalyzer",
                "lineno": 11,
                "bases": [],
                "methods": [
                  "__init__",
                  "analyze_file",
                  "detect_violations",
                  "generate_fixes"
                ],
                "docstring": "AST-based code analyzer with quality rule integration"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "TODO: Initialize based on requirements: ['AST parsing', 'rule integration', 'violation detection', 'syntactic boundary awareness', 'performance optimization']"
              },
              {
                "line": 24,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 30,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 36,
                "content": "TODO: Implement based on requirements: []"
              }
            ],
            "total_lines": 37,
            "code_lines": 24
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/round_trip_generated/proven_QualityOrchestrator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1154,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "logging",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "*"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 20,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "load_rules",
                "lineno": 24,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load quality rules from configuration"
              },
              {
                "name": "process_files",
                "lineno": 30,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Process files with quality checks"
              },
              {
                "name": "apply_fixes",
                "lineno": 36,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Apply fixes to files"
              },
              {
                "name": "generate_report",
                "lineno": 42,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate quality report"
              }
            ],
            "classes": [
              {
                "name": "QualityOrchestrator",
                "lineno": 15,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_rules",
                  "process_files",
                  "apply_fixes",
                  "generate_report"
                ],
                "docstring": "Main orchestrator for code quality operations"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 21,
                "content": "TODO: Initialize based on requirements: ['rule management', 'file processing', 'fix application', 'reporting', 'configuration management']"
              },
              {
                "line": 28,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 34,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 40,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 46,
                "content": "TODO: Implement based on requirements: []"
              }
            ],
            "total_lines": 47,
            "code_lines": 32
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/round_trip_generated/proven_QualityRule.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 929,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 16,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__post_init__",
                "lineno": 20,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Validate rule configuration"
              },
              {
                "name": "detect_violations",
                "lineno": 26,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Detect rule violations in code"
              },
              {
                "name": "generate_fix",
                "lineno": 32,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate fix for violations"
              }
            ],
            "classes": [
              {
                "name": "QualityRule",
                "lineno": 11,
                "bases": [],
                "methods": [
                  "__init__",
                  "__post_init__",
                  "detect_violations",
                  "generate_fix"
                ],
                "docstring": "Represents a code quality rule with detection and fix strategies"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "TODO: Initialize based on requirements: ['rule identifier', 'severity level', 'detection pattern', 'fix strategy', 'AST-aware validation']"
              },
              {
                "line": 24,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 30,
                "content": "TODO: Implement based on requirements: []"
              },
              {
                "line": 36,
                "content": "TODO: Implement based on requirements: []"
              }
            ],
            "total_lines": 37,
            "code_lines": 24
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/round_trip_generated/__init__.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 546,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "proven_ASTAnalyzer",
                "names": [
                  "ASTAnalyzer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "proven_QualityOrchestrator",
                "names": [
                  "QualityOrchestrator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "proven_QualityRule",
                "names": [
                  "QualityRule"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "__all__",
                "lineno": 13,
                "value_type": "List"
              },
              {
                "name": "__version__",
                "lineno": 15,
                "value_type": "Constant"
              },
              {
                "name": "__author__",
                "lineno": 16,
                "value_type": "Constant"
              },
              {
                "name": "__description__",
                "lineno": 17,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 18,
            "code_lines": 12
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/diversity_synthesis_orchestrator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 149,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "DiversitySynthesisOrchestrator",
                "lineno": 5,
                "bases": [],
                "methods": [],
                "docstring": "Orchestrator for diversity synthesis"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 7,
            "code_lines": 3
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/test_anthropic_simple.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3344,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "requests",
                "asname": null,
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_anthropic_smoke_test",
                "lineno": 14,
                "args": [],
                "decorators": [],
                "docstring": "Test the exact same request as the smoke test"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "api_key",
                "lineno": 11,
                "value_type": "Call"
              },
              {
                "name": "prompt",
                "lineno": 28,
                "value_type": "Constant"
              },
              {
                "name": "response",
                "lineno": 56,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 75,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 76,
                "value_type": "Subscript"
              },
              {
                "name": "parsed",
                "lineno": 82,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Get API key from 1Password using environment variable or secure method"
              },
              {
                "line": 18,
                "content": "DEMO ONLY: This uses environment variables for demonstration purposes"
              },
              {
                "line": 19,
                "content": "In production, consider using 1Password SDK or secure credential management"
              },
              {
                "line": 20,
                "content": "For healthcare compliance, implement proper credential rotation and audit trails"
              },
              {
                "line": 27,
                "content": "Replicate the exact smoke test request"
              },
              {
                "line": 80,
                "content": "Try to parse JSON"
              }
            ],
            "total_lines": 98,
            "code_lines": 70
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/test_multi_agent_blind_spot_detection.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 20835,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 17
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 18
              },
              {
                "module": "pytest",
                "asname": null,
                "lineno": 20
              },
              {
                "module": "diversity_hypothesis.langgraph_diversity_orchestrator",
                "names": [
                  "DiversityAgent"
                ],
                "asnames": [
                  null
                ],
                "lineno": 24
              },
              {
                "module": "streamlit_app",
                "names": [
                  "DeploymentManager",
                  "InputValidator",
                  "MonitoringDashboard",
                  "OpenFlowQuickstartApp",
                  "SecurityManager"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 30
              },
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 485
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 54,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "analyze_security_blind_spots",
                "lineno": 103,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze security blind spots"
              },
              {
                "name": "analyze_devops_blind_spots",
                "lineno": 136,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze DevOps blind spots"
              },
              {
                "name": "analyze_code_quality_blind_spots",
                "lineno": 169,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze code quality blind spots"
              },
              {
                "name": "analyze_ux_blind_spots",
                "lineno": 202,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze UX blind spots"
              },
              {
                "name": "analyze_performance_blind_spots",
                "lineno": 235,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze performance blind spots"
              },
              {
                "name": "run_complete_analysis",
                "lineno": 268,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Run complete multi-agent blind spot analysis"
              },
              {
                "name": "setup_method",
                "lineno": 282,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_security_blind_spot_detection",
                "lineno": 287,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test security blind spot detection"
              },
              {
                "name": "test_devops_blind_spot_detection",
                "lineno": 301,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test DevOps blind spot detection"
              },
              {
                "name": "test_code_quality_blind_spot_detection",
                "lineno": 315,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test code quality blind spot detection"
              },
              {
                "name": "test_ux_blind_spot_detection",
                "lineno": 329,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test UX blind spot detection"
              },
              {
                "name": "test_performance_blind_spot_detection",
                "lineno": 343,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test performance blind spot detection"
              },
              {
                "name": "test_complete_multi_agent_analysis",
                "lineno": 357,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test complete multi-agent analysis"
              },
              {
                "name": "test_blind_spot_coverage",
                "lineno": 377,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that blind spots are comprehensively covered"
              },
              {
                "name": "test_confidence_score_distribution",
                "lineno": 395,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that confidence scores are well distributed"
              },
              {
                "name": "test_recommendation_quality",
                "lineno": 407,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that recommendations are actionable"
              },
              {
                "name": "setup_method",
                "lineno": 427,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_security_compliance",
                "lineno": 432,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test security compliance with blind spot findings"
              },
              {
                "name": "test_devops_compliance",
                "lineno": 447,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test DevOps compliance with blind spot findings"
              },
              {
                "name": "test_code_quality_compliance",
                "lineno": 458,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test code quality compliance with blind spot findings"
              },
              {
                "name": "test_ux_compliance",
                "lineno": 469,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test UX compliance with blind spot findings"
              },
              {
                "name": "test_performance_compliance",
                "lineno": 479,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test performance compliance with blind spot findings"
              },
              {
                "name": "test_blind_spot_to_implementation_mapping",
                "lineno": 493,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that blind spots map to actual implementations"
              },
              {
                "name": "test_implementation_coverage_analysis",
                "lineno": 518,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that implementations cover identified blind spots"
              },
              {
                "name": "test_remaining_blind_spots_prioritization",
                "lineno": 541,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test prioritization of remaining blind spots"
              }
            ],
            "classes": [
              {
                "name": "BlindSpotTestResult",
                "lineno": 40,
                "bases": [],
                "methods": [],
                "docstring": "Result of blind spot detection test"
              },
              {
                "name": "MultiAgentBlindSpotDetector",
                "lineno": 51,
                "bases": [],
                "methods": [
                  "__init__",
                  "analyze_security_blind_spots",
                  "analyze_devops_blind_spots",
                  "analyze_code_quality_blind_spots",
                  "analyze_ux_blind_spots",
                  "analyze_performance_blind_spots",
                  "run_complete_analysis"
                ],
                "docstring": "Multi-agent blind spot detection for Streamlit app validation"
              },
              {
                "name": "TestMultiAgentBlindSpotDetection",
                "lineno": 279,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_security_blind_spot_detection",
                  "test_devops_blind_spot_detection",
                  "test_code_quality_blind_spot_detection",
                  "test_ux_blind_spot_detection",
                  "test_performance_blind_spot_detection",
                  "test_complete_multi_agent_analysis",
                  "test_blind_spot_coverage",
                  "test_confidence_score_distribution",
                  "test_recommendation_quality"
                ],
                "docstring": "Test multi-agent blind spot detection for Streamlit app"
              },
              {
                "name": "TestStreamlitAppBlindSpotCompliance",
                "lineno": 424,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_security_compliance",
                  "test_devops_compliance",
                  "test_code_quality_compliance",
                  "test_ux_compliance",
                  "test_performance_compliance"
                ],
                "docstring": "Test that Streamlit app complies with blind spot detection findings"
              },
              {
                "name": "TestBlindSpotDetectionIntegration",
                "lineno": 490,
                "bases": [],
                "methods": [
                  "test_blind_spot_to_implementation_mapping",
                  "test_implementation_coverage_analysis",
                  "test_remaining_blind_spots_prioritization"
                ],
                "docstring": "Test integration between blind spot detection and Streamlit app"
              }
            ],
            "variables": [
              {
                "name": "blind_spots_found",
                "lineno": 105,
                "value_type": "List"
              },
              {
                "name": "blind_spots_addressed",
                "lineno": 113,
                "value_type": "List"
              },
              {
                "name": "blind_spots_missing",
                "lineno": 121,
                "value_type": "List"
              },
              {
                "name": "blind_spots_found",
                "lineno": 138,
                "value_type": "List"
              },
              {
                "name": "blind_spots_addressed",
                "lineno": 146,
                "value_type": "List"
              },
              {
                "name": "blind_spots_missing",
                "lineno": 154,
                "value_type": "List"
              },
              {
                "name": "blind_spots_found",
                "lineno": 171,
                "value_type": "List"
              },
              {
                "name": "blind_spots_addressed",
                "lineno": 179,
                "value_type": "List"
              },
              {
                "name": "blind_spots_missing",
                "lineno": 187,
                "value_type": "List"
              },
              {
                "name": "blind_spots_found",
                "lineno": 204,
                "value_type": "List"
              },
              {
                "name": "blind_spots_addressed",
                "lineno": 212,
                "value_type": "List"
              },
              {
                "name": "blind_spots_missing",
                "lineno": 220,
                "value_type": "List"
              },
              {
                "name": "blind_spots_found",
                "lineno": 237,
                "value_type": "List"
              },
              {
                "name": "blind_spots_addressed",
                "lineno": 245,
                "value_type": "List"
              },
              {
                "name": "blind_spots_missing",
                "lineno": 253,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 289,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 303,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 317,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 331,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 345,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 359,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 379,
                "value_type": "Call"
              },
              {
                "name": "total_blind_spots_found",
                "lineno": 381,
                "value_type": "Constant"
              },
              {
                "name": "total_blind_spots_addressed",
                "lineno": 382,
                "value_type": "Constant"
              },
              {
                "name": "total_blind_spots_missing",
                "lineno": 383,
                "value_type": "Constant"
              },
              {
                "name": "results",
                "lineno": 397,
                "value_type": "Call"
              },
              {
                "name": "confidence_scores",
                "lineno": 399,
                "value_type": "ListComp"
              },
              {
                "name": "results",
                "lineno": 409,
                "value_type": "Call"
              },
              {
                "name": "detector",
                "lineno": 495,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 499,
                "value_type": "Call"
              },
              {
                "name": "security_result",
                "lineno": 502,
                "value_type": "Subscript"
              },
              {
                "name": "credential_exposure_addressed",
                "lineno": 505,
                "value_type": "Call"
              },
              {
                "name": "session_management_addressed",
                "lineno": 512,
                "value_type": "Call"
              },
              {
                "name": "detector",
                "lineno": 520,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 524,
                "value_type": "Call"
              },
              {
                "name": "total_blind_spots",
                "lineno": 527,
                "value_type": "Constant"
              },
              {
                "name": "addressed_blind_spots",
                "lineno": 528,
                "value_type": "Constant"
              },
              {
                "name": "coverage_rate",
                "lineno": 534,
                "value_type": "IfExp"
              },
              {
                "name": "detector",
                "lineno": 543,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 546,
                "value_type": "Call"
              },
              {
                "name": "remaining_blind_spots",
                "lineno": 549,
                "value_type": "List"
              },
              {
                "name": "actionable_keywords",
                "lineno": 416,
                "value_type": "List"
              },
              {
                "name": "has_actionable_keyword",
                "lineno": 417,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 22,
                "content": "Import the diversity hypothesis framework"
              },
              {
                "line": 28,
                "content": "Import the Streamlit app"
              },
              {
                "line": 291,
                "content": "Verify security blind spots are identified"
              },
              {
                "line": 295,
                "content": "Verify confidence score is reasonable"
              },
              {
                "line": 298,
                "content": "Verify recommendations are provided"
              },
              {
                "line": 305,
                "content": "Verify DevOps blind spots are identified"
              },
              {
                "line": 309,
                "content": "Verify confidence score is reasonable"
              },
              {
                "line": 312,
                "content": "Verify recommendations are provided"
              },
              {
                "line": 319,
                "content": "Verify code quality blind spots are identified"
              },
              {
                "line": 323,
                "content": "Verify confidence score is reasonable"
              },
              {
                "line": 326,
                "content": "Verify recommendations are provided"
              },
              {
                "line": 333,
                "content": "Verify UX blind spots are identified"
              },
              {
                "line": 337,
                "content": "Verify confidence score is reasonable"
              },
              {
                "line": 340,
                "content": "Verify recommendations are provided"
              },
              {
                "line": 347,
                "content": "Verify performance blind spots are identified"
              },
              {
                "line": 351,
                "content": "Verify confidence score is reasonable"
              },
              {
                "line": 354,
                "content": "Verify recommendations are provided"
              },
              {
                "line": 361,
                "content": "Verify all agents provided results"
              },
              {
                "line": 369,
                "content": "Verify each result has required fields"
              },
              {
                "line": 390,
                "content": "Verify comprehensive coverage"
              },
              {
                "line": 401,
                "content": "Verify confidence scores are reasonable"
              },
              {
                "line": 404,
                "content": "Verify some variation in confidence scores"
              },
              {
                "line": 412,
                "content": "Verify recommendations are not empty"
              },
              {
                "line": 415,
                "content": "Verify recommendations contain actionable keywords"
              },
              {
                "line": 434,
                "content": "Test credential encryption"
              },
              {
                "line": 438,
                "content": "Test session management"
              },
              {
                "line": 442,
                "content": "Test input validation"
              },
              {
                "line": 449,
                "content": "Test deployment management"
              },
              {
                "line": 454,
                "content": "Test monitoring"
              },
              {
                "line": 460,
                "content": "Test error handling"
              },
              {
                "line": 463,
                "content": "Test modular architecture"
              },
              {
                "line": 471,
                "content": "Test progressive disclosure"
              },
              {
                "line": 476,
                "content": "Test accessibility features"
              },
              {
                "line": 481,
                "content": "Test caching support"
              },
              {
                "line": 484,
                "content": "Test async support"
              },
              {
                "line": 498,
                "content": "Get blind spot analysis"
              },
              {
                "line": 501,
                "content": "Test security blind spot mapping"
              },
              {
                "line": 504,
                "content": "Check that credential exposure blind spot is addressed"
              },
              {
                "line": 511,
                "content": "Check that session management blind spot is addressed"
              },
              {
                "line": 523,
                "content": "Get blind spot analysis"
              },
              {
                "line": 526,
                "content": "Calculate coverage metrics"
              },
              {
                "line": 538,
                "content": "Verify reasonable coverage (at least 60%)"
              },
              {
                "line": 545,
                "content": "Get blind spot analysis"
              },
              {
                "line": 548,
                "content": "Collect all remaining blind spots"
              },
              {
                "line": 553,
                "content": "Verify remaining blind spots are identified"
              },
              {
                "line": 556,
                "content": "Verify recommendations are provided for remaining blind spots"
              },
              {
                "line": 562,
                "content": "Run all tests"
              }
            ],
            "total_lines": 564,
            "code_lines": 410
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/debug_anthropic_api.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 116,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "SmokeTest",
                "lineno": 5,
                "bases": [],
                "methods": [],
                "docstring": "Basic smoke test class"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 7,
            "code_lines": 3
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/test_diversity_hypothesis.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 19665,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "shutil",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "tempfile",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "unittest",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock",
                  "patch"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 14
              },
              {
                "module": "diversity_synthesis_orchestrator",
                "names": [
                  "DiversitySynthesisOrchestrator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 19
              },
              {
                "module": "langgraph_diversity_orchestrator",
                "names": [
                  "LangGraphDiversityOrchestrator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 22
              },
              {
                "module": "multi_dimensional_smoke_test",
                "names": [
                  "MultiDimensionalSmokeTest"
                ],
                "asnames": [
                  null
                ],
                "lineno": 25
              },
              {
                "module": "langgraph_diversity_orchestrator",
                "names": [
                  "BlindSpotFinding",
                  "DiversityAnalysis"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 318
              },
              {
                "module": "diversity_synthesis_orchestrator",
                "names": [
                  "FixSynthesis"
                ],
                "asnames": [
                  null
                ],
                "lineno": 414
              },
              {
                "module": "cost_analysis",
                "names": [
                  "estimate_tokens"
                ],
                "asnames": [
                  null
                ],
                "lineno": 465
              }
            ],
            "functions": [
              {
                "name": "run_comprehensive_tests",
                "lineno": 494,
                "args": [],
                "decorators": [],
                "docstring": "Run comprehensive test suite"
              },
              {
                "name": "setUp",
                "lineno": 31,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Set up test environment"
              },
              {
                "name": "tearDown",
                "lineno": 79,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Clean up test environment"
              },
              {
                "name": "test_multi_dimensional_smoke_test_initialization",
                "lineno": 84,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test MultiDimensionalSmokeTest initialization"
              },
              {
                "name": "test_extract_questions",
                "lineno": 105,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test question extraction from LLM responses"
              },
              {
                "name": "test_calculate_confidence",
                "lineno": 120,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test confidence calculation"
              },
              {
                "name": "test_calculate_agreement",
                "lineno": 142,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test agreement calculation"
              },
              {
                "name": "test_generate_insights",
                "lineno": 154,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test insight generation"
              },
              {
                "name": "test_call_llm_success",
                "lineno": 171,
                "args": [
                  "self",
                  "mock_post"
                ],
                "decorators": [
                  "patch"
                ],
                "docstring": "Test successful LLM API call"
              },
              {
                "name": "test_call_llm_error",
                "lineno": 187,
                "args": [
                  "self",
                  "mock_post"
                ],
                "decorators": [
                  "patch"
                ],
                "docstring": "Test LLM API call error handling"
              },
              {
                "name": "test_run_test_success",
                "lineno": 199,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test successful test run"
              },
              {
                "name": "test_run_test_error",
                "lineno": 221,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test test run with error"
              },
              {
                "name": "setUp",
                "lineno": 245,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Set up test environment"
              },
              {
                "name": "tearDown",
                "lineno": 281,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Clean up test environment"
              },
              {
                "name": "test_orchestrator_initialization",
                "lineno": 286,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test LangGraphDiversityOrchestrator initialization"
              },
              {
                "name": "test_create_llm_client",
                "lineno": 299,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test LLM client creation"
              },
              {
                "name": "test_calculate_diversity_metrics",
                "lineno": 313,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test diversity metrics calculation"
              },
              {
                "name": "setUp",
                "lineno": 365,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Set up test environment"
              },
              {
                "name": "tearDown",
                "lineno": 391,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Clean up test environment"
              },
              {
                "name": "test_synthesis_orchestrator_initialization",
                "lineno": 396,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test DiversitySynthesisOrchestrator initialization"
              },
              {
                "name": "test_calculate_stakeholder_impact_matrix",
                "lineno": 409,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test stakeholder impact matrix calculation"
              },
              {
                "name": "setUp",
                "lineno": 442,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Set up integration test environment"
              },
              {
                "name": "tearDown",
                "lineno": 452,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Clean up integration test environment"
              },
              {
                "name": "test_end_to_end_workflow",
                "lineno": 457,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test complete end-to-end workflow"
              },
              {
                "name": "test_cost_analysis",
                "lineno": 462,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test cost analysis functionality"
              },
              {
                "name": "test_multi_threaded_performance",
                "lineno": 481,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test multi-threaded performance"
              },
              {
                "name": "test_memory_usage",
                "lineno": 485,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test memory usage under load"
              },
              {
                "name": "test_api_rate_limiting",
                "lineno": 489,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test API rate limiting handling"
              }
            ],
            "classes": [
              {
                "name": "TestDiversityHypothesis",
                "lineno": 28,
                "bases": [
                  "<ast.Attribute object at 0x7ca4ebbbf610>"
                ],
                "methods": [
                  "setUp",
                  "tearDown",
                  "test_multi_dimensional_smoke_test_initialization",
                  "test_extract_questions",
                  "test_calculate_confidence",
                  "test_calculate_agreement",
                  "test_generate_insights",
                  "test_call_llm_success",
                  "test_call_llm_error",
                  "test_run_test_success",
                  "test_run_test_error"
                ],
                "docstring": "Test suite for diversity hypothesis components"
              },
              {
                "name": "TestLangGraphDiversityOrchestrator",
                "lineno": 242,
                "bases": [
                  "<ast.Attribute object at 0x7ca4ebb7f010>"
                ],
                "methods": [
                  "setUp",
                  "tearDown",
                  "test_orchestrator_initialization",
                  "test_create_llm_client",
                  "test_calculate_diversity_metrics"
                ],
                "docstring": "Test suite for LangGraph diversity orchestrator"
              },
              {
                "name": "TestDiversitySynthesisOrchestrator",
                "lineno": 362,
                "bases": [
                  "<ast.Attribute object at 0x7ca4ebb829d0>"
                ],
                "methods": [
                  "setUp",
                  "tearDown",
                  "test_synthesis_orchestrator_initialization",
                  "test_calculate_stakeholder_impact_matrix"
                ],
                "docstring": "Test suite for diversity synthesis orchestrator"
              },
              {
                "name": "TestIntegration",
                "lineno": 439,
                "bases": [
                  "<ast.Attribute object at 0x7ca4ebb44a10>"
                ],
                "methods": [
                  "setUp",
                  "tearDown",
                  "test_end_to_end_workflow",
                  "test_cost_analysis"
                ],
                "docstring": "Integration tests for the complete diversity hypothesis system"
              },
              {
                "name": "TestPerformance",
                "lineno": 478,
                "bases": [
                  "<ast.Attribute object at 0x7ca4ebbc4a10>"
                ],
                "methods": [
                  "test_multi_threaded_performance",
                  "test_memory_usage",
                  "test_api_rate_limiting"
                ],
                "docstring": "Performance tests for the diversity hypothesis system"
              }
            ],
            "variables": [
              {
                "name": "loader",
                "lineno": 500,
                "value_type": "Call"
              },
              {
                "name": "suite",
                "lineno": 501,
                "value_type": "Call"
              },
              {
                "name": "runner",
                "lineno": 511,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 512,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 539,
                "value_type": "Call"
              },
              {
                "name": "test",
                "lineno": 86,
                "value_type": "Call"
              },
              {
                "name": "test",
                "lineno": 107,
                "value_type": "Call"
              },
              {
                "name": "json_content",
                "lineno": 110,
                "value_type": "Constant"
              },
              {
                "name": "questions",
                "lineno": 111,
                "value_type": "Call"
              },
              {
                "name": "text_content",
                "lineno": 116,
                "value_type": "Constant"
              },
              {
                "name": "questions",
                "lineno": 117,
                "value_type": "Call"
              },
              {
                "name": "test",
                "lineno": 122,
                "value_type": "Call"
              },
              {
                "name": "high_confidence_questions",
                "lineno": 125,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 130,
                "value_type": "Call"
              },
              {
                "name": "low_confidence_questions",
                "lineno": 134,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 139,
                "value_type": "Call"
              },
              {
                "name": "test",
                "lineno": 144,
                "value_type": "Call"
              },
              {
                "name": "test",
                "lineno": 156,
                "value_type": "Call"
              },
              {
                "name": "questions",
                "lineno": 159,
                "value_type": "List"
              },
              {
                "name": "insights",
                "lineno": 160,
                "value_type": "Call"
              },
              {
                "name": "questions",
                "lineno": 165,
                "value_type": "List"
              },
              {
                "name": "insights",
                "lineno": 166,
                "value_type": "Call"
              },
              {
                "name": "test",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "mock_response",
                "lineno": 176,
                "value_type": "Call"
              },
              {
                "name": "test",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "test",
                "lineno": 201,
                "value_type": "Call"
              },
              {
                "name": "config",
                "lineno": 203,
                "value_type": "Dict"
              },
              {
                "name": "test",
                "lineno": 223,
                "value_type": "Call"
              },
              {
                "name": "config",
                "lineno": 225,
                "value_type": "Dict"
              },
              {
                "name": "orchestrator",
                "lineno": 288,
                "value_type": "Call"
              },
              {
                "name": "agent_names",
                "lineno": 292,
                "value_type": "ListComp"
              },
              {
                "name": "orchestrator",
                "lineno": 301,
                "value_type": "Call"
              },
              {
                "name": "orchestrator",
                "lineno": 315,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 320,
                "value_type": "List"
              },
              {
                "name": "metrics",
                "lineno": 353,
                "value_type": "Call"
              },
              {
                "name": "orchestrator",
                "lineno": 398,
                "value_type": "Call"
              },
              {
                "name": "stakeholder_names",
                "lineno": 402,
                "value_type": "ListComp"
              },
              {
                "name": "orchestrator",
                "lineno": 411,
                "value_type": "Call"
              },
              {
                "name": "fixes",
                "lineno": 416,
                "value_type": "List"
              },
              {
                "name": "impact_matrix",
                "lineno": 433,
                "value_type": "Call"
              },
              {
                "name": "text",
                "lineno": 468,
                "value_type": "Constant"
              },
              {
                "name": "tokens",
                "lineno": 469,
                "value_type": "Call"
              },
              {
                "name": "long_text",
                "lineno": 473,
                "value_type": "Constant"
              },
              {
                "name": "long_tokens",
                "lineno": 474,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 196,
                "value_type": "Call"
              },
              {
                "name": "client",
                "lineno": 305,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 236,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Add current directory to path for imports"
              },
              {
                "line": 37,
                "content": "Create test data"
              },
              {
                "line": 57,
                "content": "Mock API responses"
              },
              {
                "line": 88,
                "content": "Test model configurations"
              },
              {
                "line": 93,
                "content": "Test scenarios"
              },
              {
                "line": 97,
                "content": "Test roles"
              },
              {
                "line": 101,
                "content": "Test prompt structures"
              },
              {
                "line": 109,
                "content": "Test JSON extraction"
              },
              {
                "line": 115,
                "content": "Test fallback extraction"
              },
              {
                "line": 124,
                "content": "Test high confidence indicators"
              },
              {
                "line": 133,
                "content": "Test low confidence indicators"
              },
              {
                "line": 146,
                "content": "Test agreement"
              },
              {
                "line": 150,
                "content": "Test disagreement"
              },
              {
                "line": 158,
                "content": "Test high confidence"
              },
              {
                "line": 164,
                "content": "Test low confidence"
              },
              {
                "line": 175,
                "content": "Mock successful response"
              },
              {
                "line": 181,
                "content": "Test API call"
              },
              {
                "line": 191,
                "content": "Mock error response"
              },
              {
                "line": 194,
                "content": "Test error handling"
              },
              {
                "line": 251,
                "content": "Create test analysis data"
              },
              {
                "line": 290,
                "content": "Test agents"
              },
              {
                "line": 303,
                "content": "Test OpenAI client"
              },
              {
                "line": 308,
                "content": "Test missing API key"
              },
              {
                "line": 317,
                "content": "Create test analyses"
              },
              {
                "line": 371,
                "content": "Create test synthesis data"
              },
              {
                "line": 400,
                "content": "Test stakeholders"
              },
              {
                "line": 413,
                "content": "Create test fixes"
              },
              {
                "line": 448,
                "content": "Create test files"
              },
              {
                "line": 459,
                "content": "This would test the complete workflow from diversity analysis to synthesis"
              },
              {
                "line": 460,
                "content": "In a real test, we would mock the API calls and test the full pipeline"
              },
              {
                "line": 464,
                "content": "Test that cost analysis works correctly"
              },
              {
                "line": 467,
                "content": "Test token estimation"
              },
              {
                "line": 472,
                "content": "Test with longer text"
              },
              {
                "line": 483,
                "content": "Test that multi-threading works correctly"
              },
              {
                "line": 487,
                "content": "Test memory usage with large datasets"
              },
              {
                "line": 491,
                "content": "Test rate limiting and retry logic"
              },
              {
                "line": 499,
                "content": "Create test suite"
              },
              {
                "line": 503,
                "content": "Add test classes"
              },
              {
                "line": 510,
                "content": "Run tests"
              },
              {
                "line": 514,
                "content": "Print summary"
              }
            ],
            "total_lines": 541,
            "code_lines": 406
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/meta_cognitive_orchestrator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 130,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "MetaCognitiveOrchestrator",
                "lineno": 5,
                "bases": [],
                "methods": [],
                "docstring": "Meta-cognitive orchestrator"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 7,
            "code_lines": 3
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/test_live_smoke_test.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3377,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pytest",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "live_smoke_test_langchain",
                "names": [
                  "LiveLLMOrchestrator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_live_llm_orchestrator_initialization",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "Test that LiveLLMOrchestrator initializes correctly"
              },
              {
                "name": "test_live_llm_call_without_credentials",
                "lineno": 26,
                "args": [],
                "decorators": [],
                "docstring": "Test that live LLM call handles missing credentials gracefully"
              },
              {
                "name": "test_provider_validation",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Test that invalid providers raise appropriate errors"
              },
              {
                "name": "test_api_endpoint_configuration",
                "lineno": 44,
                "args": [],
                "decorators": [],
                "docstring": "Test that API endpoints are configured correctly"
              },
              {
                "name": "test_live_llm_call_with_credentials",
                "lineno": 56,
                "args": [],
                "decorators": [],
                "docstring": "Test that live LLM call works with credentials (if available)"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "orchestrator",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "test_key",
                "lineno": 20,
                "value_type": "Constant"
              },
              {
                "name": "orchestrator",
                "lineno": 21,
                "value_type": "Call"
              },
              {
                "name": "orchestrator",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "test_key",
                "lineno": 48,
                "value_type": "Constant"
              },
              {
                "name": "openai_orchestrator",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "anthropic_orchestrator",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "context",
                "lineno": 71,
                "value_type": "Constant"
              },
              {
                "name": "question",
                "lineno": 72,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "orchestrator",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "has_questions",
                "lineno": 79,
                "value_type": "BoolOp"
              },
              {
                "name": "questions_key",
                "lineno": 87,
                "value_type": "Call"
              },
              {
                "name": "orchestrator",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "questions",
                "lineno": 92,
                "value_type": "Subscript"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Test without API key"
              },
              {
                "line": 19,
                "content": "Test with API key"
              },
              {
                "line": 47,
                "content": "Test with API key available"
              },
              {
                "line": 59,
                "content": "Only run if we have credentials"
              },
              {
                "line": 63,
                "content": "Test with available provider"
              },
              {
                "line": 76,
                "content": "Should either have questions or an error"
              },
              {
                "line": 78,
                "content": "Check for different possible response formats"
              },
              {
                "line": 86,
                "content": "Get the questions list regardless of key name"
              }
            ],
            "total_lines": 99,
            "code_lines": 63
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/multi_dimensional_smoke_test.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 26963,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "requests",
                "asname": null,
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 663,
                "args": [],
                "decorators": [],
                "docstring": "Main function to run the enhanced smoke test"
              },
              {
                "name": "__init__",
                "lineno": 17,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "call_llm",
                "lineno": 136,
                "args": [
                  "self",
                  "model_name",
                  "prompt",
                  "temperature"
                ],
                "decorators": [],
                "docstring": "Call LLM with enhanced error handling and retry logic"
              },
              {
                "name": "run_test",
                "lineno": 196,
                "args": [
                  "self",
                  "config",
                  "scenario"
                ],
                "decorators": [],
                "docstring": "Run a single test with enhanced analysis"
              },
              {
                "name": "extract_questions",
                "lineno": 286,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Enhanced question extraction"
              },
              {
                "name": "calculate_confidence",
                "lineno": 316,
                "args": [
                  "self",
                  "questions"
                ],
                "decorators": [],
                "docstring": "Enhanced confidence calculation"
              },
              {
                "name": "calculate_agreement",
                "lineno": 348,
                "args": [
                  "self",
                  "confidence",
                  "expected"
                ],
                "decorators": [],
                "docstring": "Enhanced agreement calculation"
              },
              {
                "name": "generate_insights",
                "lineno": 352,
                "args": [
                  "self",
                  "questions",
                  "confidence"
                ],
                "decorators": [],
                "docstring": "Enhanced insight generation"
              },
              {
                "name": "run_comprehensive_test",
                "lineno": 372,
                "args": [
                  "self",
                  "scenario"
                ],
                "decorators": [],
                "docstring": "Run comprehensive test with all configurations"
              }
            ],
            "classes": [
              {
                "name": "MultiDimensionalSmokeTest",
                "lineno": 16,
                "bases": [],
                "methods": [
                  "__init__",
                  "call_llm",
                  "run_test",
                  "extract_questions",
                  "calculate_confidence",
                  "calculate_agreement",
                  "generate_insights",
                  "run_comprehensive_test"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "test",
                "lineno": 665,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 668,
                "value_type": "Call"
              },
              {
                "name": "model_config",
                "lineno": 143,
                "value_type": "Call"
              },
              {
                "name": "api_key",
                "lineno": 148,
                "value_type": "Call"
              },
              {
                "name": "headers",
                "lineno": 153,
                "value_type": "Dict"
              },
              {
                "name": "enhanced_prompt",
                "lineno": 159,
                "value_type": "Constant"
              },
              {
                "name": "payload",
                "lineno": 170,
                "value_type": "Dict"
              },
              {
                "name": "model_name",
                "lineno": 198,
                "value_type": "Subscript"
              },
              {
                "name": "temperature",
                "lineno": 199,
                "value_type": "Subscript"
              },
              {
                "name": "prompt",
                "lineno": 207,
                "value_type": "Constant"
              },
              {
                "name": "response",
                "lineno": 220,
                "value_type": "Call"
              },
              {
                "name": "questions",
                "lineno": 288,
                "value_type": "List"
              },
              {
                "name": "confidence_indicators",
                "lineno": 322,
                "value_type": "Constant"
              },
              {
                "name": "total_indicators",
                "lineno": 323,
                "value_type": "Constant"
              },
              {
                "name": "insights",
                "lineno": 354,
                "value_type": "List"
              },
              {
                "name": "results",
                "lineno": 381,
                "value_type": "List"
              },
              {
                "name": "total_tests",
                "lineno": 382,
                "value_type": "Constant"
              },
              {
                "name": "agreement_count",
                "lineno": 383,
                "value_type": "Constant"
              },
              {
                "name": "test_configs",
                "lineno": 386,
                "value_type": "List"
              },
              {
                "name": "agreement_rate",
                "lineno": 572,
                "value_type": "IfExp"
              },
              {
                "name": "unique_insights",
                "lineno": 575,
                "value_type": "Call"
              },
              {
                "name": "diversity_score",
                "lineno": 580,
                "value_type": "IfExp"
              },
              {
                "name": "temp_results",
                "lineno": 607,
                "value_type": "Dict"
              },
              {
                "name": "role_results",
                "lineno": 622,
                "value_type": "Dict"
              },
              {
                "name": "msg",
                "lineno": 145,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 150,
                "value_type": "JoinedStr"
              },
              {
                "name": "response",
                "lineno": 184,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 309,
                "value_type": "Call"
              },
              {
                "name": "temp",
                "lineno": 609,
                "value_type": "Subscript"
              },
              {
                "name": "rate",
                "lineno": 617,
                "value_type": "BinOp"
              },
              {
                "name": "role",
                "lineno": 624,
                "value_type": "Subscript"
              },
              {
                "name": "rate",
                "lineno": 632,
                "value_type": "BinOp"
              },
              {
                "name": "content",
                "lineno": 236,
                "value_type": "Subscript"
              },
              {
                "name": "questions",
                "lineno": 239,
                "value_type": "Call"
              },
              {
                "name": "confidence",
                "lineno": 242,
                "value_type": "Call"
              },
              {
                "name": "agreement",
                "lineno": 243,
                "value_type": "Call"
              },
              {
                "name": "json_start",
                "lineno": 293,
                "value_type": "BinOp"
              },
              {
                "name": "json_end",
                "lineno": 294,
                "value_type": "Call"
              },
              {
                "name": "json_content",
                "lineno": 295,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 296,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 551,
                "value_type": "Call"
              },
              {
                "name": "status",
                "lineno": 557,
                "value_type": "IfExp"
              },
              {
                "name": "insights",
                "lineno": 560,
                "value_type": "Call"
              },
              {
                "name": "questions",
                "lineno": 299,
                "value_type": "ListComp"
              },
              {
                "name": "questions",
                "lineno": 301,
                "value_type": "ListComp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 18,
                "content": "Updated model configurations with proven diversity"
              },
              {
                "line": 55,
                "content": "New diverse models for enhanced diversity hypothesis testing"
              },
              {
                "line": 73,
                "content": "Enhanced test scenarios based on proven diversity hypothesis"
              },
              {
                "line": 102,
                "content": "Enhanced roles for better diversity"
              },
              {
                "line": 114,
                "content": "Enhanced prompt structures"
              },
              {
                "line": 126,
                "content": "Enhanced response formats"
              },
              {
                "line": 158,
                "content": "Enhanced prompt engineering based on proven diversity hypothesis"
              },
              {
                "line": 204,
                "content": "Enhanced scenario context"
              },
              {
                "line": 219,
                "content": "Call LLM"
              },
              {
                "line": 222,
                "content": "Enhanced result analysis"
              },
              {
                "line": 232,
                "content": "Parse response and calculate agreement"
              },
              {
                "line": 234,
                "content": "Enhanced parsing for different response formats"
              },
              {
                "line": 238,
                "content": "Extract questions/findings from response"
              },
              {
                "line": 241,
                "content": "Calculate confidence and agreement"
              },
              {
                "line": 290,
                "content": "Try to extract JSON structure"
              },
              {
                "line": 307,
                "content": "Fallback: extract questions from text"
              },
              {
                "line": 321,
                "content": "Analyze question characteristics"
              },
              {
                "line": 326,
                "content": "High confidence indicators"
              },
              {
                "line": 337,
                "content": "Low confidence indicators"
              },
              {
                "line": 385,
                "content": "Enhanced test configurations"
              },
              {
                "line": 387,
                "content": "Temperature variations"
              },
              {
                "line": 412,
                "content": "Role variations"
              },
              {
                "line": 429,
                "content": "Model variations"
              },
              {
                "line": 446,
                "content": "Prompt variations"
              },
              {
                "line": 463,
                "content": "Format variations"
              },
              {
                "line": 480,
                "content": "Enhanced role tests"
              },
              {
                "line": 513,
                "content": "New diverse model tests"
              },
              {
                "line": 571,
                "content": "Enhanced analysis"
              },
              {
                "line": 574,
                "content": "Calculate diversity metrics"
              },
              {
                "line": 638,
                "content": "Save enhanced results"
              },
              {
                "line": 667,
                "content": "Run comprehensive test"
              }
            ],
            "total_lines": 686,
            "code_lines": 579
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/langgraph_diversity_orchestrator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 151,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "LangGraphDiversityOrchestrator",
                "lineno": 5,
                "bases": [],
                "methods": [],
                "docstring": "LangGraph-based diversity orchestrator"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 7,
            "code_lines": 3
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/cost_analysis.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 116,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "SmokeTest",
                "lineno": 5,
                "bases": [],
                "methods": [],
                "docstring": "Basic smoke test class"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 7,
            "code_lines": 3
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/test_meta_cognitive_orchestrator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 116,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "SmokeTest",
                "lineno": 5,
                "bases": [],
                "methods": [],
                "docstring": "Basic smoke test class"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 7,
            "code_lines": 3
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/live_smoke_test.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 116,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "SmokeTest",
                "lineno": 5,
                "bases": [],
                "methods": [],
                "docstring": "Basic smoke test class"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 7,
            "code_lines": 3
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/meta_cognitive_orchestrator.py.backup",
          "domain": "python",
          "file_type": "unknown",
          "size_bytes": 9169,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/diversity_hypothesis_demo.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 136,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "DiversityHypothesisDemo",
                "lineno": 5,
                "bases": [],
                "methods": [],
                "docstring": "Demo for diversity hypothesis testing"
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 7,
            "code_lines": 3
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/live_smoke_test_langchain.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4333,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 5
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 6
              },
              {
                "module": "langchain_core.output_parsers",
                "names": [
                  "JsonOutputParser"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "langchain_core.prompts",
                "names": [
                  "ChatPromptTemplate"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "langchain_openai",
                "names": [
                  "ChatOpenAI"
                ],
                "asnames": [
                  null
                ],
                "lineno": 29
              },
              {
                "module": "langchain_anthropic",
                "names": [
                  "ChatAnthropic"
                ],
                "asnames": [
                  null
                ],
                "lineno": 33
              }
            ],
            "functions": [
              {
                "name": "test_live_scenario_1",
                "lineno": 97,
                "args": [],
                "decorators": [],
                "docstring": "Test with real LLM - Healthcare CDC implementation"
              },
              {
                "name": "main",
                "lineno": 118,
                "args": [],
                "decorators": [],
                "docstring": "Main function"
              },
              {
                "name": "__init__",
                "lineno": 15,
                "args": [
                  "self",
                  "api_key",
                  "provider"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "call_live_llm",
                "lineno": 74,
                "args": [
                  "self",
                  "context",
                  "jeopardy_question"
                ],
                "decorators": [],
                "docstring": "Call live LLM API using LangChain"
              }
            ],
            "classes": [
              {
                "name": "LiveLLMOrchestrator",
                "lineno": 12,
                "bases": [],
                "methods": [
                  "__init__",
                  "call_live_llm"
                ],
                "docstring": "Live LLM orchestrator using LangChain"
              }
            ],
            "variables": [
              {
                "name": "context",
                "lineno": 101,
                "value_type": "Constant"
              },
              {
                "name": "openai_llm",
                "lineno": 110,
                "value_type": "Call"
              },
              {
                "name": "live_result",
                "lineno": 111,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 20,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 40,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 43,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 48,
                "value_type": "JoinedStr"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 23,
                "content": "Initialize LangChain models (only if API key is available)"
              },
              {
                "line": 27,
                "content": "Initialize LLM based on provider"
              },
              {
                "line": 51,
                "content": "Set up JSON output parser"
              },
              {
                "line": 54,
                "content": "Create the prompt template"
              },
              {
                "line": 69,
                "content": "Create the chain (only if LLM is available)"
              },
              {
                "line": 84,
                "content": "Execute the chain"
              },
              {
                "line": 108,
                "content": "Test with OpenAI if available"
              }
            ],
            "total_lines": 125,
            "code_lines": 89
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/__init__.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 30,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [],
            "total_lines": 2,
            "code_lines": 1
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/agents/artifact_parser_enhanced.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 22201,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 13
              },
              {
                "module": "yaml",
                "asname": null,
                "lineno": 447
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 466
              },
              {
                "module": "yaml",
                "asname": null,
                "lineno": 411
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 617,
                "args": [],
                "decorators": [],
                "docstring": "Test Enhanced ArtifactParser"
              },
              {
                "name": "__init__",
                "lineno": 47,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "parse_artifact",
                "lineno": 57,
                "args": [
                  "self",
                  "artifact_path",
                  "artifact_type"
                ],
                "decorators": [],
                "docstring": "Parse an artifact with enhanced error recovery"
              },
              {
                "name": "_parse_python_enhanced",
                "lineno": 80,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Enhanced Python parsing with recursive descent block analysis"
              },
              {
                "name": "_analyze_blocks_recursive_descent",
                "lineno": 115,
                "args": [
                  "self",
                  "lines"
                ],
                "decorators": [],
                "docstring": "Use recursive descent to find block boundaries despite indentation errors"
              },
              {
                "name": "_detect_block_start",
                "lineno": 180,
                "args": [
                  "self",
                  "line"
                ],
                "decorators": [],
                "docstring": "Detect if line starts a new block"
              },
              {
                "name": "_is_block_end",
                "lineno": 214,
                "args": [
                  "self",
                  "line",
                  "block_type"
                ],
                "decorators": [],
                "docstring": "Check if line ends the current block"
              },
              {
                "name": "_extract_from_blocks",
                "lineno": 234,
                "args": [
                  "self",
                  "block_analysis"
                ],
                "decorators": [],
                "docstring": "Extract structured data from block analysis"
              },
              {
                "name": "_extract_function_from_block",
                "lineno": 269,
                "args": [
                  "self",
                  "block"
                ],
                "decorators": [],
                "docstring": "Extract function information from block content"
              },
              {
                "name": "_extract_class_from_block",
                "lineno": 302,
                "args": [
                  "self",
                  "block"
                ],
                "decorators": [],
                "docstring": "Extract class information from block content"
              },
              {
                "name": "_extract_imports_from_content",
                "lineno": 335,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Extract import statements from content"
              },
              {
                "name": "_detect_indentation_issues",
                "lineno": 347,
                "args": [
                  "self",
                  "lines"
                ],
                "decorators": [],
                "docstring": "Detect indentation issues in the code"
              },
              {
                "name": "_block_to_dict",
                "lineno": 377,
                "args": [
                  "self",
                  "block"
                ],
                "decorators": [],
                "docstring": "Convert BlockBoundary to dictionary"
              },
              {
                "name": "_count_block_types",
                "lineno": 390,
                "args": [
                  "self",
                  "blocks"
                ],
                "decorators": [],
                "docstring": "Count blocks by type"
              },
              {
                "name": "_parse_mdc",
                "lineno": 398,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse MDC file (Markdown with YAML frontmatter)"
              },
              {
                "name": "_parse_markdown",
                "lineno": 427,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse Markdown file"
              },
              {
                "name": "_parse_yaml",
                "lineno": 441,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse YAML file"
              },
              {
                "name": "_parse_json",
                "lineno": 460,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse JSON file"
              },
              {
                "name": "_parse_sql",
                "lineno": 479,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse SQL file"
              },
              {
                "name": "_parse_generic",
                "lineno": 492,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse generic file"
              },
              {
                "name": "_extract_imports",
                "lineno": 504,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Extract import statements"
              },
              {
                "name": "_extract_functions",
                "lineno": 512,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Extract function definitions"
              },
              {
                "name": "_extract_classes",
                "lineno": 526,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Extract class definitions"
              },
              {
                "name": "_extract_variables",
                "lineno": 542,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Extract variable assignments"
              },
              {
                "name": "_calculate_complexity",
                "lineno": 552,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Calculate cyclomatic complexity"
              },
              {
                "name": "_extract_headings",
                "lineno": 560,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Extract markdown headings"
              },
              {
                "name": "_extract_links",
                "lineno": 568,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Extract markdown links"
              },
              {
                "name": "_extract_sql_statements",
                "lineno": 573,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Extract SQL statements"
              },
              {
                "name": "_analyze_yaml_structure",
                "lineno": 582,
                "args": [
                  "self",
                  "data"
                ],
                "decorators": [],
                "docstring": "Analyze YAML structure"
              },
              {
                "name": "_analyze_json_structure",
                "lineno": 598,
                "args": [
                  "self",
                  "data"
                ],
                "decorators": [],
                "docstring": "Analyze JSON structure"
              },
              {
                "name": "_calculate_depth",
                "lineno": 602,
                "args": [
                  "self",
                  "obj",
                  "current_depth"
                ],
                "decorators": [],
                "docstring": "Calculate depth of nested structure"
              }
            ],
            "classes": [
              {
                "name": "BlockBoundary",
                "lineno": 21,
                "bases": [],
                "methods": [],
                "docstring": "Represents a code block boundary"
              },
              {
                "name": "ParsedArtifact",
                "lineno": 33,
                "bases": [],
                "methods": [],
                "docstring": "Enhanced parsed artifact model with block analysis"
              },
              {
                "name": "EnhancedArtifactParser",
                "lineno": 44,
                "bases": [],
                "methods": [
                  "__init__",
                  "parse_artifact",
                  "_parse_python_enhanced",
                  "_analyze_blocks_recursive_descent",
                  "_detect_block_start",
                  "_is_block_end",
                  "_extract_from_blocks",
                  "_extract_function_from_block",
                  "_extract_class_from_block",
                  "_extract_imports_from_content",
                  "_detect_indentation_issues",
                  "_block_to_dict",
                  "_count_block_types",
                  "_parse_mdc",
                  "_parse_markdown",
                  "_parse_yaml",
                  "_parse_json",
                  "_parse_sql",
                  "_parse_generic",
                  "_extract_imports",
                  "_extract_functions",
                  "_extract_classes",
                  "_extract_variables",
                  "_calculate_complexity",
                  "_extract_headings",
                  "_extract_links",
                  "_extract_sql_statements",
                  "_analyze_yaml_structure",
                  "_analyze_json_structure",
                  "_calculate_depth"
                ],
                "docstring": "Enhanced parser with recursive descent block analysis"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "parser",
                "lineno": 619,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 622,
                "value_type": "Constant"
              },
              {
                "name": "errors",
                "lineno": 59,
                "value_type": "List"
              },
              {
                "name": "parsed_data",
                "lineno": 60,
                "value_type": "Dict"
              },
              {
                "name": "block_analysis",
                "lineno": 61,
                "value_type": "Dict"
              },
              {
                "name": "lines",
                "lineno": 88,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 89,
                "value_type": "Dict"
              },
              {
                "name": "block_analysis",
                "lineno": 90,
                "value_type": "Dict"
              },
              {
                "name": "blocks",
                "lineno": 119,
                "value_type": "List"
              },
              {
                "name": "current_block",
                "lineno": 120,
                "value_type": "Constant"
              },
              {
                "name": "block_stack",
                "lineno": 121,
                "value_type": "List"
              },
              {
                "name": "line",
                "lineno": 182,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 216,
                "value_type": "Call"
              },
              {
                "name": "blocks",
                "lineno": 236,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 238,
                "value_type": "List"
              },
              {
                "name": "classes",
                "lineno": 239,
                "value_type": "List"
              },
              {
                "name": "imports",
                "lineno": 240,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 274,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 275,
                "value_type": "Call"
              },
              {
                "name": "first_line",
                "lineno": 281,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 282,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 307,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 308,
                "value_type": "Call"
              },
              {
                "name": "first_line",
                "lineno": 314,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 315,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 337,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 338,
                "value_type": "Call"
              },
              {
                "name": "issues",
                "lineno": 349,
                "value_type": "List"
              },
              {
                "name": "counts",
                "lineno": 392,
                "value_type": "Dict"
              },
              {
                "name": "parts",
                "lineno": 404,
                "value_type": "Call"
              },
              {
                "name": "frontmatter",
                "lineno": 406,
                "value_type": "Dict"
              },
              {
                "name": "markdown_content",
                "lineno": 407,
                "value_type": "Name"
              },
              {
                "name": "parsed_data",
                "lineno": 418,
                "value_type": "Dict"
              },
              {
                "name": "parsed_data",
                "lineno": 432,
                "value_type": "Dict"
              },
              {
                "name": "parsed_data",
                "lineno": 484,
                "value_type": "Dict"
              },
              {
                "name": "imports",
                "lineno": 506,
                "value_type": "List"
              },
              {
                "name": "functions",
                "lineno": 514,
                "value_type": "List"
              },
              {
                "name": "classes",
                "lineno": 528,
                "value_type": "List"
              },
              {
                "name": "variables",
                "lineno": 544,
                "value_type": "List"
              },
              {
                "name": "complexity",
                "lineno": 554,
                "value_type": "Constant"
              },
              {
                "name": "headings",
                "lineno": 562,
                "value_type": "List"
              },
              {
                "name": "links",
                "lineno": 570,
                "value_type": "Call"
              },
              {
                "name": "statements",
                "lineno": 575,
                "value_type": "List"
              },
              {
                "name": "parsed",
                "lineno": 624,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 86,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 94,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 95,
                "value_type": "Dict"
              },
              {
                "name": "stripped",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "indent_level",
                "lineno": 129,
                "value_type": "BinOp"
              },
              {
                "name": "block_start",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "first_block",
                "lineno": 256,
                "value_type": "Subscript"
              },
              {
                "name": "imports",
                "lineno": 257,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 285,
                "value_type": "Call"
              },
              {
                "name": "args_str",
                "lineno": 286,
                "value_type": "Call"
              },
              {
                "name": "args_count",
                "lineno": 289,
                "value_type": "Call"
              },
              {
                "name": "class_name",
                "lineno": 318,
                "value_type": "Call"
              },
              {
                "name": "method_count",
                "lineno": 321,
                "value_type": "Constant"
              },
              {
                "name": "line",
                "lineno": 341,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 401,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 430,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 444,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 449,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 450,
                "value_type": "Dict"
              },
              {
                "name": "content",
                "lineno": 463,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 468,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 469,
                "value_type": "Dict"
              },
              {
                "name": "content",
                "lineno": 482,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 495,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 577,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "block_analysis",
                "lineno": 110,
                "value_type": "Call"
              },
              {
                "name": "new_block",
                "lineno": 135,
                "value_type": "Call"
              },
              {
                "name": "current_block",
                "lineno": 146,
                "value_type": "Name"
              },
              {
                "name": "current_block",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "func_info",
                "lineno": 245,
                "value_type": "Call"
              },
              {
                "name": "frontmatter",
                "lineno": 413,
                "value_type": "BoolOp"
              },
              {
                "name": "markdown_content",
                "lineno": 414,
                "value_type": "Subscript"
              },
              {
                "name": "parsed_data",
                "lineno": 456,
                "value_type": "Dict"
              },
              {
                "name": "parsed_data",
                "lineno": 475,
                "value_type": "Dict"
              },
              {
                "name": "current_block",
                "lineno": 159,
                "value_type": "IfExp"
              },
              {
                "name": "class_info",
                "lineno": 250,
                "value_type": "Call"
              },
              {
                "name": "indent_level",
                "lineno": 365,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Set up logging"
              },
              {
                "line": 92,
                "content": "First try standard AST parsing"
              },
              {
                "line": 109,
                "content": "Fall back to recursive descent block analysis"
              },
              {
                "line": 128,
                "content": "Determine indentation level"
              },
              {
                "line": 131,
                "content": "Check for block start patterns"
              },
              {
                "line": 134,
                "content": "Start new block"
              },
              {
                "line": 149,
                "content": "Check for block end"
              },
              {
                "line": 154,
                "content": "End current block"
              },
              {
                "line": 158,
                "content": "Pop back to parent block"
              },
              {
                "line": 161,
                "content": "Update current block content"
              },
              {
                "line": 166,
                "content": "Close any unclosed blocks"
              },
              {
                "line": 184,
                "content": "Function definitions"
              },
              {
                "line": 188,
                "content": "Class definitions"
              },
              {
                "line": 192,
                "content": "Control flow blocks"
              },
              {
                "line": 218,
                "content": "Check for dedentation (same or less indentation than block start)"
              },
              {
                "line": 219,
                "content": "This is a simplified check - in practice, we'd track indent levels more carefully"
              },
              {
                "line": 221,
                "content": "Specific end patterns"
              },
              {
                "line": 244,
                "content": "Extract function info from block content"
              },
              {
                "line": 249,
                "content": "Extract class info from block content"
              },
              {
                "line": 254,
                "content": "Try to extract imports from the beginning of the file"
              },
              {
                "line": 280,
                "content": "Parse first line for function definition"
              },
              {
                "line": 288,
                "content": "Count arguments (simplified)"
              },
              {
                "line": 313,
                "content": "Parse first line for class definition"
              },
              {
                "line": 320,
                "content": "Count methods (functions within the class)"
              },
              {
                "line": 353,
                "content": "Check for mixed tabs and spaces"
              },
              {
                "line": 363,
                "content": "Check for inconsistent indentation"
              },
              {
                "line": 397,
                "content": "Standard parsing methods (unchanged)"
              },
              {
                "line": 403,
                "content": "Split frontmatter and markdown"
              },
              {
                "line": 503,
                "content": "Helper methods (unchanged from original)"
              },
              {
                "line": 621,
                "content": "Test with a problematic file"
              }
            ],
            "total_lines": 650,
            "code_lines": 510
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/agents/artifact_synthesizer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 16289,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 386,
                "args": [],
                "decorators": [],
                "docstring": "Test ArtifactSynthesizer"
              },
              {
                "name": "__init__",
                "lineno": 34,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "synthesize_insights",
                "lineno": 43,
                "args": [
                  "self",
                  "artifacts",
                  "relationships",
                  "opportunities"
                ],
                "decorators": [],
                "docstring": "Create unified insights from all artifact data"
              },
              {
                "name": "_analyze_codebase_health",
                "lineno": 72,
                "args": [
                  "self",
                  "artifacts",
                  "relationships",
                  "opportunities"
                ],
                "decorators": [],
                "docstring": "Analyze overall codebase health"
              },
              {
                "name": "_analyze_complexity_distribution",
                "lineno": 139,
                "args": [
                  "self",
                  "artifacts",
                  "relationships",
                  "opportunities"
                ],
                "decorators": [],
                "docstring": "Analyze complexity distribution across artifacts"
              },
              {
                "name": "_analyze_quality_metrics",
                "lineno": 208,
                "args": [
                  "self",
                  "artifacts",
                  "relationships",
                  "opportunities"
                ],
                "decorators": [],
                "docstring": "Analyze code quality metrics"
              },
              {
                "name": "_analyze_security_issues",
                "lineno": 272,
                "args": [
                  "self",
                  "artifacts",
                  "relationships",
                  "opportunities"
                ],
                "decorators": [],
                "docstring": "Analyze security issues"
              },
              {
                "name": "_analyze_performance_patterns",
                "lineno": 315,
                "args": [
                  "self",
                  "artifacts",
                  "relationships",
                  "opportunities"
                ],
                "decorators": [],
                "docstring": "Analyze performance patterns"
              },
              {
                "name": "_severity_score",
                "lineno": 380,
                "args": [
                  "self",
                  "severity"
                ],
                "decorators": [],
                "docstring": "Convert severity to numeric score for sorting"
              }
            ],
            "classes": [
              {
                "name": "ArtifactInsight",
                "lineno": 18,
                "bases": [],
                "methods": [],
                "docstring": "A unified insight about the codebase"
              },
              {
                "name": "ArtifactSynthesizer",
                "lineno": 31,
                "bases": [],
                "methods": [
                  "__init__",
                  "synthesize_insights",
                  "_analyze_codebase_health",
                  "_analyze_complexity_distribution",
                  "_analyze_quality_metrics",
                  "_analyze_security_issues",
                  "_analyze_performance_patterns",
                  "_severity_score"
                ],
                "docstring": "Creates unified insights from artifact analysis"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 14,
                "value_type": "Call"
              },
              {
                "name": "synthesizer",
                "lineno": 390,
                "value_type": "Call"
              },
              {
                "name": "sample_artifacts",
                "lineno": 393,
                "value_type": "List"
              },
              {
                "name": "sample_relationships",
                "lineno": 404,
                "value_type": "List"
              },
              {
                "name": "sample_opportunities",
                "lineno": 412,
                "value_type": "List"
              },
              {
                "name": "insights",
                "lineno": 422,
                "value_type": "Call"
              },
              {
                "name": "insights",
                "lineno": 52,
                "value_type": "List"
              },
              {
                "name": "insights",
                "lineno": 79,
                "value_type": "List"
              },
              {
                "name": "type_counts",
                "lineno": 82,
                "value_type": "Dict"
              },
              {
                "name": "error_opportunities",
                "lineno": 88,
                "value_type": "ListComp"
              },
              {
                "name": "critical_errors",
                "lineno": 93,
                "value_type": "ListComp"
              },
              {
                "name": "insights",
                "lineno": 146,
                "value_type": "List"
              },
              {
                "name": "complexities",
                "lineno": 149,
                "value_type": "List"
              },
              {
                "name": "insights",
                "lineno": 215,
                "value_type": "List"
              },
              {
                "name": "quality_opportunities",
                "lineno": 218,
                "value_type": "ListComp"
              },
              {
                "name": "python_artifacts",
                "lineno": 243,
                "value_type": "ListComp"
              },
              {
                "name": "markdown_artifacts",
                "lineno": 244,
                "value_type": "ListComp"
              },
              {
                "name": "insights",
                "lineno": 279,
                "value_type": "List"
              },
              {
                "name": "security_opportunities",
                "lineno": 282,
                "value_type": "ListComp"
              },
              {
                "name": "insights",
                "lineno": 322,
                "value_type": "List"
              },
              {
                "name": "performance_opportunities",
                "lineno": 325,
                "value_type": "ListComp"
              },
              {
                "name": "scores",
                "lineno": 382,
                "value_type": "Dict"
              },
              {
                "name": "artifact_type",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "primary_type",
                "lineno": 119,
                "value_type": "Call"
              },
              {
                "name": "avg_complexity",
                "lineno": 158,
                "value_type": "BinOp"
              },
              {
                "name": "high_complexity_count",
                "lineno": 160,
                "value_type": "Call"
              },
              {
                "name": "doc_ratio",
                "lineno": 249,
                "value_type": "BinOp"
              },
              {
                "name": "critical_security",
                "lineno": 287,
                "value_type": "ListComp"
              },
              {
                "name": "import_relationships",
                "lineno": 352,
                "value_type": "ListComp"
              },
              {
                "name": "type_insights",
                "lineno": 57,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 152,
                "value_type": "Call"
              },
              {
                "name": "complexity",
                "lineno": 153,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Set up logging"
              },
              {
                "line": 54,
                "content": "Generate insights for each type"
              },
              {
                "line": 63,
                "content": "Sort by severity and confidence"
              },
              {
                "line": 81,
                "content": "Count artifacts by type"
              },
              {
                "line": 87,
                "content": "Analyze error distribution"
              },
              {
                "line": 117,
                "content": "Analyze artifact distribution"
              },
              {
                "line": 148,
                "content": "Calculate complexity metrics"
              },
              {
                "line": 217,
                "content": "Analyze quality opportunities"
              },
              {
                "line": 242,
                "content": "Analyze documentation coverage"
              },
              {
                "line": 281,
                "content": "Analyze security opportunities"
              },
              {
                "line": 324,
                "content": "Analyze performance opportunities"
              },
              {
                "line": 350,
                "content": "Analyze relationship patterns"
              },
              {
                "line": 392,
                "content": "Create sample data for testing"
              }
            ],
            "total_lines": 439,
            "code_lines": 371
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/agents/artifact_parser.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 22458,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 13
              },
              {
                "module": "yaml",
                "asname": null,
                "lineno": 450
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 469
              },
              {
                "module": "yaml",
                "asname": null,
                "lineno": 411
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 620,
                "args": [],
                "decorators": [],
                "docstring": "Test Enhanced ArtifactParser"
              },
              {
                "name": "__init__",
                "lineno": 47,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "parse_artifact",
                "lineno": 57,
                "args": [
                  "self",
                  "artifact_path",
                  "artifact_type"
                ],
                "decorators": [],
                "docstring": "Parse an artifact with enhanced error recovery"
              },
              {
                "name": "_parse_python_enhanced",
                "lineno": 80,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Enhanced Python parsing with recursive descent block analysis"
              },
              {
                "name": "_analyze_blocks_recursive_descent",
                "lineno": 115,
                "args": [
                  "self",
                  "lines"
                ],
                "decorators": [],
                "docstring": "Use recursive descent to find block boundaries despite indentation errors"
              },
              {
                "name": "_detect_block_start",
                "lineno": 180,
                "args": [
                  "self",
                  "line"
                ],
                "decorators": [],
                "docstring": "Detect if line starts a new block"
              },
              {
                "name": "_is_block_end",
                "lineno": 214,
                "args": [
                  "self",
                  "line",
                  "block_type"
                ],
                "decorators": [],
                "docstring": "Check if line ends the current block"
              },
              {
                "name": "_extract_from_blocks",
                "lineno": 234,
                "args": [
                  "self",
                  "block_analysis"
                ],
                "decorators": [],
                "docstring": "Extract structured data from block analysis"
              },
              {
                "name": "_extract_function_from_block",
                "lineno": 269,
                "args": [
                  "self",
                  "block"
                ],
                "decorators": [],
                "docstring": "Extract function information from block content"
              },
              {
                "name": "_extract_class_from_block",
                "lineno": 302,
                "args": [
                  "self",
                  "block"
                ],
                "decorators": [],
                "docstring": "Extract class information from block content"
              },
              {
                "name": "_extract_imports_from_content",
                "lineno": 335,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Extract import statements from content"
              },
              {
                "name": "_detect_indentation_issues",
                "lineno": 347,
                "args": [
                  "self",
                  "lines"
                ],
                "decorators": [],
                "docstring": "Detect indentation issues in the code"
              },
              {
                "name": "_block_to_dict",
                "lineno": 377,
                "args": [
                  "self",
                  "block"
                ],
                "decorators": [],
                "docstring": "Convert BlockBoundary to dictionary"
              },
              {
                "name": "_count_block_types",
                "lineno": 390,
                "args": [
                  "self",
                  "blocks"
                ],
                "decorators": [],
                "docstring": "Count blocks by type"
              },
              {
                "name": "_parse_mdc",
                "lineno": 398,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse MDC file (Markdown with YAML frontmatter)"
              },
              {
                "name": "_parse_markdown",
                "lineno": 430,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse Markdown file"
              },
              {
                "name": "_parse_yaml",
                "lineno": 444,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse YAML file"
              },
              {
                "name": "_parse_json",
                "lineno": 463,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse JSON file"
              },
              {
                "name": "_parse_sql",
                "lineno": 482,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse SQL file"
              },
              {
                "name": "_parse_generic",
                "lineno": 495,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Parse generic file"
              },
              {
                "name": "_extract_imports",
                "lineno": 507,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Extract import statements"
              },
              {
                "name": "_extract_functions",
                "lineno": 515,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Extract function definitions"
              },
              {
                "name": "_extract_classes",
                "lineno": 529,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Extract class definitions"
              },
              {
                "name": "_extract_variables",
                "lineno": 545,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Extract variable assignments"
              },
              {
                "name": "_calculate_complexity",
                "lineno": 555,
                "args": [
                  "self",
                  "tree"
                ],
                "decorators": [],
                "docstring": "Calculate cyclomatic complexity"
              },
              {
                "name": "_extract_headings",
                "lineno": 563,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Extract markdown headings"
              },
              {
                "name": "_extract_links",
                "lineno": 571,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Extract markdown links"
              },
              {
                "name": "_extract_sql_statements",
                "lineno": 576,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Extract SQL statements"
              },
              {
                "name": "_analyze_yaml_structure",
                "lineno": 585,
                "args": [
                  "self",
                  "data"
                ],
                "decorators": [],
                "docstring": "Analyze YAML structure"
              },
              {
                "name": "_analyze_json_structure",
                "lineno": 601,
                "args": [
                  "self",
                  "data"
                ],
                "decorators": [],
                "docstring": "Analyze JSON structure"
              },
              {
                "name": "_calculate_depth",
                "lineno": 605,
                "args": [
                  "self",
                  "obj",
                  "current_depth"
                ],
                "decorators": [],
                "docstring": "Calculate depth of nested structure"
              }
            ],
            "classes": [
              {
                "name": "BlockBoundary",
                "lineno": 21,
                "bases": [],
                "methods": [],
                "docstring": "Represents a code block boundary"
              },
              {
                "name": "ParsedArtifact",
                "lineno": 33,
                "bases": [],
                "methods": [],
                "docstring": "Enhanced parsed artifact model with block analysis"
              },
              {
                "name": "ArtifactParser",
                "lineno": 44,
                "bases": [],
                "methods": [
                  "__init__",
                  "parse_artifact",
                  "_parse_python_enhanced",
                  "_analyze_blocks_recursive_descent",
                  "_detect_block_start",
                  "_is_block_end",
                  "_extract_from_blocks",
                  "_extract_function_from_block",
                  "_extract_class_from_block",
                  "_extract_imports_from_content",
                  "_detect_indentation_issues",
                  "_block_to_dict",
                  "_count_block_types",
                  "_parse_mdc",
                  "_parse_markdown",
                  "_parse_yaml",
                  "_parse_json",
                  "_parse_sql",
                  "_parse_generic",
                  "_extract_imports",
                  "_extract_functions",
                  "_extract_classes",
                  "_extract_variables",
                  "_calculate_complexity",
                  "_extract_headings",
                  "_extract_links",
                  "_extract_sql_statements",
                  "_analyze_yaml_structure",
                  "_analyze_json_structure",
                  "_calculate_depth"
                ],
                "docstring": "Enhanced parser with recursive descent block analysis"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "parser",
                "lineno": 622,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 625,
                "value_type": "Constant"
              },
              {
                "name": "errors",
                "lineno": 59,
                "value_type": "List"
              },
              {
                "name": "parsed_data",
                "lineno": 60,
                "value_type": "Dict"
              },
              {
                "name": "block_analysis",
                "lineno": 61,
                "value_type": "Dict"
              },
              {
                "name": "lines",
                "lineno": 88,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 89,
                "value_type": "Dict"
              },
              {
                "name": "block_analysis",
                "lineno": 90,
                "value_type": "Dict"
              },
              {
                "name": "blocks",
                "lineno": 119,
                "value_type": "List"
              },
              {
                "name": "current_block",
                "lineno": 120,
                "value_type": "Constant"
              },
              {
                "name": "block_stack",
                "lineno": 121,
                "value_type": "List"
              },
              {
                "name": "line",
                "lineno": 182,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 216,
                "value_type": "Call"
              },
              {
                "name": "blocks",
                "lineno": 236,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 238,
                "value_type": "List"
              },
              {
                "name": "classes",
                "lineno": 239,
                "value_type": "List"
              },
              {
                "name": "imports",
                "lineno": 240,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 274,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 275,
                "value_type": "Call"
              },
              {
                "name": "first_line",
                "lineno": 281,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 282,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 307,
                "value_type": "Subscript"
              },
              {
                "name": "lines",
                "lineno": 308,
                "value_type": "Call"
              },
              {
                "name": "first_line",
                "lineno": 314,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 315,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 337,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 338,
                "value_type": "Call"
              },
              {
                "name": "issues",
                "lineno": 349,
                "value_type": "List"
              },
              {
                "name": "counts",
                "lineno": 392,
                "value_type": "Dict"
              },
              {
                "name": "parts",
                "lineno": 404,
                "value_type": "Call"
              },
              {
                "name": "frontmatter",
                "lineno": 406,
                "value_type": "Dict"
              },
              {
                "name": "markdown_content",
                "lineno": 407,
                "value_type": "Name"
              },
              {
                "name": "parsed_data",
                "lineno": 421,
                "value_type": "Dict"
              },
              {
                "name": "parsed_data",
                "lineno": 435,
                "value_type": "Dict"
              },
              {
                "name": "parsed_data",
                "lineno": 487,
                "value_type": "Dict"
              },
              {
                "name": "imports",
                "lineno": 509,
                "value_type": "List"
              },
              {
                "name": "functions",
                "lineno": 517,
                "value_type": "List"
              },
              {
                "name": "classes",
                "lineno": 531,
                "value_type": "List"
              },
              {
                "name": "variables",
                "lineno": 547,
                "value_type": "List"
              },
              {
                "name": "complexity",
                "lineno": 557,
                "value_type": "Constant"
              },
              {
                "name": "headings",
                "lineno": 565,
                "value_type": "List"
              },
              {
                "name": "links",
                "lineno": 573,
                "value_type": "Call"
              },
              {
                "name": "statements",
                "lineno": 578,
                "value_type": "List"
              },
              {
                "name": "parsed",
                "lineno": 627,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 86,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 94,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 95,
                "value_type": "Dict"
              },
              {
                "name": "stripped",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "indent_level",
                "lineno": 129,
                "value_type": "BinOp"
              },
              {
                "name": "block_start",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "first_block",
                "lineno": 256,
                "value_type": "Subscript"
              },
              {
                "name": "imports",
                "lineno": 257,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 285,
                "value_type": "Call"
              },
              {
                "name": "args_str",
                "lineno": 286,
                "value_type": "Call"
              },
              {
                "name": "args_count",
                "lineno": 289,
                "value_type": "Call"
              },
              {
                "name": "class_name",
                "lineno": 318,
                "value_type": "Call"
              },
              {
                "name": "method_count",
                "lineno": 321,
                "value_type": "Constant"
              },
              {
                "name": "line",
                "lineno": 341,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 401,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 433,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 447,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 452,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 453,
                "value_type": "Dict"
              },
              {
                "name": "content",
                "lineno": 466,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 471,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 472,
                "value_type": "Dict"
              },
              {
                "name": "content",
                "lineno": 485,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 498,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 580,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "block_analysis",
                "lineno": 110,
                "value_type": "Call"
              },
              {
                "name": "new_block",
                "lineno": 135,
                "value_type": "Call"
              },
              {
                "name": "current_block",
                "lineno": 146,
                "value_type": "Name"
              },
              {
                "name": "current_block",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "func_info",
                "lineno": 245,
                "value_type": "Call"
              },
              {
                "name": "frontmatter",
                "lineno": 413,
                "value_type": "BoolOp"
              },
              {
                "name": "markdown_content",
                "lineno": 414,
                "value_type": "Subscript"
              },
              {
                "name": "parsed_data",
                "lineno": 459,
                "value_type": "Dict"
              },
              {
                "name": "parsed_data",
                "lineno": 478,
                "value_type": "Dict"
              },
              {
                "name": "current_block",
                "lineno": 159,
                "value_type": "IfExp"
              },
              {
                "name": "class_info",
                "lineno": 250,
                "value_type": "Call"
              },
              {
                "name": "indent_level",
                "lineno": 365,
                "value_type": "BinOp"
              },
              {
                "name": "frontmatter",
                "lineno": 418,
                "value_type": "Dict"
              },
              {
                "name": "markdown_content",
                "lineno": 419,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Set up logging"
              },
              {
                "line": 92,
                "content": "First try standard AST parsing"
              },
              {
                "line": 109,
                "content": "Fall back to recursive descent block analysis"
              },
              {
                "line": 128,
                "content": "Determine indentation level"
              },
              {
                "line": 131,
                "content": "Check for block start patterns"
              },
              {
                "line": 134,
                "content": "Start new block"
              },
              {
                "line": 149,
                "content": "Check for block end"
              },
              {
                "line": 154,
                "content": "End current block"
              },
              {
                "line": 158,
                "content": "Pop back to parent block"
              },
              {
                "line": 161,
                "content": "Update current block content"
              },
              {
                "line": 166,
                "content": "Close any unclosed blocks"
              },
              {
                "line": 184,
                "content": "Function definitions"
              },
              {
                "line": 188,
                "content": "Class definitions"
              },
              {
                "line": 192,
                "content": "Control flow blocks"
              },
              {
                "line": 218,
                "content": "Check for dedentation (same or less indentation than block start)"
              },
              {
                "line": 219,
                "content": "This is a simplified check - in practice, we'd track indent levels more carefully"
              },
              {
                "line": 221,
                "content": "Specific end patterns"
              },
              {
                "line": 244,
                "content": "Extract function info from block content"
              },
              {
                "line": 249,
                "content": "Extract class info from block content"
              },
              {
                "line": 254,
                "content": "Try to extract imports from the beginning of the file"
              },
              {
                "line": 280,
                "content": "Parse first line for function definition"
              },
              {
                "line": 288,
                "content": "Count arguments (simplified)"
              },
              {
                "line": 313,
                "content": "Parse first line for class definition"
              },
              {
                "line": 320,
                "content": "Count methods (functions within the class)"
              },
              {
                "line": 353,
                "content": "Check for mixed tabs and spaces"
              },
              {
                "line": 363,
                "content": "Check for inconsistent indentation"
              },
              {
                "line": 397,
                "content": "Standard parsing methods (unchanged)"
              },
              {
                "line": 403,
                "content": "Split frontmatter and markdown"
              },
              {
                "line": 416,
                "content": "Log the error for debugging but continue with empty frontmatter"
              },
              {
                "line": 506,
                "content": "Helper methods (unchanged from original)"
              },
              {
                "line": 624,
                "content": "Test with a problematic file"
              }
            ],
            "total_lines": 653,
            "code_lines": 512
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/agents/artifact_detector.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 6074,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 154,
                "args": [],
                "decorators": [],
                "docstring": "Test ArtifactDetector"
              },
              {
                "name": "__init__",
                "lineno": 28,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "detect_artifacts",
                "lineno": 56,
                "args": [
                  "self",
                  "root_path"
                ],
                "decorators": [],
                "docstring": "Detect all artifacts in the codebase"
              },
              {
                "name": "_should_include_file",
                "lineno": 73,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Check if file should be included in analysis"
              },
              {
                "name": "_create_artifact_info",
                "lineno": 83,
                "args": [
                  "self",
                  "file_path",
                  "artifact_type"
                ],
                "decorators": [],
                "docstring": "Create ArtifactInfo for a file"
              },
              {
                "name": "_count_lines",
                "lineno": 103,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Count lines in a file"
              },
              {
                "name": "classify_artifact",
                "lineno": 111,
                "args": [
                  "self",
                  "artifact_info"
                ],
                "decorators": [],
                "docstring": "Classify artifact based on content and structure"
              },
              {
                "name": "_assess_complexity",
                "lineno": 120,
                "args": [
                  "self",
                  "artifact_info"
                ],
                "decorators": [],
                "docstring": "Assess complexity of artifact"
              },
              {
                "name": "_categorize_artifact",
                "lineno": 131,
                "args": [
                  "self",
                  "artifact_info"
                ],
                "decorators": [],
                "docstring": "Categorize artifact based on type and location"
              },
              {
                "name": "_assess_priority",
                "lineno": 145,
                "args": [
                  "self",
                  "artifact_info"
                ],
                "decorators": [],
                "docstring": "Assess priority for processing"
              }
            ],
            "classes": [
              {
                "name": "ArtifactInfo",
                "lineno": 14,
                "bases": [],
                "methods": [],
                "docstring": "Information about a discovered artifact"
              },
              {
                "name": "ArtifactDetector",
                "lineno": 25,
                "bases": [],
                "methods": [
                  "__init__",
                  "detect_artifacts",
                  "_should_include_file",
                  "_create_artifact_info",
                  "_count_lines",
                  "classify_artifact",
                  "_assess_complexity",
                  "_categorize_artifact",
                  "_assess_priority"
                ],
                "docstring": "Detects and classifies artifacts in the codebase"
              }
            ],
            "variables": [
              {
                "name": "detector",
                "lineno": 156,
                "value_type": "Call"
              },
              {
                "name": "artifacts",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "high_priority",
                "lineno": 175,
                "value_type": "ListComp"
              },
              {
                "name": "artifacts",
                "lineno": 58,
                "value_type": "List"
              },
              {
                "name": "root",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "stat",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "size",
                "lineno": 122,
                "value_type": "Attribute"
              },
              {
                "name": "lines",
                "lineno": 123,
                "value_type": "IfExp"
              },
              {
                "name": "path_parts",
                "lineno": 133,
                "value_type": "Attribute"
              },
              {
                "name": "artifact_type",
                "lineno": 165,
                "value_type": "Attribute"
              },
              {
                "name": "artifact_info",
                "lineno": 65,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 75,
                "content": "Check exclude patterns"
              },
              {
                "line": 80,
                "content": "Check if file exists and is readable"
              },
              {
                "line": 162,
                "content": "Group by type"
              }
            ],
            "total_lines": 182,
            "code_lines": 147
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/agents/artifact_correlator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 11785,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 287,
                "args": [],
                "decorators": [],
                "docstring": "Test ArtifactCorrelator"
              },
              {
                "name": "__init__",
                "lineno": 33,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "correlate_artifacts",
                "lineno": 44,
                "args": [
                  "self",
                  "artifacts"
                ],
                "decorators": [],
                "docstring": "Find relationships between artifacts"
              },
              {
                "name": "_find_import_relationships",
                "lineno": 95,
                "args": [
                  "self",
                  "artifact1",
                  "artifact2"
                ],
                "decorators": [],
                "docstring": "Find import relationships between artifacts"
              },
              {
                "name": "_find_reference_relationships",
                "lineno": 126,
                "args": [
                  "self",
                  "artifact1",
                  "artifact2"
                ],
                "decorators": [],
                "docstring": "Find reference relationships between artifacts"
              },
              {
                "name": "_find_dependency_relationships",
                "lineno": 155,
                "args": [
                  "self",
                  "artifact1",
                  "artifact2"
                ],
                "decorators": [],
                "docstring": "Find dependency relationships between artifacts"
              },
              {
                "name": "_find_similarity_relationships",
                "lineno": 182,
                "args": [
                  "self",
                  "artifact1",
                  "artifact2"
                ],
                "decorators": [],
                "docstring": "Find similarity relationships between artifacts"
              },
              {
                "name": "_find_configuration_relationships",
                "lineno": 208,
                "args": [
                  "self",
                  "artifact1",
                  "artifact2"
                ],
                "decorators": [],
                "docstring": "Find configuration relationships between artifacts"
              },
              {
                "name": "_get_artifact_content",
                "lineno": 244,
                "args": [
                  "self",
                  "artifact"
                ],
                "decorators": [],
                "docstring": "Get content of an artifact"
              },
              {
                "name": "_calculate_similarity",
                "lineno": 253,
                "args": [
                  "self",
                  "artifact1",
                  "artifact2"
                ],
                "decorators": [],
                "docstring": "Calculate similarity between artifacts"
              }
            ],
            "classes": [
              {
                "name": "ArtifactRelationship",
                "lineno": 19,
                "bases": [],
                "methods": [],
                "docstring": "Relationship between artifacts"
              },
              {
                "name": "ArtifactCorrelator",
                "lineno": 30,
                "bases": [],
                "methods": [
                  "__init__",
                  "correlate_artifacts",
                  "_find_import_relationships",
                  "_find_reference_relationships",
                  "_find_dependency_relationships",
                  "_find_similarity_relationships",
                  "_find_configuration_relationships",
                  "_get_artifact_content",
                  "_calculate_similarity"
                ],
                "docstring": "Finds relationships between artifacts"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 15,
                "value_type": "Call"
              },
              {
                "name": "correlator",
                "lineno": 291,
                "value_type": "Call"
              },
              {
                "name": "sample_artifacts",
                "lineno": 294,
                "value_type": "List"
              },
              {
                "name": "relationships",
                "lineno": 316,
                "value_type": "Call"
              },
              {
                "name": "relationships",
                "lineno": 58,
                "value_type": "List"
              },
              {
                "name": "total_comparisons",
                "lineno": 59,
                "value_type": "BinOp"
              },
              {
                "name": "comparison_count",
                "lineno": 60,
                "value_type": "Constant"
              },
              {
                "name": "relationships",
                "lineno": 101,
                "value_type": "List"
              },
              {
                "name": "relationships",
                "lineno": 132,
                "value_type": "List"
              },
              {
                "name": "relationships",
                "lineno": 161,
                "value_type": "List"
              },
              {
                "name": "relationships",
                "lineno": 188,
                "value_type": "List"
              },
              {
                "name": "relationships",
                "lineno": 214,
                "value_type": "List"
              },
              {
                "name": "data1",
                "lineno": 260,
                "value_type": "Call"
              },
              {
                "name": "data2",
                "lineno": 261,
                "value_type": "Call"
              },
              {
                "name": "lines1",
                "lineno": 264,
                "value_type": "Call"
              },
              {
                "name": "lines2",
                "lineno": 265,
                "value_type": "Call"
              },
              {
                "name": "ratio",
                "lineno": 271,
                "value_type": "BinOp"
              },
              {
                "name": "artifacts",
                "lineno": 56,
                "value_type": "Subscript"
              },
              {
                "name": "imports",
                "lineno": 108,
                "value_type": "Call"
              },
              {
                "name": "target_name",
                "lineno": 109,
                "value_type": "Attribute"
              },
              {
                "name": "content1",
                "lineno": 136,
                "value_type": "Call"
              },
              {
                "name": "target_name",
                "lineno": 137,
                "value_type": "Attribute"
              },
              {
                "name": "similarity_score",
                "lineno": 192,
                "value_type": "Call"
              },
              {
                "name": "funcs1",
                "lineno": 278,
                "value_type": "Call"
              },
              {
                "name": "funcs2",
                "lineno": 279,
                "value_type": "Call"
              },
              {
                "name": "config_content",
                "lineno": 221,
                "value_type": "Call"
              },
              {
                "name": "target_name",
                "lineno": 222,
                "value_type": "Attribute"
              },
              {
                "name": "func_ratio",
                "lineno": 281,
                "value_type": "BinOp"
              },
              {
                "name": "ratio",
                "lineno": 282,
                "value_type": "BinOp"
              },
              {
                "name": "rels",
                "lineno": 78,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 13,
                "content": "Set up logging"
              },
              {
                "line": 51,
                "content": "Limit artifacts for performance"
              },
              {
                "line": 69,
                "content": "Log progress every 100 comparisons"
              },
              {
                "line": 75,
                "content": "Find all types of relationships"
              },
              {
                "line": 81,
                "content": "Limit total relationships"
              },
              {
                "line": 103,
                "content": "Check if artifact1 imports artifact2"
              },
              {
                "line": 134,
                "content": "Check if artifact1 references artifact2 in content"
              },
              {
                "line": 163,
                "content": "Check for configuration dependencies"
              },
              {
                "line": 168,
                "content": "Configuration files often configure Python modules"
              },
              {
                "line": 190,
                "content": "Check for similar structure or patterns"
              },
              {
                "line": 216,
                "content": "Check if one artifact configures another"
              },
              {
                "line": 259,
                "content": "Simple similarity based on structure"
              },
              {
                "line": 263,
                "content": "Compare basic metrics"
              },
              {
                "line": 270,
                "content": "Calculate similarity based on line count ratio"
              },
              {
                "line": 273,
                "content": "Additional similarity factors"
              },
              {
                "line": 293,
                "content": "Create sample artifacts for testing"
              }
            ],
            "total_lines": 329,
            "code_lines": 258
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/agents/__init__.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 30,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [],
            "total_lines": 2,
            "code_lines": 1
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/agents/artifact_optimizer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 14556,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 340,
                "args": [],
                "decorators": [],
                "docstring": "Test ArtifactOptimizer"
              },
              {
                "name": "__init__",
                "lineno": 35,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "optimize_artifacts",
                "lineno": 43,
                "args": [
                  "self",
                  "artifacts"
                ],
                "decorators": [],
                "docstring": "Find optimization opportunities in artifacts"
              },
              {
                "name": "_analyze_artifact",
                "lineno": 69,
                "args": [
                  "self",
                  "artifact"
                ],
                "decorators": [],
                "docstring": "Analyze a single artifact for optimization opportunities"
              },
              {
                "name": "_find_syntax_errors",
                "lineno": 88,
                "args": [
                  "self",
                  "artifact"
                ],
                "decorators": [],
                "docstring": "Find syntax errors in artifacts"
              },
              {
                "name": "_find_performance_issues",
                "lineno": 148,
                "args": [
                  "self",
                  "artifact"
                ],
                "decorators": [],
                "docstring": "Find performance issues in artifacts"
              },
              {
                "name": "_find_quality_issues",
                "lineno": 193,
                "args": [
                  "self",
                  "artifact"
                ],
                "decorators": [],
                "docstring": "Find code quality issues"
              },
              {
                "name": "_find_security_issues",
                "lineno": 244,
                "args": [
                  "self",
                  "artifact"
                ],
                "decorators": [],
                "docstring": "Find security issues in artifacts"
              },
              {
                "name": "_suggest_syntax_fix",
                "lineno": 305,
                "args": [
                  "self",
                  "content",
                  "error_msg"
                ],
                "decorators": [],
                "docstring": "Suggest a fix for a syntax error"
              },
              {
                "name": "_check_indentation",
                "lineno": 317,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Check for indentation issues"
              },
              {
                "name": "_severity_score",
                "lineno": 334,
                "args": [
                  "self",
                  "severity"
                ],
                "decorators": [],
                "docstring": "Convert severity to numeric score for sorting"
              }
            ],
            "classes": [
              {
                "name": "OptimizationOpportunity",
                "lineno": 20,
                "bases": [],
                "methods": [],
                "docstring": "An optimization opportunity found in an artifact"
              },
              {
                "name": "ArtifactOptimizer",
                "lineno": 32,
                "bases": [],
                "methods": [
                  "__init__",
                  "optimize_artifacts",
                  "_analyze_artifact",
                  "_find_syntax_errors",
                  "_find_performance_issues",
                  "_find_quality_issues",
                  "_find_security_issues",
                  "_suggest_syntax_fix",
                  "_check_indentation",
                  "_severity_score"
                ],
                "docstring": "Identifies optimization opportunities in artifacts"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "optimizer",
                "lineno": 344,
                "value_type": "Call"
              },
              {
                "name": "sample_artifacts",
                "lineno": 347,
                "value_type": "List"
              },
              {
                "name": "opportunities",
                "lineno": 360,
                "value_type": "Call"
              },
              {
                "name": "opportunities",
                "lineno": 50,
                "value_type": "List"
              },
              {
                "name": "opportunities",
                "lineno": 74,
                "value_type": "List"
              },
              {
                "name": "artifact_path",
                "lineno": 75,
                "value_type": "Call"
              },
              {
                "name": "opportunities",
                "lineno": 93,
                "value_type": "List"
              },
              {
                "name": "artifact_path",
                "lineno": 94,
                "value_type": "Call"
              },
              {
                "name": "artifact_type",
                "lineno": 95,
                "value_type": "Call"
              },
              {
                "name": "opportunities",
                "lineno": 153,
                "value_type": "List"
              },
              {
                "name": "artifact_path",
                "lineno": 154,
                "value_type": "Call"
              },
              {
                "name": "artifact_type",
                "lineno": 155,
                "value_type": "Call"
              },
              {
                "name": "opportunities",
                "lineno": 198,
                "value_type": "List"
              },
              {
                "name": "artifact_path",
                "lineno": 199,
                "value_type": "Call"
              },
              {
                "name": "artifact_type",
                "lineno": 200,
                "value_type": "Call"
              },
              {
                "name": "opportunities",
                "lineno": 249,
                "value_type": "List"
              },
              {
                "name": "artifact_path",
                "lineno": 250,
                "value_type": "Call"
              },
              {
                "name": "artifact_type",
                "lineno": 251,
                "value_type": "Call"
              },
              {
                "name": "issues",
                "lineno": 319,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 320,
                "value_type": "Call"
              },
              {
                "name": "scores",
                "lineno": 336,
                "value_type": "Dict"
              },
              {
                "name": "parsed_data",
                "lineno": 158,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 161,
                "value_type": "Call"
              },
              {
                "name": "complexity",
                "lineno": 177,
                "value_type": "Call"
              },
              {
                "name": "artifact_opportunities",
                "lineno": 54,
                "value_type": "Call"
              },
              {
                "name": "opts",
                "lineno": 81,
                "value_type": "Call"
              },
              {
                "name": "indentation_issues",
                "lineno": 119,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 208,
                "value_type": "Call"
              },
              {
                "name": "long_lines",
                "lineno": 209,
                "value_type": "ListComp"
              },
              {
                "name": "parsed_data",
                "lineno": 224,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 225,
                "value_type": "Call"
              },
              {
                "name": "credential_patterns",
                "lineno": 259,
                "value_type": "List"
              },
              {
                "name": "dangerous_imports",
                "lineno": 283,
                "value_type": "List"
              },
              {
                "name": "imports",
                "lineno": 284,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 100,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 205,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 256,
                "value_type": "Call"
              },
              {
                "name": "matches",
                "lineno": 267,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 14,
                "content": "Set up logging"
              },
              {
                "line": 60,
                "content": "Sort by severity and confidence"
              },
              {
                "line": 78,
                "content": "Run all optimization checks"
              },
              {
                "line": 102,
                "content": "Try to parse with ast"
              },
              {
                "line": 118,
                "content": "Check for common indentation issues"
              },
              {
                "line": 160,
                "content": "Check for large functions"
              },
              {
                "line": 176,
                "content": "Check for high complexity"
              },
              {
                "line": 207,
                "content": "Check for long lines"
              },
              {
                "line": 223,
                "content": "Check for missing docstrings"
              },
              {
                "line": 258,
                "content": "Check for hardcoded credentials"
              },
              {
                "line": 282,
                "content": "Check for dangerous imports"
              },
              {
                "line": 324,
                "content": "Check for mixed tabs and spaces"
              },
              {
                "line": 328,
                "content": "Check for inconsistent indentation"
              },
              {
                "line": 346,
                "content": "Create sample artifacts for testing"
              }
            ],
            "total_lines": 373,
            "code_lines": 302
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/models/__init__.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 30,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [],
            "total_lines": 2,
            "code_lines": 1
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/utils/__init__.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 30,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [],
            "total_lines": 2,
            "code_lines": 1
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/tests/__init__.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 30,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [],
            "total_lines": 2,
            "code_lines": 1
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/workflows/enhanced_workflow.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 17344,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 15
              },
              {
                "module": "langgraph.graph",
                "names": [
                  "END",
                  "StateGraph"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 17
              },
              {
                "module": "src.artifact_forge.agents.artifact_correlator",
                "names": [
                  "ArtifactCorrelator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 19
              },
              {
                "module": "src.artifact_forge.agents.artifact_detector",
                "names": [
                  "ArtifactDetector"
                ],
                "asnames": [
                  null
                ],
                "lineno": 20
              },
              {
                "module": "src.artifact_forge.agents.artifact_optimizer",
                "names": [
                  "ArtifactOptimizer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 21
              },
              {
                "module": "src.artifact_forge.agents.artifact_parser",
                "names": [
                  "ArtifactParser"
                ],
                "asnames": [
                  null
                ],
                "lineno": 22
              },
              {
                "module": "src.artifact_forge.agents.artifact_synthesizer",
                "names": [
                  "ArtifactSynthesizer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 23
              },
              {
                "module": "ast",
                "asname": null,
                "lineno": 333
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 418,
                "args": [],
                "decorators": [],
                "docstring": "Test the enhanced ArtifactForge workflow"
              },
              {
                "name": "__init__",
                "lineno": 50,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_create_workflow",
                "lineno": 60,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Create LangGraph workflow with enhanced orchestration"
              },
              {
                "name": "_detect_artifacts_node",
                "lineno": 85,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Detect artifacts in the codebase"
              },
              {
                "name": "_parse_artifacts_node",
                "lineno": 103,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Parse artifacts with enhanced error recovery"
              },
              {
                "name": "_correlate_artifacts_node",
                "lineno": 155,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Correlate artifacts with performance limits"
              },
              {
                "name": "_optimize_artifacts_node",
                "lineno": 177,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Find optimization opportunities including syntax errors"
              },
              {
                "name": "_apply_intelligent_fixes_node",
                "lineno": 199,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Apply intelligent fixes based on block analysis"
              },
              {
                "name": "_apply_syntax_fix",
                "lineno": 219,
                "args": [
                  "self",
                  "opportunity",
                  "state"
                ],
                "decorators": [],
                "docstring": "Apply intelligent syntax fix based on block analysis"
              },
              {
                "name": "_fix_block_indentation",
                "lineno": 262,
                "args": [
                  "self",
                  "file_path",
                  "block"
                ],
                "decorators": [],
                "docstring": "Fix indentation within a specific block scope"
              },
              {
                "name": "_synthesize_insights_node",
                "lineno": 297,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Synthesize insights from all analysis"
              },
              {
                "name": "_validate_fixes_node",
                "lineno": 319,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Validate that fixes were successful"
              },
              {
                "name": "run_workflow",
                "lineno": 365,
                "args": [
                  "self",
                  "root_path"
                ],
                "decorators": [],
                "docstring": "Run the enhanced ArtifactForge workflow"
              }
            ],
            "classes": [
              {
                "name": "EnhancedArtifactForgeState",
                "lineno": 31,
                "bases": [],
                "methods": [],
                "docstring": "Enhanced state for ArtifactForge workflow with intelligent fixes"
              },
              {
                "name": "EnhancedArtifactForgeWorkflow",
                "lineno": 47,
                "bases": [],
                "methods": [
                  "__init__",
                  "_create_workflow",
                  "_detect_artifacts_node",
                  "_parse_artifacts_node",
                  "_correlate_artifacts_node",
                  "_optimize_artifacts_node",
                  "_apply_intelligent_fixes_node",
                  "_apply_syntax_fix",
                  "_fix_block_indentation",
                  "_synthesize_insights_node",
                  "_validate_fixes_node",
                  "run_workflow"
                ],
                "docstring": "Enhanced ArtifactForge workflow with LangGraph orchestration"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "workflow",
                "lineno": 423,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 424,
                "value_type": "Call"
              },
              {
                "name": "workflow",
                "lineno": 62,
                "value_type": "Call"
              },
              {
                "name": "parsed_artifacts",
                "lineno": 114,
                "value_type": "List"
              },
              {
                "name": "errors",
                "lineno": 115,
                "value_type": "List"
              },
              {
                "name": "fixes_applied",
                "lineno": 206,
                "value_type": "List"
              },
              {
                "name": "file_path",
                "lineno": 225,
                "value_type": "Subscript"
              },
              {
                "name": "line_number",
                "lineno": 226,
                "value_type": "Call"
              },
              {
                "name": "parsed_artifact",
                "lineno": 229,
                "value_type": "Constant"
              },
              {
                "name": "block_analysis",
                "lineno": 239,
                "value_type": "Subscript"
              },
              {
                "name": "blocks",
                "lineno": 240,
                "value_type": "Call"
              },
              {
                "name": "target_block",
                "lineno": 243,
                "value_type": "Constant"
              },
              {
                "name": "validation_results",
                "lineno": 326,
                "value_type": "List"
              },
              {
                "name": "start_time",
                "lineno": 367,
                "value_type": "Call"
              },
              {
                "name": "initial_state",
                "lineno": 370,
                "value_type": "Call"
              },
              {
                "name": "validation_results",
                "lineno": 447,
                "value_type": "Call"
              },
              {
                "name": "artifacts",
                "lineno": 93,
                "value_type": "Call"
              },
              {
                "name": "relationships",
                "lineno": 167,
                "value_type": "Call"
              },
              {
                "name": "opportunities",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "fix_result",
                "lineno": 251,
                "value_type": "Call"
              },
              {
                "name": "start_line",
                "lineno": 269,
                "value_type": "BinOp"
              },
              {
                "name": "end_line",
                "lineno": 270,
                "value_type": "Subscript"
              },
              {
                "name": "insights",
                "lineno": 305,
                "value_type": "Call"
              },
              {
                "name": "final_state",
                "lineno": 383,
                "value_type": "Call"
              },
              {
                "name": "processing_time",
                "lineno": 386,
                "value_type": "Call"
              },
              {
                "name": "total_artifacts",
                "lineno": 390,
                "value_type": "Call"
              },
              {
                "name": "successful_parses",
                "lineno": 391,
                "value_type": "Call"
              },
              {
                "name": "successful_fixes",
                "lineno": 394,
                "value_type": "Call"
              },
              {
                "name": "status_emoji",
                "lineno": 449,
                "value_type": "IfExp"
              },
              {
                "name": "parsed",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "parsed_artifact",
                "lineno": 232,
                "value_type": "Name"
              },
              {
                "name": "target_block",
                "lineno": 246,
                "value_type": "Name"
              },
              {
                "name": "lines",
                "lineno": 266,
                "value_type": "Call"
              },
              {
                "name": "parse_rate",
                "lineno": 399,
                "value_type": "BinOp"
              },
              {
                "name": "fix_rate",
                "lineno": 400,
                "value_type": "BinOp"
              },
              {
                "name": "final_state",
                "lineno": 412,
                "value_type": "Name"
              },
              {
                "name": "blocks",
                "lineno": 137,
                "value_type": "Call"
              },
              {
                "name": "issues",
                "lineno": 138,
                "value_type": "Call"
              },
              {
                "name": "fix_result",
                "lineno": 211,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 276,
                "value_type": "Subscript"
              },
              {
                "name": "stripped",
                "lineno": 279,
                "value_type": "Call"
              },
              {
                "name": "current_indent",
                "lineno": 280,
                "value_type": "BinOp"
              },
              {
                "name": "new_indent",
                "lineno": 284,
                "value_type": "BinOp"
              },
              {
                "name": "content",
                "lineno": 336,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 25,
                "content": "Set up logging"
              },
              {
                "line": 57,
                "content": "Create LangGraph workflow"
              },
              {
                "line": 64,
                "content": "Add nodes"
              },
              {
                "line": 73,
                "content": "Define workflow edges"
              },
              {
                "line": 119,
                "content": "Convert ArtifactInfo to dict format for parser"
              },
              {
                "line": 135,
                "content": "Log enhanced parser results"
              },
              {
                "line": 228,
                "content": "Find the parsed artifact for this file"
              },
              {
                "line": 238,
                "content": "Use block analysis to understand the scope"
              },
              {
                "line": 242,
                "content": "Find the block containing the problematic line"
              },
              {
                "line": 250,
                "content": "Apply fix within the block scope"
              },
              {
                "line": 268,
                "content": "Fix indentation within the block"
              },
              {
                "line": 272,
                "content": "Apply consistent indentation"
              },
              {
                "line": 278,
                "content": "Ensure consistent indentation"
              },
              {
                "line": 283,
                "content": "Fix indentation to be multiple of 4"
              },
              {
                "line": 287,
                "content": "Write back the fixed content"
              },
              {
                "line": 331,
                "content": "Test if the file now parses correctly"
              },
              {
                "line": 369,
                "content": "Initialize state"
              },
              {
                "line": 381,
                "content": "Run the workflow"
              },
              {
                "line": 385,
                "content": "Calculate confidence and processing time"
              },
              {
                "line": 389,
                "content": "Calculate confidence based on success rates"
              }
            ],
            "total_lines": 455,
            "code_lines": 352
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/workflows/basic_workflow.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 6356,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "src.artifact_forge.agents.artifact_correlator",
                "names": [
                  "ArtifactCorrelator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              },
              {
                "module": "src.artifact_forge.agents.artifact_detector",
                "names": [
                  "ArtifactDetector"
                ],
                "asnames": [
                  null
                ],
                "lineno": 16
              },
              {
                "module": "src.artifact_forge.agents.artifact_parser",
                "names": [
                  "ArtifactParser"
                ],
                "asnames": [
                  null
                ],
                "lineno": 17
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 148,
                "args": [],
                "decorators": [],
                "docstring": "Test ArtifactForge workflow"
              },
              {
                "name": "__init__",
                "lineno": 35,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "run_workflow",
                "lineno": 40,
                "args": [
                  "self",
                  "root_path"
                ],
                "decorators": [],
                "docstring": "Run the complete ArtifactForge workflow"
              },
              {
                "name": "_artifact_to_dict",
                "lineno": 92,
                "args": [
                  "self",
                  "artifact"
                ],
                "decorators": [],
                "docstring": "Convert ArtifactInfo to dictionary"
              },
              {
                "name": "_parsed_artifact_to_dict",
                "lineno": 105,
                "args": [
                  "self",
                  "parsed_artifact"
                ],
                "decorators": [],
                "docstring": "Convert ParsedArtifact to dictionary"
              },
              {
                "name": "_relationship_to_dict",
                "lineno": 115,
                "args": [
                  "self",
                  "relationship"
                ],
                "decorators": [],
                "docstring": "Convert ArtifactRelationship to dictionary"
              },
              {
                "name": "_calculate_confidence",
                "lineno": 126,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Calculate overall confidence score"
              }
            ],
            "classes": [
              {
                "name": "ArtifactForgeState",
                "lineno": 21,
                "bases": [],
                "methods": [],
                "docstring": "State for ArtifactForge workflow"
              },
              {
                "name": "ArtifactForgeWorkflow",
                "lineno": 32,
                "bases": [],
                "methods": [
                  "__init__",
                  "run_workflow",
                  "_artifact_to_dict",
                  "_parsed_artifact_to_dict",
                  "_relationship_to_dict",
                  "_calculate_confidence"
                ],
                "docstring": "Basic ArtifactForge workflow"
              }
            ],
            "variables": [
              {
                "name": "workflow",
                "lineno": 150,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 156,
                "value_type": "Call"
              },
              {
                "name": "start_time",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 43,
                "value_type": "Call"
              },
              {
                "name": "total_artifacts",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "parsed_artifacts",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "error_count",
                "lineno": 134,
                "value_type": "Call"
              },
              {
                "name": "success_rate",
                "lineno": 137,
                "value_type": "IfExp"
              },
              {
                "name": "error_penalty",
                "lineno": 140,
                "value_type": "IfExp"
              },
              {
                "name": "confidence",
                "lineno": 144,
                "value_type": "BinOp"
              },
              {
                "name": "artifacts",
                "lineno": 48,
                "value_type": "Call"
              },
              {
                "name": "parsed_artifacts",
                "lineno": 54,
                "value_type": "List"
              },
              {
                "name": "relationships",
                "lineno": 71,
                "value_type": "Call"
              },
              {
                "name": "end_time",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "parsed",
                "lineno": 56,
                "value_type": "Call"
              },
              {
                "name": "parsed_dict",
                "lineno": 60,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 46,
                "content": "Step 1: Detect artifacts"
              },
              {
                "line": 52,
                "content": "Step 2: Parse artifacts"
              },
              {
                "line": 69,
                "content": "Step 3: Correlate artifacts"
              },
              {
                "line": 77,
                "content": "Calculate processing time and confidence"
              },
              {
                "line": 131,
                "content": "Base confidence on successful processing"
              },
              {
                "line": 136,
                "content": "Calculate confidence based on success rate"
              },
              {
                "line": 155,
                "content": "Run workflow on current directory"
              },
              {
                "line": 158,
                "content": "Print summary"
              }
            ],
            "total_lines": 175,
            "code_lines": 131
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/artifact_forge/workflows/__init__.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 30,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [],
            "total_lines": 2,
            "code_lines": 1
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/mdc-linter.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 9267,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "List",
                  "Any"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              },
              {
                "module": "argparse",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "yaml",
                "asname": null,
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 243,
                "args": [],
                "decorators": [],
                "docstring": "Main function"
              },
              {
                "name": "__init__",
                "lineno": 17,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "log_violation",
                "lineno": 22,
                "args": [
                  "self",
                  "file_path",
                  "message"
                ],
                "decorators": [],
                "docstring": "Log a violation"
              },
              {
                "name": "log_warning",
                "lineno": 26,
                "args": [
                  "self",
                  "file_path",
                  "message"
                ],
                "decorators": [],
                "docstring": "Log a warning"
              },
              {
                "name": "validate_yaml_frontmatter",
                "lineno": 30,
                "args": [
                  "self",
                  "file_path",
                  "content"
                ],
                "decorators": [],
                "docstring": "Validate YAML frontmatter structure"
              },
              {
                "name": "validate_markdown_content",
                "lineno": 92,
                "args": [
                  "self",
                  "file_path",
                  "content"
                ],
                "decorators": [],
                "docstring": "Validate markdown content structure"
              },
              {
                "name": "validate_file_organization",
                "lineno": 119,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Validate file is in appropriate directory"
              },
              {
                "name": "validate_deterministic_editing_compliance",
                "lineno": 147,
                "args": [
                  "self",
                  "file_path",
                  "content"
                ],
                "decorators": [],
                "docstring": "Check for deterministic editing compliance"
              },
              {
                "name": "lint_file",
                "lineno": 168,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Lint a single .mdc file"
              },
              {
                "name": "lint_directory",
                "lineno": 197,
                "args": [
                  "self",
                  "directory"
                ],
                "decorators": [],
                "docstring": "Lint all .mdc files in directory"
              }
            ],
            "classes": [
              {
                "name": "MDCLinter",
                "lineno": 14,
                "bases": [],
                "methods": [
                  "__init__",
                  "log_violation",
                  "log_warning",
                  "validate_yaml_frontmatter",
                  "validate_markdown_content",
                  "validate_file_organization",
                  "validate_deterministic_editing_compliance",
                  "lint_file",
                  "lint_directory"
                ],
                "docstring": "Linter for .mdc files with YAML frontmatter"
              }
            ],
            "variables": [
              {
                "name": "frontmatter_lines",
                "lineno": 51,
                "value_type": "Subscript"
              },
              {
                "name": "content_after_frontmatter",
                "lineno": 100,
                "value_type": "Subscript"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 34,
                "content": "Check for proper YAML frontmatter delimiters"
              },
              {
                "line": 47,
                "content": "Extract frontmatter"
              },
              {
                "line": 54,
                "content": "Parse YAML frontmatter"
              },
              {
                "line": 60,
                "content": "Check required fields"
              },
              {
                "line": 67,
                "content": "Validate field types"
              },
              {
                "line": 80,
                "content": "Validate globs patterns"
              },
              {
                "line": 96,
                "content": "Check for content after frontmatter"
              },
              {
                "line": 106,
                "content": "Check for proper markdown structure"
              },
              {
                "line": 124,
                "content": "Check if file is in a .cursor/rules directory"
              },
              {
                "line": 128,
                "content": "Check if file is in appropriate domain directory"
              },
              {
                "line": 140,
                "content": "Root level .mdc files are also valid"
              },
              {
                "line": 151,
                "content": "Check for non-deterministic patterns"
              },
              {
                "line": 176,
                "content": "Validate YAML frontmatter"
              },
              {
                "line": 180,
                "content": "Validate markdown content"
              },
              {
                "line": 184,
                "content": "Validate file organization"
              },
              {
                "line": 187,
                "content": "Validate deterministic editing compliance"
              },
              {
                "line": 218,
                "content": "Print results"
              },
              {
                "line": 262,
                "content": "Lint a single file"
              },
              {
                "line": 277,
                "content": "Lint a directory"
              }
            ],
            "total_lines": 284,
            "code_lines": 205
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/pytest_wrapper.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1757,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "psutil",
                "asname": null,
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "check_parent_process",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "Check if we're being called by make"
              },
              {
                "name": "main",
                "lineno": 47,
                "args": [],
                "decorators": [],
                "docstring": "Main function"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "original_pytest",
                "lineno": 55,
                "value_type": "Constant"
              },
              {
                "name": "current_process",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "parent",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "parent_name",
                "lineno": 21,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Get current process"
              },
              {
                "line": 18,
                "content": "Check parent process"
              },
              {
                "line": 23,
                "content": "Allow if parent is make"
              },
              {
                "line": 27,
                "content": "Allow if we're in a make environment"
              },
              {
                "line": 31,
                "content": "Block direct execution"
              },
              {
                "line": 42,
                "content": "If we can't check, allow execution (fail open)"
              },
              {
                "line": 49,
                "content": "Check parent process before executing"
              },
              {
                "line": 53,
                "content": "If we get here, execution is allowed"
              },
              {
                "line": 54,
                "content": "Execute the original pytest"
              },
              {
                "line": 61,
                "content": "Execute the original pytest with all arguments"
              }
            ],
            "total_lines": 67,
            "code_lines": 39
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/make_first_check.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2781,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "get_make_targets",
                "lineno": 10,
                "args": [],
                "decorators": [],
                "docstring": "Get all available Make targets."
              },
              {
                "name": "check_command_has_make_target",
                "lineno": 29,
                "args": [
                  "command"
                ],
                "decorators": [],
                "docstring": "Check if a command has a corresponding Make target."
              },
              {
                "name": "suggest_make_target",
                "lineno": 64,
                "args": [
                  "command"
                ],
                "decorators": [],
                "docstring": "Suggest the appropriate Make target for a command."
              },
              {
                "name": "main",
                "lineno": 73,
                "args": [],
                "decorators": [],
                "docstring": "Main function - enforce Make-first approach."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "targets",
                "lineno": 31,
                "value_type": "Call"
              },
              {
                "name": "command_mappings",
                "lineno": 34,
                "value_type": "Dict"
              },
              {
                "name": "command",
                "lineno": 79,
                "value_type": "Call"
              },
              {
                "name": "targets",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "alternatives",
                "lineno": 56,
                "value_type": "List"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Use hardcoded targets since parsing is unreliable"
              },
              {
                "line": 33,
                "content": "Common command to target mappings"
              },
              {
                "line": 55,
                "content": "Try alternative targets"
              }
            ],
            "total_lines": 101,
            "code_lines": 76
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/fix_mypy_issues.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 7454,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "add_missing_type_annotations",
                "lineno": 13,
                "args": [
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Add missing type annotations to a file"
              },
              {
                "name": "infer_parameter_type",
                "lineno": 120,
                "args": [
                  "param_name"
                ],
                "decorators": [],
                "docstring": "Infer parameter type based on name"
              },
              {
                "name": "infer_variable_type",
                "lineno": 152,
                "args": [
                  "value"
                ],
                "decorators": [],
                "docstring": "Infer variable type from assignment value"
              },
              {
                "name": "fix_mypy_issues",
                "lineno": 191,
                "args": [
                  "directories"
                ],
                "decorators": [],
                "docstring": "Fix mypy issues in all files"
              },
              {
                "name": "main",
                "lineno": 213,
                "args": [],
                "decorators": [],
                "docstring": "Main function"
              }
            ],
            "classes": [],
            "variables": [],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 8,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 22,
                "content": "Add missing return type annotations"
              },
              {
                "line": 24,
                "content": "Find function definitions without return types"
              },
              {
                "line": 26,
                "content": "Add -> None for functions without explicit return"
              },
              {
                "line": 30,
                "content": "Add missing parameter type annotations"
              },
              {
                "line": 32,
                "content": "Find function definitions with parameters"
              },
              {
                "line": 37,
                "content": "Add type annotations to parameters"
              },
              {
                "line": 42,
                "content": "Infer type based on parameter name"
              },
              {
                "line": 53,
                "content": "Add missing variable type annotations"
              },
              {
                "line": 55,
                "content": "Find variable assignments"
              },
              {
                "line": 61,
                "content": "Skip if already has type annotation"
              },
              {
                "line": 65,
                "content": "Infer type from value"
              },
              {
                "line": 71,
                "content": "Add missing imports"
              },
              {
                "line": 73,
                "content": "Check if typing imports are needed"
              },
              {
                "line": 93,
                "content": "Find where to insert imports"
              },
              {
                "line": 103,
                "content": "Insert imports here"
              },
              {
                "line": 156,
                "content": "String literals"
              },
              {
                "line": 162,
                "content": "Numeric literals"
              },
              {
                "line": 168,
                "content": "Boolean literals"
              },
              {
                "line": 172,
                "content": "List literals"
              },
              {
                "line": 176,
                "content": "Dict literals"
              },
              {
                "line": 180,
                "content": "Tuple literals"
              },
              {
                "line": 184,
                "content": "Function calls"
              }
            ],
            "total_lines": 231,
            "code_lines": 163
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/mdc-linter.py.backup4",
          "domain": "python",
          "file_type": "unknown",
          "size_bytes": 8731,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/create_proper_notebook.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 9427,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "nbformat",
                "asname": "nbf",
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "create_gemini_notebook",
                "lineno": 13,
                "args": [],
                "decorators": [],
                "docstring": "Create a proper Gemini notebook using nbformat"
              },
              {
                "name": "main",
                "lineno": 291,
                "args": [],
                "decorators": [],
                "docstring": "Create and save the notebook"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "nb",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "title_cell",
                "lineno": 38,
                "value_type": "Call"
              },
              {
                "name": "imports_cell",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "data_cell",
                "lineno": 76,
                "value_type": "Call"
              },
              {
                "name": "credentials_cell",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "cred_setup_cell",
                "lineno": 135,
                "value_type": "Call"
              },
              {
                "name": "analysis_cell",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "llm_setup_cell",
                "lineno": 178,
                "value_type": "Call"
              },
              {
                "name": "viz_cell",
                "lineno": 202,
                "value_type": "Call"
              },
              {
                "name": "plot_cell",
                "lineno": 205,
                "value_type": "Call"
              },
              {
                "name": "service_cell",
                "lineno": 237,
                "value_type": "Call"
              },
              {
                "name": "summary_cell",
                "lineno": 252,
                "value_type": "Call"
              },
              {
                "name": "summary_code_cell",
                "lineno": 255,
                "value_type": "Call"
              },
              {
                "name": "nb",
                "lineno": 294,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 297,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Create a new notebook with proper kernel specification"
              },
              {
                "line": 19,
                "content": "Set the kernel metadata to use the correct Python environment"
              },
              {
                "line": 37,
                "content": "Add title cell"
              },
              {
                "line": 48,
                "content": "Add imports cell"
              },
              {
                "line": 65,
                "content": "LangChain imports"
              },
              {
                "line": 75,
                "content": "Add data loading cell"
              },
              {
                "line": 80,
                "content": "Get the project root directory (Jupyter notebooks don't have __file__)"
              },
              {
                "line": 81,
                "content": "We know the notebook is in data/billing_reports/analysis_data/"
              },
              {
                "line": 82,
                "content": "So we need to go up 3 levels to get to the project root"
              },
              {
                "line": 86,
                "content": "If we're in the analysis_data directory, go up 3 levels"
              },
              {
                "line": 94,
                "content": "Assume we're in the project root"
              },
              {
                "line": 102,
                "content": "Check if data files exist"
              },
              {
                "line": 118,
                "content": "Load daily data"
              },
              {
                "line": 122,
                "content": "Load summary data"
              },
              {
                "line": 126,
                "content": "Display first few rows"
              },
              {
                "line": 131,
                "content": "Add credentials cell"
              },
              {
                "line": 134,
                "content": "Add credential setup cell"
              },
              {
                "line": 140,
                "content": "Try to get credentials from Google Cloud"
              },
              {
                "line": 166,
                "content": "Setup credentials"
              },
              {
                "line": 172,
                "content": "Add analysis cell"
              },
              {
                "line": 177,
                "content": "Add LLM setup cell"
              },
              {
                "line": 188,
                "content": "Initialize Gemini LLM"
              },
              {
                "line": 201,
                "content": "Add visualization cell"
              },
              {
                "line": 204,
                "content": "Add plotting cell"
              },
              {
                "line": 210,
                "content": "First, let's see what data we have"
              },
              {
                "line": 217,
                "content": "Create daily cost aggregation"
              },
              {
                "line": 224,
                "content": "Create interactive cost trend visualization"
              },
              {
                "line": 236,
                "content": "Add service breakdown cell"
              },
              {
                "line": 239,
                "content": "Calculate total cost per service"
              },
              {
                "line": 251,
                "content": "Add summary cell"
              },
              {
                "line": 254,
                "content": "Add summary code cell"
              },
              {
                "line": 272,
                "content": "Add all cells to notebook"
              },
              {
                "line": 293,
                "content": "Create notebook"
              },
              {
                "line": 296,
                "content": "Save to file"
              }
            ],
            "total_lines": 310,
            "code_lines": 218
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/launch_gemini_analysis.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2496,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "launch_gemini_analysis",
                "lineno": 13,
                "args": [],
                "decorators": [],
                "docstring": "Launch the Gemini analysis notebook with proper environment"
              },
              {
                "name": "main",
                "lineno": 54,
                "args": [],
                "decorators": [],
                "docstring": "Main function to launch Gemini analysis"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "success",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "notebook_path",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 23,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 22,
                "content": "Create the notebook first"
              },
              {
                "line": 41,
                "content": "Launch Jupyter with explicit environment"
              }
            ],
            "total_lines": 75,
            "code_lines": 56
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/call_ghostbusters_properly.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1772,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "GhostbustersOrchestrator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 17
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 50,
                "args": [],
                "decorators": [],
                "docstring": "Main function"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "orchestrator",
                "lineno": 22,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 26,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Import Ghostbusters components"
              },
              {
                "line": 21,
                "content": "Create orchestrator"
              },
              {
                "line": 24,
                "content": "Run Ghostbusters"
              },
              {
                "line": 32,
                "content": "Print state attributes"
              },
              {
                "line": 55,
                "content": "Check if we're in the right directory"
              },
              {
                "line": 61,
                "content": "Run Ghostbusters"
              }
            ],
            "total_lines": 67,
            "code_lines": 40
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/duet_ai_billing_checker.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 17569,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 455,
                "args": [],
                "decorators": [],
                "docstring": "Main function to run the Duet AI analysis"
              },
              {
                "name": "__init__",
                "lineno": 20,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the checker"
              },
              {
                "name": "get_project_info",
                "lineno": 25,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get current project information"
              },
              {
                "name": "check_duet_ai_services",
                "lineno": 55,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Check for Duet AI related services"
              },
              {
                "name": "get_service_usage",
                "lineno": 110,
                "args": [
                  "self",
                  "service_id"
                ],
                "decorators": [],
                "docstring": "Get usage for a specific service"
              },
              {
                "name": "get_billing_data",
                "lineno": 179,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get actual billing data"
              },
              {
                "name": "check_duet_ai_features",
                "lineno": 197,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Check for specific Duet AI features"
              },
              {
                "name": "analyze_duet_ai_usage",
                "lineno": 255,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze Duet AI usage patterns"
              },
              {
                "name": "calculate_duet_ai_usage_level",
                "lineno": 281,
                "args": [
                  "self",
                  "enabled_services"
                ],
                "decorators": [],
                "docstring": "Calculate Duet AI usage level"
              },
              {
                "name": "estimate_duet_ai_cost",
                "lineno": 291,
                "args": [
                  "self",
                  "enabled_services"
                ],
                "decorators": [],
                "docstring": "Estimate Duet AI related costs"
              },
              {
                "name": "generate_recommendations",
                "lineno": 320,
                "args": [
                  "self",
                  "enabled_services"
                ],
                "decorators": [],
                "docstring": "Generate recommendations based on Duet AI usage"
              },
              {
                "name": "generate_report",
                "lineno": 354,
                "args": [
                  "self",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Generate a comprehensive Duet AI report"
              },
              {
                "name": "save_analysis",
                "lineno": 435,
                "args": [
                  "self",
                  "analysis",
                  "filename"
                ],
                "decorators": [],
                "docstring": "Save analysis to JSON file"
              }
            ],
            "classes": [
              {
                "name": "DuetAIBillingChecker",
                "lineno": 17,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_project_info",
                  "check_duet_ai_services",
                  "get_service_usage",
                  "get_billing_data",
                  "check_duet_ai_features",
                  "analyze_duet_ai_usage",
                  "calculate_duet_ai_usage_level",
                  "estimate_duet_ai_cost",
                  "generate_recommendations",
                  "generate_report",
                  "save_analysis"
                ],
                "docstring": "Check for Duet AI usage and billing data"
              }
            ],
            "variables": [
              {
                "name": "checker",
                "lineno": 460,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 464,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 471,
                "value_type": "Call"
              },
              {
                "name": "saved_file",
                "lineno": 475,
                "value_type": "Call"
              },
              {
                "name": "duet_ai_services",
                "lineno": 57,
                "value_type": "Dict"
              },
              {
                "name": "results",
                "lineno": 72,
                "value_type": "Dict"
              },
              {
                "name": "features",
                "lineno": 199,
                "value_type": "Dict"
              },
              {
                "name": "analysis",
                "lineno": 257,
                "value_type": "Dict"
              },
              {
                "name": "enabled_services",
                "lineno": 267,
                "value_type": "ListComp"
              },
              {
                "name": "costs",
                "lineno": 293,
                "value_type": "Dict"
              },
              {
                "name": "recommendations",
                "lineno": 322,
                "value_type": "List"
              },
              {
                "name": "report",
                "lineno": 356,
                "value_type": "List"
              },
              {
                "name": "project_info",
                "lineno": 362,
                "value_type": "Call"
              },
              {
                "name": "duet_ai_services",
                "lineno": 371,
                "value_type": "Call"
              },
              {
                "name": "enabled_count",
                "lineno": 374,
                "value_type": "Constant"
              },
              {
                "name": "duet_ai_features",
                "lineno": 391,
                "value_type": "Call"
              },
              {
                "name": "analysis_data",
                "lineno": 402,
                "value_type": "Call"
              },
              {
                "name": "costs",
                "lineno": 413,
                "value_type": "Call"
              },
              {
                "name": "recommendations",
                "lineno": 426,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 28,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "billing_accounts",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 204,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 220,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 236,
                "value_type": "Call"
              },
              {
                "name": "status",
                "lineno": 376,
                "value_type": "IfExp"
              },
              {
                "name": "description",
                "lineno": 377,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 442,
                "value_type": "BinOp"
              },
              {
                "name": "result",
                "lineno": 77,
                "value_type": "Call"
              },
              {
                "name": "enabled",
                "lineno": 89,
                "value_type": "Compare"
              },
              {
                "name": "result",
                "lineno": 115,
                "value_type": "Call"
              },
              {
                "name": "budgets",
                "lineno": 190,
                "value_type": "Call"
              },
              {
                "name": "models",
                "lineno": 210,
                "value_type": "Call"
              },
              {
                "name": "endpoints",
                "lineno": 226,
                "value_type": "Call"
              },
              {
                "name": "usage",
                "lineno": 98,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "usage",
                "lineno": 383,
                "value_type": "Subscript"
              },
              {
                "name": "status",
                "lineno": 397,
                "value_type": "IfExp"
              },
              {
                "name": "services",
                "lineno": 135,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 143,
                "value_type": "Call"
              },
              {
                "name": "databases",
                "lineno": 149,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "buckets",
                "lineno": 163,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 76,
                "content": "Check if service is enabled"
              },
              {
                "line": 96,
                "content": "Get usage if enabled"
              },
              {
                "line": 113,
                "content": "Try to get resource usage for the service"
              },
              {
                "line": 182,
                "content": "Try to get billing export data"
              },
              {
                "line": 201,
                "content": "Check for AI/ML features"
              },
              {
                "line": 203,
                "content": "Check for Vertex AI models"
              },
              {
                "line": 218,
                "content": "Check for AI Platform endpoints"
              },
              {
                "line": 234,
                "content": "Check for Duet AI Companion"
              },
              {
                "line": 266,
                "content": "Analyze Duet AI usage"
              },
              {
                "line": 361,
                "content": "Project Information"
              },
              {
                "line": 370,
                "content": "Duet AI Services"
              },
              {
                "line": 390,
                "content": "Duet AI Features"
              },
              {
                "line": 401,
                "content": "Analysis"
              },
              {
                "line": 412,
                "content": "Cost Analysis"
              },
              {
                "line": 425,
                "content": "Recommendations"
              },
              {
                "line": 462,
                "content": "Run comprehensive analysis"
              },
              {
                "line": 470,
                "content": "Generate and display report"
              },
              {
                "line": 474,
                "content": "Save analysis to file"
              }
            ],
            "total_lines": 487,
            "code_lines": 397
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/gcp_billing_analyzer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 0,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [],
            "total_lines": 1,
            "code_lines": 0
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/gcp_billing_daily_reporter.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 31302,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "matplotlib.pyplot",
                "asname": "plt",
                "lineno": 14
              },
              {
                "module": "pandas",
                "asname": "pd",
                "lineno": 15
              },
              {
                "module": "plotly.graph_objects",
                "asname": "go",
                "lineno": 16
              },
              {
                "module": "seaborn",
                "asname": "sns",
                "lineno": 17
              },
              {
                "module": "plotly.subplots",
                "names": [
                  "make_subplots"
                ],
                "asnames": [
                  null
                ],
                "lineno": 18
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 774,
                "args": [],
                "decorators": [],
                "docstring": "Main function to run the daily billing analysis"
              },
              {
                "name": "__init__",
                "lineno": 24,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the reporter"
              },
              {
                "name": "get_project_info",
                "lineno": 31,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get current project information"
              },
              {
                "name": "get_daily_usage_data",
                "lineno": 61,
                "args": [
                  "self",
                  "days"
                ],
                "decorators": [],
                "docstring": "Get daily usage data for the specified number of days"
              },
              {
                "name": "create_dataframe",
                "lineno": 136,
                "args": [
                  "self",
                  "daily_data"
                ],
                "decorators": [],
                "docstring": "Convert daily data to pandas DataFrame"
              },
              {
                "name": "generate_daily_summary",
                "lineno": 170,
                "args": [
                  "self",
                  "df"
                ],
                "decorators": [],
                "docstring": "Generate daily cost summary"
              },
              {
                "name": "create_visualizations",
                "lineno": 186,
                "args": [
                  "self",
                  "df",
                  "daily_summary"
                ],
                "decorators": [],
                "docstring": "Create various visualizations"
              },
              {
                "name": "save_data_for_analysis",
                "lineno": 356,
                "args": [
                  "self",
                  "df",
                  "daily_summary"
                ],
                "decorators": [],
                "docstring": "Save data in various formats for further analysis"
              },
              {
                "name": "create_jupyter_notebook_template",
                "lineno": 414,
                "args": [
                  "self",
                  "df",
                  "daily_summary"
                ],
                "decorators": [],
                "docstring": "Create a Jupyter notebook template for further analysis"
              },
              {
                "name": "generate_report",
                "lineno": 617,
                "args": [
                  "self",
                  "df",
                  "daily_summary"
                ],
                "decorators": [],
                "docstring": "Generate a comprehensive daily billing report"
              },
              {
                "name": "run_daily_analysis",
                "lineno": 705,
                "args": [
                  "self",
                  "days"
                ],
                "decorators": [],
                "docstring": "Run complete daily billing analysis"
              }
            ],
            "classes": [
              {
                "name": "GCPBillingDailyReporter",
                "lineno": 21,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_project_info",
                  "get_daily_usage_data",
                  "create_dataframe",
                  "generate_daily_summary",
                  "create_visualizations",
                  "save_data_for_analysis",
                  "create_jupyter_notebook_template",
                  "generate_report",
                  "run_daily_analysis"
                ],
                "docstring": "Generate daily billing reports with visualizations"
              }
            ],
            "variables": [
              {
                "name": "reporter",
                "lineno": 776,
                "value_type": "Call"
              },
              {
                "name": "notebook_content",
                "lineno": 420,
                "value_type": "Dict"
              },
              {
                "name": "result",
                "lineno": 34,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "billing_accounts",
                "lineno": 48,
                "value_type": "Call"
              },
              {
                "name": "end_date",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "start_date",
                "lineno": 65,
                "value_type": "BinOp"
              },
              {
                "name": "daily_data",
                "lineno": 73,
                "value_type": "List"
              },
              {
                "name": "flattened_data",
                "lineno": 140,
                "value_type": "List"
              },
              {
                "name": "df",
                "lineno": 161,
                "value_type": "Call"
              },
              {
                "name": "daily_summary",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "viz_dir",
                "lineno": 198,
                "value_type": "BinOp"
              },
              {
                "name": "saved_files",
                "lineno": 201,
                "value_type": "Dict"
              },
              {
                "name": "daily_trend_file",
                "lineno": 223,
                "value_type": "BinOp"
              },
              {
                "name": "service_pivot",
                "lineno": 230,
                "value_type": "Call"
              },
              {
                "name": "service_breakdown_file",
                "lineno": 243,
                "value_type": "BinOp"
              },
              {
                "name": "fig",
                "lineno": 249,
                "value_type": "Call"
              },
              {
                "name": "service_totals",
                "lineno": 290,
                "value_type": "Call"
              },
              {
                "name": "interactive_file",
                "lineno": 321,
                "value_type": "BinOp"
              },
              {
                "name": "heatmap_data",
                "lineno": 327,
                "value_type": "Call"
              },
              {
                "name": "heatmap_file",
                "lineno": 345,
                "value_type": "BinOp"
              },
              {
                "name": "analysis_dir",
                "lineno": 364,
                "value_type": "BinOp"
              },
              {
                "name": "saved_files",
                "lineno": 367,
                "value_type": "Dict"
              },
              {
                "name": "notebook_content",
                "lineno": 402,
                "value_type": "Call"
              },
              {
                "name": "notebook_file",
                "lineno": 403,
                "value_type": "BinOp"
              },
              {
                "name": "report",
                "lineno": 620,
                "value_type": "List"
              },
              {
                "name": "project_info",
                "lineno": 626,
                "value_type": "Call"
              },
              {
                "name": "date_range",
                "lineno": 635,
                "value_type": "JoinedStr"
              },
              {
                "name": "total_cost",
                "lineno": 642,
                "value_type": "Call"
              },
              {
                "name": "avg_daily_cost",
                "lineno": 643,
                "value_type": "Call"
              },
              {
                "name": "max_daily_cost",
                "lineno": 644,
                "value_type": "Call"
              },
              {
                "name": "min_daily_cost",
                "lineno": 645,
                "value_type": "Call"
              },
              {
                "name": "service_totals",
                "lineno": 655,
                "value_type": "Call"
              },
              {
                "name": "cost_trend",
                "lineno": 665,
                "value_type": "Call"
              },
              {
                "name": "trend_direction",
                "lineno": 666,
                "value_type": "IfExp"
              },
              {
                "name": "daily_data",
                "lineno": 712,
                "value_type": "Call"
              },
              {
                "name": "df",
                "lineno": 719,
                "value_type": "Call"
              },
              {
                "name": "daily_summary",
                "lineno": 720,
                "value_type": "Call"
              },
              {
                "name": "viz_files",
                "lineno": 728,
                "value_type": "Call"
              },
              {
                "name": "analysis_files",
                "lineno": 732,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 736,
                "value_type": "Call"
              },
              {
                "name": "report_file",
                "lineno": 739,
                "value_type": "BinOp"
              },
              {
                "name": "date",
                "lineno": 79,
                "value_type": "BinOp"
              },
              {
                "name": "day_data",
                "lineno": 90,
                "value_type": "Dict"
              },
              {
                "name": "total_cost",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "date",
                "lineno": 143,
                "value_type": "Subscript"
              },
              {
                "name": "total_cost",
                "lineno": 144,
                "value_type": "Subscript"
              },
              {
                "name": "service_data",
                "lineno": 278,
                "value_type": "Subscript"
              },
              {
                "name": "percentage",
                "lineno": 660,
                "value_type": "IfExp"
              },
              {
                "name": "cloud_functions_cost",
                "lineno": 83,
                "value_type": "BinOp"
              },
              {
                "name": "cloud_run_cost",
                "lineno": 84,
                "value_type": "BinOp"
              },
              {
                "name": "cloud_functions_cost",
                "lineno": 86,
                "value_type": "Constant"
              },
              {
                "name": "cloud_run_cost",
                "lineno": 87,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 71,
                "content": "Generate mock billing data since we can't access real billing API"
              },
              {
                "line": 72,
                "content": "In a real implementation, you would use the Cloud Billing API"
              },
              {
                "line": 75,
                "content": "Services to track"
              },
              {
                "line": 77,
                "content": "Generate realistic mock data based on your actual infrastructure"
              },
              {
                "line": 81,
                "content": "Base costs (before Cloud Functions deletion)"
              },
              {
                "line": 89,
                "content": "Generate daily data"
              },
              {
                "line": 120,
                "content": "Calculate total daily cost"
              },
              {
                "line": 139,
                "content": "Flatten the data for DataFrame"
              },
              {
                "line": 193,
                "content": "Set style"
              },
              {
                "line": 197,
                "content": "Create output directory"
              },
              {
                "line": 203,
                "content": "1. Daily Total Cost Trend"
              },
              {
                "line": 228,
                "content": "2. Service Cost Breakdown (Stacked Bar)"
              },
              {
                "line": 248,
                "content": "3. Interactive Plotly Dashboard"
              },
              {
                "line": 264,
                "content": "Daily total cost"
              },
              {
                "line": 276,
                "content": "Service breakdown"
              },
              {
                "line": 289,
                "content": "Cost by service type"
              },
              {
                "line": 303,
                "content": "Cost trend with area"
              },
              {
                "line": 325,
                "content": "4. Heatmap of costs by service and day"
              },
              {
                "line": 363,
                "content": "Create analysis directory"
              },
              {
                "line": 369,
                "content": "1. CSV files"
              },
              {
                "line": 375,
                "content": "2. JSON files"
              },
              {
                "line": 391,
                "content": "3. Parquet files (for efficient analysis)"
              },
              {
                "line": 401,
                "content": "4. Jupyter notebook template"
              },
              {
                "line": 625,
                "content": "Project Information"
              },
              {
                "line": 634,
                "content": "Date Range"
              },
              {
                "line": 641,
                "content": "Cost Summary"
              },
              {
                "line": 654,
                "content": "Service Breakdown"
              },
              {
                "line": 664,
                "content": "Cost Trends"
              },
              {
                "line": 678,
                "content": "Recommendations"
              },
              {
                "line": 711,
                "content": "Get daily usage data"
              },
              {
                "line": 718,
                "content": "Create DataFrame"
              },
              {
                "line": 726,
                "content": "Generate visualizations"
              },
              {
                "line": 730,
                "content": "Save data for analysis"
              },
              {
                "line": 734,
                "content": "Generate report"
              },
              {
                "line": 738,
                "content": "Save report"
              },
              {
                "line": 743,
                "content": "Display report"
              },
              {
                "line": 746,
                "content": "Summary"
              }
            ],
            "total_lines": 782,
            "code_lines": 655
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/delete_all_cloud_functions.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 6386,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 161,
                "args": [],
                "decorators": [],
                "docstring": "Main function to delete all Cloud Functions"
              },
              {
                "name": "__init__",
                "lineno": 16,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the deleter"
              },
              {
                "name": "get_project_info",
                "lineno": 21,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get current project information"
              },
              {
                "name": "list_all_functions",
                "lineno": 37,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "List all Cloud Functions"
              },
              {
                "name": "delete_function",
                "lineno": 63,
                "args": [
                  "self",
                  "function_name",
                  "region"
                ],
                "decorators": [],
                "docstring": "Delete a single Cloud Function"
              },
              {
                "name": "delete_all_functions",
                "lineno": 91,
                "args": [
                  "self",
                  "confirm"
                ],
                "decorators": [],
                "docstring": "Delete all Cloud Functions"
              },
              {
                "name": "estimate_cost_savings",
                "lineno": 143,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Estimate cost savings from deleting functions"
              }
            ],
            "classes": [
              {
                "name": "CloudFunctionDeleter",
                "lineno": 13,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_project_info",
                  "list_all_functions",
                  "delete_function",
                  "delete_all_functions",
                  "estimate_cost_savings"
                ],
                "docstring": "Delete all Cloud Functions safely"
              }
            ],
            "variables": [
              {
                "name": "deleter",
                "lineno": 166,
                "value_type": "Call"
              },
              {
                "name": "project_info",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 174,
                "value_type": "Call"
              },
              {
                "name": "savings",
                "lineno": 181,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 109,
                "value_type": "IfExp"
              },
              {
                "name": "deleted_count",
                "lineno": 117,
                "value_type": "Constant"
              },
              {
                "name": "failed_count",
                "lineno": 118,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 130,
                "value_type": "Dict"
              },
              {
                "name": "functions",
                "lineno": 145,
                "value_type": "IfExp"
              },
              {
                "name": "monthly_cost",
                "lineno": 151,
                "value_type": "BinOp"
              },
              {
                "name": "annual_cost",
                "lineno": 152,
                "value_type": "BinOp"
              },
              {
                "name": "result",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 68,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 96,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 102,
                "value_type": "Call"
              },
              {
                "name": "name",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 123,
                "value_type": "IfExp"
              },
              {
                "name": "name",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 54,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 53,
                "content": "Extract just the function name from the full path"
              },
              {
                "line": 122,
                "content": "Extract just the function name from the full path"
              },
              {
                "line": 150,
                "content": "Estimate $2.40 per function per month"
              },
              {
                "line": 168,
                "content": "Get project info"
              },
              {
                "line": 173,
                "content": "List current functions"
              },
              {
                "line": 180,
                "content": "Estimate cost savings"
              },
              {
                "line": 188,
                "content": "Delete all functions"
              }
            ],
            "total_lines": 203,
            "code_lines": 150
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/call_ghostbusters_encoding_issue.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1762,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "GhostbustersOrchestrator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 47,
                "args": [],
                "decorators": [],
                "docstring": "Main function"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "orchestrator",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 22,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Create orchestrator"
              },
              {
                "line": 20,
                "content": "Run Ghostbusters"
              },
              {
                "line": 52,
                "content": "Check if we're in the right directory"
              },
              {
                "line": 57,
                "content": "Run Ghostbusters"
              }
            ],
            "total_lines": 63,
            "code_lines": 40
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/mdc-linter.py.backup3",
          "domain": "python",
          "file_type": "unknown",
          "size_bytes": 8753,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/robust_file_reader.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3379,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 71,
                "args": [],
                "decorators": [],
                "docstring": "Test the robust file reader"
              },
              {
                "name": "__init__",
                "lineno": 15,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "read_file",
                "lineno": 31,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Read file with multiple encoding attempts"
              },
              {
                "name": "can_read_file",
                "lineno": 51,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Check if file can be read with any encoding"
              },
              {
                "name": "get_failed_files_report",
                "lineno": 55,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get report of files that couldn't be read"
              },
              {
                "name": "_suggest_new_encodings",
                "lineno": 63,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Suggest new encodings based on failures"
              }
            ],
            "classes": [
              {
                "name": "RobustFileReader",
                "lineno": 12,
                "bases": [],
                "methods": [
                  "__init__",
                  "read_file",
                  "can_read_file",
                  "get_failed_files_report",
                  "_suggest_new_encodings"
                ],
                "docstring": "Reads files with multiple encoding support"
              }
            ],
            "variables": [
              {
                "name": "reader",
                "lineno": 73,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 76,
                "value_type": "Call"
              },
              {
                "name": "normal_file",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 90,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 95,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 81,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Common encodings to try"
              },
              {
                "line": 36,
                "content": "Try each encoding"
              },
              {
                "line": 46,
                "content": "If all encodings fail, log and return None"
              },
              {
                "line": 65,
                "content": "If we have many failures, suggest adding more encodings"
              },
              {
                "line": 75,
                "content": "Test with the problematic file"
              },
              {
                "line": 88,
                "content": "Test with a normal file"
              },
              {
                "line": 94,
                "content": "Show failed files report"
              }
            ],
            "total_lines": 104,
            "code_lines": 77
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/fix_subprocess_vulnerabilities.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 7693,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "find_subprocess_usage",
                "lineno": 13,
                "args": [
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Find subprocess usage in a file"
              },
              {
                "name": "fix_file",
                "lineno": 68,
                "args": [
                  "file_path",
                  "dry_run"
                ],
                "decorators": [],
                "docstring": "Fix subprocess usage in a file"
              },
              {
                "name": "main",
                "lineno": 127,
                "args": [],
                "decorators": [],
                "docstring": "Main function"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "issues",
                "lineno": 15,
                "value_type": "List"
              },
              {
                "name": "issues",
                "lineno": 70,
                "value_type": "Call"
              },
              {
                "name": "files_to_fix",
                "lineno": 133,
                "value_type": "List"
              },
              {
                "name": "dry_run",
                "lineno": 183,
                "value_type": "BoolOp"
              },
              {
                "name": "success_count",
                "lineno": 192,
                "value_type": "Constant"
              },
              {
                "name": "total_issues",
                "lineno": 193,
                "value_type": "Constant"
              },
              {
                "name": "file_path",
                "lineno": 196,
                "value_type": "Call"
              },
              {
                "name": "issues",
                "lineno": 202,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 88,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "line_idx",
                "lineno": 93,
                "value_type": "BinOp"
              },
              {
                "name": "import_section",
                "lineno": 103,
                "value_type": "UnaryOp"
              },
              {
                "name": "success",
                "lineno": 206,
                "value_type": "Call"
              },
              {
                "name": "secure_import",
                "lineno": 111,
                "value_type": "Constant"
              },
              {
                "name": "import_section",
                "lineno": 106,
                "value_type": "Name"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 23,
                "content": "Skip docstring lines that mention secure_execute but don't actually use it"
              },
              {
                "line": 29,
                "content": "Check for subprocess imports"
              },
              {
                "line": 36,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 40,
                "content": "Check for secure_execute usage"
              },
              {
                "line": 51,
                "content": "Check for secure_execute usage"
              },
              {
                "line": 85,
                "content": "Apply fixes"
              },
              {
                "line": 91,
                "content": "Apply fixes in reverse order to maintain line numbers"
              },
              {
                "line": 97,
                "content": "Add import if needed"
              },
              {
                "line": 102,
                "content": "Find import section"
              },
              {
                "line": 110,
                "content": "Add secure_execute import"
              },
              {
                "line": 115,
                "content": "Write back"
              },
              {
                "line": 132,
                "content": "Files to check (updated list based on Ghostbusters analysis)"
              },
              {
                "line": 134,
                "content": "Core files"
              },
              {
                "line": 150,
                "content": "Root level files"
              },
              {
                "line": 161,
                "content": "Additional files found by Ghostbusters"
              },
              {
                "line": 166,
                "content": "Script files"
              },
              {
                "line": 171,
                "content": "Migration templates"
              },
              {
                "line": 182,
                "content": "Check if dry run"
              }
            ],
            "total_lines": 225,
            "code_lines": 167
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/mdc-linter.py.backup",
          "domain": "python",
          "file_type": "unknown",
          "size_bytes": 11633,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/migrate_subprocess_to_secure_shell.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 7061,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 182,
                "args": [],
                "decorators": [],
                "docstring": "Main migration script"
              },
              {
                "name": "__init__",
                "lineno": 14,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "find_subprocess_files",
                "lineno": 18,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Find all Python files with subprocess usage"
              },
              {
                "name": "analyze_subprocess_usage",
                "lineno": 32,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Analyze subprocess usage in a file"
              },
              {
                "name": "_extract_args",
                "lineno": 64,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Extract arguments from subprocess call"
              },
              {
                "name": "generate_migration_plan",
                "lineno": 76,
                "args": [
                  "self",
                  "analysis_results"
                ],
                "decorators": [],
                "docstring": "Generate migration plan"
              },
              {
                "name": "create_migration_template",
                "lineno": 109,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Create migration template for a file"
              },
              {
                "name": "run_migration_analysis",
                "lineno": 142,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Run full migration analysis"
              }
            ],
            "classes": [
              {
                "name": "SubprocessMigrator",
                "lineno": 11,
                "bases": [],
                "methods": [
                  "__init__",
                  "find_subprocess_files",
                  "analyze_subprocess_usage",
                  "_extract_args",
                  "generate_migration_plan",
                  "create_migration_template",
                  "run_migration_analysis"
                ],
                "docstring": "Migrate subprocess calls to secure shell service"
              }
            ],
            "variables": [
              {
                "name": "migrator",
                "lineno": 187,
                "value_type": "Call"
              },
              {
                "name": "subprocess_files",
                "lineno": 20,
                "value_type": "List"
              },
              {
                "name": "args",
                "lineno": 66,
                "value_type": "List"
              },
              {
                "name": "plan",
                "lineno": 78,
                "value_type": "List"
              },
              {
                "name": "total_files",
                "lineno": 83,
                "value_type": "Call"
              },
              {
                "name": "total_calls",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "template",
                "lineno": 111,
                "value_type": "JoinedStr"
              },
              {
                "name": "subprocess_files",
                "lineno": 146,
                "value_type": "Call"
              },
              {
                "name": "analysis_results",
                "lineno": 149,
                "value_type": "List"
              },
              {
                "name": "plan",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "plan_file",
                "lineno": 160,
                "value_type": "Call"
              },
              {
                "name": "templates_dir",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "subprocess_calls",
                "lineno": 38,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 151,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "file_path",
                "lineno": 174,
                "value_type": "Call"
              },
              {
                "name": "template",
                "lineno": 175,
                "value_type": "Call"
              },
              {
                "name": "template_file",
                "lineno": 176,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 25,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 113,
                "content": "Replace subprocess imports"
              },
              {
                "line": 114,
                "content": "OLD:"
              },
              {
                "line": 115,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 116,
                "content": "NEW:"
              },
              {
                "line": 120,
                "content": "Replace subprocess calls"
              },
              {
                "line": 121,
                "content": "OLD:"
              },
              {
                "line": 122,
                "content": "result = secure_execute(['ls', '-la'], capture_output=True, text=True)"
              },
              {
                "line": 123,
                "content": "NEW:"
              },
              {
                "line": 124,
                "content": "result = await secure_execute('ls -la', timeout=10)"
              },
              {
                "line": 126,
                "content": "OLD:"
              },
              {
                "line": 127,
                "content": "process = subprocess.Popen(['long_running_command'], stdout=subprocess.PIPE)"
              },
              {
                "line": 128,
                "content": "NEW:"
              },
              {
                "line": 129,
                "content": "result = await secure_execute('long_running_command', timeout=30)"
              },
              {
                "line": 131,
                "content": "Add async wrapper if needed"
              },
              {
                "line": 156,
                "content": "Generate migration plan"
              },
              {
                "line": 159,
                "content": "Save migration plan"
              },
              {
                "line": 168,
                "content": "Create migration templates"
              }
            ],
            "total_lines": 196,
            "code_lines": 140
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/actual_billing_analyzer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 20124,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 483,
                "args": [],
                "decorators": [],
                "docstring": "Main function to run the billing discrepancy analysis"
              },
              {
                "name": "__init__",
                "lineno": 19,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the analyzer"
              },
              {
                "name": "get_project_info",
                "lineno": 24,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get current project information"
              },
              {
                "name": "get_actual_usage",
                "lineno": 54,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get actual usage data for the current month"
              },
              {
                "name": "get_cost_estimates",
                "lineno": 180,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get cost estimates based on actual usage"
              },
              {
                "name": "get_high_cost_services",
                "lineno": 286,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Identify services that might be causing high costs"
              },
              {
                "name": "analyze_billing_discrepancy",
                "lineno": 332,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Analyze why estimated costs don't match actual $50 charge"
              },
              {
                "name": "generate_report",
                "lineno": 382,
                "args": [
                  "self",
                  "analysis"
                ],
                "decorators": [],
                "docstring": "Generate a comprehensive billing discrepancy report"
              },
              {
                "name": "save_analysis",
                "lineno": 463,
                "args": [
                  "self",
                  "analysis",
                  "filename"
                ],
                "decorators": [],
                "docstring": "Save analysis to JSON file"
              }
            ],
            "classes": [
              {
                "name": "ActualBillingAnalyzer",
                "lineno": 16,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_project_info",
                  "get_actual_usage",
                  "get_cost_estimates",
                  "get_high_cost_services",
                  "analyze_billing_discrepancy",
                  "generate_report",
                  "save_analysis"
                ],
                "docstring": "Get actual billing data from GCP"
              }
            ],
            "variables": [
              {
                "name": "analyzer",
                "lineno": 488,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 492,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 499,
                "value_type": "Call"
              },
              {
                "name": "saved_file",
                "lineno": 503,
                "value_type": "Call"
              },
              {
                "name": "high_cost_indicators",
                "lineno": 288,
                "value_type": "List"
              },
              {
                "name": "usage",
                "lineno": 290,
                "value_type": "Call"
              },
              {
                "name": "expensive_services",
                "lineno": 319,
                "value_type": "List"
              },
              {
                "name": "analysis",
                "lineno": 334,
                "value_type": "Dict"
              },
              {
                "name": "estimated_total",
                "lineno": 344,
                "value_type": "Call"
              },
              {
                "name": "actual_charge",
                "lineno": 345,
                "value_type": "Constant"
              },
              {
                "name": "discrepancy",
                "lineno": 346,
                "value_type": "BinOp"
              },
              {
                "name": "report",
                "lineno": 384,
                "value_type": "List"
              },
              {
                "name": "project_info",
                "lineno": 390,
                "value_type": "Call"
              },
              {
                "name": "discrepancy",
                "lineno": 399,
                "value_type": "Call"
              },
              {
                "name": "high_cost_services",
                "lineno": 414,
                "value_type": "Call"
              },
              {
                "name": "causes",
                "lineno": 422,
                "value_type": "Call"
              },
              {
                "name": "costs",
                "lineno": 430,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "billing_accounts",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "start_date",
                "lineno": 58,
                "value_type": "Call"
              },
              {
                "name": "end_date",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "services_to_check",
                "lineno": 64,
                "value_type": "List"
              },
              {
                "name": "usage_data",
                "lineno": 79,
                "value_type": "Dict"
              },
              {
                "name": "cf_count",
                "lineno": 184,
                "value_type": "Constant"
              },
              {
                "name": "cr_count",
                "lineno": 185,
                "value_type": "Constant"
              },
              {
                "name": "fs_count",
                "lineno": 186,
                "value_type": "Constant"
              },
              {
                "name": "storage_count",
                "lineno": 187,
                "value_type": "Constant"
              },
              {
                "name": "usage",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "costs",
                "lineno": 204,
                "value_type": "Dict"
              },
              {
                "name": "total_estimated",
                "lineno": 275,
                "value_type": "Call"
              },
              {
                "name": "causes",
                "lineno": 360,
                "value_type": "List"
              },
              {
                "name": "output_path",
                "lineno": 470,
                "value_type": "BinOp"
              },
              {
                "name": "resources",
                "lineno": 296,
                "value_type": "Subscript"
              },
              {
                "name": "count",
                "lineno": 297,
                "value_type": "Call"
              },
              {
                "name": "count",
                "lineno": 437,
                "value_type": "Call"
              },
              {
                "name": "monthly",
                "lineno": 438,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "resources",
                "lineno": 193,
                "value_type": "Subscript"
              },
              {
                "name": "cf_count",
                "lineno": 195,
                "value_type": "Call"
              },
              {
                "name": "cf_result",
                "lineno": 102,
                "value_type": "Call"
              },
              {
                "name": "cr_count",
                "lineno": 197,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 108,
                "value_type": "Call"
              },
              {
                "name": "cr_result",
                "lineno": 116,
                "value_type": "Call"
              },
              {
                "name": "fs_count",
                "lineno": 199,
                "value_type": "Call"
              },
              {
                "name": "services",
                "lineno": 122,
                "value_type": "Call"
              },
              {
                "name": "fs_result",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "storage_count",
                "lineno": 201,
                "value_type": "Call"
              },
              {
                "name": "databases",
                "lineno": 144,
                "value_type": "Call"
              },
              {
                "name": "st_result",
                "lineno": 152,
                "value_type": "Call"
              },
              {
                "name": "buckets",
                "lineno": 158,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 57,
                "content": "Get current month's usage"
              },
              {
                "line": 63,
                "content": "Get usage for specific services"
              },
              {
                "line": 83,
                "content": "Try to get usage data for this service"
              },
              {
                "line": 97,
                "content": "Service is enabled, get more details"
              },
              {
                "line": 100,
                "content": "Get specific resource usage"
              },
              {
                "line": 183,
                "content": "Get resource counts"
              },
              {
                "line": 203,
                "content": "Calculate estimated costs"
              },
              {
                "line": 274,
                "content": "Calculate total"
              },
              {
                "line": 293,
                "content": "Check for high resource counts"
              },
              {
                "line": 302,
                "content": "Check specific services"
              },
              {
                "line": 318,
                "content": "Check for expensive services"
              },
              {
                "line": 343,
                "content": "Calculate discrepancy"
              },
              {
                "line": 358,
                "content": "Identify possible causes"
              },
              {
                "line": 389,
                "content": "Project Information"
              },
              {
                "line": 398,
                "content": "Discrepancy Analysis"
              },
              {
                "line": 413,
                "content": "High Cost Services"
              },
              {
                "line": 421,
                "content": "Possible Causes"
              },
              {
                "line": 429,
                "content": "Cost Breakdown"
              },
              {
                "line": 444,
                "content": "Recommendations"
              },
              {
                "line": 490,
                "content": "Run comprehensive analysis"
              },
              {
                "line": 498,
                "content": "Generate and display report"
              },
              {
                "line": 502,
                "content": "Save analysis to file"
              }
            ],
            "total_lines": 515,
            "code_lines": 420
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/launch_billing_analysis.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2348,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "launch_jupyter_analysis",
                "lineno": 13,
                "args": [],
                "decorators": [],
                "docstring": "Launch Jupyter notebook with billing analysis"
              },
              {
                "name": "main",
                "lineno": 65,
                "args": [],
                "decorators": [],
                "docstring": "Main function to launch Jupyter analysis"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "success",
                "lineno": 70,
                "value_type": "Call"
              },
              {
                "name": "data_dir",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "required_files",
                "lineno": 23,
                "value_type": "List"
              },
              {
                "name": "missing_files",
                "lineno": 29,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 53,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Check if billing data exists"
              },
              {
                "line": 22,
                "content": "Check for required files"
              },
              {
                "line": 47,
                "content": "Change to the data directory and launch Jupyter"
              },
              {
                "line": 52,
                "content": "Launch Jupyter"
              }
            ],
            "total_lines": 81,
            "code_lines": 57
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/ghostbusters_check.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1909,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "run_ghostbusters"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              },
              {
                "module": "src.secure_shell_service.elegant_client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 16
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "project_root",
                "lineno": 12,
                "value_type": "Attribute"
              },
              {
                "name": "result",
                "lineno": 52,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 25,
                "value_type": "Await"
              },
              {
                "name": "cleanup_result",
                "lineno": 37,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Add project root to path"
              },
              {
                "line": 24,
                "content": "Run Ghostbusters directly (no shell command needed!)"
              },
              {
                "line": 32,
                "content": "If we need to run any shell commands, use secure shell service"
              },
              {
                "line": 36,
                "content": "Example: Use secure shell for any cleanup if needed"
              }
            ],
            "total_lines": 64,
            "code_lines": 41
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/type_assertion_enforcer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4697,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 119,
                "args": [],
                "decorators": [],
                "docstring": "Main function to enforce type assertion patterns"
              },
              {
                "name": "__init__",
                "lineno": 16,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "check_file",
                "lineno": 38,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Check a file for proper type assertions"
              },
              {
                "name": "_check_function",
                "lineno": 61,
                "args": [
                  "self",
                  "func",
                  "content"
                ],
                "decorators": [],
                "docstring": "Check a function for type assertion violations"
              },
              {
                "name": "_has_pattern",
                "lineno": 80,
                "args": [
                  "self",
                  "func",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Check if function contains the pattern"
              },
              {
                "name": "_has_proper_assertion",
                "lineno": 85,
                "args": [
                  "self",
                  "func",
                  "pattern_info"
                ],
                "decorators": [],
                "docstring": "Check if function has proper type assertion"
              },
              {
                "name": "enforce_patterns",
                "lineno": 97,
                "args": [
                  "self",
                  "directory"
                ],
                "decorators": [],
                "docstring": "Enforce type assertion patterns across directory"
              }
            ],
            "classes": [
              {
                "name": "TypeAssertionEnforcer",
                "lineno": 13,
                "bases": [],
                "methods": [
                  "__init__",
                  "check_file",
                  "_check_function",
                  "_has_pattern",
                  "_has_proper_assertion",
                  "enforce_patterns"
                ],
                "docstring": "Enforces proper type assertion patterns"
              }
            ],
            "variables": [
              {
                "name": "enforcer",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 125,
                "value_type": "Call"
              },
              {
                "name": "violations",
                "lineno": 40,
                "value_type": "List"
              },
              {
                "name": "violations",
                "lineno": 63,
                "value_type": "List"
              },
              {
                "name": "func_code",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "func_code",
                "lineno": 91,
                "value_type": "Call"
              },
              {
                "name": "assert_pattern",
                "lineno": 94,
                "value_type": "JoinedStr"
              },
              {
                "name": "tree",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 44,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 108,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 65,
                "content": "Check return type annotation"
              },
              {
                "line": 70,
                "content": "Look for json.load() patterns"
              },
              {
                "line": 93,
                "content": "Look for assert isinstance pattern"
              }
            ],
            "total_lines": 144,
            "code_lines": 111
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/regenerate_mdc_files.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1124,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "mdc_generator",
                "names": [
                  "MDCGenerator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Regenerate all .mdc files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "generator",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "mdc_files",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "invalid_files",
                "lineno": 29,
                "value_type": "List"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 9,
                "content": "Add src to path"
              },
              {
                "line": 19,
                "content": "Find all .mdc files"
              },
              {
                "line": 28,
                "content": "Regenerate each file"
              }
            ],
            "total_lines": 49,
            "code_lines": 32
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/notebook_model.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 7089,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "dataclasses",
                "names": [
                  "asdict",
                  "dataclass"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "create_gemini_notebook",
                "lineno": 134,
                "args": [],
                "decorators": [],
                "docstring": "Create Gemini notebook using structured JSON modeling"
              },
              {
                "name": "__post_init__",
                "lineno": 34,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__post_init__",
                "lineno": 51,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "to_json",
                "lineno": 67,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Convert to JSON string"
              },
              {
                "name": "__init__",
                "lineno": 75,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "add_imports_cell",
                "lineno": 94,
                "args": [
                  "self",
                  "imports"
                ],
                "decorators": [],
                "docstring": "Add imports cell using structured data"
              },
              {
                "name": "add_markdown_cell",
                "lineno": 118,
                "args": [
                  "self",
                  "title",
                  "content"
                ],
                "decorators": [],
                "docstring": "Add markdown cell using structured data"
              },
              {
                "name": "add_code_cell",
                "lineno": 124,
                "args": [
                  "self",
                  "code_lines"
                ],
                "decorators": [],
                "docstring": "Add code cell using structured data"
              },
              {
                "name": "build_notebook",
                "lineno": 129,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build the complete notebook model"
              }
            ],
            "classes": [
              {
                "name": "ImportStatement",
                "lineno": 15,
                "bases": [],
                "methods": [],
                "docstring": "Structured import statement"
              },
              {
                "name": "CodeCell",
                "lineno": 25,
                "bases": [],
                "methods": [
                  "__post_init__"
                ],
                "docstring": "Structured code cell"
              },
              {
                "name": "MarkdownCell",
                "lineno": 44,
                "bases": [],
                "methods": [
                  "__post_init__"
                ],
                "docstring": "Structured markdown cell"
              },
              {
                "name": "NotebookModel",
                "lineno": 59,
                "bases": [],
                "methods": [
                  "to_json"
                ],
                "docstring": "Structured notebook model"
              },
              {
                "name": "NotebookBuilder",
                "lineno": 72,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_imports_cell",
                  "add_markdown_cell",
                  "add_code_cell",
                  "build_notebook"
                ],
                "docstring": "Structured notebook builder using JSON modeling"
              }
            ],
            "variables": [
              {
                "name": "imports",
                "lineno": 138,
                "value_type": "List"
              },
              {
                "name": "builder",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "notebook",
                "lineno": 207,
                "value_type": "Call"
              },
              {
                "name": "notebook_json",
                "lineno": 213,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 216,
                "value_type": "Call"
              },
              {
                "name": "source_lines",
                "lineno": 96,
                "value_type": "List"
              },
              {
                "name": "cell",
                "lineno": 115,
                "value_type": "Call"
              },
              {
                "name": "source_lines",
                "lineno": 120,
                "value_type": "BinOp"
              },
              {
                "name": "cell",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "cell",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "modules_str",
                "lineno": 107,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 98,
                "content": "Convert structured imports to code"
              },
              {
                "line": 137,
                "content": "Define imports as structured data"
              },
              {
                "line": 172,
                "content": "Build notebook using structured approach"
              },
              {
                "line": 175,
                "content": "Add header"
              },
              {
                "line": 188,
                "content": "Add imports cell"
              },
              {
                "line": 191,
                "content": "Add data loading cell"
              },
              {
                "line": 206,
                "content": "Build and return JSON"
              },
              {
                "line": 212,
                "content": "Generate notebook JSON"
              },
              {
                "line": 215,
                "content": "Save to file"
              }
            ],
            "total_lines": 226,
            "code_lines": 175
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/fix_code_quality.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 6281,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 1
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "code_quality_system.quality_model",
                "names": [
                  "CodeQualityModel"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              },
              {
                "module": "argparse",
                "asname": null,
                "lineno": 20
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 18,
                "args": [],
                "decorators": [],
                "docstring": "Main function for the code quality fixer"
              },
              {
                "name": "analyze_all_files",
                "lineno": 61,
                "args": [
                  "model",
                  "directories",
                  "verbose"
                ],
                "decorators": [],
                "docstring": "Analyze all files for linting issues"
              },
              {
                "name": "fix_all_files",
                "lineno": 98,
                "args": [
                  "model",
                  "directories",
                  "verbose"
                ],
                "decorators": [],
                "docstring": "Fix all files"
              },
              {
                "name": "analyze_and_fix_all_files",
                "lineno": 107,
                "args": [
                  "model",
                  "directories",
                  "verbose"
                ],
                "decorators": [],
                "docstring": "Analyze, fix, and re-analyze all files"
              },
              {
                "name": "print_summary",
                "lineno": 138,
                "args": [
                  "results"
                ],
                "decorators": [],
                "docstring": "Print a summary of the results"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "parser",
                "lineno": 22,
                "value_type": "Call"
              },
              {
                "name": "args",
                "lineno": 38,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 67,
                "value_type": "Dict"
              },
              {
                "name": "before_results",
                "lineno": 114,
                "value_type": "Call"
              },
              {
                "name": "fix_results",
                "lineno": 117,
                "value_type": "Call"
              },
              {
                "name": "after_results",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 44,
                "value_type": "Call"
              },
              {
                "name": "before",
                "lineno": 142,
                "value_type": "Subscript"
              },
              {
                "name": "after",
                "lineno": 143,
                "value_type": "Subscript"
              },
              {
                "name": "improvement",
                "lineno": 144,
                "value_type": "Subscript"
              },
              {
                "name": "results",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 50,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "issue_code",
                "lineno": 90,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 3,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Add src to path"
              },
              {
                "line": 52,
                "content": "Output results"
              },
              {
                "line": 88,
                "content": "Count issues by type"
              },
              {
                "line": 141,
                "content": "Combined analysis and fix"
              },
              {
                "line": 172,
                "content": "Single analysis or fix"
              },
              {
                "line": 174,
                "content": "Analysis only"
              },
              {
                "line": 184,
                "content": "Fix only"
              }
            ],
            "total_lines": 194,
            "code_lines": 148
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/safe_model_update.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2242,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "model_manager",
                "names": [
                  "ModelManager"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 20,
                "args": [],
                "decorators": [],
                "docstring": "Demonstrate safe model manipulation"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "manager",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 43,
                "value_type": "Call"
              },
              {
                "name": "backups",
                "lineno": 62,
                "value_type": "Call"
              },
              {
                "name": "schema",
                "lineno": 69,
                "value_type": "Dict"
              },
              {
                "name": "is_valid",
                "lineno": 71,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 10,
                "content": "Add src to path for imports"
              },
              {
                "line": 25,
                "content": "Initialize model manager"
              },
              {
                "line": 28,
                "content": "Example 1: Safely update a model field"
              },
              {
                "line": 41,
                "content": "Example 2: Add a new domain"
              },
              {
                "line": 60,
                "content": "Example 3: List available backups"
              },
              {
                "line": 67,
                "content": "Example 4: Validate model structure"
              }
            ],
            "total_lines": 82,
            "code_lines": 58
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/test_gemini_auth.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2131,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "test_gemini_auth",
                "lineno": 10,
                "args": [],
                "decorators": [],
                "docstring": "Test Gemini API authentication using Google Cloud"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "success",
                "lineno": 71,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "access_token",
                "lineno": 48,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 14,
                "content": "Check if gcloud is available"
              },
              {
                "line": 25,
                "content": "Check if authenticated"
              },
              {
                "line": 40,
                "content": "Get access token"
              },
              {
                "line": 54,
                "content": "Set environment variable"
              }
            ],
            "total_lines": 76,
            "code_lines": 58
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/mdc-linter.py.working",
          "domain": "python",
          "file_type": "unknown",
          "size_bytes": 9287,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/mdc-linter.py.backup2",
          "domain": "python",
          "file_type": "unknown",
          "size_bytes": 11661,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/pre_test_model_check.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4373,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              }
            ],
            "functions": [
              {
                "name": "load_project_model",
                "lineno": 17,
                "args": [],
                "decorators": [],
                "docstring": "Load the project model registry."
              },
              {
                "name": "check_testing_domain",
                "lineno": 34,
                "args": [
                  "model"
                ],
                "decorators": [],
                "docstring": "Check the testing domain requirements."
              },
              {
                "name": "run_model_driven_tests",
                "lineno": 52,
                "args": [
                  "model",
                  "testing_domain"
                ],
                "decorators": [],
                "docstring": "Run tests according to the model-driven approach."
              },
              {
                "name": "main",
                "lineno": 114,
                "args": [],
                "decorators": [],
                "docstring": "Main function - enforce model-driven testing."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "model_path",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "testing_domain",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "requirements",
                "lineno": 44,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "testing_domain",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 91,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 104,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 10,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 56,
                "content": "Step 1: Lint with flake8"
              },
              {
                "line": 75,
                "content": "Step 2: Format with black"
              },
              {
                "line": 88,
                "content": "Step 3: Type check with mypy"
              },
              {
                "line": 101,
                "content": "Step 4: Run pytest"
              },
              {
                "line": 119,
                "content": "Step 1: Load the model (MANDATORY)"
              },
              {
                "line": 123,
                "content": "Step 2: Check testing domain"
              },
              {
                "line": 126,
                "content": "Step 3: Run model-driven tests"
              }
            ],
            "total_lines": 135,
            "code_lines": 100
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/monitor_jupyter_logs.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 3944,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "time",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 98
              }
            ],
            "functions": [
              {
                "name": "monitor_jupyter_logs",
                "lineno": 14,
                "args": [],
                "decorators": [],
                "docstring": "Monitor Jupyter server logs and notebook activity"
              },
              {
                "name": "check_notebook_status",
                "lineno": 82,
                "args": [],
                "decorators": [],
                "docstring": "Check the current status of the notebook"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "notebook_path",
                "lineno": 39,
                "value_type": "Call"
              },
              {
                "name": "last_modified",
                "lineno": 42,
                "value_type": "IfExp"
              },
              {
                "name": "notebook_path",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 25,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 101,
                "value_type": "Call"
              },
              {
                "name": "current_modified",
                "lineno": 51,
                "value_type": "Attribute"
              },
              {
                "name": "result",
                "lineno": 60,
                "value_type": "Call"
              },
              {
                "name": "last_modified",
                "lineno": 56,
                "value_type": "Name"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 23,
                "content": "Check if Jupyter is running"
              },
              {
                "line": 38,
                "content": "Monitor notebook file for changes"
              },
              {
                "line": 49,
                "content": "Check if notebook file was modified"
              },
              {
                "line": 58,
                "content": "Check for kernel activity (simplified)"
              },
              {
                "line": 96,
                "content": "Check if it's a valid JSON"
              },
              {
                "line": 113,
                "content": "Check notebook status first"
              }
            ],
            "total_lines": 120,
            "code_lines": 93
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/fix_test_indentation.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 2955,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "fix_test_file",
                "lineno": 11,
                "args": [
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix indentation issues in a test file"
              },
              {
                "name": "main",
                "lineno": 65,
                "args": [],
                "decorators": [],
                "docstring": "Main function to fix all test files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "pattern",
                "lineno": 19,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 24,
                "value_type": "List"
              },
              {
                "name": "test_files",
                "lineno": 70,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 16,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 18,
                "content": "Remove merge conflict markers"
              },
              {
                "line": 22,
                "content": "Fix common indentation issues"
              },
              {
                "line": 27,
                "content": "Skip empty lines"
              },
              {
                "line": 32,
                "content": "Fix indentation for class definitions"
              },
              {
                "line": 37,
                "content": "Fix indentation for method definitions"
              },
              {
                "line": 42,
                "content": "Fix indentation for docstrings"
              },
              {
                "line": 47,
                "content": "Fix indentation for assert statements"
              },
              {
                "line": 52,
                "content": "Fix indentation for variable assignments"
              },
              {
                "line": 57,
                "content": "Keep other lines as is"
              },
              {
                "line": 60,
                "content": "Write the fixed content"
              },
              {
                "line": 69,
                "content": "Get all test files"
              }
            ],
            "total_lines": 99,
            "code_lines": 65
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/model_driven_test_recovery.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 19089,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "load_model_registry",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Load the project model registry"
              },
              {
                "name": "get_test_patterns",
                "lineno": 21,
                "args": [],
                "decorators": [],
                "docstring": "Get test patterns from projected artifacts"
              },
              {
                "name": "create_basic_validation_test",
                "lineno": 37,
                "args": [],
                "decorators": [],
                "docstring": "Create a basic validation test using projected artifact patterns"
              },
              {
                "name": "create_code_quality_test",
                "lineno": 145,
                "args": [],
                "decorators": [],
                "docstring": "Create a code quality test using projected artifact patterns"
              },
              {
                "name": "create_security_test",
                "lineno": 262,
                "args": [],
                "decorators": [],
                "docstring": "Create a security test using projected artifact patterns"
              },
              {
                "name": "create_healthcare_test",
                "lineno": 372,
                "args": [],
                "decorators": [],
                "docstring": "Create a healthcare CDC test using projected artifact patterns"
              },
              {
                "name": "create_uv_package_test",
                "lineno": 494,
                "args": [],
                "decorators": [],
                "docstring": "Create a UV package management test using projected artifact patterns"
              },
              {
                "name": "recover_test_file",
                "lineno": 615,
                "args": [
                  "file_path",
                  "test_type"
                ],
                "decorators": [],
                "docstring": "Recover a test file using model-driven patterns"
              },
              {
                "name": "main",
                "lineno": 641,
                "args": [],
                "decorators": [],
                "docstring": "Main function to recover all broken test files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "broken_tests",
                "lineno": 653,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 621,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 623,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 625,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 627,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 629,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 632,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 50,
                "content": "Add src to path for imports"
              },
              {
                "line": 56,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 60,
                "content": "Test that security manager can be initialized"
              },
              {
                "line": 67,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 71,
                "content": "Test that validator can be initialized"
              },
              {
                "line": 78,
                "content": "Mock the DeploymentManager class"
              },
              {
                "line": 82,
                "content": "Test that deployment manager can be initialized"
              },
              {
                "line": 89,
                "content": "Mock the MonitoringDashboard class"
              },
              {
                "line": 94,
                "content": "Test that monitoring dashboard can be initialized"
              },
              {
                "line": 101,
                "content": "Mock the OpenFlowQuickstartApp class"
              },
              {
                "line": 105,
                "content": "Test that Streamlit app can be initialized"
              },
              {
                "line": 158,
                "content": "Add src to path for imports"
              },
              {
                "line": 176,
                "content": "Parse with AST to check syntax"
              },
              {
                "line": 194,
                "content": "Test streamlit app structure"
              },
              {
                "line": 202,
                "content": "Count elements"
              },
              {
                "line": 220,
                "content": "Basic structure validation"
              },
              {
                "line": 276,
                "content": "Add src to path for imports"
              },
              {
                "line": 282,
                "content": "Mock SECURITY_CONFIG"
              },
              {
                "line": 289,
                "content": "Test security configuration"
              },
              {
                "line": 299,
                "content": "Mock the SecurityManager class"
              },
              {
                "line": 304,
                "content": "Test that credentials are encrypted"
              },
              {
                "line": 313,
                "content": "Mock the InputValidator class"
              },
              {
                "line": 317,
                "content": "Test that input validation works"
              },
              {
                "line": 332,
                "content": "Test that invalid URLs are detected"
              },
              {
                "line": 385,
                "content": "Add src to path for imports"
              },
              {
                "line": 391,
                "content": "Mock the healthcare CDC domain model"
              },
              {
                "line": 395,
                "content": "Test that domain model can be initialized"
              },
              {
                "line": 403,
                "content": "Mock patient info structure"
              },
              {
                "line": 411,
                "content": "Test patient info structure"
              },
              {
                "line": 422,
                "content": "Mock provider info structure"
              },
              {
                "line": 430,
                "content": "Test provider info structure"
              },
              {
                "line": 441,
                "content": "Mock healthcare claim structure"
              },
              {
                "line": 450,
                "content": "Test claim structure"
              },
              {
                "line": 508,
                "content": "Add src to path for imports"
              },
              {
                "line": 535,
                "content": "Test that it contains required sections"
              },
              {
                "line": 544,
                "content": "Mock dependencies"
              },
              {
                "line": 554,
                "content": "Test dependencies"
              },
              {
                "line": 564,
                "content": "Mock dev dependencies"
              },
              {
                "line": 572,
                "content": "Test dev dependencies"
              },
              {
                "line": 619,
                "content": "Create the appropriate test content based on type"
              },
              {
                "line": 631,
                "content": "Default to basic validation pattern"
              },
              {
                "line": 634,
                "content": "Write the recovered content"
              },
              {
                "line": 645,
                "content": "Load model registry"
              },
              {
                "line": 649,
                "content": "Get test patterns"
              },
              {
                "line": 652,
                "content": "List of broken test files to recover"
              },
              {
                "line": 673,
                "content": "Recover each broken test file"
              }
            ],
            "total_lines": 683,
            "code_lines": 469
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/brutal_encoding_fixer.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 4012,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 81,
                "args": [],
                "decorators": [],
                "docstring": "Main function - fix encoding with extreme prejudice"
              },
              {
                "name": "__init__",
                "lineno": 15,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "read_file_brutally",
                "lineno": 20,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Read file with extreme prejudice - force UTF-8"
              },
              {
                "name": "fix_encoding_brutally",
                "lineno": 40,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Fix file encoding by forcing UTF-8"
              },
              {
                "name": "fix_directory_brutally",
                "lineno": 61,
                "args": [
                  "self",
                  "directory"
                ],
                "decorators": [],
                "docstring": "Fix all Python files in directory with extreme prejudice"
              },
              {
                "name": "get_report",
                "lineno": 71,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get brutal fixing report"
              }
            ],
            "classes": [
              {
                "name": "BrutalEncodingFixer",
                "lineno": 12,
                "bases": [],
                "methods": [
                  "__init__",
                  "read_file_brutally",
                  "fix_encoding_brutally",
                  "fix_directory_brutally",
                  "get_report"
                ],
                "docstring": "Fixes encoding issues by forcing UTF-8 with extreme prejudice"
              }
            ],
            "variables": [
              {
                "name": "fixer",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "problem_file",
                "lineno": 92,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 113,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 105,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "raw_bytes",
                "lineno": 32,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 26,
                "content": "Try UTF-8 first"
              },
              {
                "line": 30,
                "content": "Force UTF-8 with error handling"
              },
              {
                "line": 33,
                "content": "Decode with errors='replace' - replace bad bytes with"
              },
              {
                "line": 46,
                "content": "Read with brutal method"
              },
              {
                "line": 51,
                "content": "Write back as UTF-8"
              },
              {
                "line": 91,
                "content": "Fix the problematic file"
              },
              {
                "line": 103,
                "content": "Test reading after fix"
              },
              {
                "line": 112,
                "content": "Show report"
              }
            ],
            "total_lines": 121,
            "code_lines": 89
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/github_integration/copilot_review_automation.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 9276,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "src.secure_shell_service.elegant_client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 20
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 25
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 43,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "CopilotReviewAutomation",
                "lineno": 40,
                "bases": [],
                "methods": [
                  "__init__"
                ],
                "docstring": "Automate GitHub Copilot code reviews with our security-first approach"
              }
            ],
            "variables": [
              {
                "name": "project_root",
                "lineno": 15,
                "value_type": "Attribute"
              },
              {
                "name": "automation",
                "lineno": 204,
                "value_type": "Call"
              },
              {
                "name": "pr_number",
                "lineno": 207,
                "value_type": "Call"
              },
              {
                "name": "review_result",
                "lineno": 215,
                "value_type": "Await"
              },
              {
                "name": "security_result",
                "lineno": 219,
                "value_type": "Await"
              },
              {
                "name": "compliance_result",
                "lineno": 223,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 72,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 102,
                "value_type": "Await"
              },
              {
                "name": "files_data",
                "lineno": 107,
                "value_type": "Call"
              },
              {
                "name": "security_issues",
                "lineno": 108,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 145,
                "value_type": "Await"
              },
              {
                "name": "changes_data",
                "lineno": 152,
                "value_type": "Call"
              },
              {
                "name": "compliance_issues",
                "lineno": 153,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "reviews_data",
                "lineno": 75,
                "value_type": "Call"
              },
              {
                "name": "copilot_review",
                "lineno": 76,
                "value_type": "Constant"
              },
              {
                "name": "file_path",
                "lineno": 112,
                "value_type": "Call"
              },
              {
                "name": "file_path",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "content_result",
                "lineno": 115,
                "value_type": "Await"
              },
              {
                "name": "copilot_review",
                "lineno": 80,
                "value_type": "Name"
              },
              {
                "name": "content_data",
                "lineno": 120,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 14,
                "content": "Add project root to path"
              },
              {
                "line": 18,
                "content": "Import with fallback for missing grpc module"
              },
              {
                "line": 22,
                "content": "Fallback for environments without grpc (like GitHub Actions)"
              },
              {
                "line": 51,
                "content": "Note: Direct Copilot review requests require GitHub App permissions"
              },
              {
                "line": 52,
                "content": "For now, we'll provide manual instructions"
              },
              {
                "line": 71,
                "content": "Get review status from GitHub API"
              },
              {
                "line": 101,
                "content": "Get PR files"
              },
              {
                "line": 110,
                "content": "Check each file for security issues"
              },
              {
                "line": 114,
                "content": "Check for subprocess usage"
              },
              {
                "line": 121,
                "content": "Analyze for security patterns"
              },
              {
                "line": 144,
                "content": "Get PR changes"
              },
              {
                "line": 155,
                "content": "Check for model registry updates"
              },
              {
                "line": 160,
                "content": "Validate model registry changes"
              },
              {
                "line": 171,
                "content": "Check for proper domain structure"
              },
              {
                "line": 206,
                "content": "Get PR number from environment"
              },
              {
                "line": 214,
                "content": "Request Copilot review (manual instructions)"
              },
              {
                "line": 218,
                "content": "Analyze security issues"
              },
              {
                "line": 222,
                "content": "Validate model compliance"
              },
              {
                "line": 226,
                "content": "Summary"
              },
              {
                "line": 232,
                "content": "Print manual instructions"
              }
            ],
            "total_lines": 241,
            "code_lines": 179
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/migration_templates/tool_discovery_migration_template.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 894,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 26,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "Migration template for src/ghostbusters/tool_discovery.py"
              },
              {
                "line": 3,
                "content": "Replace subprocess imports"
              },
              {
                "line": 4,
                "content": "OLD:"
              },
              {
                "line": 5,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 6,
                "content": "NEW:"
              },
              {
                "line": 12,
                "content": "Replace subprocess calls"
              },
              {
                "line": 13,
                "content": "OLD:"
              },
              {
                "line": 14,
                "content": "result = secure_execute(['ls', '-la'], capture_output=True, text=True)"
              },
              {
                "line": 15,
                "content": "NEW:"
              },
              {
                "line": 16,
                "content": "result = await secure_execute('ls -la', timeout=10)"
              },
              {
                "line": 18,
                "content": "OLD:"
              },
              {
                "line": 19,
                "content": "process = subprocess.Popen(['long_running_command'], stdout=subprocess.PIPE)"
              },
              {
                "line": 20,
                "content": "NEW:"
              },
              {
                "line": 21,
                "content": "result = await secure_execute('long_running_command', timeout=30)"
              },
              {
                "line": 24,
                "content": "Add async wrapper if needed"
              }
            ],
            "total_lines": 33,
            "code_lines": 9
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/migration_templates/linter_api_integration_migration_template.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 889,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 26,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "Migration template for src/linter_api_integration.py"
              },
              {
                "line": 3,
                "content": "Replace subprocess imports"
              },
              {
                "line": 4,
                "content": "OLD:"
              },
              {
                "line": 5,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 6,
                "content": "NEW:"
              },
              {
                "line": 12,
                "content": "Replace subprocess calls"
              },
              {
                "line": 13,
                "content": "OLD:"
              },
              {
                "line": 14,
                "content": "result = secure_execute(['ls', '-la'], capture_output=True, text=True)"
              },
              {
                "line": 15,
                "content": "NEW:"
              },
              {
                "line": 16,
                "content": "result = await secure_execute('ls -la', timeout=10)"
              },
              {
                "line": 18,
                "content": "OLD:"
              },
              {
                "line": 19,
                "content": "process = subprocess.Popen(['long_running_command'], stdout=subprocess.PIPE)"
              },
              {
                "line": 20,
                "content": "NEW:"
              },
              {
                "line": 21,
                "content": "result = await secure_execute('long_running_command', timeout=30)"
              },
              {
                "line": 24,
                "content": "Add async wrapper if needed"
              }
            ],
            "total_lines": 33,
            "code_lines": 9
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/migration_templates/enhanced_ghostbusters_migration_template.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 901,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 26,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "Migration template for src/ghostbusters/enhanced_ghostbusters.py"
              },
              {
                "line": 3,
                "content": "Replace subprocess imports"
              },
              {
                "line": 4,
                "content": "OLD:"
              },
              {
                "line": 5,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 6,
                "content": "NEW:"
              },
              {
                "line": 12,
                "content": "Replace subprocess calls"
              },
              {
                "line": 13,
                "content": "OLD:"
              },
              {
                "line": 14,
                "content": "result = secure_execute(['ls', '-la'], capture_output=True, text=True)"
              },
              {
                "line": 15,
                "content": "NEW:"
              },
              {
                "line": 16,
                "content": "result = await secure_execute('ls -la', timeout=10)"
              },
              {
                "line": 18,
                "content": "OLD:"
              },
              {
                "line": 19,
                "content": "process = subprocess.Popen(['long_running_command'], stdout=subprocess.PIPE)"
              },
              {
                "line": 20,
                "content": "NEW:"
              },
              {
                "line": 21,
                "content": "result = await secure_execute('long_running_command', timeout=30)"
              },
              {
                "line": 24,
                "content": "Add async wrapper if needed"
              }
            ],
            "total_lines": 33,
            "code_lines": 9
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/migration_templates/test_projected_equivalence_migration_template.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 917,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 26,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "Migration template for src/model_driven_projection/test_projected_equivalence.py"
              },
              {
                "line": 3,
                "content": "Replace subprocess imports"
              },
              {
                "line": 4,
                "content": "OLD:"
              },
              {
                "line": 5,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 6,
                "content": "NEW:"
              },
              {
                "line": 12,
                "content": "Replace subprocess calls"
              },
              {
                "line": 13,
                "content": "OLD:"
              },
              {
                "line": 14,
                "content": "result = secure_execute(['ls', '-la'], capture_output=True, text=True)"
              },
              {
                "line": 15,
                "content": "NEW:"
              },
              {
                "line": 16,
                "content": "result = await secure_execute('ls -la', timeout=10)"
              },
              {
                "line": 18,
                "content": "OLD:"
              },
              {
                "line": 19,
                "content": "process = subprocess.Popen(['long_running_command'], stdout=subprocess.PIPE)"
              },
              {
                "line": 20,
                "content": "NEW:"
              },
              {
                "line": 21,
                "content": "result = await secure_execute('long_running_command', timeout=30)"
              },
              {
                "line": 24,
                "content": "Add async wrapper if needed"
              }
            ],
            "total_lines": 33,
            "code_lines": 9
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/migration_templates/test_model_traceability_migration_template.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 910,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 26,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "Migration template for src/multi_agent_testing/test_model_traceability.py"
              },
              {
                "line": 3,
                "content": "Replace subprocess imports"
              },
              {
                "line": 4,
                "content": "OLD:"
              },
              {
                "line": 5,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 6,
                "content": "NEW:"
              },
              {
                "line": 12,
                "content": "Replace subprocess calls"
              },
              {
                "line": 13,
                "content": "OLD:"
              },
              {
                "line": 14,
                "content": "result = secure_execute(['ls', '-la'], capture_output=True, text=True)"
              },
              {
                "line": 15,
                "content": "NEW:"
              },
              {
                "line": 16,
                "content": "result = await secure_execute('ls -la', timeout=10)"
              },
              {
                "line": 18,
                "content": "OLD:"
              },
              {
                "line": 19,
                "content": "process = subprocess.Popen(['long_running_command'], stdout=subprocess.PIPE)"
              },
              {
                "line": 20,
                "content": "NEW:"
              },
              {
                "line": 21,
                "content": "result = await secure_execute('long_running_command', timeout=30)"
              },
              {
                "line": 24,
                "content": "Add async wrapper if needed"
              }
            ],
            "total_lines": 33,
            "code_lines": 9
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/migration_templates/test_simple_equivalence_migration_template.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 914,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 26,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "Migration template for src/model_driven_projection/test_simple_equivalence.py"
              },
              {
                "line": 3,
                "content": "Replace subprocess imports"
              },
              {
                "line": 4,
                "content": "OLD:"
              },
              {
                "line": 5,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 6,
                "content": "NEW:"
              },
              {
                "line": 12,
                "content": "Replace subprocess calls"
              },
              {
                "line": 13,
                "content": "OLD:"
              },
              {
                "line": 14,
                "content": "result = secure_execute(['ls', '-la'], capture_output=True, text=True)"
              },
              {
                "line": 15,
                "content": "NEW:"
              },
              {
                "line": 16,
                "content": "result = await secure_execute('ls -la', timeout=10)"
              },
              {
                "line": 18,
                "content": "OLD:"
              },
              {
                "line": 19,
                "content": "process = subprocess.Popen(['long_running_command'], stdout=subprocess.PIPE)"
              },
              {
                "line": 20,
                "content": "NEW:"
              },
              {
                "line": 21,
                "content": "result = await secure_execute('long_running_command', timeout=30)"
              },
              {
                "line": 24,
                "content": "Add async wrapper if needed"
              }
            ],
            "total_lines": 33,
            "code_lines": 9
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/migration_templates/intelligent_linter_system_migration_template.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 892,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 26,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "Migration template for src/intelligent_linter_system.py"
              },
              {
                "line": 3,
                "content": "Replace subprocess imports"
              },
              {
                "line": 4,
                "content": "OLD:"
              },
              {
                "line": 5,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 6,
                "content": "NEW:"
              },
              {
                "line": 12,
                "content": "Replace subprocess calls"
              },
              {
                "line": 13,
                "content": "OLD:"
              },
              {
                "line": 14,
                "content": "result = secure_execute(['ls', '-la'], capture_output=True, text=True)"
              },
              {
                "line": 15,
                "content": "NEW:"
              },
              {
                "line": 16,
                "content": "result = await secure_execute('ls -la', timeout=10)"
              },
              {
                "line": 18,
                "content": "OLD:"
              },
              {
                "line": 19,
                "content": "process = subprocess.Popen(['long_running_command'], stdout=subprocess.PIPE)"
              },
              {
                "line": 20,
                "content": "NEW:"
              },
              {
                "line": 21,
                "content": "result = await secure_execute('long_running_command', timeout=30)"
              },
              {
                "line": 24,
                "content": "Add async wrapper if needed"
              }
            ],
            "total_lines": 33,
            "code_lines": 9
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/migration_templates/quality_model_migration_template.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 900,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.secure_shell_service.client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 26,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "Migration template for src/code_quality_system/quality_model.py"
              },
              {
                "line": 3,
                "content": "Replace subprocess imports"
              },
              {
                "line": 4,
                "content": "OLD:"
              },
              {
                "line": 5,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 6,
                "content": "NEW:"
              },
              {
                "line": 12,
                "content": "Replace subprocess calls"
              },
              {
                "line": 13,
                "content": "OLD:"
              },
              {
                "line": 14,
                "content": "result = secure_execute(['ls', '-la'], capture_output=True, text=True)"
              },
              {
                "line": 15,
                "content": "NEW:"
              },
              {
                "line": 16,
                "content": "result = await secure_execute('ls -la', timeout=10)"
              },
              {
                "line": 18,
                "content": "OLD:"
              },
              {
                "line": 19,
                "content": "process = subprocess.Popen(['long_running_command'], stdout=subprocess.PIPE)"
              },
              {
                "line": 20,
                "content": "NEW:"
              },
              {
                "line": 21,
                "content": "result = await secure_execute('long_running_command', timeout=30)"
              },
              {
                "line": 24,
                "content": "Add async wrapper if needed"
              }
            ],
            "total_lines": 33,
            "code_lines": 9
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/test_billing_api.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1490,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 3
              },
              {
                "module": "src.gemini_billing_analyzer",
                "names": [
                  "GeminiBillingAnalyzer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              }
            ],
            "functions": [
              {
                "name": "test_billing_data_collection",
                "lineno": 9,
                "args": [
                  "analyzer"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebd54d90>"
                ],
                "docstring": "Test billing data collection"
              },
              {
                "name": "test_gemini_analysis",
                "lineno": 16,
                "args": [
                  "analyzer"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebbae950>"
                ],
                "docstring": "Test Gemini analysis"
              },
              {
                "name": "test_ghostbusters_integration",
                "lineno": 26,
                "args": [
                  "analyzer"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebbafbd0>"
                ],
                "docstring": "Test Ghostbusters integration"
              },
              {
                "name": "main",
                "lineno": 32,
                "args": [],
                "decorators": [],
                "docstring": "Main test runner"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "billing_data",
                "lineno": 11,
                "value_type": "Call"
              },
              {
                "name": "billing_data",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 21,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 28,
                "value_type": "Await"
              },
              {
                "name": "analyzer",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 45,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 38,
                "content": "Run tests"
              }
            ],
            "total_lines": 51,
            "code_lines": 37
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/test_ghostbusters_simple.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1386,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 3
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "src.ghostbusters",
                "names": [
                  "GhostbustersOrchestrator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "shutil",
                "asname": null,
                "lineno": 42
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "test_dir",
                "lineno": 12,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 16,
                "value_type": "BinOp"
              },
              {
                "name": "success",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "orchestrator",
                "lineno": 21,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 22,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 11,
                "content": "Create a simple test project"
              },
              {
                "line": 15,
                "content": "Create a test file"
              },
              {
                "line": 20,
                "content": "Run Ghostbusters"
              },
              {
                "line": 24,
                "content": "Check results"
              },
              {
                "line": 41,
                "content": "Cleanup"
              }
            ],
            "total_lines": 51,
            "code_lines": 32
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/test_cloudbuild_simple.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1134,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 3
              },
              {
                "module": "langchain",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "langgraph",
                "asname": null,
                "lineno": 17
              },
              {
                "module": "pydantic",
                "asname": null,
                "lineno": 25
              },
              {
                "module": "aiofiles",
                "asname": null,
                "lineno": 33
              }
            ],
            "functions": [
              {
                "name": "test_imports",
                "lineno": 6,
                "args": [],
                "decorators": [],
                "docstring": "Test that all required dependencies can be imported."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "success",
                "lineno": 45,
                "value_type": "Call"
              }
            ],
            "comments": [],
            "total_lines": 47,
            "code_lines": 33
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/src/generate_billing_analyzer_with_recursion.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 1489,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "generate_billing_analyzer",
                "names": [
                  "generate_gemini_billing_analyzer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "recursive_code_generator",
                "names": [
                  "RecursiveCodeGenerator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 15,
                "args": [],
                "decorators": [],
                "docstring": "Generate billing analyzer with recursive decomposition"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "generator",
                "lineno": 22,
                "value_type": "Call"
              },
              {
                "name": "analyzer_file",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 33,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 34,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 21,
                "content": "Create recursive generator"
              },
              {
                "line": 24,
                "content": "Generate the billing analyzer model"
              },
              {
                "line": 28,
                "content": "Generate with recursive decomposition"
              },
              {
                "line": 32,
                "content": "Write to file"
              },
              {
                "line": 41,
                "content": "Show decomposition summary"
              }
            ],
            "total_lines": 51,
            "code_lines": 29
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/src/recursive_code_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 15575,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              },
              {
                "module": "code_generator",
                "names": [
                  "ClassDefinition",
                  "CodeFile",
                  "CodeGenerator",
                  "FunctionDefinition",
                  "ImportStatement"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 408,
                "args": [],
                "decorators": [],
                "docstring": "Test the recursive code generator"
              },
              {
                "name": "__init__",
                "lineno": 50,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_build_patterns",
                "lineno": 58,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Build decomposition patterns based on reverse engineering research"
              },
              {
                "name": "decompose_string",
                "lineno": 98,
                "args": [
                  "self",
                  "string",
                  "depth"
                ],
                "decorators": [],
                "docstring": "Recursively decompose strings using established reverse engineering patterns\nBased on de4py AST analysis and Python-Reversal-Bot bytecode patterns"
              },
              {
                "name": "_decompose_with_pattern",
                "lineno": 153,
                "args": [
                  "self",
                  "string",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Decompose string using specific pattern"
              },
              {
                "name": "_decompose_import_statement",
                "lineno": 174,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose import statement using AST analysis (de4py pattern)"
              },
              {
                "name": "_decompose_function_call",
                "lineno": 199,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose function call using AST analysis"
              },
              {
                "name": "_decompose_class_definition",
                "lineno": 227,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose class definition using AST analysis"
              },
              {
                "name": "_decompose_variable_assignment",
                "lineno": 251,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose variable assignment"
              },
              {
                "name": "_decompose_string_literal",
                "lineno": 274,
                "args": [
                  "self",
                  "string"
                ],
                "decorators": [],
                "docstring": "Decompose string literal (memory analysis pattern from de4py)"
              },
              {
                "name": "_validate_decomposition",
                "lineno": 289,
                "args": [
                  "self",
                  "original",
                  "decomposed_model"
                ],
                "decorators": [],
                "docstring": "Validate decomposition mathematically\nInput == Output validation"
              },
              {
                "name": "generate_with_recursion",
                "lineno": 323,
                "args": [
                  "self",
                  "model"
                ],
                "decorators": [],
                "docstring": "Generate code with recursive decomposition\nEnhanced version that analyzes and decomposes generated strings"
              },
              {
                "name": "_extract_strings_from_code",
                "lineno": 355,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Extract potential strings for decomposition from generated code"
              },
              {
                "name": "_log_decomposition_summary",
                "lineno": 384,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Log summary of decomposition analysis"
              }
            ],
            "classes": [
              {
                "name": "DecompositionResult",
                "lineno": 23,
                "bases": [],
                "methods": [],
                "docstring": "Result of string decomposition analysis"
              },
              {
                "name": "StringPattern",
                "lineno": 35,
                "bases": [],
                "methods": [],
                "docstring": "Pattern for string decomposition"
              },
              {
                "name": "RecursiveCodeGenerator",
                "lineno": 44,
                "bases": [
                  "CodeGenerator"
                ],
                "methods": [
                  "__init__",
                  "_build_patterns",
                  "decompose_string",
                  "_decompose_with_pattern",
                  "_decompose_import_statement",
                  "_decompose_function_call",
                  "_decompose_class_definition",
                  "_decompose_variable_assignment",
                  "_decompose_string_literal",
                  "_validate_decomposition",
                  "generate_with_recursion",
                  "_extract_strings_from_code",
                  "_log_decomposition_summary"
                ],
                "docstring": "Enhanced code generator with recursive AST-based decomposition\nBased on de4py and Python-Reversal-Bot reverse engineering patterns"
              }
            ],
            "variables": [
              {
                "name": "generator",
                "lineno": 415,
                "value_type": "Call"
              },
              {
                "name": "test_strings",
                "lineno": 418,
                "value_type": "List"
              },
              {
                "name": "string",
                "lineno": 159,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 329,
                "value_type": "Call"
              },
              {
                "name": "strings_to_analyze",
                "lineno": 334,
                "value_type": "Call"
              },
              {
                "name": "decompositions_found",
                "lineno": 339,
                "value_type": "Constant"
              },
              {
                "name": "strings",
                "lineno": 357,
                "value_type": "List"
              },
              {
                "name": "import_pattern",
                "lineno": 360,
                "value_type": "Constant"
              },
              {
                "name": "func_pattern",
                "lineno": 369,
                "value_type": "Constant"
              },
              {
                "name": "class_pattern",
                "lineno": 376,
                "value_type": "Constant"
              },
              {
                "name": "by_type",
                "lineno": 394,
                "value_type": "Dict"
              },
              {
                "name": "validated",
                "lineno": 404,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 429,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 206,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 234,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 258,
                "value_type": "Call"
              },
              {
                "name": "validation_passed",
                "lineno": 312,
                "value_type": "Compare"
              },
              {
                "name": "decomposition",
                "lineno": 341,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 364,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 371,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 378,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "match",
                "lineno": 190,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 208,
                "value_type": "Call"
              },
              {
                "name": "args_str",
                "lineno": 209,
                "value_type": "Call"
              },
              {
                "name": "args",
                "lineno": 212,
                "value_type": "ListComp"
              },
              {
                "name": "class_name",
                "lineno": 236,
                "value_type": "Call"
              },
              {
                "name": "inheritance",
                "lineno": 237,
                "value_type": "IfExp"
              },
              {
                "name": "var_name",
                "lineno": 260,
                "value_type": "Call"
              },
              {
                "name": "var_value",
                "lineno": 261,
                "value_type": "Call"
              },
              {
                "name": "generated",
                "lineno": 297,
                "value_type": "Call"
              },
              {
                "name": "decomposed_model",
                "lineno": 125,
                "value_type": "Call"
              },
              {
                "name": "module",
                "lineno": 185,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 186,
                "value_type": "ListComp"
              },
              {
                "name": "module",
                "lineno": 192,
                "value_type": "Call"
              },
              {
                "name": "generated",
                "lineno": 309,
                "value_type": "Call"
              },
              {
                "name": "validation_passed",
                "lineno": 128,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "generated",
                "lineno": 301,
                "value_type": "JoinedStr"
              },
              {
                "name": "generated",
                "lineno": 305,
                "value_type": "JoinedStr"
              },
              {
                "name": "generated",
                "lineno": 307,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 61,
                "content": "Import patterns (AST-based, from de4py)"
              },
              {
                "line": 68,
                "content": "Function call patterns (AST-based)"
              },
              {
                "line": 75,
                "content": "Class definition patterns (AST-based)"
              },
              {
                "line": 82,
                "content": "Variable assignment patterns (AST-based)"
              },
              {
                "line": 89,
                "content": "String literal patterns (Memory analysis, from de4py)"
              },
              {
                "line": 107,
                "content": "Safety limits"
              },
              {
                "line": 116,
                "content": "Try each pattern"
              },
              {
                "line": 123,
                "content": "Attempt decomposition"
              },
              {
                "line": 127,
                "content": "Validate decomposition mathematically"
              },
              {
                "line": 177,
                "content": "Parse with AST to validate"
              },
              {
                "line": 180,
                "content": "Extract components using regex"
              },
              {
                "line": 182,
                "content": "\"from typing import Optional, List\""
              },
              {
                "line": 189,
                "content": "\"import typing\""
              },
              {
                "line": 202,
                "content": "Parse with AST to validate"
              },
              {
                "line": 205,
                "content": "Extract function name and arguments"
              },
              {
                "line": 211,
                "content": "Parse arguments"
              },
              {
                "line": 230,
                "content": "Parse with AST to validate"
              },
              {
                "line": 233,
                "content": "Extract class name and inheritance"
              },
              {
                "line": 254,
                "content": "Parse with AST to validate"
              },
              {
                "line": 257,
                "content": "Extract variable name and value"
              },
              {
                "line": 277,
                "content": "Validate it's a proper string literal"
              },
              {
                "line": 295,
                "content": "Generate code from decomposed model"
              },
              {
                "line": 299,
                "content": "Handle custom models"
              },
              {
                "line": 311,
                "content": "Mathematical validation"
              },
              {
                "line": 328,
                "content": "Generate initial code"
              },
              {
                "line": 333,
                "content": "Extract all strings from the generated code"
              },
              {
                "line": 338,
                "content": "Analyze each string for decomposition opportunities"
              },
              {
                "line": 350,
                "content": "Log decomposition history"
              },
              {
                "line": 359,
                "content": "Extract import statements"
              },
              {
                "line": 368,
                "content": "Extract function calls"
              },
              {
                "line": 375,
                "content": "Extract class definitions"
              },
              {
                "line": 393,
                "content": "Group by type"
              },
              {
                "line": 403,
                "content": "Validation stats"
              },
              {
                "line": 414,
                "content": "Create recursive generator"
              },
              {
                "line": 417,
                "content": "Test decomposition patterns"
              }
            ],
            "total_lines": 441,
            "code_lines": 331
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/src/code_generator.py",
          "domain": "python",
          "file_type": "python",
          "size_bytes": 11374,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "to_code",
                "lineno": 22,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate import code"
              },
              {
                "name": "to_code",
                "lineno": 44,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate function code"
              },
              {
                "name": "__post_init__",
                "lineno": 94,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "to_code",
                "lineno": 97,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate class code"
              },
              {
                "name": "to_code",
                "lineno": 142,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate complete file code"
              },
              {
                "name": "__init__",
                "lineno": 181,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "validate_import",
                "lineno": 189,
                "args": [
                  "self",
                  "import_stmt"
                ],
                "decorators": [],
                "docstring": "Validate import statement"
              },
              {
                "name": "validate_function",
                "lineno": 199,
                "args": [
                  "self",
                  "func"
                ],
                "decorators": [],
                "docstring": "Validate function definition"
              },
              {
                "name": "validate_class",
                "lineno": 209,
                "args": [
                  "self",
                  "cls"
                ],
                "decorators": [],
                "docstring": "Validate class definition"
              },
              {
                "name": "validate_file",
                "lineno": 219,
                "args": [
                  "self",
                  "code_file"
                ],
                "decorators": [],
                "docstring": "Validate complete file"
              },
              {
                "name": "generate_test_file",
                "lineno": 230,
                "args": [
                  "self",
                  "test_name",
                  "test_functions"
                ],
                "decorators": [],
                "docstring": "Generate a test file from structured data"
              },
              {
                "name": "write_file",
                "lineno": 293,
                "args": [
                  "self",
                  "code_file",
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Write validated code to file"
              }
            ],
            "classes": [
              {
                "name": "ImportStatement",
                "lineno": 14,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Structured import statement model"
              },
              {
                "name": "FunctionDefinition",
                "lineno": 34,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Structured function definition model"
              },
              {
                "name": "ClassDefinition",
                "lineno": 85,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "to_code"
                ],
                "docstring": "Structured class definition model"
              },
              {
                "name": "CodeFile",
                "lineno": 133,
                "bases": [],
                "methods": [
                  "to_code"
                ],
                "docstring": "Structured code file model"
              },
              {
                "name": "CodeGenerator",
                "lineno": 178,
                "bases": [],
                "methods": [
                  "__init__",
                  "validate_import",
                  "validate_function",
                  "validate_class",
                  "validate_file",
                  "generate_test_file",
                  "write_file"
                ],
                "docstring": "Deterministic code generator using structured models"
              }
            ],
            "variables": [
              {
                "name": "generator",
                "lineno": 310,
                "value_type": "Call"
              },
              {
                "name": "test_functions",
                "lineno": 313,
                "value_type": "List"
              },
              {
                "name": "test_file",
                "lineno": 353,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 356,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 357,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 46,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 99,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 144,
                "value_type": "List"
              },
              {
                "name": "imports",
                "lineno": 238,
                "value_type": "List"
              },
              {
                "name": "functions",
                "lineno": 249,
                "value_type": "List"
              },
              {
                "name": "main_func",
                "lineno": 262,
                "value_type": "Call"
              },
              {
                "name": "params",
                "lineno": 61,
                "value_type": "Call"
              },
              {
                "name": "signature",
                "lineno": 62,
                "value_type": "JoinedStr"
              },
              {
                "name": "bases_str",
                "lineno": 103,
                "value_type": "Call"
              },
              {
                "name": "method_code",
                "lineno": 118,
                "value_type": "Call"
              },
              {
                "name": "method_lines",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "indented_lines",
                "lineno": 121,
                "value_type": "List"
              },
              {
                "name": "test_code",
                "lineno": 193,
                "value_type": "Call"
              },
              {
                "name": "test_code",
                "lineno": 203,
                "value_type": "Call"
              },
              {
                "name": "test_code",
                "lineno": 213,
                "value_type": "Call"
              },
              {
                "name": "test_code",
                "lineno": 223,
                "value_type": "Call"
              },
              {
                "name": "func",
                "lineno": 251,
                "value_type": "Call"
              },
              {
                "name": "params",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "signature",
                "lineno": 53,
                "value_type": "JoinedStr"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 48,
                "content": "Decorators"
              },
              {
                "line": 51,
                "content": "Use async def instead of @asyncio.coroutine"
              },
              {
                "line": 60,
                "content": "Regular function"
              },
              {
                "line": 68,
                "content": "Add other decorators"
              },
              {
                "line": 73,
                "content": "Docstring"
              },
              {
                "line": 77,
                "content": "Body"
              },
              {
                "line": 101,
                "content": "Class signature"
              },
              {
                "line": 108,
                "content": "Docstring"
              },
              {
                "line": 112,
                "content": "Attributes"
              },
              {
                "line": 116,
                "content": "Methods"
              },
              {
                "line": 119,
                "content": "Indent method body"
              },
              {
                "line": 146,
                "content": "Module docstring"
              },
              {
                "line": 151,
                "content": "Imports"
              },
              {
                "line": 158,
                "content": "Classes"
              },
              {
                "line": 163,
                "content": "Functions"
              },
              {
                "line": 168,
                "content": "Add main execution block if this is the main module"
              },
              {
                "line": 192,
                "content": "Test if the import is valid Python"
              },
              {
                "line": 202,
                "content": "Test if the function is valid Python"
              },
              {
                "line": 212,
                "content": "Test if the class is valid Python"
              },
              {
                "line": 222,
                "content": "Test if the file is valid Python"
              },
              {
                "line": 237,
                "content": "Imports"
              },
              {
                "line": 248,
                "content": "Test functions"
              },
              {
                "line": 261,
                "content": "Main function"
              },
              {
                "line": 308,
                "content": "Example usage"
              },
              {
                "line": 312,
                "content": "Test data for billing analyzer tests"
              },
              {
                "line": 352,
                "content": "Generate test file"
              },
              {
                "line": 355,
                "content": "Write to file"
              }
            ],
            "total_lines": 363,
            "code_lines": 279
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "untraced": [
        {
          "path": ".flake8",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 167,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "quality_enforcement_test.log",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 0,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "comprehensive_artifact_analysis_report.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 2273494,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "PRE_COMMIT_CLEANUP_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4989,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "enhanced_code_quality_model.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 3667,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_results_healthcare.log",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 2421,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_ide_performance_severe.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 3272,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "DIVERSITY_HYPOTHESIS_CARD.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 1762,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "QUICKSTART.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4995,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "ghostbusters_battle_analysis.ipynb",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 9383,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "gh_dsl.log",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 4020,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "GITHUB_CLOUD_BUILD_SETUP.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 3709,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "README.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5672,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "MERGE_CONFLICT_ANALYSIS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4234,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "code_quality_model.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 3544,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "develop-trigger.yaml",
          "domain": null,
          "file_type": "yaml",
          "size_bytes": 480,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "CLOUDBUILD_GITHUB_PROBLEM_SPORE.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4221,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "cloudbuild_trigger_blocked_spore.ttl",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 1414,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "cloudbuild.yaml",
          "domain": null,
          "file_type": "yaml",
          "size_bytes": 1781,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "GHOSTBUSTERS_ANALYSIS_REQUEST.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4060,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": ".gitignore",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 729,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "PR_DESCRIPTION.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 7090,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "ast_guided_model.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 2319,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "ENHANCED_ROUND_TRIP_SUCCESS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5109,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_ide_performance.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 2746,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "TEST_RESULTS_NOTES.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6025,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_results_src.log",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 8582,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "CURRENT_STATE_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5130,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "TEST_RESULTS_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6651,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "CLOUDBUILD_GITHUB_FINAL_DIAGNOSTIC.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6558,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test-trigger.yaml",
          "domain": null,
          "file_type": "yaml",
          "size_bytes": 288,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "MEMORY_MANIFEST.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4753,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "SECURITY_AND_QUALITY_IMPROVEMENTS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6571,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "LLM_IDENTITY_CRISIS_RESEARCH_MODEL.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 7747,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "project_model_registry.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 48714,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": ".bandit",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 216,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "COMPREHENSIVE_ARTIFACT_ANALYSIS_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6931,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "CLOUDBUILD_GITHUB_LLM_WRAPPER.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8758,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_results_main.log",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 12992,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "ROUND_TRIP_MODEL_SYSTEM_NOTES.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4472,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "Makefile",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 22462,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "MASTER_PR_LOG.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8128,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": ".pre-commit-config.yaml",
          "domain": null,
          "file_type": "yaml",
          "size_bytes": 1673,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "PR_LOG.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6335,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "NOTES.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8083,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "LICENSE",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 10966,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "artifact_analysis_action_plan.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 1476,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "COMPREHENSIVE_ARTIFACT_ANALYSIS_PROGRESS_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4992,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/synthesis_analysis.png",
          "domain": null,
          "file_type": "image",
          "size_bytes": 597011,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/diversity_overview.png",
          "domain": null,
          "file_type": "image",
          "size_bytes": 407135,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/gcp_billing_analysis.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 104932,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_discrepancy_analysis.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 3561,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/agent_network.png",
          "domain": null,
          "file_type": "image",
          "size_bytes": 323449,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/diversity_hypothesis_final_report.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 6902,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/findings_analysis.svg",
          "domain": null,
          "file_type": "image",
          "size_bytes": 132489,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/diversity_analysis_report.pdf",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 8519,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/synthesis_data.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 9345,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/diversity_overview.svg",
          "domain": null,
          "file_type": "image",
          "size_bytes": 114571,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/findings_analysis.png",
          "domain": null,
          "file_type": "image",
          "size_bytes": 511893,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/diversity_analysis_report.html",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 19563,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/progress_pacifier.html",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 15025,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/multi_dimensional_results.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 423429,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/analysis_data.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 17183,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/all_files.txt",
          "domain": null,
          "file_type": "documentation",
          "size_bytes": 5488,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/synthesis_analysis.svg",
          "domain": null,
          "file_type": "image",
          "size_bytes": 141132,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/agent_network.svg",
          "domain": null,
          "file_type": "image",
          "size_bytes": 70004,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/current_files.txt",
          "domain": null,
          "file_type": "documentation",
          "size_bytes": 5488,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/diversity_hypothesis_test_report.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 3754,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/diversity_hypothesis_results.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 7182,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/duet_ai_analysis.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 2611,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/PR_Dashboard.html",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 23953,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/diversity_analysis_report.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 15640,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/daily_billing_report.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 1021,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/analysis_data/daily_summary.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 996,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/analysis_data/billing_analysis_template.ipynb",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 6282,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/analysis_data/daily_summary.csv",
          "domain": null,
          "file_type": "data",
          "size_bytes": 283,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/analysis_data/daily_billing_data.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 19317,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/analysis_data/daily_billing_data.csv",
          "domain": null,
          "file_type": "data",
          "size_bytes": 7191,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/analysis_data/gemini_billing_analysis.ipynb",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 9847,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/analysis_data/daily_billing_data.parquet",
          "domain": null,
          "file_type": "data",
          "size_bytes": 4326,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/analysis_data/daily_summary.parquet",
          "domain": null,
          "file_type": "data",
          "size_bytes": 2904,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/visualizations/cost_heatmap.png",
          "domain": null,
          "file_type": "image",
          "size_bytes": 338812,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/visualizations/service_cost_breakdown.png",
          "domain": null,
          "file_type": "image",
          "size_bytes": 226613,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/visualizations/daily_cost_trend.png",
          "domain": null,
          "file_type": "image",
          "size_bytes": 127899,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "data/billing_reports/visualizations/interactive_dashboard.html",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 4672813,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/ENHANCED_AST_LEVEL_UP_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 9696,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GITHUB_MCP_ANALYSIS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4335,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_6_healthcare_cdc_implementation.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 9100,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/REAL_GHOSTBUSTERS_SUCCESS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 7099,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_10_PYTHON_TEST_FIXES.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4237,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/HEALTHCARE_CDC_IMPLEMENTATION_PLAN.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8477,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_1_security_cleanup.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4384,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GCP_VS_AWS_IMPLEMENTATION_COMPARISON.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 9595,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/BRANCH_PUSH_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5812,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PLATFORM_COMPATIBILITY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8253,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_3_model_driven_orchestration.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8075,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_4_OPENFLOW_STREAMLIT_APP_IMPLEMENTATION.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 18656,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/pr1_healthcare_cdc_context.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8446,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/SECURITY_FIXES.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4508,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/COMPREHENSIVE_TEST_RESULTS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 7177,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/MODEL_DRIVEN_PROJECTION_COMPONENT_COMPLETE.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6794,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/SUBPROCESS_MIGRATION_PLAN.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 1284,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/FINAL_COMMIT_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4212,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/LEVEL1_IMPLEMENTATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6678,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/HEURISTIC_VS_DETERMINISTIC_PRINCIPLE.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8657,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PHASE_1_IMPLEMENTATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 10389,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/DIVERSITY_HYPOTHESIS_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 9381,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GIT_WORKFLOW_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4737,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PHASE_3_IMPLEMENTATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 17662,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/SECURITY_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4694,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GHOSTBUSTERS_ANALYSIS_RESPONSE.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4087,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/README.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 11154,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/TEST_ALL_FIX_COMPLETE_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5563,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/SYNTAX_FIX_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6508,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/IMPLEMENTATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5440,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/CALL_MORE_GHOSTBUSTERS_RULE.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 7545,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/MAKE_ONLY_ENFORCEMENT_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 7115,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GITHUB_MCP_INTEGRATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5887,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/NEO4J_SETUP_INSTRUCTIONS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 1611,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/DIVERSITY_HYPOTHESIS_ORGANIZATION.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 11232,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GITHUB_COPILOT_IMPLEMENTATION_PLAN.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 18795,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GHOSTBUSTERS_AWS_IMPLEMENTATION.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 10865,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/INTELLIGENT_LINTER_SYSTEM_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8442,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/ARTIFACTFORGE_ISSUES_LOG.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 3121,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/MODEL_DRIVEN_CONFIGURATION_ANALYSIS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6173,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/BRANCH_SEPARATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6266,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_4_cursor_rules.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 12556,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/pr1_diversity_vs_copilot_comparison.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 9790,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_1_COMPREHENSIVE_IMPLEMENTATION_PLAN.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 16031,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/DOCUMENTATION_INDEX.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8701,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/level1_bridge_analysis.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 7305,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/ORGANIZATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 9659,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GIT_ENHANCED_AST_LEVEL_UP.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8835,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_8_diversity_hypothesis_applied_to_pr1.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 12666,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GHOSTBUSTERS_GCP_IMPLEMENTATION_PLAN.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 12785,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/CONFLICT_RESOLUTION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 3053,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GCP_DEPLOYMENT_SUCCESS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5485,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_9_OPENFLOW_STREAMLIT_APP_IMPLEMENTATION.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 18656,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/LANGCHAIN_MIGRATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4396,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_5_model_persistence.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6533,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/TEST_ALL_FIX_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4146,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/prioritized_implementation_plan.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 7750,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_CREATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 8037,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/TEST_EXECUTION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6588,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/AST_LEVEL_UP_PLAN.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 15393,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GITHUB_COPILOT_CODE_REVIEW_ANALYSIS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6977,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PHASE_2_COMPLETION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6493,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_7_diversity_hypothesis_proven.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 18580,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_2_automated_security_checks.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5999,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PR_17_Completion_Log.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 5759,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/CI_CD_PIPELINE.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6180,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/PHASE_2_IMPLEMENTATION_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 13530,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/GHOSTBUSTERS_CLOUD_EVALUATION.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 7201,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/AST_LEVEL_UP_PROGRESS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 6273,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/MODEL_MANAGER_GUIDE.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4938,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "docs/ARTIFACTFORGE_FUTURE_PLANS.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 1958,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "healthcare-cdc/models/healthcare-cdc-infrastructure.yaml",
          "domain": null,
          "file_type": "yaml",
          "size_bytes": 18080,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/gemini_2_5_preview_pr_review_results.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 3307,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/gemini_2_5_flash_lite_pr_review_results.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 3382,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/README.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 3798,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_dashboard/Dockerfile",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 764,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/round_trip_generated/code_quality_model.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 3544,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/round_trip_generated/ast_guided_model.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 2319,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/round_trip_generated/project_model_registry.json",
          "domain": null,
          "file_type": "json",
          "size_bytes": 92301,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/.coverage",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 53248,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/pytest.ini",
          "domain": null,
          "file_type": "config",
          "size_bytes": 278,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/Dockerfile",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 800,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/cloudbuild.yaml",
          "domain": null,
          "file_type": "yaml",
          "size_bytes": 1094,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/secure-shell-service",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 13028244,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/Makefile",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 1520,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/enforce_make_only_venv.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 5939,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/restore_tools.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 467,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/setup-github-connection.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 3948,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/selinux_pytest_policy.te",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 976,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/run_live_smoke_test.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 1824,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/apparmor_pytest_profile",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 995,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/deploy-container.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 2601,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/rule-compliance-check.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 7874,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/setup-develop-trigger.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 1558,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/deploy-ghostbusters-gcp.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 4673,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/run_live_smoke_test_1password_flexible.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 4114,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/run_live_smoke_test_direct.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 3724,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/restore_tools_venv.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 1127,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/black_wrapper.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 749,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/enforce_make_only.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 3191,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/mypy_wrapper.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 742,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/security-check.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 11081,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/setup-github-2ndgen.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 3437,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/trigger-build.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 636,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/pytest_wrapper.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 901,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/deploy.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 10904,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/setup-cloud-build-trigger.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 1500,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/run_live_smoke_test_1password.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 3158,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/monitor.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 9073,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/setup-github-trigger-direct.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 1467,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/flake8_wrapper.sh",
          "domain": null,
          "file_type": "shell",
          "size_bytes": 756,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "config/requirements_streamlit.txt",
          "domain": null,
          "file_type": "documentation",
          "size_bytes": 538,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "config/Openflow-Playground.yaml",
          "domain": null,
          "file_type": "yaml",
          "size_bytes": 35545,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "config/requirements_diversity.txt",
          "domain": null,
          "file_type": "documentation",
          "size_bytes": 422,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "config/.yaml-lint-ignore",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 290,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "config/.pre-commit-config.yaml",
          "domain": null,
          "file_type": "yaml",
          "size_bytes": 2186,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/Dockerfile",
          "domain": null,
          "file_type": "unknown",
          "size_bytes": 867,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/cloudbuild.yaml",
          "domain": null,
          "file_type": "yaml",
          "size_bytes": 1288,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/DEPLOYMENT_SUMMARY.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4776,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "prompts/gemini_2_5_preview_pr_review_actual.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4665,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "prompts/gemini_2_5_preview_pr_review.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4657,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "prompts/gemini_2_5_flash_lite_pr_review.md",
          "domain": null,
          "file_type": "markdown",
          "size_bytes": 4660,
          "requirements_traced": [],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        }
      ],
      "model_driven_projection": [
        {
          "path": "final_cleanup.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 2348,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "shutil",
                "asname": null,
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "get_files_to_remove",
                "lineno": 10,
                "args": [],
                "decorators": [],
                "docstring": "Get list of files to remove."
              },
              {
                "name": "cleanup_files",
                "lineno": 33,
                "args": [],
                "decorators": [],
                "docstring": "Remove temporary files and directories."
              },
              {
                "name": "main",
                "lineno": 60,
                "args": [],
                "decorators": [],
                "docstring": "Main cleanup function."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "files_to_remove",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "removed_count",
                "lineno": 41,
                "value_type": "Constant"
              },
              {
                "name": "files_to_remove",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "size",
                "lineno": 68,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 13,
                "content": "Log files"
              },
              {
                "line": 25,
                "content": "Temporary files"
              },
              {
                "line": 27,
                "content": "Temporary directories"
              },
              {
                "line": 63,
                "content": "Show what will be removed"
              },
              {
                "line": 73,
                "content": "Confirm before proceeding"
              },
              {
                "line": 79,
                "content": "Perform cleanup"
              }
            ],
            "total_lines": 85,
            "code_lines": 61
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "regenerated_test_projected_code.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 3444,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "test_projected_code",
                "lineno": 11,
                "args": [],
                "decorators": [],
                "docstring": "Test that our projected code is valid Python"
              },
              {
                "name": "test_functional_equivalence",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test functional equivalence between original and projected"
              },
              {
                "name": "main",
                "lineno": 89,
                "args": [],
                "decorators": [],
                "docstring": "Main function to run all tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "files",
                "lineno": 16,
                "value_type": "List"
              },
              {
                "name": "success_count",
                "lineno": 22,
                "value_type": "Constant"
              },
              {
                "name": "total_count",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "original_file",
                "lineno": 54,
                "value_type": "Constant"
              },
              {
                "name": "projected_file",
                "lineno": 55,
                "value_type": "Constant"
              },
              {
                "name": "ast_success",
                "lineno": 95,
                "value_type": "Call"
              },
              {
                "name": "key_elements",
                "lineno": 67,
                "value_type": "List"
              },
              {
                "name": "original_content",
                "lineno": 61,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 29,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 53,
                "content": "Test that projected files have the same key elements"
              },
              {
                "line": 66,
                "content": "Check for key elements"
              },
              {
                "line": 94,
                "content": "Test AST parsing"
              },
              {
                "line": 97,
                "content": "Test functional equivalence"
              }
            ],
            "total_lines": 114,
            "code_lines": 81
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "regenerate_from_ast.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 2401,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "shutil",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.model_driven_projection.final_projection_system",
                "names": [
                  "FinalProjectionSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "regenerate_file",
                "lineno": 13,
                "args": [
                  "source_file",
                  "target_file"
                ],
                "decorators": [],
                "docstring": "Regenerate a file using the AST projection system"
              },
              {
                "name": "main",
                "lineno": 42,
                "args": [],
                "decorators": [],
                "docstring": "Regenerate key corrupted files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "files_to_regenerate",
                "lineno": 46,
                "value_type": "List"
              },
              {
                "name": "success_count",
                "lineno": 61,
                "value_type": "Constant"
              },
              {
                "name": "system",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "backup_file",
                "lineno": 23,
                "value_type": "JoinedStr"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 18,
                "content": "Generate the projected content"
              },
              {
                "line": 22,
                "content": "Create backup of original"
              },
              {
                "line": 28,
                "content": "Write the projected content"
              },
              {
                "line": 45,
                "content": "Files to regenerate"
              },
              {
                "line": 73,
                "content": "Test MyPy on the regenerated files"
              }
            ],
            "total_lines": 80,
            "code_lines": 55
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_projected_code.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 3378,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "test_projected_code",
                "lineno": 11,
                "args": [],
                "decorators": [],
                "docstring": "Test that our projected code is valid Python"
              },
              {
                "name": "test_functional_equivalence",
                "lineno": 48,
                "args": [],
                "decorators": [],
                "docstring": "Test functional equivalence between original and projected"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "files",
                "lineno": 16,
                "value_type": "List"
              },
              {
                "name": "success_count",
                "lineno": 22,
                "value_type": "Constant"
              },
              {
                "name": "total_count",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "original_file",
                "lineno": 54,
                "value_type": "Constant"
              },
              {
                "name": "projected_file",
                "lineno": 55,
                "value_type": "Constant"
              },
              {
                "name": "ast_success",
                "lineno": 94,
                "value_type": "Call"
              },
              {
                "name": "key_elements",
                "lineno": 67,
                "value_type": "List"
              },
              {
                "name": "original_content",
                "lineno": 61,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 29,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 53,
                "content": "Test that projected files have the same key elements"
              },
              {
                "line": 66,
                "content": "Check for key elements"
              },
              {
                "line": 93,
                "content": "Test AST parsing"
              },
              {
                "line": 96,
                "content": "Test functional equivalence"
              }
            ],
            "total_lines": 109,
            "code_lines": 78
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "regenerate_test_projected.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 1334,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "src.model_driven_projection",
                "names": [
                  "FinalProjectionSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "regenerate_test_projected",
                "lineno": 9,
                "args": [],
                "decorators": [],
                "docstring": "Regenerate test_projected_code.py using model-driven projection"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "system",
                "lineno": 15,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "output_file",
                "lineno": 25,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 14,
                "content": "Initialize the projection system"
              },
              {
                "line": 17,
                "content": "Extract and project the file"
              },
              {
                "line": 24,
                "content": "Save the regenerated content"
              }
            ],
            "total_lines": 43,
            "code_lines": 27
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_smoke_tests.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 5334,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "src.model_driven_projection.final_projection_system",
                "names": [
                  "FinalProjectionSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 137
              }
            ],
            "functions": [
              {
                "name": "fix_smoke_test_file",
                "lineno": 9,
                "args": [
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Fix critical syntax errors in a smoke test file"
              },
              {
                "name": "main",
                "lineno": 107,
                "args": [],
                "decorators": [],
                "docstring": "Fix all smoke test files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "smoke_test_files",
                "lineno": 110,
                "value_type": "List"
              },
              {
                "name": "success_count",
                "lineno": 125,
                "value_type": "Constant"
              },
              {
                "name": "system",
                "lineno": 141,
                "value_type": "Call"
              },
              {
                "name": "original_content",
                "lineno": 15,
                "value_type": "Name"
              },
              {
                "name": "lines",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 19,
                "value_type": "List"
              },
              {
                "name": "in_class",
                "lineno": 21,
                "value_type": "Constant"
              },
              {
                "name": "in_function",
                "lineno": 22,
                "value_type": "Constant"
              },
              {
                "name": "fixed_content",
                "lineno": 92,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 13,
                "value_type": "Call"
              },
              {
                "name": "stripped",
                "lineno": 25,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 63,
                "value_type": "List"
              },
              {
                "name": "in_class",
                "lineno": 41,
                "value_type": "Constant"
              },
              {
                "name": "in_function",
                "lineno": 47,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 145,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 56,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Fix common issues"
              },
              {
                "line": 27,
                "content": "Skip lines that are clearly not Python code"
              },
              {
                "line": 39,
                "content": "Fix class definition issues"
              },
              {
                "line": 45,
                "content": "Fix function definition issues"
              },
              {
                "line": 51,
                "content": "Fix indentation issues"
              },
              {
                "line": 54,
                "content": "Ensure proper indentation"
              },
              {
                "line": 61,
                "content": "If we didn't find any class/function definitions, add a basic structure"
              },
              {
                "line": 135,
                "content": "Test if the files can now be processed by the AST projection system"
              }
            ],
            "total_lines": 156,
            "code_lines": 121
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "test_model_driven_generation.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 1802,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "src.model_driven_projection",
                "names": [
                  "FinalProjectionSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_model_driven_generation",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "Test our model-driven code generation system"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "system",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "python_files",
                "lineno": 21,
                "value_type": "List"
              },
              {
                "name": "test_files",
                "lineno": 28,
                "value_type": "Subscript"
              },
              {
                "name": "projected",
                "lineno": 34,
                "value_type": "Call"
              },
              {
                "name": "projected_file",
                "lineno": 38,
                "value_type": "JoinedStr"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Initialize the system"
              },
              {
                "line": 20,
                "content": "Find Python files to test"
              },
              {
                "line": 27,
                "content": "Test with first 3 files"
              },
              {
                "line": 37,
                "content": "Save the projected content"
              }
            ],
            "total_lines": 56,
            "code_lines": 39
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "fix_remaining_smoke_tests.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 10214,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "src.model_driven_projection.final_projection_system",
                "names": [
                  "FinalProjectionSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 289
              }
            ],
            "functions": [
              {
                "name": "fix_live_smoke_test_langchain",
                "lineno": 7,
                "args": [],
                "decorators": [],
                "docstring": "Fix the live_smoke_test_langchain.py file"
              },
              {
                "name": "fix_diversity_hypothesis_demo",
                "lineno": 119,
                "args": [],
                "decorators": [],
                "docstring": "Fix the diversity_hypothesis_demo.py file"
              },
              {
                "name": "fix_diversity_synthesis_orchestrator",
                "lineno": 157,
                "args": [],
                "decorators": [],
                "docstring": "Fix the diversity_synthesis_orchestrator.py file"
              },
              {
                "name": "fix_langgraph_diversity_orchestrator",
                "lineno": 195,
                "args": [],
                "decorators": [],
                "docstring": "Fix the langgraph_diversity_orchestrator.py file"
              },
              {
                "name": "fix_meta_cognitive_orchestrator",
                "lineno": 233,
                "args": [],
                "decorators": [],
                "docstring": "Fix the meta_cognitive_orchestrator.py file"
              },
              {
                "name": "main",
                "lineno": 274,
                "args": [],
                "decorators": [],
                "docstring": "Fix all remaining smoke test files"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "content",
                "lineno": 9,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 121,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 159,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 197,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 235,
                "value_type": "Constant"
              },
              {
                "name": "system",
                "lineno": 293,
                "value_type": "Call"
              },
              {
                "name": "files_to_test",
                "lineno": 294,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 304,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 28,
                "content": "Initialize LangChain models (only if API key is available)"
              },
              {
                "line": 32,
                "content": "Initialize LLM based on provider"
              },
              {
                "line": 46,
                "content": "Set up JSON output parser"
              },
              {
                "line": 49,
                "content": "Create the prompt template"
              },
              {
                "line": 62,
                "content": "Create the chain (only if LLM is available)"
              },
              {
                "line": 74,
                "content": "Execute the chain"
              },
              {
                "line": 97,
                "content": "Test with OpenAI if available"
              },
              {
                "line": 287,
                "content": "Test AST projection on the fixed files"
              }
            ],
            "total_lines": 315,
            "code_lines": 236
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_python_quality_enhanced.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 17929,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 14
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 17
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 18
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 19
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 21
              },
              {
                "module": "src.model_driven_projection",
                "names": [
                  "FinalProjectionSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 289
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 482,
                "args": [],
                "decorators": [],
                "docstring": "Run enhanced Python quality tests."
              },
              {
                "name": "__init__",
                "lineno": 34,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "test_python_file_quality",
                "lineno": 41,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Test a single Python file for quality compliance."
              },
              {
                "name": "_test_imports_validity",
                "lineno": 145,
                "args": [
                  "self",
                  "file_path",
                  "content"
                ],
                "decorators": [],
                "docstring": "Test that imports are valid and used."
              },
              {
                "name": "_test_type_annotations",
                "lineno": 170,
                "args": [
                  "self",
                  "file_path",
                  "content"
                ],
                "decorators": [],
                "docstring": "Test for type annotations in functions and classes."
              },
              {
                "name": "_test_docstrings",
                "lineno": 206,
                "args": [
                  "self",
                  "file_path",
                  "content"
                ],
                "decorators": [],
                "docstring": "Test for docstrings in functions and classes."
              },
              {
                "name": "_test_error_handling",
                "lineno": 243,
                "args": [
                  "self",
                  "file_path",
                  "content"
                ],
                "decorators": [],
                "docstring": "Test for proper error handling."
              },
              {
                "name": "_test_security",
                "lineno": 256,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Test for security issues using bandit."
              },
              {
                "name": "_is_model_driven_file",
                "lineno": 276,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Check if file is part of model-driven projection system."
              },
              {
                "name": "_test_model_projection",
                "lineno": 284,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Test model projection functionality."
              },
              {
                "name": "_test_functional_equivalence",
                "lineno": 301,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Test functional equivalence for model-driven files."
              },
              {
                "name": "update_model_registry",
                "lineno": 329,
                "args": [
                  "self",
                  "test_results"
                ],
                "decorators": [],
                "docstring": "Update the project model registry with test results."
              },
              {
                "name": "_generate_summary",
                "lineno": 357,
                "args": [
                  "self",
                  "test_results"
                ],
                "decorators": [],
                "docstring": "Generate summary statistics from test results."
              },
              {
                "name": "run_enhanced_tests",
                "lineno": 396,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Run enhanced Python quality tests on all Python files."
              }
            ],
            "classes": [
              {
                "name": "EnhancedPythonQualityTester",
                "lineno": 31,
                "bases": [],
                "methods": [
                  "__init__",
                  "test_python_file_quality",
                  "_test_imports_validity",
                  "_test_type_annotations",
                  "_test_docstrings",
                  "_test_error_handling",
                  "_test_security",
                  "_is_model_driven_file",
                  "_test_model_projection",
                  "_test_functional_equivalence",
                  "update_model_registry",
                  "_generate_summary",
                  "run_enhanced_tests"
                ],
                "docstring": "Enhanced Python quality tester with model-driven features."
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 28,
                "value_type": "Call"
              },
              {
                "name": "tester",
                "lineno": 484,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 485,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 45,
                "value_type": "Dict"
              },
              {
                "name": "total_files",
                "lineno": 359,
                "value_type": "Call"
              },
              {
                "name": "summary",
                "lineno": 363,
                "value_type": "Dict"
              },
              {
                "name": "test_categories",
                "lineno": 371,
                "value_type": "List"
              },
              {
                "name": "python_files",
                "lineno": 402,
                "value_type": "List"
              },
              {
                "name": "test_results",
                "lineno": 445,
                "value_type": "List"
              },
              {
                "name": "summary",
                "lineno": 454,
                "value_type": "Call"
              },
              {
                "name": "overall_success",
                "lineno": 469,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 73,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 106,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 148,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 149,
                "value_type": "List"
              },
              {
                "name": "import_names",
                "lineno": 155,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 174,
                "value_type": "ListComp"
              },
              {
                "name": "annotated_functions",
                "lineno": 179,
                "value_type": "Constant"
              },
              {
                "name": "total_functions",
                "lineno": 180,
                "value_type": "Call"
              },
              {
                "name": "annotation_ratio",
                "lineno": 197,
                "value_type": "BinOp"
              },
              {
                "name": "tree",
                "lineno": 209,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 210,
                "value_type": "ListComp"
              },
              {
                "name": "classes",
                "lineno": 213,
                "value_type": "ListComp"
              },
              {
                "name": "documented_items",
                "lineno": 217,
                "value_type": "Constant"
              },
              {
                "name": "total_items",
                "lineno": 218,
                "value_type": "BinOp"
              },
              {
                "name": "docstring_ratio",
                "lineno": 234,
                "value_type": "BinOp"
              },
              {
                "name": "result",
                "lineno": 259,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 305,
                "value_type": "Call"
              },
              {
                "name": "passed",
                "lineno": 386,
                "value_type": "Call"
              },
              {
                "name": "failed",
                "lineno": 387,
                "value_type": "BinOp"
              },
              {
                "name": "success_rate",
                "lineno": 388,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 447,
                "value_type": "Call"
              },
              {
                "name": "passed",
                "lineno": 461,
                "value_type": "Subscript"
              },
              {
                "name": "total",
                "lineno": 462,
                "value_type": "Subscript"
              },
              {
                "name": "status",
                "lineno": 463,
                "value_type": "IfExp"
              },
              {
                "name": "content",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "model_registry",
                "lineno": 334,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 23,
                "content": "Configure logging"
              },
              {
                "line": 61,
                "content": "Test AST parsing"
              },
              {
                "line": 71,
                "content": "Test Black formatting"
              },
              {
                "line": 87,
                "content": "Test Flake8 linting"
              },
              {
                "line": 104,
                "content": "Test MyPy type checking"
              },
              {
                "line": 121,
                "content": "Test imports validity"
              },
              {
                "line": 124,
                "content": "Test type annotations"
              },
              {
                "line": 127,
                "content": "Test docstrings"
              },
              {
                "line": 130,
                "content": "Test error handling"
              },
              {
                "line": 133,
                "content": "Test security"
              },
              {
                "line": 136,
                "content": "Test model projection (if applicable)"
              },
              {
                "line": 154,
                "content": "Check for unused imports (basic check)"
              },
              {
                "line": 163,
                "content": "This is a simplified check - in practice you'd need more sophisticated analysis"
              },
              {
                "line": 185,
                "content": "Check parameters"
              },
              {
                "line": 246,
                "content": "Check for try/except blocks"
              },
              {
                "line": 265,
                "content": "Bandit returns 0 for no issues, 1 for issues found"
              },
              {
                "line": 287,
                "content": "Import the model-driven projection system"
              },
              {
                "line": 293,
                "content": "Test that the file can be processed by the projection system"
              },
              {
                "line": 294,
                "content": "This is a basic test - in practice you'd want more comprehensive testing"
              },
              {
                "line": 304,
                "content": "Run the simple equivalence test"
              },
              {
                "line": 332,
                "content": "Load current model registry"
              },
              {
                "line": 336,
                "content": "Update with test results"
              },
              {
                "line": 347,
                "content": "Save updated model registry"
              },
              {
                "line": 370,
                "content": "Count passed/failed tests for each category"
              },
              {
                "line": 401,
                "content": "Find all Python files with proper exclusions"
              },
              {
                "line": 404,
                "content": "Skip virtual environments and other non-project directories"
              },
              {
                "line": 423,
                "content": "Only include files in our project directories"
              },
              {
                "line": 444,
                "content": "Test each file"
              },
              {
                "line": 450,
                "content": "Update model registry"
              },
              {
                "line": 453,
                "content": "Generate summary"
              },
              {
                "line": 456,
                "content": "Print results"
              },
              {
                "line": 468,
                "content": "Overall success"
              }
            ],
            "total_lines": 491,
            "code_lines": 385
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/test_projected_equivalence.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 8595,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "shutil",
                "asname": null,
                "lineno": 51
              },
              {
                "module": "src.streamlit.openflow_quickstart_app_projected",
                "names": [
                  "SecurityManager"
                ],
                "asnames": [
                  null
                ],
                "lineno": 120
              },
              {
                "module": "ast",
                "asname": null,
                "lineno": 162
              },
              {
                "module": "src.streamlit.openflow_quickstart_app_projected",
                "names": [
                  "DeploymentManager",
                  "OpenFlowQuickstartApp",
                  "SecurityManager"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 64
              }
            ],
            "functions": [
              {
                "name": "test_original_artifacts",
                "lineno": 13,
                "args": [],
                "decorators": [],
                "docstring": "Test the original artifacts."
              },
              {
                "name": "test_projected_artifacts",
                "lineno": 45,
                "args": [],
                "decorators": [],
                "docstring": "Test the projected artifacts."
              },
              {
                "name": "test_functional_equivalence",
                "lineno": 114,
                "args": [],
                "decorators": [],
                "docstring": "Test if projected artifacts have the same functionality as original."
              },
              {
                "name": "test_syntax_equivalence",
                "lineno": 156,
                "args": [],
                "decorators": [],
                "docstring": "Test if projected artifacts have the same syntax structure."
              },
              {
                "name": "main",
                "lineno": 211,
                "args": [],
                "decorators": [],
                "docstring": "Run all equivalence tests."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "tests",
                "lineno": 216,
                "value_type": "List"
              },
              {
                "name": "results",
                "lineno": 223,
                "value_type": "Dict"
              },
              {
                "name": "passed",
                "lineno": 242,
                "value_type": "Call"
              },
              {
                "name": "total",
                "lineno": 243,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "security",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "test_credential",
                "lineno": 127,
                "value_type": "Constant"
              },
              {
                "name": "encrypted",
                "lineno": 128,
                "value_type": "Call"
              },
              {
                "name": "decrypted",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "original_tree",
                "lineno": 167,
                "value_type": "Call"
              },
              {
                "name": "projected_tree",
                "lineno": 172,
                "value_type": "Call"
              },
              {
                "name": "original_functions",
                "lineno": 175,
                "value_type": "Call"
              },
              {
                "name": "projected_functions",
                "lineno": 178,
                "value_type": "Call"
              },
              {
                "name": "original_classes",
                "lineno": 182,
                "value_type": "Call"
              },
              {
                "name": "projected_classes",
                "lineno": 185,
                "value_type": "Call"
              },
              {
                "name": "status",
                "lineno": 246,
                "value_type": "IfExp"
              },
              {
                "name": "token",
                "lineno": 139,
                "value_type": "Call"
              },
              {
                "name": "original_content",
                "lineno": 166,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 171,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 228,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 6,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 18,
                "content": "Run basic validation tests"
              },
              {
                "line": 34,
                "content": "Removed return statement"
              },
              {
                "line": 39,
                "content": "Removed return statement"
              },
              {
                "line": 42,
                "content": "Removed return statement"
              },
              {
                "line": 49,
                "content": "Copy projected file to a test location"
              },
              {
                "line": 59,
                "content": "Test importing the projected file"
              },
              {
                "line": 62,
                "content": "Test basic import"
              },
              {
                "line": 73,
                "content": "Removed return statement"
              },
              {
                "line": 76,
                "content": "Removed return statement"
              },
              {
                "line": 78,
                "content": "Test creating instances"
              },
              {
                "line": 86,
                "content": "Removed return statement"
              },
              {
                "line": 93,
                "content": "Removed return statement"
              },
              {
                "line": 102,
                "content": "Removed return statement"
              },
              {
                "line": 104,
                "content": "Removed return statement"
              },
              {
                "line": 108,
                "content": "Removed return statement"
              },
              {
                "line": 111,
                "content": "Removed return statement"
              },
              {
                "line": 118,
                "content": "Test specific functionality"
              },
              {
                "line": 126,
                "content": "Test credential encryption/decryption"
              },
              {
                "line": 135,
                "content": "Removed return statement"
              },
              {
                "line": 137,
                "content": "Test session token creation"
              },
              {
                "line": 144,
                "content": "Removed return statement"
              },
              {
                "line": 147,
                "content": "Removed return statement"
              },
              {
                "line": 149,
                "content": "Removed return statement"
              },
              {
                "line": 153,
                "content": "Removed return statement"
              },
              {
                "line": 161,
                "content": "Parse both files with AST"
              },
              {
                "line": 164,
                "content": "Parse original"
              },
              {
                "line": 169,
                "content": "Parse projected"
              },
              {
                "line": 174,
                "content": "Count elements"
              },
              {
                "line": 201,
                "content": "Removed return statement"
              },
              {
                "line": 204,
                "content": "Removed return statement"
              },
              {
                "line": 208,
                "content": "Removed return statement"
              },
              {
                "line": 238,
                "content": "Summary"
              }
            ],
            "total_lines": 259,
            "code_lines": 175
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/COMPONENT_SUMMARY.md",
          "domain": "model_driven_projection",
          "file_type": "markdown",
          "size_bytes": 7205,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/improved_projection.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 1604,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field",
                  "field_validator"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "validate_account_url",
                "lineno": 33,
                "args": [
                  "self",
                  "v"
                ],
                "decorators": [
                  "field_validator"
                ],
                "docstring": "Validate Snowflake account URL format"
              }
            ],
            "classes": [
              {
                "name": "SnowflakeConfig",
                "lineno": 24,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "validate_account_url"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 9,
                "value_type": "Dict"
              },
              {
                "name": "AWS_CONFIG",
                "lineno": 17,
                "value_type": "Dict"
              },
              {
                "name": "msg",
                "lineno": 36,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 39,
            "code_lines": 31
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/README.md",
          "domain": "model_driven_projection",
          "file_type": "markdown",
          "size_bytes": 8651,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/improved_projection_system.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 18793,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 14
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              },
              {
                "module": "level1_granular_nodes",
                "names": [
                  "CodeNode"
                ],
                "asnames": [
                  null
                ],
                "lineno": 17
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 495,
                "args": [],
                "decorators": [],
                "docstring": "Test improved projection system."
              },
              {
                "name": "__init__",
                "lineno": 27,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "extract_and_project_file",
                "lineno": 34,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Extract and project with improved functional equivalence."
              },
              {
                "name": "_extract_with_improvements",
                "lineno": 64,
                "args": [
                  "self",
                  "tree",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Extract with improvements for functional equivalence."
              },
              {
                "name": "_extract_imports_improved",
                "lineno": 100,
                "args": [
                  "self",
                  "tree",
                  "file_path",
                  "context"
                ],
                "decorators": [],
                "docstring": "Extract imports with better handling."
              },
              {
                "name": "_extract_constants_improved",
                "lineno": 199,
                "args": [
                  "self",
                  "tree",
                  "file_path",
                  "context"
                ],
                "decorators": [],
                "docstring": "Extract constants with better handling."
              },
              {
                "name": "_extract_classes_with_methods_improved",
                "lineno": 284,
                "args": [
                  "self",
                  "tree",
                  "file_path",
                  "context"
                ],
                "decorators": [],
                "docstring": "Extract class definitions with their methods (improved)."
              },
              {
                "name": "_extract_standalone_functions_improved",
                "lineno": 336,
                "args": [
                  "self",
                  "tree",
                  "file_path",
                  "context"
                ],
                "decorators": [],
                "docstring": "Extract standalone functions (not class methods) with improvements."
              },
              {
                "name": "_get_parent_node",
                "lineno": 399,
                "args": [
                  "self",
                  "tree",
                  "target_node"
                ],
                "decorators": [],
                "docstring": "Get the parent node of a target node."
              },
              {
                "name": "_project_with_improvements",
                "lineno": 407,
                "args": [
                  "self",
                  "nodes",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Project nodes with improvements for functional equivalence."
              },
              {
                "name": "_generate_file_header_improved",
                "lineno": 457,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Generate improved file header."
              },
              {
                "name": "_generate_file_footer_improved",
                "lineno": 463,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Generate improved file footer."
              },
              {
                "name": "_determine_context",
                "lineno": 469,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Determine the context from file path."
              }
            ],
            "classes": [
              {
                "name": "ImprovedProjectionSystem",
                "lineno": 24,
                "bases": [],
                "methods": [
                  "__init__",
                  "extract_and_project_file",
                  "_extract_with_improvements",
                  "_extract_imports_improved",
                  "_extract_constants_improved",
                  "_extract_classes_with_methods_improved",
                  "_extract_standalone_functions_improved",
                  "_get_parent_node",
                  "_project_with_improvements",
                  "_generate_file_header_improved",
                  "_generate_file_footer_improved",
                  "_determine_context"
                ],
                "docstring": "Improved projection system with better functional equivalence."
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 21,
                "value_type": "Call"
              },
              {
                "name": "system",
                "lineno": 500,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 503,
                "value_type": "Constant"
              },
              {
                "name": "nodes",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "ordered_nodes",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "nodes",
                "lineno": 70,
                "value_type": "List"
              },
              {
                "name": "context",
                "lineno": 71,
                "value_type": "Call"
              },
              {
                "name": "import_nodes",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "constant_nodes",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "class_nodes",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "function_nodes",
                "lineno": 90,
                "value_type": "Call"
              },
              {
                "name": "nodes",
                "lineno": 107,
                "value_type": "List"
              },
              {
                "name": "seen_imports",
                "lineno": 108,
                "value_type": "Call"
              },
              {
                "name": "required_imports",
                "lineno": 111,
                "value_type": "List"
              },
              {
                "name": "nodes",
                "lineno": 206,
                "value_type": "List"
              },
              {
                "name": "seen_constants",
                "lineno": 207,
                "value_type": "Call"
              },
              {
                "name": "required_constants",
                "lineno": 210,
                "value_type": "List"
              },
              {
                "name": "nodes",
                "lineno": 291,
                "value_type": "List"
              },
              {
                "name": "nodes",
                "lineno": 343,
                "value_type": "List"
              },
              {
                "name": "content_parts",
                "lineno": 409,
                "value_type": "List"
              },
              {
                "name": "imports",
                "lineno": 415,
                "value_type": "List"
              },
              {
                "name": "constants",
                "lineno": 416,
                "value_type": "List"
              },
              {
                "name": "classes",
                "lineno": 417,
                "value_type": "List"
              },
              {
                "name": "functions",
                "lineno": 418,
                "value_type": "List"
              },
              {
                "name": "path",
                "lineno": 471,
                "value_type": "Call"
              },
              {
                "name": "path_str",
                "lineno": 472,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 509,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 520,
                "value_type": "Subscript"
              },
              {
                "name": "content",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "node_id",
                "lineno": 134,
                "value_type": "JoinedStr"
              },
              {
                "name": "code_node",
                "lineno": 136,
                "value_type": "Call"
              },
              {
                "name": "import_code",
                "lineno": 163,
                "value_type": "Call"
              },
              {
                "name": "node_id",
                "lineno": 170,
                "value_type": "JoinedStr"
              },
              {
                "name": "position",
                "lineno": 171,
                "value_type": "Call"
              },
              {
                "name": "code_node",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "node_id",
                "lineno": 219,
                "value_type": "JoinedStr"
              },
              {
                "name": "code_node",
                "lineno": 221,
                "value_type": "Call"
              },
              {
                "name": "class_name",
                "lineno": 295,
                "value_type": "Attribute"
              },
              {
                "name": "line_number",
                "lineno": 296,
                "value_type": "Call"
              },
              {
                "name": "class_code",
                "lineno": 299,
                "value_type": "Call"
              },
              {
                "name": "class_code",
                "lineno": 302,
                "value_type": "JoinedStr"
              },
              {
                "name": "node_id",
                "lineno": 304,
                "value_type": "JoinedStr"
              },
              {
                "name": "code_node",
                "lineno": 306,
                "value_type": "Call"
              },
              {
                "name": "parent",
                "lineno": 348,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 353,
                "value_type": "Attribute"
              },
              {
                "name": "definition_code",
                "lineno": 354,
                "value_type": "Call"
              },
              {
                "name": "line_number",
                "lineno": 355,
                "value_type": "Call"
              },
              {
                "name": "definition_code",
                "lineno": 358,
                "value_type": "JoinedStr"
              },
              {
                "name": "unique_id",
                "lineno": 361,
                "value_type": "Tuple"
              },
              {
                "name": "node_id",
                "lineno": 367,
                "value_type": "JoinedStr"
              },
              {
                "name": "code_node",
                "lineno": 369,
                "value_type": "Call"
              },
              {
                "name": "constant_code",
                "lineno": 249,
                "value_type": "Call"
              },
              {
                "name": "node_id",
                "lineno": 256,
                "value_type": "JoinedStr"
              },
              {
                "name": "position",
                "lineno": 257,
                "value_type": "Call"
              },
              {
                "name": "code_node",
                "lineno": 259,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 19,
                "content": "Configure logging"
              },
              {
                "line": 45,
                "content": "Parse AST"
              },
              {
                "line": 52,
                "content": "Extract with improved handling"
              },
              {
                "line": 58,
                "content": "Sort nodes by order"
              },
              {
                "line": 61,
                "content": "Project with improvements"
              },
              {
                "line": 73,
                "content": "Extract imports with better handling"
              },
              {
                "line": 77,
                "content": "Extract constants and configurations"
              },
              {
                "line": 81,
                "content": "Extract class definitions with their methods"
              },
              {
                "line": 89,
                "content": "Extract standalone functions (not class methods)"
              },
              {
                "line": 110,
                "content": "Add required imports for functional equivalence"
              },
              {
                "line": 129,
                "content": "Add required imports first"
              },
              {
                "line": 160,
                "content": "Extract actual imports from file"
              },
              {
                "line": 209,
                "content": "Add required constants for functional equivalence"
              },
              {
                "line": 244,
                "content": "Extract actual constants from file"
              },
              {
                "line": 247,
                "content": "Only capture top-level assignments (constants)"
              },
              {
                "line": 298,
                "content": "Extract the entire class with all its methods"
              },
              {
                "line": 301,
                "content": "Add proper spacing"
              },
              {
                "line": 347,
                "content": "Check if this function is inside a class"
              },
              {
                "line": 350,
                "content": "This is a class method, skip it (it's handled in class extraction)"
              },
              {
                "line": 357,
                "content": "Add proper spacing"
              },
              {
                "line": 360,
                "content": "Check if we've already seen this standalone function"
              },
              {
                "line": 411,
                "content": "Add file header"
              },
              {
                "line": 414,
                "content": "Group nodes by type for proper ordering"
              },
              {
                "line": 430,
                "content": "Add imports first"
              },
              {
                "line": 437,
                "content": "Add constants"
              },
              {
                "line": 444,
                "content": "Add classes"
              },
              {
                "line": 448,
                "content": "Add standalone functions"
              },
              {
                "line": 452,
                "content": "Add file footer"
              },
              {
                "line": 502,
                "content": "Test file"
              },
              {
                "line": 508,
                "content": "Extract and project"
              },
              {
                "line": 512,
                "content": "Save the improved projection"
              },
              {
                "line": 518,
                "content": "Show sample content"
              }
            ],
            "total_lines": 531,
            "code_lines": 405
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/test_simple_equivalence.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 9575,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "test_syntax_equivalence",
                "lineno": 11,
                "args": [],
                "decorators": [],
                "docstring": "Test if projected artifacts have the same syntax structure."
              },
              {
                "name": "test_content_equivalence",
                "lineno": 83,
                "args": [],
                "decorators": [],
                "docstring": "Test if projected artifacts contain the same key content."
              },
              {
                "name": "test_structure_equivalence",
                "lineno": 154,
                "args": [],
                "decorators": [],
                "docstring": "Test if projected artifacts have the same structural elements."
              },
              {
                "name": "test_original_tests",
                "lineno": 211,
                "args": [],
                "decorators": [],
                "docstring": "Test if original tests still pass."
              },
              {
                "name": "main",
                "lineno": 247,
                "args": [],
                "decorators": [],
                "docstring": "Run all equivalence tests."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "tests",
                "lineno": 252,
                "value_type": "List"
              },
              {
                "name": "results",
                "lineno": 259,
                "value_type": "Dict"
              },
              {
                "name": "passed",
                "lineno": 278,
                "value_type": "Call"
              },
              {
                "name": "total",
                "lineno": 279,
                "value_type": "Call"
              },
              {
                "name": "original_tree",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "projected_tree",
                "lineno": 25,
                "value_type": "Call"
              },
              {
                "name": "original_functions",
                "lineno": 28,
                "value_type": "Call"
              },
              {
                "name": "projected_functions",
                "lineno": 31,
                "value_type": "Call"
              },
              {
                "name": "original_classes",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "projected_classes",
                "lineno": 38,
                "value_type": "Call"
              },
              {
                "name": "original_imports",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "projected_imports",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "key_classes",
                "lineno": 96,
                "value_type": "List"
              },
              {
                "name": "missing_classes",
                "lineno": 102,
                "value_type": "List"
              },
              {
                "name": "key_functions",
                "lineno": 115,
                "value_type": "List"
              },
              {
                "name": "missing_functions",
                "lineno": 121,
                "value_type": "List"
              },
              {
                "name": "key_imports",
                "lineno": 134,
                "value_type": "List"
              },
              {
                "name": "missing_imports",
                "lineno": 135,
                "value_type": "List"
              },
              {
                "name": "original_tree",
                "lineno": 162,
                "value_type": "Call"
              },
              {
                "name": "projected_tree",
                "lineno": 166,
                "value_type": "Call"
              },
              {
                "name": "original_class_names",
                "lineno": 169,
                "value_type": "ListComp"
              },
              {
                "name": "projected_class_names",
                "lineno": 174,
                "value_type": "ListComp"
              },
              {
                "name": "missing_classes",
                "lineno": 184,
                "value_type": "BinOp"
              },
              {
                "name": "result",
                "lineno": 219,
                "value_type": "Call"
              },
              {
                "name": "status",
                "lineno": 282,
                "value_type": "IfExp"
              },
              {
                "name": "original_content",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 93,
                "value_type": "Call"
              },
              {
                "name": "original_content",
                "lineno": 161,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 165,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 264,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Parse both files with AST"
              },
              {
                "line": 17,
                "content": "Parse original"
              },
              {
                "line": 22,
                "content": "Parse projected"
              },
              {
                "line": 27,
                "content": "Count elements"
              },
              {
                "line": 73,
                "content": "Removed return statement"
              },
              {
                "line": 76,
                "content": "Removed return statement"
              },
              {
                "line": 80,
                "content": "Removed return statement"
              },
              {
                "line": 88,
                "content": "Read both files"
              },
              {
                "line": 95,
                "content": "Check for key classes"
              },
              {
                "line": 110,
                "content": "Removed return statement"
              },
              {
                "line": 114,
                "content": "Check for key functions"
              },
              {
                "line": 129,
                "content": "Removed return statement"
              },
              {
                "line": 133,
                "content": "Check for key imports"
              },
              {
                "line": 143,
                "content": "Removed return statement"
              },
              {
                "line": 147,
                "content": "Removed return statement"
              },
              {
                "line": 151,
                "content": "Removed return statement"
              },
              {
                "line": 159,
                "content": "Parse both files"
              },
              {
                "line": 168,
                "content": "Check for specific structural elements"
              },
              {
                "line": 183,
                "content": "Check if all original classes are in projected"
              },
              {
                "line": 187,
                "content": "Removed return statement"
              },
              {
                "line": 191,
                "content": "Check for constants"
              },
              {
                "line": 196,
                "content": "Removed return statement"
              },
              {
                "line": 202,
                "content": "Removed return statement"
              },
              {
                "line": 204,
                "content": "Removed return statement"
              },
              {
                "line": 208,
                "content": "Removed return statement"
              },
              {
                "line": 216,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 218,
                "content": "Run a simple test that doesn't require external dependencies"
              },
              {
                "line": 235,
                "content": "Removed return statement"
              },
              {
                "line": 240,
                "content": "Removed return statement"
              },
              {
                "line": 244,
                "content": "Removed return statement"
              },
              {
                "line": 274,
                "content": "Summary"
              }
            ],
            "total_lines": 295,
            "code_lines": 206
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/TEST_EQUIVALENCE_REPORT.md",
          "domain": "model_driven_projection",
          "file_type": "markdown",
          "size_bytes": 6635,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/final_projection_system.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 17172,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 14
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              },
              {
                "module": "level1_granular_nodes",
                "names": [
                  "CodeNode"
                ],
                "asnames": [
                  null
                ],
                "lineno": 17
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 449,
                "args": [],
                "decorators": [],
                "docstring": "Test final projection system."
              },
              {
                "name": "__init__",
                "lineno": 27,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "extract_and_project_file",
                "lineno": 34,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Extract and project with all issues fixed."
              },
              {
                "name": "_extract_with_all_fixes",
                "lineno": 64,
                "args": [
                  "self",
                  "tree",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Extract with all fixes applied."
              },
              {
                "name": "_extract_imports_fixed",
                "lineno": 92,
                "args": [
                  "self",
                  "tree",
                  "file_path",
                  "context"
                ],
                "decorators": [],
                "docstring": "Extract imports with all fixes applied."
              },
              {
                "name": "_extract_constants_fixed",
                "lineno": 152,
                "args": [
                  "self",
                  "tree",
                  "file_path",
                  "context"
                ],
                "decorators": [],
                "docstring": "Extract constants with fixes applied."
              },
              {
                "name": "_extract_classes_with_methods_fixed",
                "lineno": 199,
                "args": [
                  "self",
                  "tree",
                  "file_path",
                  "context"
                ],
                "decorators": [],
                "docstring": "Extract class definitions with their methods (fixed)."
              },
              {
                "name": "_extract_standalone_functions_fixed",
                "lineno": 251,
                "args": [
                  "self",
                  "tree",
                  "file_path",
                  "context"
                ],
                "decorators": [],
                "docstring": "Extract standalone functions (not class methods) with fixes."
              },
              {
                "name": "_fix_assert_statements",
                "lineno": 320,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Replace assert statements with proper error handling."
              },
              {
                "name": "_fix_parameter_spacing",
                "lineno": 342,
                "args": [
                  "self",
                  "code"
                ],
                "decorators": [],
                "docstring": "Fix parameter spacing issues."
              },
              {
                "name": "_get_parent_node",
                "lineno": 353,
                "args": [
                  "self",
                  "tree",
                  "target_node"
                ],
                "decorators": [],
                "docstring": "Get the parent node of a target node."
              },
              {
                "name": "_project_with_all_fixes",
                "lineno": 361,
                "args": [
                  "self",
                  "nodes",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Project nodes with all fixes applied."
              },
              {
                "name": "_generate_file_header_fixed",
                "lineno": 411,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Generate fixed file header."
              },
              {
                "name": "_generate_file_footer_fixed",
                "lineno": 417,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Generate fixed file footer."
              },
              {
                "name": "_determine_context",
                "lineno": 423,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Determine the context from file path."
              }
            ],
            "classes": [
              {
                "name": "FinalProjectionSystem",
                "lineno": 24,
                "bases": [],
                "methods": [
                  "__init__",
                  "extract_and_project_file",
                  "_extract_with_all_fixes",
                  "_extract_imports_fixed",
                  "_extract_constants_fixed",
                  "_extract_classes_with_methods_fixed",
                  "_extract_standalone_functions_fixed",
                  "_fix_assert_statements",
                  "_fix_parameter_spacing",
                  "_get_parent_node",
                  "_project_with_all_fixes",
                  "_generate_file_header_fixed",
                  "_generate_file_footer_fixed",
                  "_determine_context"
                ],
                "docstring": "Final projection system with all issues fixed."
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 21,
                "value_type": "Call"
              },
              {
                "name": "system",
                "lineno": 454,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 457,
                "value_type": "Constant"
              },
              {
                "name": "nodes",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "ordered_nodes",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "nodes",
                "lineno": 66,
                "value_type": "List"
              },
              {
                "name": "context",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "import_nodes",
                "lineno": 70,
                "value_type": "Call"
              },
              {
                "name": "constant_nodes",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "class_nodes",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "function_nodes",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "nodes",
                "lineno": 99,
                "value_type": "List"
              },
              {
                "name": "seen_imports",
                "lineno": 100,
                "value_type": "Call"
              },
              {
                "name": "required_imports",
                "lineno": 103,
                "value_type": "List"
              },
              {
                "name": "nodes",
                "lineno": 159,
                "value_type": "List"
              },
              {
                "name": "seen_constants",
                "lineno": 160,
                "value_type": "Call"
              },
              {
                "name": "required_constants",
                "lineno": 163,
                "value_type": "List"
              },
              {
                "name": "nodes",
                "lineno": 206,
                "value_type": "List"
              },
              {
                "name": "nodes",
                "lineno": 258,
                "value_type": "List"
              },
              {
                "name": "lines",
                "lineno": 323,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 324,
                "value_type": "List"
              },
              {
                "name": "code",
                "lineno": 345,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 346,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 347,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 348,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 349,
                "value_type": "Call"
              },
              {
                "name": "code",
                "lineno": 350,
                "value_type": "Call"
              },
              {
                "name": "content_parts",
                "lineno": 363,
                "value_type": "List"
              },
              {
                "name": "imports",
                "lineno": 369,
                "value_type": "List"
              },
              {
                "name": "constants",
                "lineno": 370,
                "value_type": "List"
              },
              {
                "name": "classes",
                "lineno": 371,
                "value_type": "List"
              },
              {
                "name": "functions",
                "lineno": 372,
                "value_type": "List"
              },
              {
                "name": "path",
                "lineno": 425,
                "value_type": "Call"
              },
              {
                "name": "path_str",
                "lineno": 426,
                "value_type": "Call"
              },
              {
                "name": "projected_content",
                "lineno": 463,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 474,
                "value_type": "Subscript"
              },
              {
                "name": "content",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "node_id",
                "lineno": 124,
                "value_type": "JoinedStr"
              },
              {
                "name": "code_node",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "node_id",
                "lineno": 172,
                "value_type": "JoinedStr"
              },
              {
                "name": "code_node",
                "lineno": 174,
                "value_type": "Call"
              },
              {
                "name": "class_name",
                "lineno": 210,
                "value_type": "Attribute"
              },
              {
                "name": "line_number",
                "lineno": 211,
                "value_type": "Call"
              },
              {
                "name": "class_code",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "class_code",
                "lineno": 217,
                "value_type": "JoinedStr"
              },
              {
                "name": "node_id",
                "lineno": 219,
                "value_type": "JoinedStr"
              },
              {
                "name": "code_node",
                "lineno": 221,
                "value_type": "Call"
              },
              {
                "name": "parent",
                "lineno": 263,
                "value_type": "Call"
              },
              {
                "name": "func_name",
                "lineno": 268,
                "value_type": "Attribute"
              },
              {
                "name": "definition_code",
                "lineno": 269,
                "value_type": "Call"
              },
              {
                "name": "line_number",
                "lineno": 270,
                "value_type": "Call"
              },
              {
                "name": "definition_code",
                "lineno": 273,
                "value_type": "Call"
              },
              {
                "name": "definition_code",
                "lineno": 276,
                "value_type": "Call"
              },
              {
                "name": "definition_code",
                "lineno": 279,
                "value_type": "JoinedStr"
              },
              {
                "name": "unique_id",
                "lineno": 282,
                "value_type": "Tuple"
              },
              {
                "name": "node_id",
                "lineno": 288,
                "value_type": "JoinedStr"
              },
              {
                "name": "code_node",
                "lineno": 290,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 19,
                "content": "Configure logging"
              },
              {
                "line": 45,
                "content": "Parse AST"
              },
              {
                "line": 52,
                "content": "Extract with all fixes"
              },
              {
                "line": 58,
                "content": "Sort nodes by order"
              },
              {
                "line": 61,
                "content": "Project with all fixes"
              },
              {
                "line": 69,
                "content": "Extract imports with fixes"
              },
              {
                "line": 73,
                "content": "Extract constants and configurations"
              },
              {
                "line": 77,
                "content": "Extract class definitions with their methods"
              },
              {
                "line": 81,
                "content": "Extract standalone functions (not class methods)"
              },
              {
                "line": 102,
                "content": "Add only required imports (no duplicates)"
              },
              {
                "line": 119,
                "content": "Add required imports first"
              },
              {
                "line": 162,
                "content": "Add required constants for functional equivalence"
              },
              {
                "line": 213,
                "content": "Extract the entire class with all its methods"
              },
              {
                "line": 216,
                "content": "Fix spacing - only 2 blank lines"
              },
              {
                "line": 262,
                "content": "Check if this function is inside a class"
              },
              {
                "line": 265,
                "content": "This is a class method, skip it (it's handled in class extraction)"
              },
              {
                "line": 272,
                "content": "Fix assert statements"
              },
              {
                "line": 275,
                "content": "Fix parameter spacing"
              },
              {
                "line": 278,
                "content": "Add proper spacing - only 2 blank lines"
              },
              {
                "line": 281,
                "content": "Check if we've already seen this standalone function"
              },
              {
                "line": 322,
                "content": "Replace assert statements with if/raise"
              },
              {
                "line": 328,
                "content": "Convert assert to if/raise"
              },
              {
                "line": 335,
                "content": "Keep other assert statements for now (they might be in tests)"
              },
              {
                "line": 344,
                "content": "Fix parameter spacing around equals"
              },
              {
                "line": 365,
                "content": "Add file header"
              },
              {
                "line": 368,
                "content": "Group nodes by type for proper ordering"
              },
              {
                "line": 384,
                "content": "Add imports first"
              },
              {
                "line": 391,
                "content": "Add constants"
              },
              {
                "line": 398,
                "content": "Add classes"
              },
              {
                "line": 402,
                "content": "Add standalone functions"
              },
              {
                "line": 406,
                "content": "Add file footer"
              },
              {
                "line": 456,
                "content": "Test file"
              },
              {
                "line": 462,
                "content": "Extract and project"
              },
              {
                "line": 466,
                "content": "Save the final projection"
              },
              {
                "line": 472,
                "content": "Show sample content"
              }
            ],
            "total_lines": 485,
            "code_lines": 362
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/level1_granular_nodes.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 12794,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "dataclasses",
                "names": [
                  "asdict",
                  "dataclass"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 14
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 16
              }
            ],
            "functions": [
              {
                "name": "create_sample_nodes",
                "lineno": 314,
                "args": [],
                "decorators": [],
                "docstring": "Create sample nodes for demonstration."
              },
              {
                "name": "main",
                "lineno": 364,
                "args": [],
                "decorators": [],
                "docstring": "Demonstrate Level 1 implementation."
              },
              {
                "name": "validate_granularity",
                "lineno": 35,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Ensure node is paragraph-sized (\u226450 lines)."
              },
              {
                "name": "to_dict",
                "lineno": 40,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Convert to dictionary for JSON serialization."
              },
              {
                "name": "__init__",
                "lineno": 48,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "add_node",
                "lineno": 51,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Add a node to the resolver."
              },
              {
                "name": "resolve_order",
                "lineno": 58,
                "args": [
                  "self",
                  "node_ids"
                ],
                "decorators": [],
                "docstring": "Resolve node ordering based on dependencies."
              },
              {
                "name": "detect_cycles",
                "lineno": 99,
                "args": [
                  "self",
                  "node_ids"
                ],
                "decorators": [],
                "docstring": "Detect circular dependencies."
              },
              {
                "name": "__init__",
                "lineno": 126,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "add_node",
                "lineno": 129,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Add a node to the projector."
              },
              {
                "name": "project_node",
                "lineno": 133,
                "args": [
                  "self",
                  "node_id",
                  "context"
                ],
                "decorators": [],
                "docstring": "Project a single node into code."
              },
              {
                "name": "compose_nodes",
                "lineno": 153,
                "args": [
                  "self",
                  "node_ids",
                  "context"
                ],
                "decorators": [],
                "docstring": "Compose multiple nodes into a file."
              },
              {
                "name": "validate_composition",
                "lineno": 199,
                "args": [
                  "self",
                  "composition"
                ],
                "decorators": [],
                "docstring": "Validate the composed result."
              },
              {
                "name": "_generate_file_header",
                "lineno": 209,
                "args": [
                  "self",
                  "context"
                ],
                "decorators": [],
                "docstring": "Generate file header."
              },
              {
                "name": "_generate_file_footer",
                "lineno": 222,
                "args": [
                  "self",
                  "context"
                ],
                "decorators": [],
                "docstring": "Generate file footer."
              },
              {
                "name": "_add_type_hints",
                "lineno": 226,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Add type hints to function content."
              },
              {
                "name": "_add_docstring",
                "lineno": 234,
                "args": [
                  "self",
                  "content"
                ],
                "decorators": [],
                "docstring": "Add docstring to function content."
              },
              {
                "name": "__init__",
                "lineno": 253,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "add_node",
                "lineno": 257,
                "args": [
                  "self",
                  "node"
                ],
                "decorators": [],
                "docstring": "Add a node to the registry."
              },
              {
                "name": "create_file",
                "lineno": 263,
                "args": [
                  "self",
                  "file_name",
                  "node_ids",
                  "context"
                ],
                "decorators": [],
                "docstring": "Create a file from nodes."
              },
              {
                "name": "save_model",
                "lineno": 288,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Save the model to a file."
              },
              {
                "name": "load_model",
                "lineno": 301,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Load the model from a file."
              },
              {
                "name": "visit",
                "lineno": 76,
                "args": [
                  "node_id"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "find_cycles",
                "lineno": 103,
                "args": [
                  "node_id",
                  "path"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "CodeNode",
                "lineno": 24,
                "bases": [],
                "methods": [
                  "validate_granularity",
                  "to_dict"
                ],
                "docstring": "A granular code node (\u226450 lines)."
              },
              {
                "name": "DependencyResolver",
                "lineno": 45,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_node",
                  "resolve_order",
                  "detect_cycles"
                ],
                "docstring": "Resolve dependencies between nodes."
              },
              {
                "name": "NodeProjector",
                "lineno": 123,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_node",
                  "project_node",
                  "compose_nodes",
                  "validate_composition",
                  "_generate_file_header",
                  "_generate_file_footer",
                  "_add_type_hints",
                  "_add_docstring"
                ],
                "docstring": "Project nodes into code."
              },
              {
                "name": "ModelRegistry",
                "lineno": 250,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_node",
                  "create_file",
                  "save_model",
                  "load_model"
                ],
                "docstring": "Registry for managing model nodes."
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "registry",
                "lineno": 369,
                "value_type": "Call"
              },
              {
                "name": "nodes",
                "lineno": 372,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 37,
                "value_type": "Call"
              },
              {
                "name": "graph",
                "lineno": 63,
                "value_type": "DictComp"
              },
              {
                "name": "result",
                "lineno": 72,
                "value_type": "List"
              },
              {
                "name": "visited",
                "lineno": 73,
                "value_type": "Call"
              },
              {
                "name": "temp_visited",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "cycles",
                "lineno": 101,
                "value_type": "List"
              },
              {
                "name": "node",
                "lineno": 139,
                "value_type": "Subscript"
              },
              {
                "name": "content",
                "lineno": 142,
                "value_type": "Attribute"
              },
              {
                "name": "cycles",
                "lineno": 165,
                "value_type": "Call"
              },
              {
                "name": "file_content",
                "lineno": 170,
                "value_type": "List"
              },
              {
                "name": "import_nodes",
                "lineno": 176,
                "value_type": "ListComp"
              },
              {
                "name": "other_nodes",
                "lineno": 188,
                "value_type": "ListComp"
              },
              {
                "name": "header",
                "lineno": 211,
                "value_type": "List"
              },
              {
                "name": "missing_nodes",
                "lineno": 273,
                "value_type": "ListComp"
              },
              {
                "name": "content",
                "lineno": 279,
                "value_type": "Call"
              },
              {
                "name": "model_data",
                "lineno": 290,
                "value_type": "Dict"
              },
              {
                "name": "content",
                "lineno": 378,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 54,
                "value_type": "JoinedStr"
              },
              {
                "name": "node",
                "lineno": 112,
                "value_type": "Subscript"
              },
              {
                "name": "msg",
                "lineno": 136,
                "value_type": "JoinedStr"
              },
              {
                "name": "content",
                "lineno": 146,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 149,
                "value_type": "Call"
              },
              {
                "name": "ordered_nodes",
                "lineno": 159,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 180,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 190,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 231,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 238,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 246,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 275,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 283,
                "value_type": "JoinedStr"
              },
              {
                "name": "model_data",
                "lineno": 304,
                "value_type": "Call"
              },
              {
                "name": "node",
                "lineno": 308,
                "value_type": "Call"
              },
              {
                "name": "node",
                "lineno": 66,
                "value_type": "Subscript"
              },
              {
                "name": "msg",
                "lineno": 78,
                "value_type": "JoinedStr"
              },
              {
                "name": "cycle",
                "lineno": 105,
                "value_type": "BinOp"
              },
              {
                "name": "indent",
                "lineno": 242,
                "value_type": "BinOp"
              },
              {
                "name": "docstring",
                "lineno": 243,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 18,
                "content": "Configure logging"
              },
              {
                "line": 62,
                "content": "Build dependency graph"
              },
              {
                "line": 71,
                "content": "Topological sort"
              },
              {
                "line": 141,
                "content": "Apply projection rules"
              },
              {
                "line": 144,
                "content": "Add context-specific modifications"
              },
              {
                "line": 157,
                "content": "Resolve dependencies"
              },
              {
                "line": 164,
                "content": "Check for cycles"
              },
              {
                "line": 169,
                "content": "Project each node"
              },
              {
                "line": 172,
                "content": "Add file header"
              },
              {
                "line": 175,
                "content": "Add imports first"
              },
              {
                "line": 183,
                "content": "Add blank line after imports"
              },
              {
                "line": 187,
                "content": "Add other nodes"
              },
              {
                "line": 194,
                "content": "Add file footer"
              },
              {
                "line": 202,
                "content": "Try to parse as Python"
              },
              {
                "line": 228,
                "content": "Simple type hint addition (could be more sophisticated)"
              },
              {
                "line": 230,
                "content": "Add basic type hints"
              },
              {
                "line": 237,
                "content": "Add basic docstring"
              },
              {
                "line": 241,
                "content": "Insert docstring after function definition"
              },
              {
                "line": 272,
                "content": "Validate all nodes exist"
              },
              {
                "line": 278,
                "content": "Compose file"
              },
              {
                "line": 281,
                "content": "Validate composition"
              },
              {
                "line": 354,
                "content": "Add processing logic here"
              },
              {
                "line": 368,
                "content": "Create registry"
              },
              {
                "line": 371,
                "content": "Add sample nodes"
              },
              {
                "line": 376,
                "content": "Create a file from nodes"
              },
              {
                "line": 394,
                "content": "Save model"
              }
            ],
            "total_lines": 405,
            "code_lines": 297
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/final_projection.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 1601,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field",
                  "field_validator"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "validate_account_url",
                "lineno": 33,
                "args": [
                  "self",
                  "v"
                ],
                "decorators": [
                  "field_validator"
                ],
                "docstring": "Validate Snowflake account URL format"
              }
            ],
            "classes": [
              {
                "name": "SnowflakeConfig",
                "lineno": 24,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "validate_account_url"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 9,
                "value_type": "Dict"
              },
              {
                "name": "AWS_CONFIG",
                "lineno": 17,
                "value_type": "Dict"
              },
              {
                "name": "msg",
                "lineno": 36,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 39,
            "code_lines": 31
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/FUNCTIONAL_EQUIVALENCE_REPORT.md",
          "domain": "model_driven_projection",
          "file_type": "markdown",
          "size_bytes": 6297,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/__init__.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 1073,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "final_projection_system",
                "names": [
                  "FinalProjectionSystem"
                ],
                "asnames": [
                  null
                ],
                "lineno": 23
              },
              {
                "module": "level1_granular_nodes",
                "names": [
                  "CodeNode",
                  "DependencyResolver",
                  "ModelRegistry",
                  "NodeProjector"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 24
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "__version__",
                "lineno": 31,
                "value_type": "Constant"
              },
              {
                "name": "__author__",
                "lineno": 32,
                "value_type": "Constant"
              },
              {
                "name": "__all__",
                "lineno": 34,
                "value_type": "List"
              }
            ],
            "comments": [],
            "total_lines": 41,
            "code_lines": 34
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/test_projected_artifacts_pytest.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 9401,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_projected_artifacts_syntax",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have valid Python syntax."
              },
              {
                "name": "test_projected_artifacts_structure",
                "lineno": 43,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have the expected structure."
              },
              {
                "name": "test_projected_artifacts_content",
                "lineno": 113,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts contain expected content."
              },
              {
                "name": "test_projected_artifacts_file_size",
                "lineno": 172,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have reasonable file sizes."
              },
              {
                "name": "test_projected_artifacts_import_structure",
                "lineno": 195,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have proper import structure."
              },
              {
                "name": "test_projected_artifacts_class_structure",
                "lineno": 221,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have proper class structure."
              },
              {
                "name": "test_projected_artifacts_function_structure",
                "lineno": 247,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have proper function structure."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "test_files",
                "lineno": 14,
                "value_type": "List"
              },
              {
                "name": "streamlit_file",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 55,
                "value_type": "Constant"
              },
              {
                "name": "functions",
                "lineno": 56,
                "value_type": "Constant"
              },
              {
                "name": "classes",
                "lineno": 57,
                "value_type": "Constant"
              },
              {
                "name": "security_file",
                "lineno": 80,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 86,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 89,
                "value_type": "Constant"
              },
              {
                "name": "functions",
                "lineno": 90,
                "value_type": "Constant"
              },
              {
                "name": "classes",
                "lineno": 91,
                "value_type": "Constant"
              },
              {
                "name": "streamlit_file",
                "lineno": 116,
                "value_type": "Call"
              },
              {
                "name": "expected_imports",
                "lineno": 123,
                "value_type": "List"
              },
              {
                "name": "expected_classes",
                "lineno": 137,
                "value_type": "List"
              },
              {
                "name": "security_file",
                "lineno": 151,
                "value_type": "Call"
              },
              {
                "name": "expected_functions",
                "lineno": 158,
                "value_type": "List"
              },
              {
                "name": "test_files",
                "lineno": 174,
                "value_type": "List"
              },
              {
                "name": "streamlit_file",
                "lineno": 198,
                "value_type": "Call"
              },
              {
                "name": "import_lines",
                "lineno": 205,
                "value_type": "List"
              },
              {
                "name": "streamlit_file",
                "lineno": 223,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 229,
                "value_type": "Call"
              },
              {
                "name": "classes",
                "lineno": 232,
                "value_type": "List"
              },
              {
                "name": "expected_classes",
                "lineno": 241,
                "value_type": "List"
              },
              {
                "name": "streamlit_file",
                "lineno": 249,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 255,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 258,
                "value_type": "List"
              },
              {
                "name": "expected_functions",
                "lineno": 267,
                "value_type": "List"
              },
              {
                "name": "init_functions",
                "lineno": 277,
                "value_type": "ListComp"
              },
              {
                "name": "content",
                "lineno": 50,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 155,
                "value_type": "Call"
              },
              {
                "name": "file_path_obj",
                "lineno": 180,
                "value_type": "Call"
              },
              {
                "name": "file_size",
                "lineno": 183,
                "value_type": "Attribute"
              },
              {
                "name": "lines",
                "lineno": 202,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 227,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 253,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 39,
                "value_type": "JoinedStr"
              },
              {
                "name": "content",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 31,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 35,
                "value_type": "JoinedStr"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 25,
                "content": "Parse with AST to check syntax"
              },
              {
                "line": 45,
                "content": "Test streamlit app structure"
              },
              {
                "line": 54,
                "content": "Count elements"
              },
              {
                "line": 72,
                "content": "Basic structure validation"
              },
              {
                "line": 79,
                "content": "Test security module structure"
              },
              {
                "line": 88,
                "content": "Count elements"
              },
              {
                "line": 106,
                "content": "Basic structure validation"
              },
              {
                "line": 115,
                "content": "Test streamlit app content"
              },
              {
                "line": 122,
                "content": "Check for expected content"
              },
              {
                "line": 136,
                "content": "Check for expected classes"
              },
              {
                "line": 150,
                "content": "Test security module content"
              },
              {
                "line": 157,
                "content": "Check for expected content"
              },
              {
                "line": 186,
                "content": "Check that files are not empty"
              },
              {
                "line": 189,
                "content": "Check that files are not too small (should have content)"
              },
              {
                "line": 197,
                "content": "Test that imports are at the top"
              },
              {
                "line": 204,
                "content": "Check that imports are in the first 20 lines"
              },
              {
                "line": 213,
                "content": "Check that imports are properly formatted"
              },
              {
                "line": 231,
                "content": "Find all classes"
              },
              {
                "line": 240,
                "content": "Check that main classes exist"
              },
              {
                "line": 257,
                "content": "Find all functions"
              },
              {
                "line": 266,
                "content": "Check that key functions exist (based on what's actually in the projected artifacts)"
              },
              {
                "line": 276,
                "content": "Check that we have some class methods (__init__ functions)"
              }
            ],
            "total_lines": 280,
            "code_lines": 193
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/README.md",
          "domain": "model_driven_projection",
          "file_type": "markdown",
          "size_bytes": 597,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/TEST_SUMMARY.md",
          "domain": "model_driven_projection",
          "file_type": "markdown",
          "size_bytes": 4266,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/test_projected_artifacts_simple.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 7372,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_projected_artifacts_syntax",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have valid Python syntax."
              },
              {
                "name": "test_projected_artifacts_structure",
                "lineno": 41,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have the expected structure."
              },
              {
                "name": "test_projected_artifacts_content",
                "lineno": 111,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts contain expected content."
              },
              {
                "name": "test_projected_artifacts_file_size",
                "lineno": 170,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have reasonable file sizes."
              },
              {
                "name": "main",
                "lineno": 193,
                "args": [],
                "decorators": [],
                "docstring": "Run all tests for projected artifacts."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "test_files",
                "lineno": 14,
                "value_type": "List"
              },
              {
                "name": "streamlit_file",
                "lineno": 44,
                "value_type": "Call"
              },
              {
                "name": "security_file",
                "lineno": 77,
                "value_type": "Call"
              },
              {
                "name": "streamlit_file",
                "lineno": 114,
                "value_type": "Call"
              },
              {
                "name": "security_file",
                "lineno": 148,
                "value_type": "Call"
              },
              {
                "name": "test_files",
                "lineno": 172,
                "value_type": "List"
              },
              {
                "name": "tests",
                "lineno": 198,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 205,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 206,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 52,
                "value_type": "Constant"
              },
              {
                "name": "functions",
                "lineno": 53,
                "value_type": "Constant"
              },
              {
                "name": "classes",
                "lineno": 54,
                "value_type": "Constant"
              },
              {
                "name": "tree",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 85,
                "value_type": "Constant"
              },
              {
                "name": "functions",
                "lineno": 86,
                "value_type": "Constant"
              },
              {
                "name": "classes",
                "lineno": 87,
                "value_type": "Constant"
              },
              {
                "name": "expected_imports",
                "lineno": 120,
                "value_type": "List"
              },
              {
                "name": "expected_classes",
                "lineno": 134,
                "value_type": "List"
              },
              {
                "name": "expected_functions",
                "lineno": 154,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 80,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 117,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 151,
                "value_type": "Call"
              },
              {
                "name": "file_size",
                "lineno": 179,
                "value_type": "Attribute"
              },
              {
                "name": "content",
                "lineno": 23,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 25,
                "content": "Parse with AST to check syntax"
              },
              {
                "line": 31,
                "content": "Removed return statement"
              },
              {
                "line": 34,
                "content": "Removed return statement"
              },
              {
                "line": 38,
                "content": "Removed return statement"
              },
              {
                "line": 43,
                "content": "Test streamlit app structure"
              },
              {
                "line": 51,
                "content": "Count elements"
              },
              {
                "line": 69,
                "content": "Basic structure validation"
              },
              {
                "line": 76,
                "content": "Test security module structure"
              },
              {
                "line": 84,
                "content": "Count elements"
              },
              {
                "line": 102,
                "content": "Basic structure validation"
              },
              {
                "line": 108,
                "content": "Removed return statement"
              },
              {
                "line": 113,
                "content": "Test streamlit app content"
              },
              {
                "line": 119,
                "content": "Check for expected content"
              },
              {
                "line": 133,
                "content": "Check for expected classes"
              },
              {
                "line": 147,
                "content": "Test security module content"
              },
              {
                "line": 153,
                "content": "Check for expected content"
              },
              {
                "line": 167,
                "content": "Removed return statement"
              },
              {
                "line": 182,
                "content": "Check that files are not empty"
              },
              {
                "line": 185,
                "content": "Check that files are not too small (should have content)"
              },
              {
                "line": 190,
                "content": "Removed return statement"
              }
            ],
            "total_lines": 230,
            "code_lines": 158
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/test_projected_artifacts.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 6223,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "streamlit.openflow_quickstart_app",
                "names": [
                  "main"
                ],
                "asnames": [
                  null
                ],
                "lineno": 25
              },
              {
                "module": "security_first.input_validator",
                "names": [
                  "InputValidator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 31
              },
              {
                "module": "security_first.input_validator",
                "names": [
                  "InputValidator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 149
              }
            ],
            "functions": [
              {
                "name": "test_projected_artifacts_import",
                "lineno": 16,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts can be imported."
              },
              {
                "name": "test_projected_artifacts_syntax",
                "lineno": 46,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have valid Python syntax."
              },
              {
                "name": "test_projected_artifacts_structure",
                "lineno": 75,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts have the expected structure."
              },
              {
                "name": "test_projected_artifacts_execution",
                "lineno": 145,
                "args": [],
                "decorators": [],
                "docstring": "Test that projected artifacts can be executed (basic test)."
              },
              {
                "name": "main",
                "lineno": 163,
                "args": [],
                "decorators": [],
                "docstring": "Run all tests for projected artifacts."
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "test_files",
                "lineno": 48,
                "value_type": "List"
              },
              {
                "name": "streamlit_file",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "security_file",
                "lineno": 111,
                "value_type": "Call"
              },
              {
                "name": "tests",
                "lineno": 168,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 175,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 176,
                "value_type": "Call"
              },
              {
                "name": "src_path",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 83,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 86,
                "value_type": "Constant"
              },
              {
                "name": "functions",
                "lineno": 87,
                "value_type": "Constant"
              },
              {
                "name": "classes",
                "lineno": 88,
                "value_type": "Constant"
              },
              {
                "name": "tree",
                "lineno": 116,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 119,
                "value_type": "Constant"
              },
              {
                "name": "functions",
                "lineno": 120,
                "value_type": "Constant"
              },
              {
                "name": "classes",
                "lineno": 121,
                "value_type": "Constant"
              },
              {
                "name": "validator",
                "lineno": 152,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 81,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 114,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 57,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 19,
                "content": "Add the src directory to Python path"
              },
              {
                "line": 24,
                "content": "Test importing the streamlit app"
              },
              {
                "line": 30,
                "content": "Test importing the security module"
              },
              {
                "line": 38,
                "content": "Removed return statement"
              },
              {
                "line": 41,
                "content": "Removed return statement"
              },
              {
                "line": 43,
                "content": "Removed return statement"
              },
              {
                "line": 59,
                "content": "Parse with AST to check syntax"
              },
              {
                "line": 65,
                "content": "Removed return statement"
              },
              {
                "line": 68,
                "content": "Removed return statement"
              },
              {
                "line": 72,
                "content": "Removed return statement"
              },
              {
                "line": 77,
                "content": "Test streamlit app structure"
              },
              {
                "line": 85,
                "content": "Count elements"
              },
              {
                "line": 103,
                "content": "Basic structure validation"
              },
              {
                "line": 110,
                "content": "Test security module structure"
              },
              {
                "line": 118,
                "content": "Count elements"
              },
              {
                "line": 136,
                "content": "Basic structure validation"
              },
              {
                "line": 142,
                "content": "Removed return statement"
              },
              {
                "line": 148,
                "content": "Test that we can create instances of classes"
              },
              {
                "line": 151,
                "content": "Create an instance (this tests basic execution)"
              },
              {
                "line": 158,
                "content": "Removed return statement"
              },
              {
                "line": 160,
                "content": "Removed return statement"
              }
            ],
            "total_lines": 200,
            "code_lines": 131
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/PROJECTION_SUMMARY.md",
          "domain": "model_driven_projection",
          "file_type": "markdown",
          "size_bytes": 936,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/src/security_first/input_validator.py",
          "domain": "model_driven_projection",
          "file_type": "python",
          "size_bytes": 7188,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 1
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 2
              },
              {
                "module": "urllib.parse",
                "names": [
                  "urlparse"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "jsonschema",
                "names": [
                  "validate"
                ],
                "asnames": [
                  null
                ],
                "lineno": 117
              }
            ],
            "functions": [
              {
                "name": "test_input_validator",
                "lineno": 35,
                "args": [],
                "decorators": [],
                "docstring": "Test input validator functionality"
              },
              {
                "name": "validate_input",
                "lineno": 53,
                "args": [
                  "input_str",
                  "input_type"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate general input based on type"
              },
              {
                "name": "validate_email",
                "lineno": 71,
                "args": [
                  "email"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate email format"
              },
              {
                "name": "validate_password_strength",
                "lineno": 78,
                "args": [
                  "password"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate password strength"
              },
              {
                "name": "validate_phone_number",
                "lineno": 92,
                "args": [
                  "phone"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate phone number format"
              },
              {
                "name": "validate_credit_card",
                "lineno": 99,
                "args": [
                  "card_number"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate credit card number using Luhn algorithm"
              },
              {
                "name": "validate_json_schema",
                "lineno": 114,
                "args": [
                  "data",
                  "schema"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate data against JSON schema"
              },
              {
                "name": "validate_file_extension",
                "lineno": 126,
                "args": [
                  "filename",
                  "allowed_extensions"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate file extension"
              },
              {
                "name": "validate_file_size",
                "lineno": 135,
                "args": [
                  "file_size",
                  "max_size_mb"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate file size"
              },
              {
                "name": "validate_sql_injection_safe",
                "lineno": 142,
                "args": [
                  "sql"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Check if SQL string is safe from injection"
              },
              {
                "name": "validate_xss_safe",
                "lineno": 155,
                "args": [
                  "text"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Check if text is safe from XSS attacks"
              },
              {
                "name": "validate_file_upload",
                "lineno": 170,
                "args": [
                  "filename",
                  "file_size",
                  "allowed_extensions",
                  "max_size_mb"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate file upload for security and size constraints"
              },
              {
                "name": "validate_url",
                "lineno": 10,
                "args": [
                  "url"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate URL format"
              },
              {
                "name": "validate_snowflake_url",
                "lineno": 19,
                "args": [
                  "url"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate Snowflake URL format"
              },
              {
                "name": "validate_uuid",
                "lineno": 24,
                "args": [
                  "uuid_str"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate UUID format"
              },
              {
                "name": "validate_oauth_credentials",
                "lineno": 30,
                "args": [
                  "credentials"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate OAuth credentials"
              }
            ],
            "classes": [
              {
                "name": "InputValidator",
                "lineno": 6,
                "bases": [],
                "methods": [
                  "validate_url",
                  "validate_snowflake_url",
                  "validate_uuid",
                  "validate_oauth_credentials"
                ],
                "docstring": "Input validation utilities"
              }
            ],
            "variables": [
              {
                "name": "validator",
                "lineno": 37,
                "value_type": "Call"
              },
              {
                "name": "email_pattern",
                "lineno": 73,
                "value_type": "Constant"
              },
              {
                "name": "checks",
                "lineno": 80,
                "value_type": "Dict"
              },
              {
                "name": "digits_only",
                "lineno": 94,
                "value_type": "Call"
              },
              {
                "name": "card_number",
                "lineno": 101,
                "value_type": "Call"
              },
              {
                "name": "digits",
                "lineno": 104,
                "value_type": "ListComp"
              },
              {
                "name": "odd_digits",
                "lineno": 105,
                "value_type": "Subscript"
              },
              {
                "name": "even_digits",
                "lineno": 106,
                "value_type": "Subscript"
              },
              {
                "name": "checksum",
                "lineno": 107,
                "value_type": "Call"
              },
              {
                "name": "file_ext",
                "lineno": 130,
                "value_type": "IfExp"
              },
              {
                "name": "max_size_bytes",
                "lineno": 137,
                "value_type": "BinOp"
              },
              {
                "name": "dangerous_patterns",
                "lineno": 144,
                "value_type": "List"
              },
              {
                "name": "sql_lower",
                "lineno": 150,
                "value_type": "Call"
              },
              {
                "name": "dangerous_patterns",
                "lineno": 157,
                "value_type": "List"
              },
              {
                "name": "text_lower",
                "lineno": 165,
                "value_type": "Call"
              },
              {
                "name": "dangerous_extensions",
                "lineno": 186,
                "value_type": "List"
              },
              {
                "name": "file_ext",
                "lineno": 187,
                "value_type": "IfExp"
              },
              {
                "name": "suspicious_patterns",
                "lineno": 191,
                "value_type": "List"
              },
              {
                "name": "uuid_pattern",
                "lineno": 26,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 13,
                "value_type": "Call"
              }
            ],
            "comments": [],
            "total_lines": 200,
            "code_lines": 168
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "package_management": [
        {
          "path": "uv.lock",
          "domain": "package_management",
          "file_type": "unknown",
          "size_bytes": 561915,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "setup.py",
          "domain": "package_management",
          "file_type": "python",
          "size_bytes": 6315,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "print_header",
                "lineno": 20,
                "args": [
                  "text"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "print_success",
                "lineno": 24,
                "args": [
                  "text"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "print_error",
                "lineno": 28,
                "args": [
                  "text"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "print_warning",
                "lineno": 32,
                "args": [
                  "text"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "validate_snowflake_url",
                "lineno": 36,
                "args": [
                  "url"
                ],
                "decorators": [],
                "docstring": "Validate Snowflake account URL format"
              },
              {
                "name": "validate_uuid",
                "lineno": 44,
                "args": [
                  "uuid"
                ],
                "decorators": [],
                "docstring": "Validate UUID format"
              },
              {
                "name": "validate_url",
                "lineno": 52,
                "args": [
                  "url"
                ],
                "decorators": [],
                "docstring": "Validate general URL format"
              },
              {
                "name": "prompt_with_validation",
                "lineno": 60,
                "args": [
                  "prompt",
                  "validator",
                  "example"
                ],
                "decorators": [],
                "docstring": "Prompt for input with validation"
              },
              {
                "name": "generate_config_env",
                "lineno": 81,
                "args": [
                  "values"
                ],
                "decorators": [],
                "docstring": "Generate config.env file content"
              },
              {
                "name": "main",
                "lineno": 110,
                "args": [],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "RED",
                "lineno": 12,
                "value_type": "Constant"
              },
              {
                "name": "GREEN",
                "lineno": 13,
                "value_type": "Constant"
              },
              {
                "name": "YELLOW",
                "lineno": 14,
                "value_type": "Constant"
              },
              {
                "name": "BLUE",
                "lineno": 15,
                "value_type": "Constant"
              },
              {
                "name": "BOLD",
                "lineno": 16,
                "value_type": "Constant"
              },
              {
                "name": "END",
                "lineno": 17,
                "value_type": "Constant"
              },
              {
                "name": "pattern",
                "lineno": 38,
                "value_type": "Constant"
              },
              {
                "name": "pattern",
                "lineno": 46,
                "value_type": "Constant"
              },
              {
                "name": "pattern",
                "lineno": 54,
                "value_type": "Constant"
              },
              {
                "name": "values",
                "lineno": 124,
                "value_type": "Dict"
              },
              {
                "name": "config_content",
                "lineno": 199,
                "value_type": "Call"
              },
              {
                "name": "value",
                "lineno": 66,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 117,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Color codes for output"
              },
              {
                "line": 84,
                "content": "Generated by setup wizard - DO NOT EDIT MANUALLY"
              },
              {
                "line": 86,
                "content": "Snowflake Account Information"
              },
              {
                "line": 91,
                "content": "OAuth Configuration"
              },
              {
                "line": 96,
                "content": "Openflow Configuration"
              },
              {
                "line": 101,
                "content": "Telemetry and Control"
              },
              {
                "line": 105,
                "content": "AWS Configuration (optional)"
              },
              {
                "line": 115,
                "content": "Check if config.env already exists"
              },
              {
                "line": 198,
                "content": "Generate config file"
              },
              {
                "line": 208,
                "content": "Show summary"
              }
            ],
            "total_lines": 226,
            "code_lines": 161
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": ".ruff.toml",
          "domain": "package_management",
          "file_type": "toml",
          "size_bytes": 3310,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "pyproject.toml",
          "domain": "package_management",
          "file_type": "toml",
          "size_bytes": 3011,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_dashboard/requirements.txt",
          "domain": "package_management",
          "file_type": "requirements",
          "size_bytes": 248,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/pyproject.toml",
          "domain": "package_management",
          "file_type": "toml",
          "size_bytes": 3756,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/real_requirements.txt",
          "domain": "package_management",
          "file_type": "documentation",
          "size_bytes": 233,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/simple_requirements.txt",
          "domain": "package_management",
          "file_type": "documentation",
          "size_bytes": 111,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/requirements.txt",
          "domain": "package_management",
          "file_type": "requirements",
          "size_bytes": 233,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/container_requirements.txt",
          "domain": "package_management",
          "file_type": "documentation",
          "size_bytes": 277,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/requirements.txt",
          "domain": "package_management",
          "file_type": "requirements",
          "size_bytes": 362,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "config/artifact_forge_requirements.txt",
          "domain": "package_management",
          "file_type": "documentation",
          "size_bytes": 126,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "UV package management enforcement",
            "Streamlit app dependencies with UV",
            "Security-first dependencies with UV",
            "Development dependencies with UV"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        }
      ],
      "cloudformation": [
        {
          "path": "project_model.py",
          "domain": "cloudformation",
          "file_type": "python",
          "size_bytes": 9861,
          "requirements_traced": [
            "Don't lint CloudFormation with generic YAML tools",
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 274,
                "args": [],
                "decorators": [],
                "docstring": "Test the model-driven tool orchestration"
              },
              {
                "name": "__init__",
                "lineno": 45,
                "args": [
                  "self",
                  "project_root"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_initialize_domains",
                "lineno": 50,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize domain configurations"
              },
              {
                "name": "analyze_file",
                "lineno": 138,
                "args": [
                  "self",
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Analyze a file to determine its domain and tooling needs"
              },
              {
                "name": "validate_file",
                "lineno": 201,
                "args": [
                  "self",
                  "filepath"
                ],
                "decorators": [],
                "docstring": "Validate a file using the appropriate tools"
              },
              {
                "name": "validate_project",
                "lineno": 237,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Validate entire project using model-driven tool selection"
              },
              {
                "name": "generate_tool_config",
                "lineno": 259,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate tool configurations based on project model"
              }
            ],
            "classes": [
              {
                "name": "DomainConfig",
                "lineno": 19,
                "bases": [],
                "methods": [],
                "docstring": "Configuration for a specific domain"
              },
              {
                "name": "FileAnalysis",
                "lineno": 32,
                "bases": [],
                "methods": [],
                "docstring": "Analysis of a file's domain and tooling needs"
              },
              {
                "name": "ProjectModel",
                "lineno": 42,
                "bases": [],
                "methods": [
                  "__init__",
                  "_initialize_domains",
                  "analyze_file",
                  "validate_file",
                  "validate_project",
                  "generate_tool_config"
                ],
                "docstring": "Model-driven tool orchestration"
              }
            ],
            "variables": [
              {
                "name": "model",
                "lineno": 276,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 279,
                "value_type": "Call"
              },
              {
                "name": "config",
                "lineno": 284,
                "value_type": "Call"
              },
              {
                "name": "path",
                "lineno": 140,
                "value_type": "Call"
              },
              {
                "name": "domain_scores",
                "lineno": 143,
                "value_type": "Dict"
              },
              {
                "name": "best_domain",
                "lineno": 175,
                "value_type": "Call"
              },
              {
                "name": "config",
                "lineno": 179,
                "value_type": "Subscript"
              },
              {
                "name": "tools",
                "lineno": 180,
                "value_type": "List"
              },
              {
                "name": "commands",
                "lineno": 187,
                "value_type": "List"
              },
              {
                "name": "analysis",
                "lineno": 203,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 204,
                "value_type": "Dict"
              },
              {
                "name": "all_files",
                "lineno": 239,
                "value_type": "List"
              },
              {
                "name": "results",
                "lineno": 244,
                "value_type": "Dict"
              },
              {
                "name": "config",
                "lineno": 261,
                "value_type": "Dict"
              },
              {
                "name": "score",
                "lineno": 145,
                "value_type": "Constant"
              },
              {
                "name": "file_result",
                "lineno": 252,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 215,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "score",
                "lineno": 169,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 10,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 142,
                "content": "Check file extension patterns"
              },
              {
                "line": 147,
                "content": "Pattern matching"
              },
              {
                "line": 154,
                "content": "Content analysis"
              },
              {
                "line": 165,
                "content": "Exclusion check"
              },
              {
                "line": 174,
                "content": "Find best domain"
              },
              {
                "line": 178,
                "content": "Generate tool recommendations"
              },
              {
                "line": 186,
                "content": "Generate validation commands"
              },
              {
                "line": 266,
                "content": "Add exclusions for YAML linter"
              },
              {
                "line": 278,
                "content": "Test with our CloudFormation file"
              },
              {
                "line": 283,
                "content": "Generate tool config"
              }
            ],
            "total_lines": 291,
            "code_lines": 237
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/test_model_traceability.py",
          "domain": "cloudformation",
          "file_type": "python",
          "size_bytes": 6632,
          "requirements_traced": [
            "Don't lint CloudFormation with generic YAML tools",
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "project_model",
                "names": [
                  "ProjectModel"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_requirement_1_cloudformation_detection",
                "lineno": 12,
                "args": [],
                "decorators": [],
                "docstring": "REQUIREMENT: Don't lint CloudFormation with generic YAML tools"
              },
              {
                "name": "test_requirement_2_tool_selection",
                "lineno": 38,
                "args": [],
                "decorators": [],
                "docstring": "REQUIREMENT: Use domain-specific tools"
              },
              {
                "name": "test_requirement_3_exclusion_generation",
                "lineno": 61,
                "args": [],
                "decorators": [],
                "docstring": "REQUIREMENT: Generate proper exclusions"
              },
              {
                "name": "test_requirement_4_content_analysis",
                "lineno": 78,
                "args": [],
                "decorators": [],
                "docstring": "REQUIREMENT: Intelligent content analysis"
              },
              {
                "name": "test_requirement_5_confidence_scoring",
                "lineno": 100,
                "args": [],
                "decorators": [],
                "docstring": "REQUIREMENT: Intelligent confidence scoring"
              },
              {
                "name": "test_requirement_6_tool_execution",
                "lineno": 122,
                "args": [],
                "decorators": [],
                "docstring": "REQUIREMENT: Actual tool execution works"
              },
              {
                "name": "test_requirement_7_domain_registry",
                "lineno": 138,
                "args": [],
                "decorators": [],
                "docstring": "REQUIREMENT: Extensible domain registry"
              },
              {
                "name": "main",
                "lineno": 157,
                "args": [],
                "decorators": [],
                "docstring": "Run all traceability tests"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "model",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "cloudformation_config",
                "lineno": 20,
                "value_type": "Subscript"
              },
              {
                "name": "model",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "cf_result",
                "lineno": 45,
                "value_type": "Call"
              },
              {
                "name": "py_result",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "yaml_result",
                "lineno": 53,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "config",
                "lineno": 66,
                "value_type": "Call"
              },
              {
                "name": "yaml_ignore",
                "lineno": 69,
                "value_type": "Subscript"
              },
              {
                "name": "model",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "indicators",
                "lineno": 89,
                "value_type": "List"
              },
              {
                "name": "found_indicators",
                "lineno": 90,
                "value_type": "ListComp"
              },
              {
                "name": "result",
                "lineno": 96,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 104,
                "value_type": "Call"
              },
              {
                "name": "cf_result",
                "lineno": 107,
                "value_type": "Call"
              },
              {
                "name": "py_result",
                "lineno": 113,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 127,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 142,
                "value_type": "Call"
              },
              {
                "name": "required_domains",
                "lineno": 145,
                "value_type": "List"
              },
              {
                "name": "tests",
                "lineno": 162,
                "value_type": "List"
              },
              {
                "name": "passed",
                "lineno": 172,
                "value_type": "Constant"
              },
              {
                "name": "total",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 86,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 19,
                "content": "Implementation check"
              },
              {
                "line": 26,
                "content": "Test result"
              },
              {
                "line": 44,
                "content": "Test CloudFormation file"
              },
              {
                "line": 48,
                "content": "Test Python file"
              },
              {
                "line": 52,
                "content": "Test YAML file (non-CloudFormation)"
              },
              {
                "line": 68,
                "content": "Check YAML linter exclusions"
              },
              {
                "line": 71,
                "content": "The current model only excludes Python patterns, not CloudFormation"
              },
              {
                "line": 72,
                "content": "This is a limitation of the current implementation"
              },
              {
                "line": 84,
                "content": "Test file with CloudFormation indicators"
              },
              {
                "line": 88,
                "content": "Check for CloudFormation indicators"
              },
              {
                "line": 95,
                "content": "Verify model detected them"
              },
              {
                "line": 106,
                "content": "Test CloudFormation file"
              },
              {
                "line": 112,
                "content": "Test Python file"
              },
              {
                "line": 129,
                "content": "Check if cfn-lint is available"
              },
              {
                "line": 144,
                "content": "Check all required domains exist"
              },
              {
                "line": 149,
                "content": "Check each domain has required config"
              }
            ],
            "total_lines": 195,
            "code_lines": 124
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "scripts/gemini_gcp_billing_analyzer.py",
          "domain": "cloudformation",
          "file_type": "python",
          "size_bytes": 30035,
          "requirements_traced": [
            "Don't lint CloudFormation with generic YAML tools",
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 15
              },
              {
                "module": "pandas",
                "asname": "pd",
                "lineno": 17
              },
              {
                "module": "langchain_core.output_parsers",
                "names": [
                  "JsonOutputParser"
                ],
                "asnames": [
                  null
                ],
                "lineno": 20
              },
              {
                "module": "langchain_core.prompts",
                "names": [
                  "ChatPromptTemplate"
                ],
                "asnames": [
                  null
                ],
                "lineno": 21
              },
              {
                "module": "langchain_core.tools",
                "names": [
                  "tool"
                ],
                "asnames": [
                  null
                ],
                "lineno": 22
              },
              {
                "module": "langchain_google_genai",
                "names": [
                  "ChatGoogleGenerativeAI"
                ],
                "asnames": [
                  null
                ],
                "lineno": 23
              },
              {
                "module": "langgraph.graph",
                "names": [
                  "END",
                  "StateGraph"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 24
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 705,
                "args": [],
                "decorators": [],
                "docstring": "Main function to run Gemini analysis"
              },
              {
                "name": "__init__",
                "lineno": 30,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "get_1password_credential",
                "lineno": 37,
                "args": [
                  "self",
                  "item_name",
                  "field_name"
                ],
                "decorators": [],
                "docstring": "Get credential from 1Password using established patterns"
              },
              {
                "name": "setup_credentials",
                "lineno": 54,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup Gemini API credentials from 1Password"
              },
              {
                "name": "get_project_info",
                "lineno": 79,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get GCP project information"
              },
              {
                "name": "load_billing_data",
                "lineno": 109,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load the billing data from our generated files"
              },
              {
                "name": "create_langgraph_workflow",
                "lineno": 140,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Create LangGraph workflow for billing analysis"
              },
              {
                "name": "create_analysis_notebook",
                "lineno": 269,
                "args": [
                  "self",
                  "analysis_results"
                ],
                "decorators": [],
                "docstring": "Create a comprehensive Jupyter notebook with the analysis"
              },
              {
                "name": "run_analysis",
                "lineno": 604,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Run the complete Gemini analysis workflow"
              },
              {
                "name": "launch_notebook",
                "lineno": 677,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Launch Jupyter notebook with the analysis"
              },
              {
                "name": "analyze_cost_trends",
                "lineno": 163,
                "args": [
                  "billing_data"
                ],
                "decorators": [
                  "tool"
                ],
                "docstring": "Analyze cost trends and patterns in billing data"
              },
              {
                "name": "identify_cost_optimization_opportunities",
                "lineno": 186,
                "args": [
                  "billing_data"
                ],
                "decorators": [
                  "tool"
                ],
                "docstring": "Identify specific cost optimization opportunities"
              },
              {
                "name": "analyze_service_usage_patterns",
                "lineno": 207,
                "args": [
                  "billing_data"
                ],
                "decorators": [
                  "tool"
                ],
                "docstring": "Analyze usage patterns for different GCP services"
              },
              {
                "name": "generate_cost_forecast",
                "lineno": 228,
                "args": [
                  "billing_data"
                ],
                "decorators": [
                  "tool"
                ],
                "docstring": "Generate cost forecast based on historical data"
              },
              {
                "name": "__init__",
                "lineno": 145,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "GeminiGCPBillingAnalyzer",
                "lineno": 27,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_1password_credential",
                  "setup_credentials",
                  "get_project_info",
                  "load_billing_data",
                  "create_langgraph_workflow",
                  "create_analysis_notebook",
                  "run_analysis",
                  "launch_notebook"
                ],
                "docstring": "Gemini-powered GCP billing analyzer using LangGraph/LangChain"
              },
              {
                "name": "AnalysisState",
                "lineno": 144,
                "bases": [],
                "methods": [
                  "__init__"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "analyzer",
                "lineno": 707,
                "value_type": "Call"
              },
              {
                "name": "possible_items",
                "lineno": 59,
                "value_type": "List"
              },
              {
                "name": "data_dir",
                "lineno": 111,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 117,
                "value_type": "Dict"
              },
              {
                "name": "csv_file",
                "lineno": 120,
                "value_type": "BinOp"
              },
              {
                "name": "summary_file",
                "lineno": 126,
                "value_type": "BinOp"
              },
              {
                "name": "json_file",
                "lineno": 132,
                "value_type": "BinOp"
              },
              {
                "name": "llm",
                "lineno": 155,
                "value_type": "Call"
              },
              {
                "name": "workflow",
                "lineno": 249,
                "value_type": "Call"
              },
              {
                "name": "generated_time",
                "lineno": 273,
                "value_type": "Call"
              },
              {
                "name": "project_id",
                "lineno": 274,
                "value_type": "BoolOp"
              },
              {
                "name": "billing_account",
                "lineno": 275,
                "value_type": "BoolOp"
              },
              {
                "name": "notebook_dict",
                "lineno": 278,
                "value_type": "Dict"
              },
              {
                "name": "project_info",
                "lineno": 614,
                "value_type": "Call"
              },
              {
                "name": "billing_data",
                "lineno": 623,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 720,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 44,
                "value_type": "Call"
              },
              {
                "name": "api_key",
                "lineno": 68,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 91,
                "value_type": "Call"
              },
              {
                "name": "prompt",
                "lineno": 165,
                "value_type": "Call"
              },
              {
                "name": "chain",
                "lineno": 182,
                "value_type": "BinOp"
              },
              {
                "name": "prompt",
                "lineno": 188,
                "value_type": "Call"
              },
              {
                "name": "chain",
                "lineno": 203,
                "value_type": "BinOp"
              },
              {
                "name": "prompt",
                "lineno": 209,
                "value_type": "Call"
              },
              {
                "name": "chain",
                "lineno": 224,
                "value_type": "BinOp"
              },
              {
                "name": "prompt",
                "lineno": 230,
                "value_type": "Call"
              },
              {
                "name": "chain",
                "lineno": 245,
                "value_type": "BinOp"
              },
              {
                "name": "workflow",
                "lineno": 632,
                "value_type": "Call"
              },
              {
                "name": "initial_state",
                "lineno": 635,
                "value_type": "Dict"
              },
              {
                "name": "result",
                "lineno": 638,
                "value_type": "Call"
              },
              {
                "name": "analysis_results",
                "lineno": 641,
                "value_type": "Dict"
              },
              {
                "name": "notebook_content",
                "lineno": 649,
                "value_type": "Call"
              },
              {
                "name": "notebook_path",
                "lineno": 652,
                "value_type": "Call"
              },
              {
                "name": "results_path",
                "lineno": 663,
                "value_type": "Call"
              },
              {
                "name": "notebook_path",
                "lineno": 680,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 693,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 19,
                "content": "LangChain imports"
              },
              {
                "line": 58,
                "content": "Try different possible item names for Google/Gemini API key"
              },
              {
                "line": 90,
                "content": "Get billing account"
              },
              {
                "line": 119,
                "content": "Load CSV data"
              },
              {
                "line": 125,
                "content": "Load summary data"
              },
              {
                "line": 131,
                "content": "Load JSON data"
              },
              {
                "line": 143,
                "content": "Define the state"
              },
              {
                "line": 154,
                "content": "Initialize LLM"
              },
              {
                "line": 161,
                "content": "Define tools"
              },
              {
                "line": 248,
                "content": "Create the workflow"
              },
              {
                "line": 251,
                "content": "Add nodes"
              },
              {
                "line": 260,
                "content": "Define edges"
              },
              {
                "line": 272,
                "content": "Create notebook content with proper escaping"
              },
              {
                "line": 277,
                "content": "Build notebook content as a dictionary"
              },
              {
                "line": 601,
                "content": "Convert to JSON string"
              },
              {
                "line": 609,
                "content": "Setup credentials"
              },
              {
                "line": 613,
                "content": "Get project info"
              },
              {
                "line": 622,
                "content": "Load billing data"
              },
              {
                "line": 630,
                "content": "Create and run LangGraph workflow"
              },
              {
                "line": 634,
                "content": "Prepare initial state"
              },
              {
                "line": 640,
                "content": "Extract results"
              },
              {
                "line": 648,
                "content": "Create notebook"
              },
              {
                "line": 651,
                "content": "Save notebook"
              },
              {
                "line": 662,
                "content": "Save analysis results"
              },
              {
                "line": 692,
                "content": "Launch Jupyter"
              },
              {
                "line": 709,
                "content": "Run analysis"
              },
              {
                "line": 719,
                "content": "Ask if user wants to launch notebook"
              }
            ],
            "total_lines": 730,
            "code_lines": 621
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/src/gemini_billing_analyzer_enhanced.py",
          "domain": "cloudformation",
          "file_type": "python",
          "size_bytes": 12852,
          "requirements_traced": [
            "Don't lint CloudFormation with generic YAML tools",
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 5
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              },
              {
                "module": "langchain_core.messages",
                "names": [
                  "HumanMessage"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "langchain_google_genai",
                "names": [
                  "ChatGoogleGenerativeAI"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 343
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "GhostbustersOrchestrator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 211
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 20,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the Gemini billing analyzer"
              },
              {
                "name": "_setup_gemini_llm",
                "lineno": 28,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup Gemini LLM with proper API key"
              },
              {
                "name": "get_billing_data",
                "lineno": 60,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get current GCP billing data"
              },
              {
                "name": "analyze_billing_with_gemini",
                "lineno": 160,
                "args": [
                  "self",
                  "billing_data"
                ],
                "decorators": [],
                "docstring": "Analyze billing data using Gemini LLM"
              }
            ],
            "classes": [
              {
                "name": "GeminiBillingAnalyzer",
                "lineno": 17,
                "bases": [],
                "methods": [
                  "__init__",
                  "_setup_gemini_llm",
                  "get_billing_data",
                  "analyze_billing_with_gemini"
                ],
                "docstring": "Gemini-integrated billing analyzer for GCP cost optimization"
              }
            ],
            "variables": [
              {
                "name": "analyzer",
                "lineno": 298,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 304,
                "value_type": "Await"
              },
              {
                "name": "analysis_id",
                "lineno": 233,
                "value_type": "Call"
              },
              {
                "name": "billing_data",
                "lineno": 240,
                "value_type": "Call"
              },
              {
                "name": "gemini_analysis",
                "lineno": 250,
                "value_type": "Call"
              },
              {
                "name": "ghostbusters_result",
                "lineno": 254,
                "value_type": "Await"
              },
              {
                "name": "combined_result",
                "lineno": 257,
                "value_type": "Dict"
              },
              {
                "name": "api_key",
                "lineno": 32,
                "value_type": "BoolOp"
              },
              {
                "name": "result",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "project_id",
                "lineno": 70,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 73,
                "value_type": "Call"
              },
              {
                "name": "billing_account",
                "lineno": 79,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "enabled_services",
                "lineno": 90,
                "value_type": "IfExp"
              },
              {
                "name": "resources",
                "lineno": 95,
                "value_type": "Dict"
              },
              {
                "name": "prompt",
                "lineno": 167,
                "value_type": "JoinedStr"
              },
              {
                "name": "response",
                "lineno": 195,
                "value_type": "Call"
              },
              {
                "name": "orchestrator",
                "lineno": 216,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 217,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "api_key",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "llm",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 105,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 114,
                "value_type": "Call"
              },
              {
                "name": "run_services",
                "lineno": 120,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "databases",
                "lineno": 141,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 22,
                "content": "Configure logging"
              },
              {
                "line": 31,
                "content": "Try to get API key from environment"
              },
              {
                "line": 35,
                "content": "Try to get from gcloud (this might not work for Gemini API)"
              },
              {
                "line": 63,
                "content": "Get project info"
              },
              {
                "line": 72,
                "content": "Get billing account"
              },
              {
                "line": 83,
                "content": "Get enabled services"
              },
              {
                "line": 94,
                "content": "Get resource usage"
              },
              {
                "line": 97,
                "content": "Cloud Functions"
              },
              {
                "line": 112,
                "content": "Cloud Run"
              },
              {
                "line": 127,
                "content": "Firestore"
              },
              {
                "line": 166,
                "content": "Create analysis prompt"
              },
              {
                "line": 194,
                "content": "Send to Gemini"
              },
              {
                "line": 210,
                "content": "Import Ghostbusters orchestrator"
              },
              {
                "line": 215,
                "content": "Run Ghostbusters analysis"
              },
              {
                "line": 238,
                "content": "Step 1: Get billing data"
              },
              {
                "line": 248,
                "content": "Step 2: Analyze billing with Gemini"
              },
              {
                "line": 252,
                "content": "Step 3: Run Ghostbusters analysis"
              },
              {
                "line": 256,
                "content": "Step 4: Combine results"
              },
              {
                "line": 294,
                "content": "Configure logging"
              }
            ],
            "total_lines": 346,
            "code_lines": 272
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/src/generate_billing_analyzer.py",
          "domain": "cloudformation",
          "file_type": "python",
          "size_bytes": 17442,
          "requirements_traced": [
            "Don't lint CloudFormation with generic YAML tools",
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "code_generator",
                "names": [
                  "ClassDefinition",
                  "CodeFile",
                  "CodeGenerator",
                  "FunctionDefinition",
                  "ImportStatement"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "generate_gemini_billing_analyzer",
                "lineno": 18,
                "args": [],
                "decorators": [],
                "docstring": "Generate the Gemini billing analyzer using structured models"
              },
              {
                "name": "main",
                "lineno": 393,
                "args": [],
                "decorators": [],
                "docstring": "Generate the Gemini billing analyzer"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "imports",
                "lineno": 22,
                "value_type": "List"
              },
              {
                "name": "setup_method",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "setup_llm_method",
                "lineno": 54,
                "value_type": "Call"
              },
              {
                "name": "get_billing_method",
                "lineno": 93,
                "value_type": "Call"
              },
              {
                "name": "analyze_method",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "run_ghostbusters_method",
                "lineno": 236,
                "value_type": "Call"
              },
              {
                "name": "analyze_project_method",
                "lineno": 265,
                "value_type": "Call"
              },
              {
                "name": "gemini_analyzer_class",
                "lineno": 325,
                "value_type": "Call"
              },
              {
                "name": "main_func",
                "lineno": 340,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 395,
                "value_type": "Call"
              },
              {
                "name": "analyzer_file",
                "lineno": 400,
                "value_type": "Call"
              },
              {
                "name": "output_path",
                "lineno": 403,
                "value_type": "Call"
              },
              {
                "name": "success",
                "lineno": 404,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 21,
                "content": "Imports"
              },
              {
                "line": 39,
                "content": "GeminiBillingAnalyzer class"
              },
              {
                "line": 324,
                "content": "Main class"
              },
              {
                "line": 339,
                "content": "Main function"
              },
              {
                "line": 399,
                "content": "Generate the analyzer"
              },
              {
                "line": 402,
                "content": "Write to file"
              }
            ],
            "total_lines": 415,
            "code_lines": 385
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "elmo-fuzzy-giggle/src/gemini_billing_analyzer.py",
          "domain": "cloudformation",
          "file_type": "python",
          "size_bytes": 12852,
          "requirements_traced": [
            "Don't lint CloudFormation with generic YAML tools",
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 5
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              },
              {
                "module": "langchain_core.messages",
                "names": [
                  "HumanMessage"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "langchain_google_genai",
                "names": [
                  "ChatGoogleGenerativeAI"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 343
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "GhostbustersOrchestrator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 211
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 20,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the Gemini billing analyzer"
              },
              {
                "name": "_setup_gemini_llm",
                "lineno": 28,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup Gemini LLM with proper API key"
              },
              {
                "name": "get_billing_data",
                "lineno": 60,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get current GCP billing data"
              },
              {
                "name": "analyze_billing_with_gemini",
                "lineno": 160,
                "args": [
                  "self",
                  "billing_data"
                ],
                "decorators": [],
                "docstring": "Analyze billing data using Gemini LLM"
              }
            ],
            "classes": [
              {
                "name": "GeminiBillingAnalyzer",
                "lineno": 17,
                "bases": [],
                "methods": [
                  "__init__",
                  "_setup_gemini_llm",
                  "get_billing_data",
                  "analyze_billing_with_gemini"
                ],
                "docstring": "Gemini-integrated billing analyzer for GCP cost optimization"
              }
            ],
            "variables": [
              {
                "name": "analyzer",
                "lineno": 298,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 304,
                "value_type": "Await"
              },
              {
                "name": "analysis_id",
                "lineno": 233,
                "value_type": "Call"
              },
              {
                "name": "billing_data",
                "lineno": 240,
                "value_type": "Call"
              },
              {
                "name": "gemini_analysis",
                "lineno": 250,
                "value_type": "Call"
              },
              {
                "name": "ghostbusters_result",
                "lineno": 254,
                "value_type": "Await"
              },
              {
                "name": "combined_result",
                "lineno": 257,
                "value_type": "Dict"
              },
              {
                "name": "api_key",
                "lineno": 32,
                "value_type": "BoolOp"
              },
              {
                "name": "result",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "project_id",
                "lineno": 70,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 73,
                "value_type": "Call"
              },
              {
                "name": "billing_account",
                "lineno": 79,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "enabled_services",
                "lineno": 90,
                "value_type": "IfExp"
              },
              {
                "name": "resources",
                "lineno": 95,
                "value_type": "Dict"
              },
              {
                "name": "prompt",
                "lineno": 167,
                "value_type": "JoinedStr"
              },
              {
                "name": "response",
                "lineno": 195,
                "value_type": "Call"
              },
              {
                "name": "orchestrator",
                "lineno": 216,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 217,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "api_key",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "llm",
                "lineno": 46,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 105,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 114,
                "value_type": "Call"
              },
              {
                "name": "run_services",
                "lineno": 120,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "databases",
                "lineno": 141,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 22,
                "content": "Configure logging"
              },
              {
                "line": 31,
                "content": "Try to get API key from environment"
              },
              {
                "line": 35,
                "content": "Try to get from gcloud (this might not work for Gemini API)"
              },
              {
                "line": 63,
                "content": "Get project info"
              },
              {
                "line": 72,
                "content": "Get billing account"
              },
              {
                "line": 83,
                "content": "Get enabled services"
              },
              {
                "line": 94,
                "content": "Get resource usage"
              },
              {
                "line": 97,
                "content": "Cloud Functions"
              },
              {
                "line": 112,
                "content": "Cloud Run"
              },
              {
                "line": 127,
                "content": "Firestore"
              },
              {
                "line": 166,
                "content": "Create analysis prompt"
              },
              {
                "line": 194,
                "content": "Send to Gemini"
              },
              {
                "line": 210,
                "content": "Import Ghostbusters orchestrator"
              },
              {
                "line": 215,
                "content": "Run Ghostbusters analysis"
              },
              {
                "line": 238,
                "content": "Step 1: Get billing data"
              },
              {
                "line": 248,
                "content": "Step 2: Analyze billing with Gemini"
              },
              {
                "line": 252,
                "content": "Step 3: Run Ghostbusters analysis"
              },
              {
                "line": 256,
                "content": "Step 4: Combine results"
              },
              {
                "line": 294,
                "content": "Configure logging"
              }
            ],
            "total_lines": 346,
            "code_lines": 272
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "healthcare_cdc": [
        {
          "path": "healthcare-cdc/README.md",
          "domain": "healthcare_cdc",
          "file_type": "markdown",
          "size_bytes": 2732,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Healthcare CDC domain validation",
            "Domain-specific rules validation",
            "HIPAA compliance validation",
            "PHI detection and validation",
            "Immutable audit logging",
            "Healthcare data encryption",
            "Healthcare access control and authentication",
            "Healthcare CDC CI/CD integration"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "healthcare-cdc/healthcare_cdc_domain_model.py",
          "domain": "healthcare_cdc",
          "file_type": "python",
          "size_bytes": 23327,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Healthcare CDC domain validation",
            "Domain-specific rules validation",
            "HIPAA compliance validation",
            "PHI detection and validation",
            "Immutable audit logging",
            "Healthcare data encryption",
            "Healthcare access control and authentication",
            "Healthcare CDC CI/CD integration"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 12
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 16
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 583,
                "args": [],
                "decorators": [],
                "docstring": "Main function to demonstrate the domain model"
              },
              {
                "name": "to_json",
                "lineno": 112,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Convert to JSON for DynamoDB stream"
              },
              {
                "name": "add_processor",
                "lineno": 187,
                "args": [
                  "self",
                  "processor_type",
                  "config"
                ],
                "decorators": [],
                "docstring": "Add a processor to the pipeline"
              },
              {
                "name": "__init__",
                "lineno": 195,
                "args": [
                  "self",
                  "sql_template_path"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_setup_pipeline",
                "lineno": 201,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup the Openflow pipeline configuration"
              },
              {
                "name": "_get_merge_sql",
                "lineno": 303,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get the SQL merge statement for CDC operations"
              },
              {
                "name": "generate_cloudformation_template",
                "lineno": 330,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate CloudFormation template for the healthcare CDC infrastructure"
              },
              {
                "name": "generate_snowflake_schema",
                "lineno": 458,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate Snowflake schema creation SQL"
              }
            ],
            "classes": [
              {
                "name": "EventType",
                "lineno": 19,
                "bases": [
                  "Enum"
                ],
                "methods": [],
                "docstring": "CDC Event Types"
              },
              {
                "name": "ClaimStatus",
                "lineno": 27,
                "bases": [
                  "Enum"
                ],
                "methods": [],
                "docstring": "Healthcare Claim Status"
              },
              {
                "name": "PaymentStatus",
                "lineno": 37,
                "bases": [
                  "Enum"
                ],
                "methods": [],
                "docstring": "Payment Status"
              },
              {
                "name": "PatientInfo",
                "lineno": 47,
                "bases": [],
                "methods": [],
                "docstring": "Patient Information"
              },
              {
                "name": "ProviderInfo",
                "lineno": 64,
                "bases": [],
                "methods": [],
                "docstring": "Healthcare Provider Information"
              },
              {
                "name": "PayerInfo",
                "lineno": 76,
                "bases": [],
                "methods": [],
                "docstring": "Insurance Payer Information"
              },
              {
                "name": "HealthcareClaim",
                "lineno": 85,
                "bases": [],
                "methods": [],
                "docstring": "Healthcare Insurance Claim"
              },
              {
                "name": "CDCEvent",
                "lineno": 105,
                "bases": [],
                "methods": [
                  "to_json"
                ],
                "docstring": "Change Data Capture Event"
              },
              {
                "name": "InfrastructureComponents",
                "lineno": 153,
                "bases": [],
                "methods": [],
                "docstring": "Infrastructure Components for Healthcare CDC"
              },
              {
                "name": "PipelineConfiguration",
                "lineno": 181,
                "bases": [],
                "methods": [
                  "add_processor"
                ],
                "docstring": "Openflow Pipeline Configuration"
              },
              {
                "name": "HealthcareCDCDomainModel",
                "lineno": 192,
                "bases": [],
                "methods": [
                  "__init__",
                  "_setup_pipeline",
                  "_get_merge_sql",
                  "generate_cloudformation_template",
                  "generate_snowflake_schema"
                ],
                "docstring": "Domain Model for Healthcare CDC System"
              }
            ],
            "variables": [
              {
                "name": "INSERT",
                "lineno": 22,
                "value_type": "Constant"
              },
              {
                "name": "MODIFY",
                "lineno": 23,
                "value_type": "Constant"
              },
              {
                "name": "REMOVE",
                "lineno": 24,
                "value_type": "Constant"
              },
              {
                "name": "PENDING",
                "lineno": 30,
                "value_type": "Constant"
              },
              {
                "name": "IN_REVIEW",
                "lineno": 31,
                "value_type": "Constant"
              },
              {
                "name": "APPROVED",
                "lineno": 32,
                "value_type": "Constant"
              },
              {
                "name": "REJECTED",
                "lineno": 33,
                "value_type": "Constant"
              },
              {
                "name": "PAID",
                "lineno": 34,
                "value_type": "Constant"
              },
              {
                "name": "PENDING",
                "lineno": 40,
                "value_type": "Constant"
              },
              {
                "name": "PROCESSING",
                "lineno": 41,
                "value_type": "Constant"
              },
              {
                "name": "COMPLETED",
                "lineno": 42,
                "value_type": "Constant"
              },
              {
                "name": "FAILED",
                "lineno": 43,
                "value_type": "Constant"
              },
              {
                "name": "model",
                "lineno": 585,
                "value_type": "Call"
              },
              {
                "name": "patient",
                "lineno": 596,
                "value_type": "Call"
              },
              {
                "name": "provider",
                "lineno": 610,
                "value_type": "Call"
              },
              {
                "name": "payer",
                "lineno": 619,
                "value_type": "Call"
              },
              {
                "name": "claim",
                "lineno": 625,
                "value_type": "Call"
              },
              {
                "name": "cdc_event",
                "lineno": 642,
                "value_type": "Call"
              },
              {
                "name": "sql_file_path",
                "lineno": 306,
                "value_type": "Call"
              },
              {
                "name": "sql_file_path",
                "lineno": 308,
                "value_type": "BinOp"
              },
              {
                "name": "msg",
                "lineno": 314,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 324,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 327,
                "value_type": "JoinedStr"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 156,
                "content": "AWS Components"
              },
              {
                "line": 163,
                "content": "Snowflake Components"
              },
              {
                "line": 169,
                "content": "Openflow Components"
              },
              {
                "line": 174,
                "content": "Tables"
              },
              {
                "line": 203,
                "content": "Kinesis Consumer"
              },
              {
                "line": 209,
                "content": "JSON Parser"
              },
              {
                "line": 212,
                "content": "Flat JSON (for nested structures)"
              },
              {
                "line": 218,
                "content": "Jolt Transform (for data transformation)"
              },
              {
                "line": 264,
                "content": "Route to different tables based on event type"
              },
              {
                "line": 273,
                "content": "PutDatabaseRecord for destination table"
              },
              {
                "line": 282,
                "content": "PutDatabaseRecord for CDC table"
              },
              {
                "line": 288,
                "content": "PutDatabaseRecord for event history table"
              },
              {
                "line": 297,
                "content": "Execute SQL for merging CDC events"
              },
              {
                "line": 595,
                "content": "Generate sample claim"
              }
            ],
            "total_lines": 654,
            "code_lines": 570
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "healthcare-cdc/__init__.py",
          "domain": "healthcare_cdc",
          "file_type": "python",
          "size_bytes": 861,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Healthcare CDC domain validation",
            "Domain-specific rules validation",
            "HIPAA compliance validation",
            "PHI detection and validation",
            "Immutable audit logging",
            "Healthcare data encryption",
            "Healthcare access control and authentication",
            "Healthcare CDC CI/CD integration"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "healthcare_cdc_domain_model",
                "names": [
                  "CDCEvent",
                  "ClaimStatus",
                  "EventType",
                  "HealthcareCDCDomainModel",
                  "HealthcareClaim",
                  "PatientInfo",
                  "PayerInfo",
                  "PaymentStatus",
                  "ProviderInfo"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "__version__",
                "lineno": 23,
                "value_type": "Constant"
              },
              {
                "name": "__author__",
                "lineno": 24,
                "value_type": "Constant"
              },
              {
                "name": "__description__",
                "lineno": 25,
                "value_type": "Constant"
              },
              {
                "name": "__all__",
                "lineno": 27,
                "value_type": "List"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 38,
            "code_lines": 32
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "healthcare-cdc/test_healthcare_cdc_domain_model.py",
          "domain": "healthcare_cdc",
          "file_type": "python",
          "size_bytes": 12657,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Healthcare CDC domain validation",
            "Domain-specific rules validation",
            "HIPAA compliance validation",
            "PHI detection and validation",
            "Immutable audit logging",
            "Healthcare data encryption",
            "Healthcare access control and authentication",
            "Healthcare CDC CI/CD integration"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "healthcare_cdc_domain_model",
                "names": [
                  "CDCEvent",
                  "ClaimStatus",
                  "EventType",
                  "HealthcareCDCDomainModel",
                  "HealthcareClaim",
                  "PatientInfo",
                  "PayerInfo",
                  "PaymentStatus",
                  "ProviderInfo"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "test_integration",
                "lineno": 345,
                "args": [],
                "decorators": [],
                "docstring": "Integration test for the complete domain model"
              },
              {
                "name": "test_domain_model_initialization",
                "lineno": 25,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test domain model initialization"
              },
              {
                "name": "test_pipeline_configuration",
                "lineno": 40,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test pipeline configuration setup"
              },
              {
                "name": "test_merge_sql_generation",
                "lineno": 57,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test SQL merge statement generation"
              },
              {
                "name": "test_cloudformation_template_generation",
                "lineno": 72,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test CloudFormation template generation"
              },
              {
                "name": "test_snowflake_schema_generation",
                "lineno": 96,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test Snowflake schema generation"
              },
              {
                "name": "test_claim_creation",
                "lineno": 113,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test creating a healthcare claim"
              },
              {
                "name": "test_cdc_event_creation",
                "lineno": 179,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test creating a CDC event"
              },
              {
                "name": "test_cdc_event_json_serialization",
                "lineno": 240,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test CDC event JSON serialization"
              },
              {
                "name": "test_event_types",
                "lineno": 323,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test event type enum values"
              },
              {
                "name": "test_claim_status",
                "lineno": 329,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test claim status enum values"
              },
              {
                "name": "test_payment_status",
                "lineno": 337,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test payment status enum values"
              }
            ],
            "classes": [
              {
                "name": "TestHealthcareCDCDomainModel",
                "lineno": 22,
                "bases": [],
                "methods": [
                  "test_domain_model_initialization",
                  "test_pipeline_configuration",
                  "test_merge_sql_generation",
                  "test_cloudformation_template_generation",
                  "test_snowflake_schema_generation"
                ],
                "docstring": "Test the healthcare CDC domain model"
              },
              {
                "name": "TestHealthcareClaim",
                "lineno": 110,
                "bases": [],
                "methods": [
                  "test_claim_creation"
                ],
                "docstring": "Test healthcare claim data structure"
              },
              {
                "name": "TestCDCEvent",
                "lineno": 176,
                "bases": [],
                "methods": [
                  "test_cdc_event_creation",
                  "test_cdc_event_json_serialization"
                ],
                "docstring": "Test CDC event data structure"
              },
              {
                "name": "TestEnums",
                "lineno": 320,
                "bases": [],
                "methods": [
                  "test_event_types",
                  "test_claim_status",
                  "test_payment_status"
                ],
                "docstring": "Test enum values"
              }
            ],
            "variables": [
              {
                "name": "model",
                "lineno": 347,
                "value_type": "Call"
              },
              {
                "name": "merge_sql",
                "lineno": 357,
                "value_type": "Call"
              },
              {
                "name": "template",
                "lineno": 361,
                "value_type": "Call"
              },
              {
                "name": "schema_sql",
                "lineno": 365,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "processor_types",
                "lineno": 48,
                "value_type": "ListComp"
              },
              {
                "name": "model",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "merge_sql",
                "lineno": 60,
                "value_type": "Call"
              },
              {
                "name": "model",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "template",
                "lineno": 75,
                "value_type": "Call"
              },
              {
                "name": "resources",
                "lineno": 85,
                "value_type": "Subscript"
              },
              {
                "name": "outputs",
                "lineno": 91,
                "value_type": "Subscript"
              },
              {
                "name": "model",
                "lineno": 98,
                "value_type": "Call"
              },
              {
                "name": "schema_sql",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "patient",
                "lineno": 115,
                "value_type": "Call"
              },
              {
                "name": "provider",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "payer",
                "lineno": 138,
                "value_type": "Call"
              },
              {
                "name": "claim",
                "lineno": 144,
                "value_type": "Call"
              },
              {
                "name": "patient",
                "lineno": 181,
                "value_type": "Call"
              },
              {
                "name": "provider",
                "lineno": 195,
                "value_type": "Call"
              },
              {
                "name": "payer",
                "lineno": 204,
                "value_type": "Call"
              },
              {
                "name": "claim",
                "lineno": 210,
                "value_type": "Call"
              },
              {
                "name": "cdc_event",
                "lineno": 230,
                "value_type": "Call"
              },
              {
                "name": "patient",
                "lineno": 242,
                "value_type": "Call"
              },
              {
                "name": "provider",
                "lineno": 256,
                "value_type": "Call"
              },
              {
                "name": "payer",
                "lineno": 265,
                "value_type": "Call"
              },
              {
                "name": "claim",
                "lineno": 271,
                "value_type": "Call"
              },
              {
                "name": "cdc_event",
                "lineno": 291,
                "value_type": "Call"
              },
              {
                "name": "json_data",
                "lineno": 297,
                "value_type": "Call"
              },
              {
                "name": "parsed_data",
                "lineno": 298,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 44,
                "content": "Check that processors were added"
              },
              {
                "line": 47,
                "content": "Check for required processors"
              },
              {
                "line": 62,
                "content": "Check for key SQL components"
              },
              {
                "line": 77,
                "content": "Check template structure"
              },
              {
                "line": 84,
                "content": "Check for required resources"
              },
              {
                "line": 90,
                "content": "Check for required outputs"
              },
              {
                "line": 101,
                "content": "Check for required SQL components"
              },
              {
                "line": 300,
                "content": "Check required fields"
              },
              {
                "line": 349,
                "content": "Test domain model functionality"
              },
              {
                "line": 353,
                "content": "Test pipeline configuration"
              },
              {
                "line": 356,
                "content": "Test SQL generation"
              },
              {
                "line": 360,
                "content": "Test CloudFormation template"
              },
              {
                "line": 364,
                "content": "Test Snowflake schema"
              },
              {
                "line": 369,
                "content": "Tests should be run externally with: pytest healthcare-cdc/test_healthcare_cdc_domain_model.py -v"
              }
            ],
            "total_lines": 370,
            "code_lines": 301
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "healthcare-cdc/docs/HEALTHCARE_CDC_README.md",
          "domain": "healthcare_cdc",
          "file_type": "markdown",
          "size_bytes": 8372,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Healthcare CDC domain validation",
            "Domain-specific rules validation",
            "HIPAA compliance validation",
            "PHI detection and validation",
            "Immutable audit logging",
            "Healthcare data encryption",
            "Healthcare access control and authentication",
            "Healthcare CDC CI/CD integration"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "healthcare-cdc/sql/merge_cdc_operations.sql",
          "domain": "healthcare_cdc",
          "file_type": "unknown",
          "size_bytes": 2427,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Healthcare CDC domain validation",
            "Domain-specific rules validation",
            "HIPAA compliance validation",
            "PHI detection and validation",
            "Immutable audit logging",
            "Healthcare data encryption",
            "Healthcare access control and authentication",
            "Healthcare CDC CI/CD integration"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "healthcare-cdc/sql/healthcare-cdc-schema.sql",
          "domain": "healthcare_cdc",
          "file_type": "unknown",
          "size_bytes": 7233,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Healthcare CDC domain validation",
            "Domain-specific rules validation",
            "HIPAA compliance validation",
            "PHI detection and validation",
            "Immutable audit logging",
            "Healthcare data encryption",
            "Healthcare access control and authentication",
            "Healthcare CDC CI/CD integration"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        }
      ],
      "ghostbusters_gcp": [
        {
          "path": "tests/test_ghostbusters_gcp.py",
          "domain": "ghostbusters_gcp",
          "file_type": "python",
          "size_bytes": 3728,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use functions_framework for Cloud Functions",
            "Integrate with Google Cloud Firestore for data storage",
            "Use Google Cloud Pub/Sub for real-time updates",
            "Implement proper authentication and authorization",
            "Handle Cloud Function cold starts efficiently",
            "Provide comprehensive error handling and logging",
            "Support both simple and embedded API modes",
            "Implement proper request validation",
            "Use environment variables for configuration",
            "Follow GCP security best practices",
            "Implement proper testing with mocks",
            "Support async operations where needed",
            "Provide status tracking and progress updates",
            "Implement proper data serialization",
            "Handle large payloads efficiently"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "unittest.mock",
                "names": [
                  "Mock",
                  "patch"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pytest",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "src.ghostbusters_gcp.main",
                "names": [
                  "ghostbusters_analyze",
                  "ghostbusters_history",
                  "ghostbusters_status"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "mock_firestore",
                "lineno": 30,
                "args": [],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebf3e250>"
                ],
                "docstring": "Mock Firestore client"
              },
              {
                "name": "test_ghostbusters_status_not_found",
                "lineno": 36,
                "args": [
                  "mock_firestore"
                ],
                "decorators": [],
                "docstring": "Test status check for non-existent analysis"
              },
              {
                "name": "test_ghostbusters_status_missing_id",
                "lineno": 55,
                "args": [],
                "decorators": [],
                "docstring": "Test status check with missing analysis_id"
              },
              {
                "name": "test_ghostbusters_status_success",
                "lineno": 65,
                "args": [
                  "mock_firestore"
                ],
                "decorators": [],
                "docstring": "Test status check"
              },
              {
                "name": "test_ghostbusters_analyze_success",
                "lineno": 94,
                "args": [
                  "mock_firestore"
                ],
                "decorators": [],
                "docstring": "Test successful analysis"
              },
              {
                "name": "test_ghostbusters_history_success",
                "lineno": 112,
                "args": [
                  "mock_firestore"
                ],
                "decorators": [],
                "docstring": "Test history retrieval"
              },
              {
                "name": "__init__",
                "lineno": 22,
                "args": [
                  "self",
                  "data"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "get_json",
                "lineno": 25,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MockRequest",
                "lineno": 19,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_json"
                ],
                "docstring": "Mock request object for testing Cloud Functions"
              }
            ],
            "variables": [
              {
                "name": "mock_doc",
                "lineno": 39,
                "value_type": "Call"
              },
              {
                "name": "request",
                "lineno": 47,
                "value_type": "Call"
              },
              {
                "name": "request",
                "lineno": 57,
                "value_type": "Call"
              },
              {
                "name": "mock_doc",
                "lineno": 68,
                "value_type": "Call"
              },
              {
                "name": "request",
                "lineno": 83,
                "value_type": "Call"
              },
              {
                "name": "request",
                "lineno": 117,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 118,
                "value_type": "Call"
              },
              {
                "name": "request",
                "lineno": 104,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 105,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 38,
                "content": "Mock the entire Firestore chain"
              },
              {
                "line": 67,
                "content": "Mock the entire Firestore chain"
              },
              {
                "line": 114,
                "content": "Mock: return empty list for simplicity"
              }
            ],
            "total_lines": 123,
            "code_lines": 87
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "ghostbusters": [
        {
          "path": "tests/test_ghostbusters.py.disabled",
          "domain": "ghostbusters",
          "file_type": "unknown",
          "size_bytes": 16892,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "tests/test_ghostbusters.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 6284,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "pytest",
                "asname": null,
                "lineno": 5
              },
              {
                "module": "src.ghostbusters",
                "names": [
                  "GhostbustersOrchestrator",
                  "run_ghostbusters"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "src.ghostbusters.agents",
                "names": [
                  "ArchitectureExpert",
                  "BuildExpert",
                  "CodeQualityExpert",
                  "ModelExpert",
                  "SecurityExpert",
                  "TestExpert"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "src.ghostbusters.recovery_engines",
                "names": [
                  "SyntaxRecoveryEngine"
                ],
                "asnames": [
                  null
                ],
                "lineno": 152
              },
              {
                "module": "src.ghostbusters.recovery_engines",
                "names": [
                  "IndentationFixer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 169
              }
            ],
            "functions": [
              {
                "name": "orchestrator",
                "lineno": 22,
                "args": [
                  "self",
                  "tmp_path"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebd0bb90>"
                ],
                "docstring": "Create a test orchestrator."
              },
              {
                "name": "test_project",
                "lineno": 54,
                "args": [
                  "self",
                  "tmp_path"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebd9c8d0>"
                ],
                "docstring": "Create a test project structure."
              },
              {
                "name": "test_file",
                "lineno": 143,
                "args": [
                  "self",
                  "tmp_path"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebd45850>"
                ],
                "docstring": "Create a test file with issues."
              }
            ],
            "classes": [
              {
                "name": "TestGhostbustersOrchestrator",
                "lineno": 18,
                "bases": [],
                "methods": [
                  "orchestrator"
                ],
                "docstring": "Test the Ghostbusters orchestrator."
              },
              {
                "name": "TestExpertAgents",
                "lineno": 50,
                "bases": [],
                "methods": [
                  "test_project"
                ],
                "docstring": "Test the expert agents."
              },
              {
                "name": "TestRecoveryEngines",
                "lineno": 139,
                "bases": [],
                "methods": [
                  "test_file"
                ],
                "docstring": "Test the recovery engines."
              }
            ],
            "variables": [
              {
                "name": "test_file",
                "lineno": 39,
                "value_type": "BinOp"
              },
              {
                "name": "state",
                "lineno": 42,
                "value_type": "Await"
              },
              {
                "name": "src_dir",
                "lineno": 57,
                "value_type": "BinOp"
              },
              {
                "name": "test_file",
                "lineno": 61,
                "value_type": "BinOp"
              },
              {
                "name": "expert",
                "lineno": 69,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 70,
                "value_type": "Await"
              },
              {
                "name": "expert",
                "lineno": 81,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 82,
                "value_type": "Await"
              },
              {
                "name": "expert",
                "lineno": 93,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 94,
                "value_type": "Await"
              },
              {
                "name": "expert",
                "lineno": 105,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 106,
                "value_type": "Await"
              },
              {
                "name": "expert",
                "lineno": 117,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 118,
                "value_type": "Await"
              },
              {
                "name": "expert",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 130,
                "value_type": "Await"
              },
              {
                "name": "test_file",
                "lineno": 145,
                "value_type": "BinOp"
              },
              {
                "name": "engine",
                "lineno": 154,
                "value_type": "Call"
              },
              {
                "name": "action",
                "lineno": 155,
                "value_type": "Dict"
              },
              {
                "name": "result",
                "lineno": 157,
                "value_type": "Await"
              },
              {
                "name": "engine",
                "lineno": 171,
                "value_type": "Call"
              },
              {
                "name": "action",
                "lineno": 172,
                "value_type": "Dict"
              },
              {
                "name": "result",
                "lineno": 174,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 38,
                "content": "Create a simple test file"
              },
              {
                "line": 56,
                "content": "Create src directory"
              },
              {
                "line": 60,
                "content": "Create a simple Python file"
              }
            ],
            "total_lines": 186,
            "code_lines": 142
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/recovery.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 6472,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "abc",
                "names": [
                  "ABC",
                  "abstractmethod"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 27,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "RecoveryResult",
                "lineno": 14,
                "bases": [],
                "methods": [],
                "docstring": "Result from recovery action"
              },
              {
                "name": "BaseRecoveryEngine",
                "lineno": 24,
                "bases": [
                  "ABC"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Base class for all recovery engines"
              },
              {
                "name": "SyntaxRecoveryEngine",
                "lineno": 35,
                "bases": [
                  "BaseRecoveryEngine"
                ],
                "methods": [],
                "docstring": "Syntax recovery engine for fixing syntax errors"
              },
              {
                "name": "IndentationFixer",
                "lineno": 71,
                "bases": [
                  "BaseRecoveryEngine"
                ],
                "methods": [],
                "docstring": "Indentation fixer for fixing indentation errors"
              },
              {
                "name": "ImportResolver",
                "lineno": 121,
                "bases": [
                  "BaseRecoveryEngine"
                ],
                "methods": [],
                "docstring": "Import resolver for fixing import errors"
              },
              {
                "name": "TypeAnnotationFixer",
                "lineno": 156,
                "bases": [
                  "BaseRecoveryEngine"
                ],
                "methods": [],
                "docstring": "Type annotation fixer for adding missing type hints"
              }
            ],
            "variables": [
              {
                "name": "files_fixed",
                "lineno": 40,
                "value_type": "List"
              },
              {
                "name": "errors",
                "lineno": 41,
                "value_type": "List"
              },
              {
                "name": "warnings",
                "lineno": 42,
                "value_type": "List"
              },
              {
                "name": "target_files",
                "lineno": 44,
                "value_type": "Call"
              },
              {
                "name": "files_fixed",
                "lineno": 76,
                "value_type": "List"
              },
              {
                "name": "errors",
                "lineno": 77,
                "value_type": "List"
              },
              {
                "name": "warnings",
                "lineno": 78,
                "value_type": "List"
              },
              {
                "name": "target_files",
                "lineno": 80,
                "value_type": "Call"
              },
              {
                "name": "files_fixed",
                "lineno": 126,
                "value_type": "List"
              },
              {
                "name": "errors",
                "lineno": 127,
                "value_type": "List"
              },
              {
                "name": "warnings",
                "lineno": 128,
                "value_type": "List"
              },
              {
                "name": "target_files",
                "lineno": 130,
                "value_type": "Call"
              },
              {
                "name": "files_fixed",
                "lineno": 161,
                "value_type": "List"
              },
              {
                "name": "errors",
                "lineno": 162,
                "value_type": "List"
              },
              {
                "name": "warnings",
                "lineno": 163,
                "value_type": "List"
              },
              {
                "name": "target_files",
                "lineno": 165,
                "value_type": "Call"
              },
              {
                "name": "path",
                "lineno": 48,
                "value_type": "Call"
              },
              {
                "name": "path",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "path",
                "lineno": 134,
                "value_type": "Call"
              },
              {
                "name": "path",
                "lineno": 169,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 86,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 87,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 88,
                "value_type": "List"
              },
              {
                "name": "fixed_content",
                "lineno": 104,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 136,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 171,
                "value_type": "Call"
              },
              {
                "name": "prev_line",
                "lineno": 97,
                "value_type": "Subscript"
              },
              {
                "name": "line",
                "lineno": 100,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 50,
                "content": "Try to compile the file to check syntax"
              },
              {
                "line": 57,
                "content": "In a real implementation, you'd fix the syntax error"
              },
              {
                "line": 91,
                "content": "Basic indentation fix - in practice you'd use a proper formatter"
              },
              {
                "line": 99,
                "content": "Add proper indentation"
              },
              {
                "line": 103,
                "content": "Write fixed content"
              },
              {
                "line": 138,
                "content": "Check for common import issues"
              },
              {
                "line": 140,
                "content": "In a real implementation, you'd analyze and fix imports"
              },
              {
                "line": 173,
                "content": "Check for missing type annotations"
              },
              {
                "line": 175,
                "content": "In a real implementation, you'd add type annotations"
              }
            ],
            "total_lines": 189,
            "code_lines": 139
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/web_tool_discovery.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 8872,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "requests",
                "asname": null,
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 14,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "search_github_tools",
                "lineno": 18,
                "args": [
                  "self",
                  "issue_type"
                ],
                "decorators": [],
                "docstring": "Search GitHub for tools that solve specific issues"
              },
              {
                "name": "search_pypi_tools",
                "lineno": 79,
                "args": [
                  "self",
                  "issue_type"
                ],
                "decorators": [],
                "docstring": "Search PyPI for packages that solve specific issues"
              },
              {
                "name": "get_web_recommendations",
                "lineno": 124,
                "args": [
                  "self",
                  "analysis_results"
                ],
                "decorators": [],
                "docstring": "Get web-based recommendations for issues"
              }
            ],
            "classes": [
              {
                "name": "WebToolDiscovery",
                "lineno": 11,
                "bases": [],
                "methods": [
                  "__init__",
                  "search_github_tools",
                  "search_pypi_tools",
                  "get_web_recommendations"
                ],
                "docstring": "Discover tools from web search and GitHub"
              }
            ],
            "variables": [
              {
                "name": "web_discovery",
                "lineno": 218,
                "value_type": "Call"
              },
              {
                "name": "sample_results",
                "lineno": 221,
                "value_type": "Dict"
              },
              {
                "name": "recommendations",
                "lineno": 227,
                "value_type": "Call"
              },
              {
                "name": "search_terms",
                "lineno": 22,
                "value_type": "Dict"
              },
              {
                "name": "tools_found",
                "lineno": 45,
                "value_type": "List"
              },
              {
                "name": "pypi_terms",
                "lineno": 83,
                "value_type": "Dict"
              },
              {
                "name": "tools_found",
                "lineno": 98,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 126,
                "value_type": "List"
              },
              {
                "name": "mypy_errors",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "flake8_errors",
                "lineno": 130,
                "value_type": "Call"
              },
              {
                "name": "ast_errors",
                "lineno": 131,
                "value_type": "Call"
              },
              {
                "name": "subprocess_vulnerabilities",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "shell_security_issues",
                "lineno": 136,
                "value_type": "Call"
              },
              {
                "name": "github_tools",
                "lineno": 143,
                "value_type": "Call"
              },
              {
                "name": "pypi_tools",
                "lineno": 144,
                "value_type": "Call"
              },
              {
                "name": "github_tools",
                "lineno": 158,
                "value_type": "Call"
              },
              {
                "name": "pypi_tools",
                "lineno": 159,
                "value_type": "Call"
              },
              {
                "name": "github_tools",
                "lineno": 173,
                "value_type": "Call"
              },
              {
                "name": "pypi_tools",
                "lineno": 174,
                "value_type": "Call"
              },
              {
                "name": "github_tools",
                "lineno": 184,
                "value_type": "Call"
              },
              {
                "name": "pypi_tools",
                "lineno": 185,
                "value_type": "Call"
              },
              {
                "name": "github_tools",
                "lineno": 200,
                "value_type": "Call"
              },
              {
                "name": "pypi_tools",
                "lineno": 201,
                "value_type": "Call"
              },
              {
                "name": "url",
                "lineno": 50,
                "value_type": "JoinedStr"
              },
              {
                "name": "params",
                "lineno": 51,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 58,
                "value_type": "Call"
              },
              {
                "name": "url",
                "lineno": 103,
                "value_type": "Constant"
              },
              {
                "name": "params",
                "lineno": 104,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 106,
                "value_type": "Call"
              },
              {
                "name": "top_tool",
                "lineno": 147,
                "value_type": "Subscript"
              },
              {
                "name": "top_tool",
                "lineno": 162,
                "value_type": "Subscript"
              },
              {
                "name": "top_tool",
                "lineno": 177,
                "value_type": "Subscript"
              },
              {
                "name": "top_tool",
                "lineno": 188,
                "value_type": "Subscript"
              },
              {
                "name": "top_tool",
                "lineno": 204,
                "value_type": "Subscript"
              },
              {
                "name": "data",
                "lineno": 60,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 21,
                "content": "Map issue types to search terms"
              },
              {
                "line": 49,
                "content": "Search GitHub repositories"
              },
              {
                "line": 82,
                "content": "Map issue types to PyPI search terms"
              },
              {
                "line": 102,
                "content": "Search PyPI"
              },
              {
                "line": 108,
                "content": "Parse PyPI search results (simplified)"
              },
              {
                "line": 128,
                "content": "Check what issues we have"
              },
              {
                "line": 141,
                "content": "Search for tools based on issues"
              },
              {
                "line": 182,
                "content": "Check for subprocess security vulnerabilities"
              },
              {
                "line": 198,
                "content": "Check for shell security issues"
              },
              {
                "line": 220,
                "content": "Test with sample analysis results"
              }
            ],
            "total_lines": 232,
            "code_lines": 179
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/enhanced_learning_timeout_agent.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 23122,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "time",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 43,
                "args": [
                  "self",
                  "project_path"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_calculate_knowledge_retention_score",
                "lineno": 331,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Calculate knowledge retention score using web-discovered metrics"
              },
              {
                "name": "_calculate_enhanced_learning_confidence",
                "lineno": 415,
                "args": [
                  "self",
                  "state"
                ],
                "decorators": [],
                "docstring": "Calculate enhanced learning confidence with memory techniques"
              },
              {
                "name": "_is_file_i_created",
                "lineno": 514,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Determine if I created this file based on content patterns"
              },
              {
                "name": "_is_documentation_i_authored",
                "lineno": 614,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Determine if I authored this documentation"
              }
            ],
            "classes": [
              {
                "name": "EnhancedLearningTimeoutState",
                "lineno": 22,
                "bases": [],
                "methods": [],
                "docstring": "Enhanced state for learning timeout process with memory techniques"
              },
              {
                "name": "EnhancedLearningTimeoutAgent",
                "lineno": 40,
                "bases": [],
                "methods": [
                  "__init__",
                  "_calculate_knowledge_retention_score",
                  "_calculate_enhanced_learning_confidence",
                  "_is_file_i_created",
                  "_is_documentation_i_authored"
                ],
                "docstring": "Enhanced agent that forces learning with web-discovered memory techniques"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "agent",
                "lineno": 643,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 73,
                "value_type": "Call"
              },
              {
                "name": "applied_techniques",
                "lineno": 190,
                "value_type": "List"
              },
              {
                "name": "schedule",
                "lineno": 244,
                "value_type": "Dict"
              },
              {
                "name": "intervals",
                "lineno": 247,
                "value_type": "List"
              },
              {
                "name": "sessions",
                "lineno": 287,
                "value_type": "List"
              },
              {
                "name": "total_items",
                "lineno": 336,
                "value_type": "BinOp"
              },
              {
                "name": "base_score",
                "lineno": 348,
                "value_type": "Call"
              },
              {
                "name": "technique_bonus",
                "lineno": 351,
                "value_type": "BinOp"
              },
              {
                "name": "session_bonus",
                "lineno": 354,
                "value_type": "BinOp"
              },
              {
                "name": "gap_penalty",
                "lineno": 357,
                "value_type": "BinOp"
              },
              {
                "name": "gaps",
                "lineno": 369,
                "value_type": "List"
              },
              {
                "name": "key_systems",
                "lineno": 388,
                "value_type": "List"
              },
              {
                "name": "key_patterns",
                "lineno": 402,
                "value_type": "List"
              },
              {
                "name": "total_items",
                "lineno": 420,
                "value_type": "BinOp"
              },
              {
                "name": "base_confidence",
                "lineno": 432,
                "value_type": "Call"
              },
              {
                "name": "technique_bonus",
                "lineno": 435,
                "value_type": "BinOp"
              },
              {
                "name": "retention_bonus",
                "lineno": 438,
                "value_type": "BinOp"
              },
              {
                "name": "gap_penalty",
                "lineno": 441,
                "value_type": "BinOp"
              },
              {
                "name": "files",
                "lineno": 495,
                "value_type": "List"
              },
              {
                "name": "patterns",
                "lineno": 498,
                "value_type": "List"
              },
              {
                "name": "systems",
                "lineno": 544,
                "value_type": "List"
              },
              {
                "name": "system_patterns",
                "lineno": 547,
                "value_type": "List"
              },
              {
                "name": "rules",
                "lineno": 578,
                "value_type": "List"
              },
              {
                "name": "rule_patterns",
                "lineno": 581,
                "value_type": "List"
              },
              {
                "name": "docs",
                "lineno": 596,
                "value_type": "List"
              },
              {
                "name": "doc_patterns",
                "lineno": 599,
                "value_type": "List"
              },
              {
                "name": "state",
                "lineno": 650,
                "value_type": "Await"
              },
              {
                "name": "content",
                "lineno": 517,
                "value_type": "Call"
              },
              {
                "name": "indicators",
                "lineno": 520,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 617,
                "value_type": "Call"
              },
              {
                "name": "indicators",
                "lineno": 620,
                "value_type": "List"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 13,
                "content": "Configure detailed logging"
              },
              {
                "line": 51,
                "content": "Web-discovered memory techniques"
              },
              {
                "line": 72,
                "content": "Initialize state"
              },
              {
                "line": 89,
                "content": "Phase 1: Discover what I created (same as before)"
              },
              {
                "line": 94,
                "content": "Phase 2: Identify systems I built (same as before)"
              },
              {
                "line": 99,
                "content": "Phase 3: Recognize patterns I established (same as before)"
              },
              {
                "line": 107,
                "content": "Phase 4: Find rules I wrote (same as before)"
              },
              {
                "line": 112,
                "content": "Phase 5: Locate documentation I authored (same as before)"
              },
              {
                "line": 120,
                "content": "Phase 6: Apply web-discovered memory techniques"
              },
              {
                "line": 128,
                "content": "Phase 7: Create spaced repetition schedule"
              },
              {
                "line": 138,
                "content": "Phase 8: Generate active recall sessions"
              },
              {
                "line": 148,
                "content": "Phase 9: Calculate knowledge retention score"
              },
              {
                "line": 158,
                "content": "Phase 10: Identify knowledge gaps with memory techniques"
              },
              {
                "line": 167,
                "content": "Phase 11: Calculate enhanced learning confidence"
              },
              {
                "line": 175,
                "content": "Phase 12: Force enhanced learning completion"
              },
              {
                "line": 192,
                "content": "1. Spaced Repetition"
              },
              {
                "line": 198,
                "content": "2. Active Recall"
              },
              {
                "line": 204,
                "content": "3. Interleaving"
              },
              {
                "line": 210,
                "content": "4. Elaboration"
              },
              {
                "line": 214,
                "content": "5. Dual Coding"
              },
              {
                "line": 218,
                "content": "6. Retrieval Practice"
              },
              {
                "line": 223,
                "content": "7. Metacognition"
              },
              {
                "line": 226,
                "content": "8. Chunking"
              },
              {
                "line": 229,
                "content": "9. Mnemonic Devices"
              },
              {
                "line": 234,
                "content": "10. Self-Testing"
              },
              {
                "line": 246,
                "content": "Spaced repetition intervals (in days)"
              },
              {
                "line": 249,
                "content": "Schedule files for review"
              },
              {
                "line": 260,
                "content": "Schedule systems for review"
              },
              {
                "line": 270,
                "content": "Schedule patterns for review"
              },
              {
                "line": 289,
                "content": "Session 1: File Recall"
              },
              {
                "line": 295,
                "content": "Session 2: System Recall"
              },
              {
                "line": 301,
                "content": "Session 3: Pattern Recall"
              },
              {
                "line": 307,
                "content": "Session 4: Rule Recall"
              },
              {
                "line": 313,
                "content": "Session 5: Documentation Recall"
              },
              {
                "line": 319,
                "content": "Session 6: Cross-Connection Recall"
              },
              {
                "line": 324,
                "content": "Session 7: Application Recall"
              },
              {
                "line": 347,
                "content": "Base retention score"
              },
              {
                "line": 350,
                "content": "Bonus for memory techniques applied"
              },
              {
                "line": 353,
                "content": "Bonus for active recall sessions"
              },
              {
                "line": 356,
                "content": "Penalty for knowledge gaps"
              },
              {
                "line": 371,
                "content": "Check for gaps in spaced repetition coverage"
              },
              {
                "line": 375,
                "content": "Check for gaps in active recall sessions"
              },
              {
                "line": 379,
                "content": "Check for gaps in memory technique application"
              },
              {
                "line": 383,
                "content": "Check for gaps in knowledge retention"
              },
              {
                "line": 387,
                "content": "Check for gaps in system understanding"
              },
              {
                "line": 401,
                "content": "Check for gaps in pattern understanding"
              },
              {
                "line": 431,
                "content": "Base confidence"
              },
              {
                "line": 434,
                "content": "Memory technique bonus"
              },
              {
                "line": 437,
                "content": "Knowledge retention bonus"
              },
              {
                "line": 440,
                "content": "Gap penalty"
              },
              {
                "line": 492,
                "content": "Reuse methods from original LearningTimeoutAgent"
              },
              {
                "line": 497,
                "content": "Look for files I typically create"
              },
              {
                "line": 519,
                "content": "Look for patterns that indicate I created it"
              },
              {
                "line": 546,
                "content": "Look for systems I typically build"
              },
              {
                "line": 580,
                "content": "Look for rule files I created"
              },
              {
                "line": 598,
                "content": "Look for documentation I typically write"
              },
              {
                "line": 619,
                "content": "Look for my writing patterns"
              }
            ],
            "total_lines": 658,
            "code_lines": 489
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/tool_discovery.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 8099,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "web_tool_discovery",
                "names": [
                  "WebToolDiscovery"
                ],
                "asnames": [
                  null
                ],
                "lineno": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 22,
                "args": [
                  "self",
                  "project_path"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_discover_built_tools",
                "lineno": 29,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Discover tools we've built in this project"
              },
              {
                "name": "_discover_available_tools",
                "lineno": 61,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Discover tools available in the environment"
              },
              {
                "name": "_discover_used_tools",
                "lineno": 95,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Discover what tools we've already used"
              },
              {
                "name": "_infer_script_purpose",
                "lineno": 124,
                "args": [
                  "self",
                  "script_name"
                ],
                "decorators": [],
                "docstring": "Infer the purpose of a script from its name"
              },
              {
                "name": "get_smart_recommendations",
                "lineno": 134,
                "args": [
                  "self",
                  "analysis_results"
                ],
                "decorators": [],
                "docstring": "Get smart recommendations based on available tools, usage history, and web search"
              },
              {
                "name": "get_tool_summary",
                "lineno": 187,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get summary of available and used tools"
              }
            ],
            "classes": [
              {
                "name": "ToolDiscovery",
                "lineno": 19,
                "bases": [],
                "methods": [
                  "__init__",
                  "_discover_built_tools",
                  "_discover_available_tools",
                  "_discover_used_tools",
                  "_infer_script_purpose",
                  "get_smart_recommendations",
                  "get_tool_summary"
                ],
                "docstring": "Discover available tools and built tools with web search"
              }
            ],
            "variables": [
              {
                "name": "discovery",
                "lineno": 200,
                "value_type": "Call"
              },
              {
                "name": "summary",
                "lineno": 201,
                "value_type": "Call"
              },
              {
                "name": "sample_results",
                "lineno": 217,
                "value_type": "Dict"
              },
              {
                "name": "recommendations",
                "lineno": 223,
                "value_type": "Call"
              },
              {
                "name": "built_tools",
                "lineno": 31,
                "value_type": "Dict"
              },
              {
                "name": "fix_scripts",
                "lineno": 34,
                "value_type": "List"
              },
              {
                "name": "available_tools",
                "lineno": 63,
                "value_type": "Dict"
              },
              {
                "name": "tools_to_check",
                "lineno": 66,
                "value_type": "List"
              },
              {
                "name": "used_tools",
                "lineno": 97,
                "value_type": "Dict"
              },
              {
                "name": "recommendations",
                "lineno": 136,
                "value_type": "List"
              },
              {
                "name": "mypy_errors",
                "lineno": 139,
                "value_type": "Call"
              },
              {
                "name": "flake8_errors",
                "lineno": 140,
                "value_type": "Call"
              },
              {
                "name": "ast_errors",
                "lineno": 141,
                "value_type": "Call"
              },
              {
                "name": "web_recommendations",
                "lineno": 172,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 79,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 6,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 8,
                "content": "Import web discovery"
              },
              {
                "line": 33,
                "content": "Look for our fix scripts"
              },
              {
                "line": 51,
                "content": "Look for enhanced Ghostbusters"
              },
              {
                "line": 65,
                "content": "Check for common Python tools"
              },
              {
                "line": 99,
                "content": "Check recent terminal history or log files"
              },
              {
                "line": 100,
                "content": "For now, we'll track based on our known usage"
              },
              {
                "line": 138,
                "content": "Check what issues we have"
              },
              {
                "line": 143,
                "content": "Smart recommendations based on available tools"
              },
              {
                "line": 171,
                "content": "Add web search recommendations"
              },
              {
                "line": 177,
                "content": "Add tool discovery recommendations"
              },
              {
                "line": 216,
                "content": "Test web recommendations"
              }
            ],
            "total_lines": 227,
            "code_lines": 175
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/validators.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 8117,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "abc",
                "names": [
                  "ABC",
                  "abstractmethod"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 25,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "ValidationResult",
                "lineno": 13,
                "bases": [],
                "methods": [],
                "docstring": "Result from validation"
              },
              {
                "name": "BaseValidator",
                "lineno": 22,
                "bases": [
                  "ABC"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Base class for all validators"
              },
              {
                "name": "SecurityValidator",
                "lineno": 36,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [],
                "docstring": "Security validator for validating security findings"
              },
              {
                "name": "CodeQualityValidator",
                "lineno": 71,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [],
                "docstring": "Code quality validator for validating quality findings"
              },
              {
                "name": "TestValidator",
                "lineno": 109,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [],
                "docstring": "Test validator for validating test findings"
              },
              {
                "name": "BuildValidator",
                "lineno": 144,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [],
                "docstring": "Build validator for validating build findings"
              },
              {
                "name": "ArchitectureValidator",
                "lineno": 179,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [],
                "docstring": "Architecture validator for validating architectural findings"
              },
              {
                "name": "ModelValidator",
                "lineno": 217,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [],
                "docstring": "Model validator for validating model findings"
              }
            ],
            "variables": [
              {
                "name": "issues",
                "lineno": 44,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 45,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 60,
                "value_type": "IfExp"
              },
              {
                "name": "is_valid",
                "lineno": 61,
                "value_type": "Compare"
              },
              {
                "name": "issues",
                "lineno": 79,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 80,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 98,
                "value_type": "IfExp"
              },
              {
                "name": "is_valid",
                "lineno": 99,
                "value_type": "Compare"
              },
              {
                "name": "issues",
                "lineno": 117,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 118,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 133,
                "value_type": "IfExp"
              },
              {
                "name": "is_valid",
                "lineno": 134,
                "value_type": "Compare"
              },
              {
                "name": "issues",
                "lineno": 152,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 153,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 168,
                "value_type": "IfExp"
              },
              {
                "name": "is_valid",
                "lineno": 169,
                "value_type": "Compare"
              },
              {
                "name": "issues",
                "lineno": 187,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 188,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 206,
                "value_type": "IfExp"
              },
              {
                "name": "is_valid",
                "lineno": 207,
                "value_type": "Compare"
              },
              {
                "name": "issues",
                "lineno": 225,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 226,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 241,
                "value_type": "IfExp"
              },
              {
                "name": "is_valid",
                "lineno": 242,
                "value_type": "Compare"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 250,
            "code_lines": 204
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/artifact_requirement_mapper.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 12059,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "dataclasses",
                "names": [
                  "asdict",
                  "dataclass"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 298,
                "args": [],
                "decorators": [],
                "docstring": "Main function for testing"
              },
              {
                "name": "__init__",
                "lineno": 34,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_load_project_model",
                "lineno": 39,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load project model registry"
              },
              {
                "name": "_load_ast_models",
                "lineno": 48,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load AST models"
              },
              {
                "name": "_load_test_requirements",
                "lineno": 57,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load test-driven requirements"
              },
              {
                "name": "map_artifact_to_requirements",
                "lineno": 66,
                "args": [
                  "self",
                  "artifact_path"
                ],
                "decorators": [],
                "docstring": "Map a specific artifact to its requirements"
              },
              {
                "name": "_determine_artifact_domain",
                "lineno": 93,
                "args": [
                  "self",
                  "artifact_path",
                  "artifact_model"
                ],
                "decorators": [],
                "docstring": "Determine which domain an artifact belongs to"
              },
              {
                "name": "_path_matches_pattern",
                "lineno": 118,
                "args": [
                  "self",
                  "path",
                  "pattern"
                ],
                "decorators": [],
                "docstring": "Check if path matches pattern"
              },
              {
                "name": "_content_contains_indicator",
                "lineno": 123,
                "args": [
                  "self",
                  "content",
                  "indicator"
                ],
                "decorators": [],
                "docstring": "Check if content contains indicator"
              },
              {
                "name": "_get_requirements_for_domain",
                "lineno": 148,
                "args": [
                  "self",
                  "domain"
                ],
                "decorators": [],
                "docstring": "Get requirements for a specific domain"
              },
              {
                "name": "_create_artifact_requirement_mapping",
                "lineno": 153,
                "args": [
                  "self",
                  "artifact_path",
                  "artifact_model",
                  "requirement"
                ],
                "decorators": [],
                "docstring": "Create mapping between artifact and requirement"
              },
              {
                "name": "_calculate_coverage_score",
                "lineno": 185,
                "args": [
                  "self",
                  "artifact_path",
                  "requirement"
                ],
                "decorators": [],
                "docstring": "Calculate how well the artifact covers the requirement"
              },
              {
                "name": "_calculate_compliance_score",
                "lineno": 195,
                "args": [
                  "self",
                  "artifact_path",
                  "requirement"
                ],
                "decorators": [],
                "docstring": "Calculate compliance score for the requirement"
              },
              {
                "name": "_get_implementation_files",
                "lineno": 205,
                "args": [
                  "self",
                  "requirement"
                ],
                "decorators": [],
                "docstring": "Get implementation files for a requirement"
              },
              {
                "name": "_get_test_files",
                "lineno": 212,
                "args": [
                  "self",
                  "requirement"
                ],
                "decorators": [],
                "docstring": "Get test files for a requirement"
              },
              {
                "name": "generate_artifact_requirement_report",
                "lineno": 219,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate comprehensive report of artifact-requirement mappings"
              },
              {
                "name": "find_requirements_for_artifact",
                "lineno": 265,
                "args": [
                  "self",
                  "artifact_path"
                ],
                "decorators": [],
                "docstring": "Find all requirements that apply to a specific artifact"
              },
              {
                "name": "find_artifacts_for_requirement",
                "lineno": 273,
                "args": [
                  "self",
                  "requirement_id"
                ],
                "decorators": [],
                "docstring": "Find all artifacts that implement a specific requirement"
              }
            ],
            "classes": [
              {
                "name": "ArtifactRequirementMapping",
                "lineno": 14,
                "bases": [],
                "methods": [],
                "docstring": "Mapping between individual artifacts and requirements"
              },
              {
                "name": "ArtifactRequirementMapper",
                "lineno": 31,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_project_model",
                  "_load_ast_models",
                  "_load_test_requirements",
                  "map_artifact_to_requirements",
                  "_determine_artifact_domain",
                  "_path_matches_pattern",
                  "_content_contains_indicator",
                  "_get_requirements_for_domain",
                  "_create_artifact_requirement_mapping",
                  "_calculate_coverage_score",
                  "_calculate_compliance_score",
                  "_get_implementation_files",
                  "_get_test_files",
                  "generate_artifact_requirement_report",
                  "find_requirements_for_artifact",
                  "find_artifacts_for_requirement"
                ],
                "docstring": "Map individual AST models to specific requirements"
              }
            ],
            "variables": [
              {
                "name": "mapper",
                "lineno": 300,
                "value_type": "Call"
              },
              {
                "name": "report",
                "lineno": 303,
                "value_type": "Call"
              },
              {
                "name": "example_artifact",
                "lineno": 315,
                "value_type": "Constant"
              },
              {
                "name": "requirements",
                "lineno": 316,
                "value_type": "Call"
              },
              {
                "name": "mappings",
                "lineno": 71,
                "value_type": "List"
              },
              {
                "name": "artifact_model",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "domain",
                "lineno": 79,
                "value_type": "Call"
              },
              {
                "name": "requirements",
                "lineno": 80,
                "value_type": "Call"
              },
              {
                "name": "path",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 109,
                "value_type": "Call"
              },
              {
                "name": "docstrings",
                "lineno": 130,
                "value_type": "Call"
              },
              {
                "name": "imports",
                "lineno": 131,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 132,
                "value_type": "Call"
              },
              {
                "name": "requirements",
                "lineno": 150,
                "value_type": "Call"
              },
              {
                "name": "complexity_score",
                "lineno": 162,
                "value_type": "Call"
              },
              {
                "name": "coverage_score",
                "lineno": 163,
                "value_type": "Call"
              },
              {
                "name": "compliance_score",
                "lineno": 164,
                "value_type": "Call"
              },
              {
                "name": "implementation_files",
                "lineno": 167,
                "value_type": "Call"
              },
              {
                "name": "test_files",
                "lineno": 168,
                "value_type": "Call"
              },
              {
                "name": "implementation",
                "lineno": 207,
                "value_type": "Call"
              },
              {
                "name": "test_file",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "all_mappings",
                "lineno": 223,
                "value_type": "List"
              },
              {
                "name": "coverage_stats",
                "lineno": 224,
                "value_type": "Dict"
              },
              {
                "name": "mappings",
                "lineno": 270,
                "value_type": "Call"
              },
              {
                "name": "artifacts",
                "lineno": 278,
                "value_type": "List"
              },
              {
                "name": "mapping",
                "lineno": 83,
                "value_type": "Call"
              },
              {
                "name": "patterns",
                "lineno": 103,
                "value_type": "Call"
              },
              {
                "name": "indicators",
                "lineno": 111,
                "value_type": "Call"
              },
              {
                "name": "mappings",
                "lineno": 231,
                "value_type": "Call"
              },
              {
                "name": "mappings",
                "lineno": 284,
                "value_type": "Call"
              },
              {
                "name": "domain",
                "lineno": 236,
                "value_type": "Attribute"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 73,
                "content": "Get artifact AST model"
              },
              {
                "line": 78,
                "content": "Get requirements for this artifact's domain"
              },
              {
                "line": 101,
                "content": "Check patterns for each domain"
              },
              {
                "line": 108,
                "content": "Check content indicators"
              },
              {
                "line": 120,
                "content": "Simple pattern matching - in practice you'd use fnmatch"
              },
              {
                "line": 129,
                "content": "Check in docstrings, imports, function names, etc."
              },
              {
                "line": 161,
                "content": "Calculate scores"
              },
              {
                "line": 166,
                "content": "Get implementation and test files"
              },
              {
                "line": 191,
                "content": "This would analyze the AST model to see how well it implements the requirement"
              },
              {
                "line": 192,
                "content": "For now, return a simple score based on complexity and line count"
              },
              {
                "line": 201,
                "content": "This would check if the artifact follows the requirement's guidelines"
              },
              {
                "line": 202,
                "content": "For now, return a simple score"
              },
              {
                "line": 208,
                "content": "Extract file patterns from implementation description"
              },
              {
                "line": 209,
                "content": "This is a simplified version"
              },
              {
                "line": 226,
                "content": "Process all artifacts"
              },
              {
                "line": 234,
                "content": "Update coverage stats"
              },
              {
                "line": 251,
                "content": "Calculate averages"
              },
              {
                "line": 302,
                "content": "Generate comprehensive report"
              },
              {
                "line": 305,
                "content": "Save report"
              },
              {
                "line": 314,
                "content": "Example: Find requirements for a specific artifact"
              }
            ],
            "total_lines": 324,
            "code_lines": 249
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/enhanced_ghostbusters.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 9190,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "sys",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              },
              {
                "module": "tool_discovery",
                "names": [
                  "ToolDiscovery"
                ],
                "asnames": [
                  null
                ],
                "lineno": 25
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 49,
                "args": [
                  "self",
                  "project_path"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_calculate_real_confidence",
                "lineno": 191,
                "args": [
                  "self",
                  "analysis_details"
                ],
                "decorators": [],
                "docstring": "Calculate real confidence based on actual analysis"
              }
            ],
            "classes": [
              {
                "name": "EnhancedGhostbustersState",
                "lineno": 29,
                "bases": [],
                "methods": [],
                "docstring": "Enhanced state for Ghostbusters workflow"
              },
              {
                "name": "EnhancedGhostbustersOrchestrator",
                "lineno": 46,
                "bases": [],
                "methods": [
                  "__init__",
                  "_calculate_real_confidence"
                ],
                "docstring": "Enhanced Ghostbusters with real analysis and smart tool discovery"
              }
            ],
            "variables": [
              {
                "name": "orchestrator",
                "lineno": 237,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "mypy_results",
                "lineno": 81,
                "value_type": "Await"
              },
              {
                "name": "flake8_results",
                "lineno": 87,
                "value_type": "Await"
              },
              {
                "name": "ast_results",
                "lineno": 93,
                "value_type": "Await"
              },
              {
                "name": "confidence",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "recommendations",
                "lineno": 105,
                "value_type": "Call"
              },
              {
                "name": "errors",
                "lineno": 172,
                "value_type": "List"
              },
              {
                "name": "total_issues",
                "lineno": 194,
                "value_type": "Constant"
              },
              {
                "name": "total_files",
                "lineno": 195,
                "value_type": "Constant"
              },
              {
                "name": "issues_per_file",
                "lineno": 215,
                "value_type": "BinOp"
              },
              {
                "name": "confidence",
                "lineno": 220,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 244,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 119,
                "value_type": "Call"
              },
              {
                "name": "errors",
                "lineno": 127,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 146,
                "value_type": "Call"
              },
              {
                "name": "errors",
                "lineno": 154,
                "value_type": "List"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 9,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 17,
                "content": "Configure detailed logging"
              },
              {
                "line": 23,
                "content": "Import our tool discovery"
              },
              {
                "line": 63,
                "content": "Initialize state"
              },
              {
                "line": 79,
                "content": "Phase 1: Real MyPy Analysis"
              },
              {
                "line": 85,
                "content": "Phase 2: Real Flake8 Analysis"
              },
              {
                "line": 91,
                "content": "Phase 3: Real AST Analysis"
              },
              {
                "line": 97,
                "content": "Phase 4: Calculate Real Confidence"
              },
              {
                "line": 103,
                "content": "Phase 5: Generate Smart Recommendations with Tool Discovery"
              },
              {
                "line": 197,
                "content": "Count Python files"
              },
              {
                "line": 201,
                "content": "Count issues from each analysis"
              },
              {
                "line": 211,
                "content": "Calculate confidence based on issues per file"
              },
              {
                "line": 217,
                "content": "Confidence decreases with more issues per file"
              },
              {
                "line": 218,
                "content": "0 issues per file = 100% confidence"
              },
              {
                "line": 219,
                "content": "10+ issues per file = 0% confidence"
              }
            ],
            "total_lines": 255,
            "code_lines": 192
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/ghostbusters_orchestrator.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 18863,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              },
              {
                "module": "langgraph.graph",
                "names": [
                  "END",
                  "StateGraph"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 14
              },
              {
                "module": "agents",
                "names": [
                  "ArchitectureExpert",
                  "BuildExpert",
                  "CodeQualityExpert",
                  "MCPExpert",
                  "ModelExpert",
                  "SecurityExpert",
                  "TestExpert"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 17
              },
              {
                "module": "recovery",
                "names": [
                  "ImportResolver",
                  "IndentationFixer",
                  "SyntaxRecoveryEngine",
                  "TypeAnnotationFixer"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 26
              },
              {
                "module": "validators",
                "names": [
                  "ArchitectureValidator",
                  "BuildValidator",
                  "CodeQualityValidator",
                  "ModelValidator",
                  "SecurityValidator",
                  "TestValidator"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 32
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 61,
                "args": [
                  "self",
                  "project_path"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_create_workflow",
                "lineno": 97,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Create LangGraph workflow for Ghostbusters"
              },
              {
                "name": "_calculate_confidence",
                "lineno": 293,
                "args": [
                  "self",
                  "validation_results"
                ],
                "decorators": [],
                "docstring": "Calculate confidence score from validation results"
              }
            ],
            "classes": [
              {
                "name": "GhostbustersState",
                "lineno": 43,
                "bases": [],
                "methods": [],
                "docstring": "State for Ghostbusters workflow"
              },
              {
                "name": "GhostbustersOrchestrator",
                "lineno": 58,
                "bases": [],
                "methods": [
                  "__init__",
                  "_create_workflow",
                  "_calculate_confidence"
                ],
                "docstring": "Multi-agent orchestrator for delusion detection and recovery"
              }
            ],
            "variables": [
              {
                "name": "orchestrator",
                "lineno": 509,
                "value_type": "Call"
              },
              {
                "name": "workflow",
                "lineno": 101,
                "value_type": "Call"
              },
              {
                "name": "delusions_detected",
                "lineno": 129,
                "value_type": "List"
              },
              {
                "name": "validation_results",
                "lineno": 155,
                "value_type": "Dict"
              },
              {
                "name": "recovery_actions",
                "lineno": 175,
                "value_type": "List"
              },
              {
                "name": "recovery_results",
                "lineno": 197,
                "value_type": "Dict"
              },
              {
                "name": "max_recovery_actions",
                "lineno": 200,
                "value_type": "Constant"
              },
              {
                "name": "actions_to_execute",
                "lineno": 201,
                "value_type": "Subscript"
              },
              {
                "name": "post_recovery_validation",
                "lineno": 238,
                "value_type": "Dict"
              },
              {
                "name": "pre_confidence",
                "lineno": 247,
                "value_type": "Call"
              },
              {
                "name": "post_confidence",
                "lineno": 248,
                "value_type": "Call"
              },
              {
                "name": "confidence_improvement",
                "lineno": 249,
                "value_type": "BinOp"
              },
              {
                "name": "report",
                "lineno": 264,
                "value_type": "Dict"
              },
              {
                "name": "total_confidence",
                "lineno": 298,
                "value_type": "Constant"
              },
              {
                "name": "count",
                "lineno": 299,
                "value_type": "Constant"
              },
              {
                "name": "state",
                "lineno": 312,
                "value_type": "Call"
              },
              {
                "name": "all_delusions",
                "lineno": 359,
                "value_type": "List"
              },
              {
                "name": "max_files",
                "lineno": 362,
                "value_type": "Constant"
              },
              {
                "name": "file_count",
                "lineno": 363,
                "value_type": "Constant"
              },
              {
                "name": "validation_results",
                "lineno": 389,
                "value_type": "Dict"
              },
              {
                "name": "recovery_actions",
                "lineno": 405,
                "value_type": "List"
              },
              {
                "name": "recovery_results",
                "lineno": 418,
                "value_type": "Dict"
              },
              {
                "name": "max_recovery_actions",
                "lineno": 421,
                "value_type": "Constant"
              },
              {
                "name": "actions_to_execute",
                "lineno": 422,
                "value_type": "Subscript"
              },
              {
                "name": "post_recovery_state",
                "lineno": 448,
                "value_type": "Await"
              },
              {
                "name": "remaining_delusions",
                "lineno": 449,
                "value_type": "Call"
              },
              {
                "name": "original_delusions",
                "lineno": 450,
                "value_type": "Call"
              },
              {
                "name": "confidence",
                "lineno": 467,
                "value_type": "Call"
              },
              {
                "name": "recovery_success_rate",
                "lineno": 470,
                "value_type": "Call"
              },
              {
                "name": "confidence",
                "lineno": 471,
                "value_type": "BinOp"
              },
              {
                "name": "delusion_type",
                "lineno": 484,
                "value_type": "Call"
              },
              {
                "name": "engine_mapping",
                "lineno": 487,
                "value_type": "Dict"
              },
              {
                "name": "engine_name",
                "lineno": 495,
                "value_type": "Call"
              },
              {
                "name": "state",
                "lineno": 516,
                "value_type": "Await"
              },
              {
                "name": "delusions",
                "lineno": 179,
                "value_type": "Call"
              },
              {
                "name": "engine_name",
                "lineno": 204,
                "value_type": "Subscript"
              },
              {
                "name": "base_confidence",
                "lineno": 278,
                "value_type": "Constant"
              },
              {
                "name": "state",
                "lineno": 328,
                "value_type": "Await"
              },
              {
                "name": "state",
                "lineno": 332,
                "value_type": "Await"
              },
              {
                "name": "state",
                "lineno": 336,
                "value_type": "Await"
              },
              {
                "name": "state",
                "lineno": 340,
                "value_type": "Await"
              },
              {
                "name": "state",
                "lineno": 344,
                "value_type": "Await"
              },
              {
                "name": "state",
                "lineno": 348,
                "value_type": "Await"
              },
              {
                "name": "action",
                "lineno": 408,
                "value_type": "Await"
              },
              {
                "name": "engine_name",
                "lineno": 425,
                "value_type": "Call"
              },
              {
                "name": "success_rate",
                "lineno": 453,
                "value_type": "BinOp"
              },
              {
                "name": "success_rate",
                "lineno": 457,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 132,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 159,
                "value_type": "Await"
              },
              {
                "name": "action",
                "lineno": 181,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 241,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 374,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 393,
                "value_type": "Await"
              },
              {
                "name": "engine",
                "lineno": 207,
                "value_type": "Subscript"
              },
              {
                "name": "result",
                "lineno": 208,
                "value_type": "Await"
              },
              {
                "name": "engine",
                "lineno": 428,
                "value_type": "Subscript"
              },
              {
                "name": "result",
                "lineno": 429,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 13,
                "content": "LangGraph imports"
              },
              {
                "line": 16,
                "content": "Local imports"
              },
              {
                "line": 65,
                "content": "Initialize agents"
              },
              {
                "line": 76,
                "content": "Initialize validators"
              },
              {
                "line": 86,
                "content": "Initialize recovery engines"
              },
              {
                "line": 94,
                "content": "Create LangGraph workflow"
              },
              {
                "line": 100,
                "content": "Define the state graph"
              },
              {
                "line": 103,
                "content": "Add nodes"
              },
              {
                "line": 111,
                "content": "Define edges"
              },
              {
                "line": 133,
                "content": "BRUTAL FIX: Extract delusions from DelusionResult"
              },
              {
                "line": 158,
                "content": "FIXED: Don't iterate over ValidationResult, just store it"
              },
              {
                "line": 177,
                "content": "Analyze delusions and plan recovery"
              },
              {
                "line": 199,
                "content": "Limit recovery actions to prevent infinite loops"
              },
              {
                "line": 237,
                "content": "Re-run validation to check if issues are resolved"
              },
              {
                "line": 246,
                "content": "Calculate confidence improvement"
              },
              {
                "line": 275,
                "content": "Calculate confidence score based on results"
              },
              {
                "line": 277,
                "content": "Higher confidence if we found issues and have recovery actions"
              },
              {
                "line": 285,
                "content": "No issues found - high confidence"
              },
              {
                "line": 311,
                "content": "Initialize state"
              },
              {
                "line": 326,
                "content": "Phase 1: Detect delusions"
              },
              {
                "line": 330,
                "content": "Phase 2: Validate findings"
              },
              {
                "line": 334,
                "content": "Phase 3: Plan recovery"
              },
              {
                "line": 338,
                "content": "Phase 4: Execute recovery"
              },
              {
                "line": 342,
                "content": "Phase 5: Validate recovery"
              },
              {
                "line": 346,
                "content": "Phase 6: Generate report"
              },
              {
                "line": 361,
                "content": "Limit number of files to prevent hanging"
              },
              {
                "line": 420,
                "content": "Limit recovery actions to prevent infinite loops"
              },
              {
                "line": 447,
                "content": "Re-run detection to see if issues were fixed"
              },
              {
                "line": 466,
                "content": "Calculate confidence based on validation and recovery results"
              },
              {
                "line": 469,
                "content": "Adjust confidence based on recovery success"
              },
              {
                "line": 486,
                "content": "Map delusion types to recovery engines"
              }
            ],
            "total_lines": 520,
            "code_lines": 392
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 16617,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "abc",
                "names": [
                  "ABC",
                  "abstractmethod"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "tomllib",
                "asname": null,
                "lineno": 254
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 344
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 25,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "DelusionResult",
                "lineno": 14,
                "bases": [],
                "methods": [],
                "docstring": "Result from delusion detection"
              },
              {
                "name": "BaseExpert",
                "lineno": 22,
                "bases": [
                  "ABC"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Base class for all expert agents"
              },
              {
                "name": "SecurityExpert",
                "lineno": 33,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Security expert for detecting security delusions"
              },
              {
                "name": "CodeQualityExpert",
                "lineno": 113,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Code quality expert for detecting quality delusions"
              },
              {
                "name": "TestExpert",
                "lineno": 173,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Test expert for detecting test-related delusions"
              },
              {
                "name": "BuildExpert",
                "lineno": 226,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Build expert for detecting build-related delusions"
              },
              {
                "name": "ArchitectureExpert",
                "lineno": 279,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Architecture expert for detecting architectural delusions"
              },
              {
                "name": "ModelExpert",
                "lineno": 322,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Model expert for detecting model-related delusions"
              },
              {
                "name": "MCPExpert",
                "lineno": 370,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "MCP expert for detecting MCP-related delusions"
              }
            ],
            "variables": [
              {
                "name": "delusions",
                "lineno": 38,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 39,
                "value_type": "List"
              },
              {
                "name": "credential_patterns",
                "lineno": 42,
                "value_type": "List"
              },
              {
                "name": "subprocess_patterns",
                "lineno": 51,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 94,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 95,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 118,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 119,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 159,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 160,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 178,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 179,
                "value_type": "List"
              },
              {
                "name": "test_files",
                "lineno": 182,
                "value_type": "Call"
              },
              {
                "name": "source_files",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "source_files",
                "lineno": 184,
                "value_type": "ListComp"
              },
              {
                "name": "confidence",
                "lineno": 212,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 213,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 231,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 232,
                "value_type": "List"
              },
              {
                "name": "build_files",
                "lineno": 235,
                "value_type": "List"
              },
              {
                "name": "missing_files",
                "lineno": 236,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 269,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 270,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 284,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 285,
                "value_type": "List"
              },
              {
                "name": "src_dirs",
                "lineno": 288,
                "value_type": "Call"
              },
              {
                "name": "py_dirs",
                "lineno": 299,
                "value_type": "ListComp"
              },
              {
                "name": "confidence",
                "lineno": 312,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 313,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 327,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 328,
                "value_type": "List"
              },
              {
                "name": "model_files",
                "lineno": 331,
                "value_type": "Call"
              },
              {
                "name": "confidence",
                "lineno": 360,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 361,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 375,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 376,
                "value_type": "List"
              },
              {
                "name": "mcp_integration_dir",
                "lineno": 379,
                "value_type": "BinOp"
              },
              {
                "name": "github_mcp_client",
                "lineno": 391,
                "value_type": "BinOp"
              },
              {
                "name": "mcp_git_ingest_dir",
                "lineno": 403,
                "value_type": "BinOp"
              },
              {
                "name": "confidence",
                "lineno": 442,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 443,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 141,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 142,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 199,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 417,
                "value_type": "Call"
              },
              {
                "name": "manual_patterns",
                "lineno": 420,
                "value_type": "List"
              },
              {
                "name": "config",
                "lineno": 257,
                "value_type": "Call"
              },
              {
                "name": "model_data",
                "lineno": 347,
                "value_type": "Call"
              },
              {
                "name": "prev_line",
                "lineno": 145,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 41,
                "content": "Check for hardcoded credentials"
              },
              {
                "line": 50,
                "content": "Check for subprocess security vulnerabilities"
              },
              {
                "line": 60,
                "content": "Check for security issues"
              },
              {
                "line": 65,
                "content": "Check for hardcoded credentials"
              },
              {
                "line": 78,
                "content": "Check for subprocess vulnerabilities"
              },
              {
                "line": 121,
                "content": "Check for syntax errors"
              },
              {
                "line": 138,
                "content": "Check for indentation issues"
              },
              {
                "line": 181,
                "content": "Check for missing tests"
              },
              {
                "line": 195,
                "content": "Check for failing tests"
              },
              {
                "line": 198,
                "content": "This is a simplified check - in practice you'd run pytest"
              },
              {
                "line": 234,
                "content": "Check for missing build files"
              },
              {
                "line": 251,
                "content": "Check for dependency issues"
              },
              {
                "line": 287,
                "content": "Check for proper module structure"
              },
              {
                "line": 298,
                "content": "Check for __init__.py files"
              },
              {
                "line": 330,
                "content": "Check for model registry"
              },
              {
                "line": 341,
                "content": "Check for proper model structure"
              },
              {
                "line": 378,
                "content": "Check for MCP integration files"
              },
              {
                "line": 390,
                "content": "Check for GitHub MCP client"
              },
              {
                "line": 402,
                "content": "Check for mcp-git-ingest integration"
              },
              {
                "line": 414,
                "content": "Check for manual file discovery patterns"
              },
              {
                "line": 419,
                "content": "Check for manual file discovery instead of MCP"
              }
            ],
            "total_lines": 456,
            "code_lines": 362
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/__init__.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 1081,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "agents",
                "names": [
                  "ArchitectureExpert",
                  "BuildExpert",
                  "CodeQualityExpert",
                  "ModelExpert",
                  "SecurityExpert",
                  "TestExpert"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 6
              },
              {
                "module": "ghostbusters_orchestrator",
                "names": [
                  "GhostbustersOrchestrator",
                  "run_ghostbusters"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 14
              },
              {
                "module": "recovery",
                "names": [
                  "ImportResolver",
                  "IndentationFixer",
                  "SyntaxRecoveryEngine",
                  "TypeAnnotationFixer"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 15
              },
              {
                "module": "validators",
                "names": [
                  "ArchitectureValidator",
                  "BuildValidator",
                  "CodeQualityValidator",
                  "ModelValidator",
                  "SecurityValidator",
                  "TestValidator"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 21
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "__version__",
                "lineno": 30,
                "value_type": "Constant"
              },
              {
                "name": "__all__",
                "lineno": 31,
                "value_type": "List"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 51,
            "code_lines": 47
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents/test_expert.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 3634,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "base_expert",
                "names": [
                  "BaseExpert",
                  "DelusionResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 12,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the test expert."
              }
            ],
            "classes": [
              {
                "name": "TestExpert",
                "lineno": 9,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Expert agent for detecting test-related issues."
              }
            ],
            "variables": [
              {
                "name": "delusions",
                "lineno": 18,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 19,
                "value_type": "List"
              },
              {
                "name": "test_files",
                "lineno": 22,
                "value_type": "Call"
              },
              {
                "name": "test_dirs",
                "lineno": 23,
                "value_type": "ListComp"
              },
              {
                "name": "confidence",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "delusions",
                "lineno": 75,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 79,
                "value_type": "Call"
              },
              {
                "name": "has_test_functions",
                "lineno": 95,
                "value_type": "Constant"
              },
              {
                "name": "file_delusions",
                "lineno": 43,
                "value_type": "Await"
              },
              {
                "name": "has_test_functions",
                "lineno": 98,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 21,
                "content": "Check for test files"
              },
              {
                "line": 27,
                "content": "Check if tests exist"
              },
              {
                "line": 40,
                "content": "Check test coverage"
              },
              {
                "line": 48,
                "content": "Generate recommendations"
              },
              {
                "line": 81,
                "content": "Check for empty test files"
              },
              {
                "line": 94,
                "content": "Check for test functions"
              },
              {
                "line": 114,
                "content": "Skip files that can't be read"
              }
            ],
            "total_lines": 118,
            "code_lines": 91
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents/model_expert.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 3957,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "base_expert",
                "names": [
                  "BaseExpert",
                  "DelusionResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 12,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the model expert."
              }
            ],
            "classes": [
              {
                "name": "ModelExpert",
                "lineno": 9,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Expert agent for detecting model-related issues."
              }
            ],
            "variables": [
              {
                "name": "delusions",
                "lineno": 18,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 19,
                "value_type": "List"
              },
              {
                "name": "registry_delusions",
                "lineno": 22,
                "value_type": "Await"
              },
              {
                "name": "domain_delusions",
                "lineno": 26,
                "value_type": "Await"
              },
              {
                "name": "validation_delusions",
                "lineno": 30,
                "value_type": "Await"
              },
              {
                "name": "confidence",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "delusions",
                "lineno": 60,
                "value_type": "List"
              },
              {
                "name": "registry_file",
                "lineno": 63,
                "value_type": "BinOp"
              },
              {
                "name": "delusions",
                "lineno": 80,
                "value_type": "List"
              },
              {
                "name": "domain_files",
                "lineno": 83,
                "value_type": "Call"
              },
              {
                "name": "delusions",
                "lineno": 102,
                "value_type": "List"
              },
              {
                "name": "validation_files",
                "lineno": 105,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 21,
                "content": "Check for model registry"
              },
              {
                "line": 25,
                "content": "Check for domain models"
              },
              {
                "line": 29,
                "content": "Check for data validation"
              },
              {
                "line": 33,
                "content": "Generate recommendations"
              },
              {
                "line": 62,
                "content": "Check for project_model_registry.json"
              },
              {
                "line": 82,
                "content": "Look for domain model files"
              },
              {
                "line": 104,
                "content": "Look for validation files"
              }
            ],
            "total_lines": 121,
            "code_lines": 90
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents/architecture_expert.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 4595,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "base_expert",
                "names": [
                  "BaseExpert",
                  "DelusionResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 12,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the architecture expert."
              }
            ],
            "classes": [
              {
                "name": "ArchitectureExpert",
                "lineno": 9,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Expert agent for detecting architectural issues."
              }
            ],
            "variables": [
              {
                "name": "delusions",
                "lineno": 18,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 19,
                "value_type": "List"
              },
              {
                "name": "structure_delusions",
                "lineno": 22,
                "value_type": "Await"
              },
              {
                "name": "init_delusions",
                "lineno": 26,
                "value_type": "Await"
              },
              {
                "name": "import_delusions",
                "lineno": 30,
                "value_type": "Await"
              },
              {
                "name": "confidence",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "delusions",
                "lineno": 63,
                "value_type": "List"
              },
              {
                "name": "src_dir",
                "lineno": 66,
                "value_type": "BinOp"
              },
              {
                "name": "tests_dir",
                "lineno": 80,
                "value_type": "BinOp"
              },
              {
                "name": "delusions",
                "lineno": 97,
                "value_type": "List"
              },
              {
                "name": "src_dir",
                "lineno": 100,
                "value_type": "BinOp"
              },
              {
                "name": "delusions",
                "lineno": 119,
                "value_type": "List"
              },
              {
                "name": "python_files",
                "lineno": 123,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 21,
                "content": "Check project structure"
              },
              {
                "line": 25,
                "content": "Check for proper __init__.py files"
              },
              {
                "line": 29,
                "content": "Check for circular imports"
              },
              {
                "line": 33,
                "content": "Generate recommendations"
              },
              {
                "line": 65,
                "content": "Check for src directory"
              },
              {
                "line": 79,
                "content": "Check for tests directory"
              },
              {
                "line": 99,
                "content": "Check src directory"
              },
              {
                "line": 121,
                "content": "This is a simplified check - in a real implementation,"
              },
              {
                "line": 122,
                "content": "you would analyze import statements for circular dependencies"
              },
              {
                "line": 126,
                "content": "Large projects might have import issues"
              }
            ],
            "total_lines": 139,
            "code_lines": 105
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents/code_quality_expert.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 4196,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 3
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "base_expert",
                "names": [
                  "BaseExpert",
                  "DelusionResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 13,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the code quality expert."
              }
            ],
            "classes": [
              {
                "name": "CodeQualityExpert",
                "lineno": 10,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Expert agent for detecting code quality issues."
              }
            ],
            "variables": [
              {
                "name": "delusions",
                "lineno": 19,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 20,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 48,
                "value_type": "Call"
              },
              {
                "name": "delusions",
                "lineno": 59,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 62,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 80,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 98,
                "value_type": "Call"
              },
              {
                "name": "file_delusions",
                "lineno": 26,
                "value_type": "Await"
              },
              {
                "name": "prev_line",
                "lineno": 84,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 22,
                "content": "Scan Python files for code quality issues"
              },
              {
                "line": 29,
                "content": "Skip files that can't be parsed"
              },
              {
                "line": 32,
                "content": "Generate recommendations"
              },
              {
                "line": 64,
                "content": "Check for syntax errors"
              },
              {
                "line": 79,
                "content": "Check for indentation issues"
              },
              {
                "line": 83,
                "content": "Check if this line should be indented"
              },
              {
                "line": 97,
                "content": "Check for missing type hints"
              },
              {
                "line": 114,
                "content": "Skip files that can't be read"
              }
            ],
            "total_lines": 118,
            "code_lines": 92
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents/security_expert.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 4165,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 3
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "base_expert",
                "names": [
                  "BaseExpert",
                  "DelusionResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 13,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the security expert."
              }
            ],
            "classes": [
              {
                "name": "SecurityExpert",
                "lineno": 10,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Expert agent for detecting security vulnerabilities."
              }
            ],
            "variables": [
              {
                "name": "delusions",
                "lineno": 36,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 37,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 71,
                "value_type": "Call"
              },
              {
                "name": "delusions",
                "lineno": 82,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 85,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 86,
                "value_type": "Call"
              },
              {
                "name": "file_delusions",
                "lineno": 43,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 17,
                "content": "Patterns for detecting security issues"
              },
              {
                "line": 39,
                "content": "Scan Python files for security issues"
              },
              {
                "line": 46,
                "content": "Log error but continue scanning"
              },
              {
                "line": 49,
                "content": "Generate recommendations"
              },
              {
                "line": 89,
                "content": "Check for hardcoded credentials"
              },
              {
                "line": 103,
                "content": "Check for dangerous subprocess calls"
              },
              {
                "line": 118,
                "content": "Skip files that can't be read"
              }
            ],
            "total_lines": 122,
            "code_lines": 96
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents/base_expert.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 2296,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "abc",
                "names": [
                  "ABC",
                  "abstractmethod"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 3
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 22,
                "args": [
                  "self",
                  "name"
                ],
                "decorators": [],
                "docstring": "Initialize the expert agent."
              },
              {
                "name": "_calculate_confidence",
                "lineno": 31,
                "args": [
                  "self",
                  "delusions"
                ],
                "decorators": [],
                "docstring": "Calculate confidence score based on delusions found."
              },
              {
                "name": "_create_delusion",
                "lineno": 52,
                "args": [
                  "self",
                  "delusion_type",
                  "file_path",
                  "line",
                  "description",
                  "confidence",
                  "severity"
                ],
                "decorators": [],
                "docstring": "Create a standardized delusion object."
              },
              {
                "name": "_create_recommendation",
                "lineno": 74,
                "args": [
                  "self",
                  "message",
                  "priority"
                ],
                "decorators": [],
                "docstring": "Create a standardized recommendation."
              }
            ],
            "classes": [
              {
                "name": "DelusionResult",
                "lineno": 10,
                "bases": [],
                "methods": [],
                "docstring": "Result from expert agent delusion detection."
              },
              {
                "name": "BaseExpert",
                "lineno": 19,
                "bases": [
                  "ABC"
                ],
                "methods": [
                  "__init__",
                  "_calculate_confidence",
                  "_create_delusion",
                  "_create_recommendation"
                ],
                "docstring": "Base class for all expert agents."
              }
            ],
            "variables": [
              {
                "name": "total_confidence",
                "lineno": 37,
                "value_type": "Constant"
              },
              {
                "name": "confidence",
                "lineno": 39,
                "value_type": "Call"
              },
              {
                "name": "severity",
                "lineno": 40,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 36,
                "content": "Calculate confidence based on number and severity of delusions"
              },
              {
                "line": 42,
                "content": "Adjust confidence based on severity"
              }
            ],
            "total_lines": 77,
            "code_lines": 59
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents/build_expert.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 3947,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "base_expert",
                "names": [
                  "BaseExpert",
                  "DelusionResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 12,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the build expert."
              }
            ],
            "classes": [
              {
                "name": "BuildExpert",
                "lineno": 9,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Expert agent for detecting build configuration issues."
              }
            ],
            "variables": [
              {
                "name": "delusions",
                "lineno": 18,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 19,
                "value_type": "List"
              },
              {
                "name": "required_files",
                "lineno": 22,
                "value_type": "List"
              },
              {
                "name": "pyproject_path",
                "lineno": 43,
                "value_type": "BinOp"
              },
              {
                "name": "confidence",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "delusions",
                "lineno": 78,
                "value_type": "List"
              },
              {
                "name": "pyproject_delusions",
                "lineno": 45,
                "value_type": "Await"
              },
              {
                "name": "content",
                "lineno": 81,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "has_project_section",
                "lineno": 85,
                "value_type": "Constant"
              },
              {
                "name": "has_dependencies",
                "lineno": 86,
                "value_type": "Constant"
              },
              {
                "name": "has_project_section",
                "lineno": 90,
                "value_type": "Constant"
              },
              {
                "name": "has_dependencies",
                "lineno": 92,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 21,
                "content": "Check for essential build files"
              },
              {
                "line": 42,
                "content": "Check pyproject.toml if it exists"
              },
              {
                "line": 48,
                "content": "Generate recommendations"
              },
              {
                "line": 84,
                "content": "Check for basic project configuration"
              },
              {
                "line": 119,
                "content": "Skip files that can't be read"
              }
            ],
            "total_lines": 123,
            "code_lines": 97
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents/__init__.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 566,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "architecture_expert",
                "names": [
                  "ArchitectureExpert"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "base_expert",
                "names": [
                  "BaseExpert"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "build_expert",
                "names": [
                  "BuildExpert"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "code_quality_expert",
                "names": [
                  "CodeQualityExpert"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "mcp_expert",
                "names": [
                  "MCPExpert"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "model_expert",
                "names": [
                  "ModelExpert"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "security_expert",
                "names": [
                  "SecurityExpert"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "test_expert",
                "names": [
                  "TestExpert"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "__all__",
                "lineno": 12,
                "value_type": "List"
              }
            ],
            "comments": [],
            "total_lines": 22,
            "code_lines": 19
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/agents/mcp_expert.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 4608,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "base_expert",
                "names": [
                  "BaseExpert",
                  "DelusionResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 15,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MCPExpert",
                "lineno": 12,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Expert agent for MCP (Model Context Protocol) analysis"
              }
            ],
            "variables": [
              {
                "name": "delusions",
                "lineno": 21,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 22,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "mcp_files",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "mcp_config_files",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "mcp_integration_files",
                "lineno": 32,
                "value_type": "List"
              },
              {
                "name": "mcp_client_files",
                "lineno": 50,
                "value_type": "Call"
              },
              {
                "name": "mcp_server_files",
                "lineno": 64,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 25,
                "content": "Check for MCP configuration files"
              },
              {
                "line": 31,
                "content": "Check for MCP integration code"
              },
              {
                "line": 36,
                "content": "Analyze MCP usage"
              },
              {
                "line": 49,
                "content": "Check for proper MCP client implementation"
              },
              {
                "line": 63,
                "content": "Check for MCP server implementation"
              },
              {
                "line": 89,
                "content": "Generate recommendations"
              }
            ],
            "total_lines": 129,
            "code_lines": 106
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/recovery_engines/indentation_fixer.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 3823,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "base_recovery_engine",
                "names": [
                  "BaseRecoveryEngine",
                  "RecoveryResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 12,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the indentation fixer."
              }
            ],
            "classes": [
              {
                "name": "IndentationFixer",
                "lineno": 9,
                "bases": [
                  "BaseRecoveryEngine"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Recovery engine for fixing indentation issues."
              }
            ],
            "variables": [
              {
                "name": "changes_made",
                "lineno": 61,
                "value_type": "List"
              },
              {
                "name": "file_path",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "changes_made",
                "lineno": 32,
                "value_type": "Await"
              },
              {
                "name": "content",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 66,
                "value_type": "List"
              },
              {
                "name": "fixed_line",
                "lineno": 69,
                "value_type": "Name"
              },
              {
                "name": "fixed_content",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "fixed_line",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "prev_line",
                "lineno": 85,
                "value_type": "Subscript"
              },
              {
                "name": "fixed_line",
                "lineno": 88,
                "value_type": "BinOp"
              }
            ],
            "comments": [
              {
                "line": 71,
                "content": "Fix mixed tabs and spaces"
              },
              {
                "line": 73,
                "content": "Convert tabs to spaces"
              },
              {
                "line": 81,
                "content": "Fix inconsistent indentation"
              },
              {
                "line": 83,
                "content": "Check if this line should be indented"
              },
              {
                "line": 87,
                "content": "Add proper indentation"
              },
              {
                "line": 97,
                "content": "Write back the fixed content"
              },
              {
                "line": 103,
                "content": "Skip files that can't be read or written"
              }
            ],
            "total_lines": 107,
            "code_lines": 81
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/recovery_engines/syntax_recovery_engine.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 4299,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 3
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "base_recovery_engine",
                "names": [
                  "BaseRecoveryEngine",
                  "RecoveryResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 13,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the syntax recovery engine."
              }
            ],
            "classes": [
              {
                "name": "SyntaxRecoveryEngine",
                "lineno": 10,
                "bases": [
                  "BaseRecoveryEngine"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Recovery engine for fixing syntax errors."
              }
            ],
            "variables": [
              {
                "name": "changes_made",
                "lineno": 62,
                "value_type": "List"
              },
              {
                "name": "file_path",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "changes_made",
                "lineno": 33,
                "value_type": "Await"
              },
              {
                "name": "content",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "line_num",
                "lineno": 78,
                "value_type": "BinOp"
              },
              {
                "name": "line_num",
                "lineno": 95,
                "value_type": "BinOp"
              },
              {
                "name": "fixed_content",
                "lineno": 109,
                "value_type": "Call"
              },
              {
                "name": "line",
                "lineno": 80,
                "value_type": "Subscript"
              },
              {
                "name": "line",
                "lineno": 97,
                "value_type": "Subscript"
              }
            ],
            "comments": [
              {
                "line": 67,
                "content": "Try to parse the file"
              },
              {
                "line": 70,
                "content": "No syntax errors found"
              },
              {
                "line": 73,
                "content": "Fix common syntax errors"
              },
              {
                "line": 76,
                "content": "Fix missing colons"
              },
              {
                "line": 93,
                "content": "Fix indentation issues"
              },
              {
                "line": 99,
                "content": "Add indentation"
              },
              {
                "line": 107,
                "content": "Write back the fixed content"
              },
              {
                "line": 113,
                "content": "Skip files that can't be read or written"
              }
            ],
            "total_lines": 117,
            "code_lines": 91
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/recovery_engines/base_recovery_engine.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 1598,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "abc",
                "names": [
                  "ABC",
                  "abstractmethod"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 3
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 22,
                "args": [
                  "self",
                  "name"
                ],
                "decorators": [],
                "docstring": "Initialize the recovery engine."
              },
              {
                "name": "_calculate_confidence",
                "lineno": 31,
                "args": [
                  "self",
                  "changes_made"
                ],
                "decorators": [],
                "docstring": "Calculate confidence score based on recovery success."
              },
              {
                "name": "_create_change_message",
                "lineno": 39,
                "args": [
                  "self",
                  "change"
                ],
                "decorators": [],
                "docstring": "Create a standardized change message."
              },
              {
                "name": "_create_success_message",
                "lineno": 43,
                "args": [
                  "self",
                  "action_type"
                ],
                "decorators": [],
                "docstring": "Create a standardized success message."
              },
              {
                "name": "_create_failure_message",
                "lineno": 47,
                "args": [
                  "self",
                  "action_type",
                  "error"
                ],
                "decorators": [],
                "docstring": "Create a standardized failure message."
              }
            ],
            "classes": [
              {
                "name": "RecoveryResult",
                "lineno": 9,
                "bases": [],
                "methods": [],
                "docstring": "Result from recovery engine execution."
              },
              {
                "name": "BaseRecoveryEngine",
                "lineno": 19,
                "bases": [
                  "ABC"
                ],
                "methods": [
                  "__init__",
                  "_calculate_confidence",
                  "_create_change_message",
                  "_create_success_message",
                  "_create_failure_message"
                ],
                "docstring": "Base class for all recovery engines."
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 36,
                "content": "Higher confidence with more successful changes"
              }
            ],
            "total_lines": 50,
            "code_lines": 35
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/recovery_engines/import_resolver.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 4163,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "base_recovery_engine",
                "names": [
                  "BaseRecoveryEngine",
                  "RecoveryResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 12,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the import resolver."
              },
              {
                "name": "_is_import_used",
                "lineno": 110,
                "args": [
                  "self",
                  "content",
                  "import_name"
                ],
                "decorators": [],
                "docstring": "Check if an import is used in the content."
              }
            ],
            "classes": [
              {
                "name": "ImportResolver",
                "lineno": 9,
                "bases": [
                  "BaseRecoveryEngine"
                ],
                "methods": [
                  "__init__",
                  "_is_import_used"
                ],
                "docstring": "Recovery engine for fixing import issues."
              }
            ],
            "variables": [
              {
                "name": "changes_made",
                "lineno": 61,
                "value_type": "List"
              },
              {
                "name": "file_path",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "changes_made",
                "lineno": 32,
                "value_type": "Await"
              },
              {
                "name": "content",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "fixed_lines",
                "lineno": 66,
                "value_type": "List"
              },
              {
                "name": "fixed_line",
                "lineno": 69,
                "value_type": "Name"
              },
              {
                "name": "fixed_content",
                "lineno": 101,
                "value_type": "Call"
              },
              {
                "name": "import_name",
                "lineno": 74,
                "value_type": "Subscript"
              },
              {
                "name": "fixed_line",
                "lineno": 77,
                "value_type": "JoinedStr"
              },
              {
                "name": "fixed_line",
                "lineno": 90,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 71,
                "content": "Fix common import issues"
              },
              {
                "line": 73,
                "content": "Check for unused imports (simplified check)"
              },
              {
                "line": 76,
                "content": "Comment out unused import"
              },
              {
                "line": 84,
                "content": "Fix relative imports"
              },
              {
                "line": 88,
                "content": "Convert relative import to absolute if needed"
              },
              {
                "line": 99,
                "content": "Write back the fixed content"
              },
              {
                "line": 105,
                "content": "Skip files that can't be read or written"
              },
              {
                "line": 112,
                "content": "Simple check - in a real implementation, you'd use AST analysis"
              }
            ],
            "total_lines": 114,
            "code_lines": 86
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/recovery_engines/__init__.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 457,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "base_recovery_engine",
                "names": [
                  "BaseRecoveryEngine"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "import_resolver",
                "names": [
                  "ImportResolver"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "indentation_fixer",
                "names": [
                  "IndentationFixer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "syntax_recovery_engine",
                "names": [
                  "SyntaxRecoveryEngine"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "type_annotation_fixer",
                "names": [
                  "TypeAnnotationFixer"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "__all__",
                "lineno": 9,
                "value_type": "List"
              }
            ],
            "comments": [],
            "total_lines": 16,
            "code_lines": 13
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/recovery_engines/type_annotation_fixer.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 3993,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "ast",
                "asname": null,
                "lineno": 3
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "base_recovery_engine",
                "names": [
                  "BaseRecoveryEngine",
                  "RecoveryResult"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 13,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize the type annotation fixer."
              }
            ],
            "classes": [
              {
                "name": "TypeAnnotationFixer",
                "lineno": 10,
                "bases": [
                  "BaseRecoveryEngine"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Recovery engine for fixing type annotation issues."
              }
            ],
            "variables": [
              {
                "name": "changes_made",
                "lineno": 62,
                "value_type": "List"
              },
              {
                "name": "file_path",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "changes_made",
                "lineno": 33,
                "value_type": "Await"
              },
              {
                "name": "content",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "tree",
                "lineno": 69,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 70,
                "value_type": "Call"
              },
              {
                "name": "fixed_content",
                "lineno": 93,
                "value_type": "Call"
              },
              {
                "name": "line_num",
                "lineno": 77,
                "value_type": "BinOp"
              },
              {
                "name": "line",
                "lineno": 79,
                "value_type": "Subscript"
              },
              {
                "name": "fixed_line",
                "lineno": 83,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 67,
                "content": "Parse the file to analyze functions"
              },
              {
                "line": 72,
                "content": "Find functions without return type annotations"
              },
              {
                "line": 76,
                "content": "Add return type annotation"
              },
              {
                "line": 81,
                "content": "Add -> Any return type"
              },
              {
                "line": 91,
                "content": "Write back the fixed content"
              },
              {
                "line": 97,
                "content": "Skip files with syntax errors"
              },
              {
                "line": 101,
                "content": "Skip files that can't be read or written"
              }
            ],
            "total_lines": 105,
            "code_lines": 80
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/validators/base_validator.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 1458,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "abc",
                "names": [
                  "ABC",
                  "abstractmethod"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 3
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 4
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 22,
                "args": [
                  "self",
                  "name"
                ],
                "decorators": [],
                "docstring": "Initialize the validator."
              },
              {
                "name": "_calculate_confidence",
                "lineno": 34,
                "args": [
                  "self",
                  "issues"
                ],
                "decorators": [],
                "docstring": "Calculate confidence score based on validation issues."
              },
              {
                "name": "_create_issue",
                "lineno": 42,
                "args": [
                  "self",
                  "message",
                  "severity"
                ],
                "decorators": [],
                "docstring": "Create a standardized issue message."
              },
              {
                "name": "_create_recommendation",
                "lineno": 46,
                "args": [
                  "self",
                  "message",
                  "priority"
                ],
                "decorators": [],
                "docstring": "Create a standardized recommendation."
              }
            ],
            "classes": [
              {
                "name": "ValidationResult",
                "lineno": 9,
                "bases": [],
                "methods": [],
                "docstring": "Result from validator validation."
              },
              {
                "name": "BaseValidator",
                "lineno": 19,
                "bases": [
                  "ABC"
                ],
                "methods": [
                  "__init__",
                  "_calculate_confidence",
                  "_create_issue",
                  "_create_recommendation"
                ],
                "docstring": "Base class for all validators."
              }
            ],
            "variables": [],
            "comments": [
              {
                "line": 39,
                "content": "Lower confidence with more issues"
              }
            ],
            "total_lines": 49,
            "code_lines": 35
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters/validators/__init__.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 2380,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "typing",
                "names": [
                  "TYPE_CHECKING"
                ],
                "asnames": [
                  null
                ],
                "lineno": 3
              },
              {
                "module": "base_validator",
                "names": [
                  "BaseValidator"
                ],
                "asnames": [
                  null
                ],
                "lineno": 5
              },
              {
                "module": "base_validator",
                "names": [
                  "ValidationResult"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 15,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 25,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 35,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 45,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 55,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 65,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "ArchitectureValidator",
                "lineno": 12,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Placeholder validator for architecture validation"
              },
              {
                "name": "BuildValidator",
                "lineno": 22,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Placeholder validator for build validation"
              },
              {
                "name": "CodeQualityValidator",
                "lineno": 32,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Placeholder validator for code quality validation"
              },
              {
                "name": "ModelValidator",
                "lineno": 42,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Placeholder validator for model validation"
              },
              {
                "name": "SecurityValidator",
                "lineno": 52,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Placeholder validator for security validation"
              },
              {
                "name": "TestValidator",
                "lineno": 62,
                "bases": [
                  "BaseValidator"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Placeholder validator for test validation"
              }
            ],
            "variables": [
              {
                "name": "__all__",
                "lineno": 72,
                "value_type": "List"
              }
            ],
            "comments": [
              {
                "line": 11,
                "content": "Create placeholder validators for missing ones"
              }
            ],
            "total_lines": 81,
            "code_lines": 50
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_dashboard/app.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 16797,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "streamlit",
                "asname": "st",
                "lineno": 11
              },
              {
                "module": "firebase_admin",
                "names": [
                  "initialize_app"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "authenticate_user",
                "lineno": 76,
                "args": [],
                "decorators": [],
                "docstring": "Authenticate user using Firebase Auth"
              },
              {
                "name": "get_user_analyses",
                "lineno": 87,
                "args": [
                  "user_id",
                  "limit"
                ],
                "decorators": [],
                "docstring": "Get user's analysis history"
              },
              {
                "name": "get_analysis_details",
                "lineno": 123,
                "args": [
                  "analysis_id"
                ],
                "decorators": [],
                "docstring": "Get detailed analysis results"
              },
              {
                "name": "get_global_metrics",
                "lineno": 135,
                "args": [],
                "decorators": [],
                "docstring": "Get global analytics metrics"
              },
              {
                "name": "main",
                "lineno": 182,
                "args": [],
                "decorators": [],
                "docstring": "Main dashboard application"
              },
              {
                "name": "show_overview",
                "lineno": 224,
                "args": [
                  "user_id"
                ],
                "decorators": [],
                "docstring": "Show overview dashboard"
              },
              {
                "name": "show_my_analyses",
                "lineno": 303,
                "args": [
                  "user_id"
                ],
                "decorators": [],
                "docstring": "Show user's analysis history"
              },
              {
                "name": "show_analysis_details",
                "lineno": 395,
                "args": [],
                "decorators": [],
                "docstring": "Show detailed analysis results"
              },
              {
                "name": "show_real_time_updates",
                "lineno": 468,
                "args": [],
                "decorators": [],
                "docstring": "Show real-time analysis updates"
              },
              {
                "name": "show_settings",
                "lineno": 506,
                "args": [],
                "decorators": [],
                "docstring": "Show user settings"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "subscriber",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "subscription_path",
                "lineno": 31,
                "value_type": "Call"
              },
              {
                "name": "page",
                "lineno": 193,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 205,
                "value_type": "Call"
              },
              {
                "name": "global_metrics",
                "lineno": 229,
                "value_type": "Call"
              },
              {
                "name": "user_analyses",
                "lineno": 230,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 323,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 400,
                "value_type": "Call"
              },
              {
                "name": "updates",
                "lineno": 478,
                "value_type": "List"
              },
              {
                "name": "docs",
                "lineno": 90,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 98,
                "value_type": "List"
              },
              {
                "name": "doc",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "total_analyses",
                "lineno": 139,
                "value_type": "Call"
              },
              {
                "name": "week_ago",
                "lineno": 142,
                "value_type": "BinOp"
              },
              {
                "name": "recent_analyses",
                "lineno": 143,
                "value_type": "Call"
              },
              {
                "name": "total_delusions",
                "lineno": 150,
                "value_type": "Call"
              },
              {
                "name": "total_recoveries",
                "lineno": 153,
                "value_type": "Call"
              },
              {
                "name": "avg_confidence",
                "lineno": 156,
                "value_type": "IfExp"
              },
              {
                "name": "avg_processing_time",
                "lineno": 162,
                "value_type": "IfExp"
              },
              {
                "name": "status_filter",
                "lineno": 311,
                "value_type": "Call"
              },
              {
                "name": "confidence_filter",
                "lineno": 314,
                "value_type": "Call"
              },
              {
                "name": "limit",
                "lineno": 320,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 327,
                "value_type": "ListComp"
              },
              {
                "name": "details",
                "lineno": 403,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 100,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 331,
                "value_type": "ListComp"
              },
              {
                "name": "delusions",
                "lineno": 426,
                "value_type": "Call"
              },
              {
                "name": "recoveries",
                "lineno": 442,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 333,
                "value_type": "ListComp"
              },
              {
                "name": "confidence_color",
                "lineno": 268,
                "value_type": "IfExp"
              },
              {
                "name": "analyses",
                "lineno": 335,
                "value_type": "ListComp"
              },
              {
                "name": "confidence_color",
                "lineno": 351,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Initialize Firebase Admin SDK"
              },
              {
                "line": 19,
                "content": "App already initialized"
              },
              {
                "line": 22,
                "content": "Configure logging"
              },
              {
                "line": 26,
                "content": "Initialize Firestore client"
              },
              {
                "line": 29,
                "content": "Initialize Pub/Sub subscriber for real-time updates"
              },
              {
                "line": 36,
                "content": "Page configuration"
              },
              {
                "line": 44,
                "content": "Custom CSS for better styling"
              },
              {
                "line": 79,
                "content": "In a real app, you'd get the token from the frontend"
              },
              {
                "line": 80,
                "content": "For demo purposes, we'll use a mock user"
              },
              {
                "line": 138,
                "content": "Get total analyses"
              },
              {
                "line": 141,
                "content": "Get recent analyses (last 7 days)"
              },
              {
                "line": 149,
                "content": "Calculate metrics"
              },
              {
                "line": 185,
                "content": "Header"
              },
              {
                "line": 191,
                "content": "Sidebar"
              },
              {
                "line": 204,
                "content": "Authenticate user"
              },
              {
                "line": 228,
                "content": "Get metrics"
              },
              {
                "line": 232,
                "content": "Global metrics"
              },
              {
                "line": 256,
                "content": "Recent activity"
              },
              {
                "line": 290,
                "content": "Quick actions"
              },
              {
                "line": 307,
                "content": "Filters"
              },
              {
                "line": 322,
                "content": "Get analyses"
              },
              {
                "line": 325,
                "content": "Apply filters"
              },
              {
                "line": 337,
                "content": "Display analyses"
              },
              {
                "line": 375,
                "content": "Action buttons"
              },
              {
                "line": 399,
                "content": "Analysis selector"
              },
              {
                "line": 406,
                "content": "Basic info"
              },
              {
                "line": 424,
                "content": "Delusions details"
              },
              {
                "line": 440,
                "content": "Recovery actions"
              },
              {
                "line": 452,
                "content": "Errors and warnings"
              },
              {
                "line": 472,
                "content": "Mock real-time updates for demo"
              },
              {
                "line": 477,
                "content": "Simulated updates"
              },
              {
                "line": 510,
                "content": "User preferences"
              },
              {
                "line": 525,
                "content": "API settings"
              },
              {
                "line": 530,
                "content": "Save button"
              }
            ],
            "total_lines": 537,
            "code_lines": 409
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_advanced_dashboard/app.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 21626,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "streamlit",
                "asname": "st",
                "lineno": 10
              },
              {
                "module": "firebase_admin",
                "names": [
                  "initialize_app"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "authenticate_user",
                "lineno": 81,
                "args": [],
                "decorators": [],
                "docstring": "Authenticate user using Firebase Auth"
              },
              {
                "name": "get_advanced_analyses",
                "lineno": 92,
                "args": [
                  "user_id",
                  "limit"
                ],
                "decorators": [],
                "docstring": "Get user's advanced analysis history"
              },
              {
                "name": "get_custom_agents",
                "lineno": 134,
                "args": [
                  "user_id"
                ],
                "decorators": [],
                "docstring": "Get user's custom agents"
              },
              {
                "name": "get_enterprise_analytics",
                "lineno": 159,
                "args": [],
                "decorators": [],
                "docstring": "Get enterprise analytics"
              },
              {
                "name": "main",
                "lineno": 217,
                "args": [],
                "decorators": [],
                "docstring": "Main advanced dashboard application"
              },
              {
                "name": "show_ml_insights",
                "lineno": 262,
                "args": [
                  "user_id"
                ],
                "decorators": [],
                "docstring": "Show ML-powered insights"
              },
              {
                "name": "show_custom_agents",
                "lineno": 354,
                "args": [
                  "user_id"
                ],
                "decorators": [],
                "docstring": "Show custom agents management"
              },
              {
                "name": "show_enterprise_analytics",
                "lineno": 427,
                "args": [],
                "decorators": [],
                "docstring": "Show enterprise analytics"
              },
              {
                "name": "show_advanced_results",
                "lineno": 486,
                "args": [
                  "user_id"
                ],
                "decorators": [],
                "docstring": "Show advanced analysis results"
              },
              {
                "name": "show_audit_logs",
                "lineno": 562,
                "args": [],
                "decorators": [],
                "docstring": "Show audit logs"
              },
              {
                "name": "show_advanced_settings",
                "lineno": 608,
                "args": [],
                "decorators": [],
                "docstring": "Show advanced settings"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "subscriber",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "subscription_path",
                "lineno": 30,
                "value_type": "Call"
              },
              {
                "name": "page",
                "lineno": 228,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 241,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 267,
                "value_type": "Call"
              },
              {
                "name": "agents",
                "lineno": 359,
                "value_type": "Call"
              },
              {
                "name": "analytics",
                "lineno": 432,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 491,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 567,
                "value_type": "Call"
              },
              {
                "name": "logs",
                "lineno": 574,
                "value_type": "List"
              },
              {
                "name": "docs",
                "lineno": 95,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 103,
                "value_type": "List"
              },
              {
                "name": "docs",
                "lineno": 137,
                "value_type": "Call"
              },
              {
                "name": "agents",
                "lineno": 138,
                "value_type": "List"
              },
              {
                "name": "total_analyses",
                "lineno": 163,
                "value_type": "Call"
              },
              {
                "name": "total_users",
                "lineno": 166,
                "value_type": "Call"
              },
              {
                "name": "total_custom_agents",
                "lineno": 167,
                "value_type": "Call"
              },
              {
                "name": "total_audit_logs",
                "lineno": 168,
                "value_type": "Call"
              },
              {
                "name": "recent_analyses",
                "lineno": 171,
                "value_type": "Call"
              },
              {
                "name": "ml_insights_summary",
                "lineno": 178,
                "value_type": "Dict"
              },
              {
                "name": "ml_summary",
                "lineno": 451,
                "value_type": "Call"
              },
              {
                "name": "features_data",
                "lineno": 473,
                "value_type": "Dict"
              },
              {
                "name": "doc",
                "lineno": 495,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 576,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 105,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 140,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 186,
                "value_type": "Call"
              },
              {
                "name": "ml_insights",
                "lineno": 187,
                "value_type": "Call"
              },
              {
                "name": "risk_score",
                "lineno": 188,
                "value_type": "Call"
              },
              {
                "name": "priority",
                "lineno": 189,
                "value_type": "Call"
              },
              {
                "name": "anomaly",
                "lineno": 190,
                "value_type": "Call"
              },
              {
                "name": "total_risk_scores",
                "lineno": 274,
                "value_type": "Call"
              },
              {
                "name": "avg_risk_score",
                "lineno": 277,
                "value_type": "IfExp"
              },
              {
                "name": "high_priority_count",
                "lineno": 281,
                "value_type": "Call"
              },
              {
                "name": "anomaly_count",
                "lineno": 289,
                "value_type": "Call"
              },
              {
                "name": "ml_insights",
                "lineno": 299,
                "value_type": "Call"
              },
              {
                "name": "agent_name",
                "lineno": 412,
                "value_type": "Call"
              },
              {
                "name": "agent_type",
                "lineno": 413,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 497,
                "value_type": "Call"
              },
              {
                "name": "ml_insights",
                "lineno": 512,
                "value_type": "Call"
              },
              {
                "name": "enterprise_features",
                "lineno": 544,
                "value_type": "Call"
              },
              {
                "name": "metadata",
                "lineno": 550,
                "value_type": "Call"
              },
              {
                "name": "custom_agents_used",
                "lineno": 551,
                "value_type": "Call"
              },
              {
                "name": "trend_analysis",
                "lineno": 333,
                "value_type": "Call"
              },
              {
                "name": "status_color",
                "lineno": 381,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 14,
                "content": "Initialize Firebase Admin SDK"
              },
              {
                "line": 18,
                "content": "App already initialized"
              },
              {
                "line": 21,
                "content": "Configure logging"
              },
              {
                "line": 25,
                "content": "Initialize Firestore client"
              },
              {
                "line": 28,
                "content": "Initialize Pub/Sub subscriber for real-time updates"
              },
              {
                "line": 35,
                "content": "Page configuration"
              },
              {
                "line": 43,
                "content": "Custom CSS for advanced styling"
              },
              {
                "line": 84,
                "content": "In a real app, you'd get the token from the frontend"
              },
              {
                "line": 85,
                "content": "For demo purposes, we'll use a mock user"
              },
              {
                "line": 162,
                "content": "Get enterprise metrics"
              },
              {
                "line": 170,
                "content": "Get recent ML insights"
              },
              {
                "line": 220,
                "content": "Header"
              },
              {
                "line": 226,
                "content": "Sidebar"
              },
              {
                "line": 240,
                "content": "Authenticate user"
              },
              {
                "line": 266,
                "content": "Get recent analyses with ML insights"
              },
              {
                "line": 270,
                "content": "ML Insights Overview"
              },
              {
                "line": 296,
                "content": "Detailed ML Insights"
              },
              {
                "line": 332,
                "content": "Trend Analysis"
              },
              {
                "line": 341,
                "content": "Quick Actions"
              },
              {
                "line": 358,
                "content": "Get custom agents"
              },
              {
                "line": 361,
                "content": "Agent Management"
              },
              {
                "line": 393,
                "content": "Action buttons"
              },
              {
                "line": 431,
                "content": "Get enterprise analytics"
              },
              {
                "line": 435,
                "content": "Enterprise Metrics"
              },
              {
                "line": 450,
                "content": "ML Insights Summary"
              },
              {
                "line": 471,
                "content": "Enterprise Features Usage"
              },
              {
                "line": 490,
                "content": "Analysis selector"
              },
              {
                "line": 494,
                "content": "Get advanced analysis details"
              },
              {
                "line": 499,
                "content": "Basic info"
              },
              {
                "line": 511,
                "content": "ML Insights"
              },
              {
                "line": 543,
                "content": "Enterprise Features"
              },
              {
                "line": 549,
                "content": "Custom Agents Used"
              },
              {
                "line": 566,
                "content": "Get recent audit logs"
              },
              {
                "line": 612,
                "content": "Enterprise Settings"
              },
              {
                "line": 626,
                "content": "Custom Agent Settings"
              },
              {
                "line": 638,
                "content": "Save button"
              }
            ],
            "total_lines": 645,
            "code_lines": 497
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/main.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 18018,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "functions_framework",
                "asname": null,
                "lineno": 14
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 15
              }
            ],
            "functions": [
              {
                "name": "authenticate_request",
                "lineno": 32,
                "args": [
                  "request"
                ],
                "decorators": [],
                "docstring": "Simple authentication for demo purposes"
              },
              {
                "name": "publish_update",
                "lineno": 46,
                "args": [
                  "analysis_id",
                  "status",
                  "data"
                ],
                "decorators": [],
                "docstring": "Publish real-time update to Pub/Sub"
              },
              {
                "name": "mock_ghostbusters_analysis",
                "lineno": 70,
                "args": [
                  "project_path"
                ],
                "decorators": [],
                "docstring": "Mock Ghostbusters analysis for simple API"
              },
              {
                "name": "run_embedded_ghostbusters",
                "lineno": 93,
                "args": [
                  "project_path"
                ],
                "decorators": [],
                "docstring": "Embedded Ghostbusters analysis logic\nThis simulates the real multi-agent system"
              },
              {
                "name": "ghostbusters_analyze",
                "lineno": 165,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebc74390>"
                ],
                "docstring": "HTTP Cloud Function for Ghostbusters analysis (Simple API)\n\nArgs:\n    request: HTTP request object\n\nReturns:\n    JSON response with analysis results"
              },
              {
                "name": "ghostbusters_status",
                "lineno": 241,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebd415d0>"
                ],
                "docstring": "HTTP Cloud Function to check analysis status (Simple API)"
              },
              {
                "name": "ghostbusters_history",
                "lineno": 292,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb03890>"
                ],
                "docstring": "HTTP Cloud Function to get analysis history (Simple API)\n\nArgs:\n    request: HTTP request object\n\nReturns:\n    JSON response with analysis history"
              },
              {
                "name": "ghostbusters_analyze_embedded",
                "lineno": 341,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb2bb10>"
                ],
                "docstring": "Embedded Ghostbusters HTTP Cloud Function with real multi-agent analysis"
              },
              {
                "name": "ghostbusters_progress_embedded",
                "lineno": 444,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb53390>"
                ],
                "docstring": "HTTP Cloud Function to get real-time progress updates for embedded Ghostbusters"
              },
              {
                "name": "ghostbusters_user_analyses_embedded",
                "lineno": 488,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb3cf90>"
                ],
                "docstring": "HTTP Cloud Function to get user's embedded Ghostbusters analysis history"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 22,
                "value_type": "Call"
              },
              {
                "name": "publisher",
                "lineno": 25,
                "value_type": "Call"
              },
              {
                "name": "topic_path",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "agents",
                "lineno": 101,
                "value_type": "List"
              },
              {
                "name": "delusions_detected",
                "lineno": 110,
                "value_type": "List"
              },
              {
                "name": "recovery_actions",
                "lineno": 111,
                "value_type": "List"
              },
              {
                "name": "errors",
                "lineno": 112,
                "value_type": "List"
              },
              {
                "name": "warnings",
                "lineno": 113,
                "value_type": "List"
              },
              {
                "name": "auth_header",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "message",
                "lineno": 49,
                "value_type": "Dict"
              },
              {
                "name": "future",
                "lineno": 57,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 177,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 184,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 185,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 191,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 194,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 246,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 253,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 258,
                "value_type": "Call"
              },
              {
                "name": "doc",
                "lineno": 259,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 264,
                "value_type": "BoolOp"
              },
              {
                "name": "delusions_detected",
                "lineno": 267,
                "value_type": "Call"
              },
              {
                "name": "recovery_actions",
                "lineno": 268,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 276,
                "value_type": "Dict"
              },
              {
                "name": "request_json",
                "lineno": 303,
                "value_type": "BoolOp"
              },
              {
                "name": "limit",
                "lineno": 304,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 307,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 314,
                "value_type": "List"
              },
              {
                "name": "user_id",
                "lineno": 347,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 350,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 357,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 358,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 371,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 375,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 449,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 456,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 461,
                "value_type": "Call"
              },
              {
                "name": "doc",
                "lineno": 462,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 467,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 494,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 497,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 505,
                "value_type": "List"
              },
              {
                "name": "error_id",
                "lineno": 227,
                "value_type": "Call"
              },
              {
                "name": "delusions_detected",
                "lineno": 272,
                "value_type": "List"
              },
              {
                "name": "recovery_actions",
                "lineno": 274,
                "value_type": "List"
              },
              {
                "name": "data",
                "lineno": 316,
                "value_type": "Call"
              },
              {
                "name": "error_id",
                "lineno": 430,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 507,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 120,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Configure logging"
              },
              {
                "line": 21,
                "content": "Initialize Firestore client"
              },
              {
                "line": 24,
                "content": "Initialize Pub/Sub publisher"
              },
              {
                "line": 35,
                "content": "Get the Authorization header"
              },
              {
                "line": 38,
                "content": "In a real app, you'd verify the token"
              },
              {
                "line": 56,
                "content": "Publish to Pub/Sub"
              },
              {
                "line": 76,
                "content": "Simulate analysis results"
              },
              {
                "line": 100,
                "content": "Simulate multi-agent analysis"
              },
              {
                "line": 115,
                "content": "Security analysis"
              },
              {
                "line": 117,
                "content": "Check for common security issues"
              },
              {
                "line": 139,
                "content": "Simulate analysis results"
              },
              {
                "line": 159,
                "content": "============================================================================="
              },
              {
                "line": 160,
                "content": "SIMPLE API (for backward compatibility with tests)"
              },
              {
                "line": 161,
                "content": "============================================================================="
              },
              {
                "line": 176,
                "content": "Parse request"
              },
              {
                "line": 190,
                "content": "Run mock Ghostbusters analysis"
              },
              {
                "line": 193,
                "content": "Store results in Firestore"
              },
              {
                "line": 226,
                "content": "Store error in Firestore"
              },
              {
                "line": 257,
                "content": "Get status from Firestore"
              },
              {
                "line": 266,
                "content": "Ensure we have proper data structures"
              },
              {
                "line": 270,
                "content": "Convert to lists if they're not already"
              },
              {
                "line": 306,
                "content": "Get recent analyses from Firestore"
              },
              {
                "line": 346,
                "content": "Authenticate user"
              },
              {
                "line": 349,
                "content": "Parse request"
              },
              {
                "line": 366,
                "content": "Publish start update"
              },
              {
                "line": 369,
                "content": "Run embedded Ghostbusters analysis"
              },
              {
                "line": 374,
                "content": "Store results in Firestore"
              },
              {
                "line": 394,
                "content": "Publish completion update"
              },
              {
                "line": 429,
                "content": "Store error in Firestore"
              },
              {
                "line": 460,
                "content": "Get progress from Firestore"
              },
              {
                "line": 493,
                "content": "Authenticate user"
              },
              {
                "line": 496,
                "content": "Get user's analyses from Firestore"
              }
            ],
            "total_lines": 536,
            "code_lines": 422
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/simple_enhanced_main.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 9148,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "functions_framework",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 14
              }
            ],
            "functions": [
              {
                "name": "authenticate_request",
                "lineno": 31,
                "args": [
                  "request"
                ],
                "decorators": [],
                "docstring": "Simple authentication for demo purposes"
              },
              {
                "name": "publish_update",
                "lineno": 45,
                "args": [
                  "analysis_id",
                  "status",
                  "data"
                ],
                "decorators": [],
                "docstring": "Publish real-time update to Pub/Sub"
              },
              {
                "name": "mock_ghostbusters_analysis",
                "lineno": 69,
                "args": [
                  "_project_path"
                ],
                "decorators": [],
                "docstring": "Mock Ghostbusters analysis for demonstration\nIn a real implementation, this would call the actual Ghostbusters orchestrator"
              },
              {
                "name": "ghostbusters_analyze_enhanced",
                "lineno": 104,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb05990>"
                ],
                "docstring": "Enhanced HTTP Cloud Function for Ghostbusters analysis with real-time updates"
              },
              {
                "name": "ghostbusters_progress",
                "lineno": 196,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebc91250>"
                ],
                "docstring": "HTTP Cloud Function to get real-time progress updates"
              },
              {
                "name": "ghostbusters_user_analyses",
                "lineno": 236,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebdf29d0>"
                ],
                "docstring": "HTTP Cloud Function to get user's analysis history"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 18,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 21,
                "value_type": "Call"
              },
              {
                "name": "publisher",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "topic_path",
                "lineno": 25,
                "value_type": "Call"
              },
              {
                "name": "auth_header",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "message",
                "lineno": 48,
                "value_type": "Dict"
              },
              {
                "name": "future",
                "lineno": 56,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 110,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 113,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 136,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 201,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 208,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 213,
                "value_type": "Call"
              },
              {
                "name": "doc",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 219,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 242,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 245,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 253,
                "value_type": "List"
              },
              {
                "name": "error_id",
                "lineno": 182,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 255,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 16,
                "content": "Configure logging"
              },
              {
                "line": 20,
                "content": "Initialize Firestore client"
              },
              {
                "line": 23,
                "content": "Initialize Pub/Sub publisher"
              },
              {
                "line": 34,
                "content": "Get the Authorization header"
              },
              {
                "line": 37,
                "content": "In a real app, you'd verify the token"
              },
              {
                "line": 55,
                "content": "Publish to Pub/Sub"
              },
              {
                "line": 109,
                "content": "Authenticate user"
              },
              {
                "line": 112,
                "content": "Parse request"
              },
              {
                "line": 129,
                "content": "Publish start update"
              },
              {
                "line": 132,
                "content": "Run mock Ghostbusters analysis"
              },
              {
                "line": 135,
                "content": "Store results in Firestore"
              },
              {
                "line": 151,
                "content": "Publish completion update"
              },
              {
                "line": 181,
                "content": "Store error in Firestore"
              },
              {
                "line": 212,
                "content": "Get progress from Firestore"
              },
              {
                "line": 241,
                "content": "Authenticate user"
              },
              {
                "line": 244,
                "content": "Get user's analyses from Firestore"
              }
            ],
            "total_lines": 278,
            "code_lines": 220
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/simple_main.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 6867,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "functions_framework",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "mock_ghostbusters_analysis",
                "lineno": 23,
                "args": [
                  "project_path"
                ],
                "decorators": [],
                "docstring": "Mock Ghostbusters analysis for demonstration\nIn a real implementation, this would call the actual Ghostbusters orchestrator"
              },
              {
                "name": "ghostbusters_analyze",
                "lineno": 58,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebcf3d90>"
                ],
                "docstring": "HTTP Cloud Function for Ghostbusters analysis\n\nArgs:\n    request: HTTP request object\n\nReturns:\n    JSON response with analysis results"
              },
              {
                "name": "ghostbusters_status",
                "lineno": 134,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebd44ad0>"
                ],
                "docstring": "HTTP Cloud Function to check analysis status\n\nArgs:\n    request: HTTP request object\n\nReturns:\n    JSON response with status information"
              },
              {
                "name": "ghostbusters_history",
                "lineno": 179,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb058d0>"
                ],
                "docstring": "HTTP Cloud Function to get analysis history\n\nArgs:\n    request: HTTP request object\n\nReturns:\n    JSON response with analysis history"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 70,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 77,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 87,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 145,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 152,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "doc",
                "lineno": 158,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 163,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 191,
                "value_type": "Call"
              },
              {
                "name": "history",
                "lineno": 198,
                "value_type": "List"
              },
              {
                "name": "error_id",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 200,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Configure logging"
              },
              {
                "line": 19,
                "content": "Initialize Firestore client"
              },
              {
                "line": 69,
                "content": "Parse request"
              },
              {
                "line": 83,
                "content": "Run mock Ghostbusters analysis"
              },
              {
                "line": 86,
                "content": "Store results in Firestore"
              },
              {
                "line": 119,
                "content": "Store error in Firestore"
              },
              {
                "line": 156,
                "content": "Get status from Firestore"
              },
              {
                "line": 190,
                "content": "Get recent analyses from Firestore"
              }
            ],
            "total_lines": 221,
            "code_lines": 176
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/gemini_billing_analyzer.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 10898,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "subprocess",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 13
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "functions_framework",
                "asname": null,
                "lineno": 16
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 17
              },
              {
                "module": "langchain_core.messages",
                "names": [
                  "HumanMessage"
                ],
                "asnames": [
                  null
                ],
                "lineno": 18
              },
              {
                "module": "langchain_google_genai",
                "names": [
                  "ChatGoogleGenerativeAI"
                ],
                "asnames": [
                  null
                ],
                "lineno": 19
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "run_ghostbusters"
                ],
                "asnames": [
                  null
                ],
                "lineno": 211
              }
            ],
            "functions": [
              {
                "name": "setup_gemini_llm",
                "lineno": 31,
                "args": [],
                "decorators": [],
                "docstring": "Setup Gemini LLM with proper API key"
              },
              {
                "name": "get_billing_data",
                "lineno": 64,
                "args": [],
                "decorators": [],
                "docstring": "Get current GCP billing data"
              },
              {
                "name": "analyze_billing_with_gemini",
                "lineno": 159,
                "args": [
                  "billing_data",
                  "llm"
                ],
                "decorators": [],
                "docstring": "Analyze billing data using Gemini LLM"
              },
              {
                "name": "run_ghostbusters_analysis",
                "lineno": 207,
                "args": [
                  "project_path"
                ],
                "decorators": [],
                "docstring": "Run Ghostbusters analysis on the project"
              },
              {
                "name": "gemini_billing_analyzer",
                "lineno": 230,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebcc0650>"
                ],
                "docstring": "Gemini-Integrated Ghostbusters Billing Analyzer\nCombines Ghostbusters analysis with Gemini LLM for comprehensive GCP billing insights"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "publisher",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "api_key",
                "lineno": 35,
                "value_type": "BoolOp"
              },
              {
                "name": "result",
                "lineno": 68,
                "value_type": "Call"
              },
              {
                "name": "project_id",
                "lineno": 74,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 77,
                "value_type": "Call"
              },
              {
                "name": "billing_account",
                "lineno": 83,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 88,
                "value_type": "Call"
              },
              {
                "name": "enabled_services",
                "lineno": 94,
                "value_type": "IfExp"
              },
              {
                "name": "resources",
                "lineno": 99,
                "value_type": "Dict"
              },
              {
                "name": "prompt",
                "lineno": 166,
                "value_type": "JoinedStr"
              },
              {
                "name": "response",
                "lineno": 194,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 237,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 244,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 245,
                "value_type": "Call"
              },
              {
                "name": "billing_data",
                "lineno": 252,
                "value_type": "Call"
              },
              {
                "name": "llm",
                "lineno": 262,
                "value_type": "Call"
              },
              {
                "name": "gemini_analysis",
                "lineno": 266,
                "value_type": "Call"
              },
              {
                "name": "ghostbusters_result",
                "lineno": 270,
                "value_type": "Call"
              },
              {
                "name": "combined_result",
                "lineno": 273,
                "value_type": "Dict"
              },
              {
                "name": "doc_ref",
                "lineno": 283,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 39,
                "value_type": "Call"
              },
              {
                "name": "api_key",
                "lineno": 45,
                "value_type": "Call"
              },
              {
                "name": "llm",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 103,
                "value_type": "Call"
              },
              {
                "name": "functions",
                "lineno": 109,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 118,
                "value_type": "Call"
              },
              {
                "name": "run_services",
                "lineno": 124,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "databases",
                "lineno": 139,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 21,
                "content": "Configure logging"
              },
              {
                "line": 25,
                "content": "Initialize GCP clients"
              },
              {
                "line": 30,
                "content": "Gemini LLM setup"
              },
              {
                "line": 34,
                "content": "Try to get API key from environment"
              },
              {
                "line": 38,
                "content": "Try to get from gcloud (this might not work for Gemini API)"
              },
              {
                "line": 67,
                "content": "Get project info"
              },
              {
                "line": 76,
                "content": "Get billing account"
              },
              {
                "line": 87,
                "content": "Get enabled services"
              },
              {
                "line": 98,
                "content": "Get resource usage"
              },
              {
                "line": 101,
                "content": "Cloud Functions"
              },
              {
                "line": 116,
                "content": "Cloud Run"
              },
              {
                "line": 131,
                "content": "Firestore"
              },
              {
                "line": 165,
                "content": "Create analysis prompt"
              },
              {
                "line": 193,
                "content": "Send to Gemini"
              },
              {
                "line": 210,
                "content": "Import Ghostbusters orchestrator"
              },
              {
                "line": 213,
                "content": "Run Ghostbusters analysis"
              },
              {
                "line": 236,
                "content": "Parse request"
              },
              {
                "line": 250,
                "content": "Step 1: Get billing data"
              },
              {
                "line": 260,
                "content": "Step 2: Setup Gemini LLM"
              },
              {
                "line": 264,
                "content": "Step 3: Analyze billing with Gemini"
              },
              {
                "line": 268,
                "content": "Step 4: Run Ghostbusters analysis"
              },
              {
                "line": 272,
                "content": "Step 5: Combine results"
              },
              {
                "line": 282,
                "content": "Store results in Firestore"
              }
            ],
            "total_lines": 314,
            "code_lines": 240
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/embedded_ghostbusters_main.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 15126,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "functions_framework",
                "asname": null,
                "lineno": 14
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 15
              }
            ],
            "functions": [
              {
                "name": "authenticate_request",
                "lineno": 32,
                "args": [
                  "request"
                ],
                "decorators": [],
                "docstring": "Simple authentication for demo purposes"
              },
              {
                "name": "publish_update",
                "lineno": 46,
                "args": [
                  "analysis_id",
                  "status",
                  "data"
                ],
                "decorators": [],
                "docstring": "Publish real-time update to Pub/Sub"
              },
              {
                "name": "run_embedded_ghostbusters",
                "lineno": 70,
                "args": [
                  "project_path"
                ],
                "decorators": [],
                "docstring": "Embedded Ghostbusters analysis logic\nThis simulates the real multi-agent system"
              },
              {
                "name": "ghostbusters_analyze_embedded",
                "lineno": 234,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb04590>"
                ],
                "docstring": "Embedded Ghostbusters HTTP Cloud Function with real multi-agent analysis"
              },
              {
                "name": "ghostbusters_progress_embedded",
                "lineno": 337,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb2efd0>"
                ],
                "docstring": "HTTP Cloud Function to get real-time progress updates for embedded Ghostbusters"
              },
              {
                "name": "ghostbusters_user_analyses_embedded",
                "lineno": 381,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb54f10>"
                ],
                "docstring": "HTTP Cloud Function to get user's embedded Ghostbusters analysis history"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 22,
                "value_type": "Call"
              },
              {
                "name": "publisher",
                "lineno": 25,
                "value_type": "Call"
              },
              {
                "name": "topic_path",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "agents",
                "lineno": 78,
                "value_type": "List"
              },
              {
                "name": "delusions_detected",
                "lineno": 87,
                "value_type": "List"
              },
              {
                "name": "recovery_actions",
                "lineno": 88,
                "value_type": "List"
              },
              {
                "name": "errors",
                "lineno": 89,
                "value_type": "List"
              },
              {
                "name": "warnings",
                "lineno": 90,
                "value_type": "List"
              },
              {
                "name": "test_files",
                "lineno": 137,
                "value_type": "BinOp"
              },
              {
                "name": "src_dirs",
                "lineno": 179,
                "value_type": "BinOp"
              },
              {
                "name": "total_issues",
                "lineno": 200,
                "value_type": "BinOp"
              },
              {
                "name": "confidence_score",
                "lineno": 201,
                "value_type": "Call"
              },
              {
                "name": "auth_header",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "message",
                "lineno": 49,
                "value_type": "Dict"
              },
              {
                "name": "future",
                "lineno": 57,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 240,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 243,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 250,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 251,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 264,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 268,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 342,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 349,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 354,
                "value_type": "Call"
              },
              {
                "name": "doc",
                "lineno": 355,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 360,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 387,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 390,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 398,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 122,
                "value_type": "Call"
              },
              {
                "name": "error_id",
                "lineno": 323,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 400,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 97,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Configure logging"
              },
              {
                "line": 21,
                "content": "Initialize Firestore client"
              },
              {
                "line": 24,
                "content": "Initialize Pub/Sub publisher"
              },
              {
                "line": 35,
                "content": "Get the Authorization header"
              },
              {
                "line": 38,
                "content": "In a real app, you'd verify the token"
              },
              {
                "line": 56,
                "content": "Publish to Pub/Sub"
              },
              {
                "line": 77,
                "content": "Simulate multi-agent analysis"
              },
              {
                "line": 92,
                "content": "Security analysis"
              },
              {
                "line": 94,
                "content": "Check for common security issues"
              },
              {
                "line": 119,
                "content": "Code quality analysis"
              },
              {
                "line": 136,
                "content": "Test analysis"
              },
              {
                "line": 157,
                "content": "Build analysis"
              },
              {
                "line": 178,
                "content": "Architecture analysis"
              },
              {
                "line": 199,
                "content": "Calculate confidence score"
              },
              {
                "line": 239,
                "content": "Authenticate user"
              },
              {
                "line": 242,
                "content": "Parse request"
              },
              {
                "line": 259,
                "content": "Publish start update"
              },
              {
                "line": 262,
                "content": "Run embedded Ghostbusters analysis"
              },
              {
                "line": 267,
                "content": "Store results in Firestore"
              },
              {
                "line": 287,
                "content": "Publish completion update"
              },
              {
                "line": 322,
                "content": "Store error in Firestore"
              },
              {
                "line": 353,
                "content": "Get progress from Firestore"
              },
              {
                "line": 386,
                "content": "Authenticate user"
              },
              {
                "line": 389,
                "content": "Get user's analyses from Firestore"
              }
            ],
            "total_lines": 429,
            "code_lines": 354
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/advanced_main.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 24054,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 12
              },
              {
                "module": "functions_framework",
                "asname": null,
                "lineno": 14
              },
              {
                "module": "firebase_admin",
                "names": [
                  "auth",
                  "initialize_app"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 15
              },
              {
                "module": "google.cloud",
                "names": [
                  "aiplatform",
                  "firestore",
                  "pubsub_v1"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 16
              },
              {
                "module": "google.cloud.aiplatform",
                "names": [
                  "Endpoint"
                ],
                "asnames": [
                  null
                ],
                "lineno": 17
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "run_ghostbusters"
                ],
                "asnames": [
                  null
                ],
                "lineno": 402
              }
            ],
            "functions": [
              {
                "name": "authenticate_request",
                "lineno": 41,
                "args": [
                  "request"
                ],
                "decorators": [],
                "docstring": "Authenticate request using Firebase Auth"
              },
              {
                "name": "check_enterprise_quota",
                "lineno": 56,
                "args": [
                  "user_id"
                ],
                "decorators": [],
                "docstring": "Check enterprise quota for user"
              },
              {
                "name": "get_custom_agents",
                "lineno": 83,
                "args": [
                  "user_id"
                ],
                "decorators": [],
                "docstring": "Get user's custom agents"
              },
              {
                "name": "create_custom_agent",
                "lineno": 108,
                "args": [
                  "user_id",
                  "agent_config"
                ],
                "decorators": [],
                "docstring": "Create a new custom agent"
              },
              {
                "name": "get_ml_insights",
                "lineno": 133,
                "args": [
                  "analysis_data"
                ],
                "decorators": [],
                "docstring": "Get ML-powered insights from analysis data"
              },
              {
                "name": "audit_log_action",
                "lineno": 173,
                "args": [
                  "user_id",
                  "action",
                  "details"
                ],
                "decorators": [],
                "docstring": "Log enterprise audit actions"
              },
              {
                "name": "validate_and_parse_advanced_request",
                "lineno": 190,
                "args": [
                  "request"
                ],
                "decorators": [],
                "docstring": "Validate and parse advanced request data"
              },
              {
                "name": "start_advanced_progress_tracking",
                "lineno": 212,
                "args": [
                  "analysis_id",
                  "user_id"
                ],
                "decorators": [],
                "docstring": "Start advanced progress tracking with ML insights"
              },
              {
                "name": "update_advanced_progress",
                "lineno": 249,
                "args": [
                  "analysis_id",
                  "progress",
                  "step",
                  "ml_insights"
                ],
                "decorators": [],
                "docstring": "Update advanced analysis progress with ML insights"
              },
              {
                "name": "store_advanced_results",
                "lineno": 288,
                "args": [
                  "analysis_id",
                  "result",
                  "user_id",
                  "ml_insights"
                ],
                "decorators": [],
                "docstring": "Store advanced analysis results with ML insights"
              },
              {
                "name": "ghostbusters_analyze_advanced",
                "lineno": 339,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb88c10>"
                ],
                "docstring": "Advanced HTTP Cloud Function for Ghostbusters analysis\nwith custom agents, ML integration, and enterprise features"
              },
              {
                "name": "ghostbusters_custom_agents",
                "lineno": 504,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb73110>"
                ],
                "docstring": "HTTP Cloud Function to manage custom agents"
              },
              {
                "name": "ghostbusters_enterprise_analytics",
                "lineno": 597,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb9e3d0>"
                ],
                "docstring": "HTTP Cloud Function for enterprise analytics"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 28,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 31,
                "value_type": "Call"
              },
              {
                "name": "publisher",
                "lineno": 34,
                "value_type": "Call"
              },
              {
                "name": "topic_path",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 192,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 197,
                "value_type": "Call"
              },
              {
                "name": "auth_header",
                "lineno": 44,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 48,
                "value_type": "Subscript"
              },
              {
                "name": "decoded_token",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "user_doc",
                "lineno": 60,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 86,
                "value_type": "Call"
              },
              {
                "name": "agents",
                "lineno": 87,
                "value_type": "List"
              },
              {
                "name": "agent_id",
                "lineno": 111,
                "value_type": "Call"
              },
              {
                "name": "endpoint",
                "lineno": 137,
                "value_type": "Call"
              },
              {
                "name": "ml_input",
                "lineno": 142,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 152,
                "value_type": "Call"
              },
              {
                "name": "predictions",
                "lineno": 153,
                "value_type": "Subscript"
              },
              {
                "name": "msg",
                "lineno": 194,
                "value_type": "Constant"
              },
              {
                "name": "msg",
                "lineno": 199,
                "value_type": "Constant"
              },
              {
                "name": "update_data",
                "lineno": 257,
                "value_type": "Dict"
              },
              {
                "name": "event_data",
                "lineno": 272,
                "value_type": "Dict"
              },
              {
                "name": "doc_ref",
                "lineno": 297,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 346,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 363,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 364,
                "value_type": "Subscript"
              },
              {
                "name": "custom_agents",
                "lineno": 387,
                "value_type": "Call"
              },
              {
                "name": "start_time",
                "lineno": 411,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 412,
                "value_type": "Call"
              },
              {
                "name": "processing_time",
                "lineno": 413,
                "value_type": "Call"
              },
              {
                "name": "analysis_data",
                "lineno": 419,
                "value_type": "Dict"
              },
              {
                "name": "ml_insights",
                "lineno": 428,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 510,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 515,
                "value_type": "Call"
              },
              {
                "name": "action",
                "lineno": 522,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 603,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 608,
                "value_type": "BoolOp"
              },
              {
                "name": "analytics_type",
                "lineno": 609,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "monthly_usage",
                "lineno": 64,
                "value_type": "Call"
              },
              {
                "name": "monthly_limit",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "project_data",
                "lineno": 359,
                "value_type": "Call"
              },
              {
                "name": "error_id",
                "lineno": 488,
                "value_type": "Call"
              },
              {
                "name": "agents",
                "lineno": 528,
                "value_type": "Call"
              },
              {
                "name": "agent_config",
                "lineno": 533,
                "value_type": "Call"
              },
              {
                "name": "agent_id",
                "lineno": 540,
                "value_type": "Call"
              },
              {
                "name": "agent_id",
                "lineno": 557,
                "value_type": "Call"
              },
              {
                "name": "agent_config",
                "lineno": 561,
                "value_type": "Call"
              },
              {
                "name": "agent_id",
                "lineno": 578,
                "value_type": "Call"
              },
              {
                "name": "total_analyses",
                "lineno": 613,
                "value_type": "Call"
              },
              {
                "name": "total_users",
                "lineno": 616,
                "value_type": "Call"
              },
              {
                "name": "total_custom_agents",
                "lineno": 617,
                "value_type": "Call"
              },
              {
                "name": "limit",
                "lineno": 632,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 633,
                "value_type": "Call"
              },
              {
                "name": "activities",
                "lineno": 640,
                "value_type": "List"
              },
              {
                "name": "limit",
                "lineno": 661,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 662,
                "value_type": "Call"
              },
              {
                "name": "logs",
                "lineno": 669,
                "value_type": "List"
              },
              {
                "name": "data",
                "lineno": 642,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 671,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 19,
                "content": "Initialize Firebase Admin SDK"
              },
              {
                "line": 23,
                "content": "App already initialized"
              },
              {
                "line": 26,
                "content": "Configure logging"
              },
              {
                "line": 30,
                "content": "Initialize Firestore client"
              },
              {
                "line": 33,
                "content": "Initialize Pub/Sub client for real-time updates"
              },
              {
                "line": 37,
                "content": "Initialize Vertex AI"
              },
              {
                "line": 59,
                "content": "Get user's enterprise plan"
              },
              {
                "line": 67,
                "content": "Update usage"
              },
              {
                "line": 76,
                "content": "Default to basic plan"
              },
              {
                "line": 136,
                "content": "Use Vertex AI for ML insights"
              },
              {
                "line": 141,
                "content": "Prepare data for ML model"
              },
              {
                "line": 151,
                "content": "Get ML predictions"
              },
              {
                "line": 215,
                "content": "Create advanced progress document"
              },
              {
                "line": 231,
                "content": "Publish start event"
              },
              {
                "line": 266,
                "content": "Update progress document"
              },
              {
                "line": 271,
                "content": "Publish progress event"
              },
              {
                "line": 296,
                "content": "Store comprehensive results with ML insights"
              },
              {
                "line": 324,
                "content": "Update progress to completed"
              },
              {
                "line": 345,
                "content": "Authentication"
              },
              {
                "line": 350,
                "content": "Enterprise quota check"
              },
              {
                "line": 357,
                "content": "Parse and validate request"
              },
              {
                "line": 372,
                "content": "Audit log the action"
              },
              {
                "line": 383,
                "content": "Start advanced progress tracking"
              },
              {
                "line": 386,
                "content": "Get custom agents"
              },
              {
                "line": 394,
                "content": "Update progress - Initializing"
              },
              {
                "line": 401,
                "content": "Import and run Ghostbusters (async)"
              },
              {
                "line": 404,
                "content": "Update progress - Running analysis"
              },
              {
                "line": 415,
                "content": "Update progress - ML insights"
              },
              {
                "line": 418,
                "content": "Get ML insights"
              },
              {
                "line": 436,
                "content": "Add processing time to metadata"
              },
              {
                "line": 444,
                "content": "Store advanced results"
              },
              {
                "line": 447,
                "content": "Audit log completion"
              },
              {
                "line": 487,
                "content": "Store error in Firestore"
              },
              {
                "line": 509,
                "content": "Authentication"
              },
              {
                "line": 514,
                "content": "Parse request"
              },
              {
                "line": 527,
                "content": "List custom agents"
              },
              {
                "line": 532,
                "content": "Create custom agent"
              },
              {
                "line": 542,
                "content": "Audit log"
              },
              {
                "line": 556,
                "content": "Update custom agent"
              },
              {
                "line": 567,
                "content": "Audit log"
              },
              {
                "line": 577,
                "content": "Delete custom agent"
              },
              {
                "line": 584,
                "content": "Audit log"
              },
              {
                "line": 602,
                "content": "Authentication"
              },
              {
                "line": 607,
                "content": "Parse request"
              },
              {
                "line": 612,
                "content": "Get enterprise overview"
              },
              {
                "line": 631,
                "content": "Get user activity analytics"
              },
              {
                "line": 660,
                "content": "Get audit logs"
              }
            ],
            "total_lines": 688,
            "code_lines": 534
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/enhanced_main.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 9500,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "contextlib",
                "names": [
                  "suppress"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 13
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              },
              {
                "module": "functions_framework",
                "asname": null,
                "lineno": 16
              },
              {
                "module": "firebase_admin",
                "names": [
                  "auth",
                  "initialize_app"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 17
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 18
              }
            ],
            "functions": [
              {
                "name": "authenticate_request",
                "lineno": 39,
                "args": [
                  "request"
                ],
                "decorators": [],
                "docstring": "Authenticate request using Firebase Auth"
              },
              {
                "name": "publish_update",
                "lineno": 58,
                "args": [
                  "analysis_id",
                  "status",
                  "data"
                ],
                "decorators": [],
                "docstring": "Publish real-time update to Pub/Sub"
              },
              {
                "name": "mock_ghostbusters_analysis",
                "lineno": 82,
                "args": [
                  "_project_path"
                ],
                "decorators": [],
                "docstring": "Mock Ghostbusters analysis for demonstration\nIn a real implementation, this would call the actual Ghostbusters orchestrator"
              },
              {
                "name": "ghostbusters_analyze_enhanced",
                "lineno": 117,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb40e10>"
                ],
                "docstring": "Enhanced HTTP Cloud Function for Ghostbusters analysis with real-time updates"
              },
              {
                "name": "ghostbusters_progress",
                "lineno": 209,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb14550>"
                ],
                "docstring": "HTTP Cloud Function to get real-time progress updates"
              },
              {
                "name": "ghostbusters_user_analyses",
                "lineno": 249,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebc91490>"
                ],
                "docstring": "HTTP Cloud Function to get user's analysis history"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "publisher",
                "lineno": 32,
                "value_type": "Call"
              },
              {
                "name": "topic_path",
                "lineno": 33,
                "value_type": "Call"
              },
              {
                "name": "auth_header",
                "lineno": 43,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 48,
                "value_type": "Subscript"
              },
              {
                "name": "decoded_token",
                "lineno": 51,
                "value_type": "Call"
              },
              {
                "name": "message",
                "lineno": 61,
                "value_type": "Dict"
              },
              {
                "name": "future",
                "lineno": 69,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 123,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 134,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 146,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 149,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 221,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 226,
                "value_type": "Call"
              },
              {
                "name": "doc",
                "lineno": 227,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 232,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 255,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 258,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 266,
                "value_type": "List"
              },
              {
                "name": "error_id",
                "lineno": 195,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 268,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 11,
                "content": "Initialize Firebase Admin SDK"
              },
              {
                "line": 21,
                "content": "App already initialized"
              },
              {
                "line": 24,
                "content": "Configure logging"
              },
              {
                "line": 28,
                "content": "Initialize Firestore client"
              },
              {
                "line": 31,
                "content": "Initialize Pub/Sub publisher"
              },
              {
                "line": 42,
                "content": "Get the Authorization header"
              },
              {
                "line": 47,
                "content": "Extract the token"
              },
              {
                "line": 50,
                "content": "Verify the token with Firebase"
              },
              {
                "line": 68,
                "content": "Publish to Pub/Sub"
              },
              {
                "line": 122,
                "content": "Authenticate user"
              },
              {
                "line": 125,
                "content": "Parse request"
              },
              {
                "line": 142,
                "content": "Publish start update"
              },
              {
                "line": 145,
                "content": "Run mock Ghostbusters analysis"
              },
              {
                "line": 148,
                "content": "Store results in Firestore"
              },
              {
                "line": 164,
                "content": "Publish completion update"
              },
              {
                "line": 194,
                "content": "Store error in Firestore"
              },
              {
                "line": 225,
                "content": "Get progress from Firestore"
              },
              {
                "line": 254,
                "content": "Authenticate user"
              },
              {
                "line": 257,
                "content": "Get user's analyses from Firestore"
              }
            ],
            "total_lines": 291,
            "code_lines": 226
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_gcp/real_ghostbusters_main.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 10027,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "functions_framework",
                "asname": null,
                "lineno": 14
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 15
              },
              {
                "module": "src.ghostbusters.ghostbusters_orchestrator",
                "names": [
                  "run_ghostbusters"
                ],
                "asnames": [
                  null
                ],
                "lineno": 18
              }
            ],
            "functions": [
              {
                "name": "authenticate_request",
                "lineno": 35,
                "args": [
                  "request"
                ],
                "decorators": [],
                "docstring": "Simple authentication for demo purposes"
              },
              {
                "name": "publish_update",
                "lineno": 49,
                "args": [
                  "analysis_id",
                  "status",
                  "data"
                ],
                "decorators": [],
                "docstring": "Publish real-time update to Pub/Sub"
              },
              {
                "name": "convert_ghostbusters_result",
                "lineno": 73,
                "args": [
                  "result"
                ],
                "decorators": [],
                "docstring": "Convert Ghostbusters result to Cloud Function response format"
              },
              {
                "name": "ghostbusters_analyze_real",
                "lineno": 89,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb04a50>"
                ],
                "docstring": "Real Ghostbusters HTTP Cloud Function with actual multi-agent analysis"
              },
              {
                "name": "ghostbusters_progress_real",
                "lineno": 194,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb00a10>"
                ],
                "docstring": "HTTP Cloud Function to get real-time progress updates for real Ghostbusters"
              },
              {
                "name": "ghostbusters_user_analyses_real",
                "lineno": 237,
                "args": [
                  "request"
                ],
                "decorators": [
                  "<ast.Attribute object at 0x7ca4ebb1aa90>"
                ],
                "docstring": "HTTP Cloud Function to get user's real Ghostbusters analysis history"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 22,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 25,
                "value_type": "Call"
              },
              {
                "name": "publisher",
                "lineno": 28,
                "value_type": "Call"
              },
              {
                "name": "topic_path",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "auth_header",
                "lineno": 39,
                "value_type": "Call"
              },
              {
                "name": "message",
                "lineno": 52,
                "value_type": "Dict"
              },
              {
                "name": "future",
                "lineno": 60,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 95,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 98,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 105,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 106,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 119,
                "value_type": "Call"
              },
              {
                "name": "analysis_result",
                "lineno": 123,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "request_json",
                "lineno": 199,
                "value_type": "Call"
              },
              {
                "name": "analysis_id",
                "lineno": 206,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 211,
                "value_type": "Call"
              },
              {
                "name": "doc",
                "lineno": 212,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 217,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 243,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 246,
                "value_type": "Call"
              },
              {
                "name": "analyses",
                "lineno": 254,
                "value_type": "List"
              },
              {
                "name": "error_id",
                "lineno": 180,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 256,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Import real Ghostbusters"
              },
              {
                "line": 20,
                "content": "Configure logging"
              },
              {
                "line": 24,
                "content": "Initialize Firestore client"
              },
              {
                "line": 27,
                "content": "Initialize Pub/Sub publisher"
              },
              {
                "line": 38,
                "content": "Get the Authorization header"
              },
              {
                "line": 41,
                "content": "In a real app, you'd verify the token"
              },
              {
                "line": 59,
                "content": "Publish to Pub/Sub"
              },
              {
                "line": 94,
                "content": "Authenticate user"
              },
              {
                "line": 97,
                "content": "Parse request"
              },
              {
                "line": 114,
                "content": "Publish start update"
              },
              {
                "line": 117,
                "content": "Run REAL Ghostbusters analysis"
              },
              {
                "line": 122,
                "content": "Convert result to response format"
              },
              {
                "line": 125,
                "content": "Store results in Firestore"
              },
              {
                "line": 145,
                "content": "Publish completion update"
              },
              {
                "line": 179,
                "content": "Store error in Firestore"
              },
              {
                "line": 210,
                "content": "Get progress from Firestore"
              },
              {
                "line": 242,
                "content": "Authenticate user"
              },
              {
                "line": 245,
                "content": "Get user's analyses from Firestore"
              }
            ],
            "total_lines": 283,
            "code_lines": 221
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/main.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 11480,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "uuid",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 11
              },
              {
                "module": "uvicorn",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "fastapi",
                "names": [
                  "BackgroundTasks",
                  "FastAPI",
                  "HTTPException"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 14
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1",
                  "secretmanager"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 15
              },
              {
                "module": "pydantic",
                "names": [
                  "BaseModel"
                ],
                "asnames": [
                  null
                ],
                "lineno": 16
              },
              {
                "module": "agents",
                "names": [
                  "ArchitectureExpert",
                  "BuildExpert",
                  "CodeQualityExpert",
                  "ModelExpert",
                  "SecurityExpert",
                  "TestExpert"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 128
              },
              {
                "module": "tempfile",
                "asname": null,
                "lineno": 148
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 149
              },
              {
                "module": "git",
                "names": [
                  "Repo"
                ],
                "asnames": [
                  null
                ],
                "lineno": 151
              }
            ],
            "functions": [
              {
                "name": "get_api_keys",
                "lineno": 35,
                "args": [],
                "decorators": [],
                "docstring": "Get API keys from Secret Manager with caching"
              }
            ],
            "classes": [
              {
                "name": "AnalysisRequest",
                "lineno": 76,
                "bases": [
                  "BaseModel"
                ],
                "methods": [],
                "docstring": "Request model for analysis"
              },
              {
                "name": "AnalysisResponse",
                "lineno": 89,
                "bases": [
                  "BaseModel"
                ],
                "methods": [],
                "docstring": "Response model for analysis"
              },
              {
                "name": "StatusResponse",
                "lineno": 97,
                "bases": [
                  "BaseModel"
                ],
                "methods": [],
                "docstring": "Response model for status"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 26,
                "value_type": "Call"
              },
              {
                "name": "publisher",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "secret_client",
                "lineno": 28,
                "value_type": "Call"
              },
              {
                "name": "_api_keys_cache",
                "lineno": 31,
                "value_type": "Constant"
              },
              {
                "name": "_cache_timestamp",
                "lineno": 32,
                "value_type": "Constant"
              },
              {
                "name": "AGENT_MAP",
                "lineno": 109,
                "value_type": "Dict"
              },
              {
                "name": "openai_name",
                "lineno": 49,
                "value_type": "Constant"
              },
              {
                "name": "openai_response",
                "lineno": 52,
                "value_type": "Call"
              },
              {
                "name": "openai_key",
                "lineno": 55,
                "value_type": "Call"
              },
              {
                "name": "anthropic_name",
                "lineno": 58,
                "value_type": "Constant"
              },
              {
                "name": "anthropic_response",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "anthropic_key",
                "lineno": 62,
                "value_type": "Call"
              },
              {
                "name": "_api_keys_cache",
                "lineno": 64,
                "value_type": "Dict"
              },
              {
                "name": "_cache_timestamp",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "agent_classes",
                "lineno": 138,
                "value_type": "Dict"
              },
              {
                "name": "job_ref",
                "lineno": 231,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 237,
                "value_type": "Await"
              },
              {
                "name": "topic_path",
                "lineno": 250,
                "value_type": "Call"
              },
              {
                "name": "message",
                "lineno": 254,
                "value_type": "Dict"
              },
              {
                "name": "job_id",
                "lineno": 289,
                "value_type": "Call"
              },
              {
                "name": "job_data",
                "lineno": 292,
                "value_type": "Dict"
              },
              {
                "name": "doc",
                "lineno": 328,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 333,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 347,
                "value_type": "Call"
              },
              {
                "name": "jobs",
                "lineno": 354,
                "value_type": "List"
              },
              {
                "name": "_api_keys_cache",
                "lineno": 70,
                "value_type": "Dict"
              },
              {
                "name": "_cache_timestamp",
                "lineno": 71,
                "value_type": "Call"
              },
              {
                "name": "project_path",
                "lineno": 166,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 169,
                "value_type": "List"
              },
              {
                "name": "job_ref",
                "lineno": 263,
                "value_type": "Call"
              },
              {
                "name": "topic_path",
                "lineno": 273,
                "value_type": "Call"
              },
              {
                "name": "message",
                "lineno": 277,
                "value_type": "Dict"
              },
              {
                "name": "data",
                "lineno": 356,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 162,
                "value_type": "JoinedStr"
              },
              {
                "name": "agent_class",
                "lineno": 177,
                "value_type": "Subscript"
              },
              {
                "name": "agent",
                "lineno": 178,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 181,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 18,
                "content": "Configure logging"
              },
              {
                "line": 22,
                "content": "Initialize FastAPI app"
              },
              {
                "line": 25,
                "content": "Initialize GCP clients (persistent for container)"
              },
              {
                "line": 30,
                "content": "API key caching"
              },
              {
                "line": 39,
                "content": "Cache for 5 minutes"
              },
              {
                "line": 48,
                "content": "Get OpenAI API key"
              },
              {
                "line": 57,
                "content": "Get Anthropic API key"
              },
              {
                "line": 75,
                "content": "Pydantic models"
              },
              {
                "line": 108,
                "content": "Agent mapping"
              },
              {
                "line": 127,
                "content": "Import agents"
              },
              {
                "line": 137,
                "content": "Agent class mapping"
              },
              {
                "line": 147,
                "content": "Clone the repository to analyze"
              },
              {
                "line": 153,
                "content": "Create temporary directory for analysis"
              },
              {
                "line": 158,
                "content": "Clone the repository using gitpython"
              },
              {
                "line": 165,
                "content": "Convert to Path object for agents"
              },
              {
                "line": 168,
                "content": "Run analysis with each agent"
              },
              {
                "line": 176,
                "content": "Create agent instance"
              },
              {
                "line": 180,
                "content": "Run the agent analysis"
              },
              {
                "line": 230,
                "content": "Update job status to processing"
              },
              {
                "line": 236,
                "content": "Run the analysis"
              },
              {
                "line": 239,
                "content": "Update job with results"
              },
              {
                "line": 249,
                "content": "Publish result to Pub/Sub"
              },
              {
                "line": 262,
                "content": "Update job with error"
              },
              {
                "line": 272,
                "content": "Publish error to Pub/Sub"
              },
              {
                "line": 288,
                "content": "Generate job ID"
              },
              {
                "line": 291,
                "content": "Create job record"
              },
              {
                "line": 304,
                "content": "Add background task"
              }
            ],
            "total_lines": 380,
            "code_lines": 282
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/container_main.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 11319,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "uvicorn",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "agents",
                "names": [
                  "ArchitectureExpert",
                  "BuildExpert",
                  "CodeQualityExpert",
                  "ModelExpert",
                  "SecurityExpert",
                  "TestExpert"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 14
              },
              {
                "module": "fastapi",
                "names": [
                  "BackgroundTasks",
                  "FastAPI",
                  "HTTPException"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 22
              },
              {
                "module": "fastapi.responses",
                "names": [
                  "JSONResponse"
                ],
                "asnames": [
                  null
                ],
                "lineno": 23
              },
              {
                "module": "google.cloud",
                "names": [
                  "firestore",
                  "pubsub_v1",
                  "secretmanager"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 24
              },
              {
                "module": "pydantic",
                "names": [
                  "BaseModel"
                ],
                "asnames": [
                  null
                ],
                "lineno": 25
              }
            ],
            "functions": [
              {
                "name": "get_api_keys",
                "lineno": 88,
                "args": [],
                "decorators": [],
                "docstring": "Get API keys with caching"
              },
              {
                "name": "publish_result",
                "lineno": 131,
                "args": [
                  "job_id",
                  "status",
                  "data"
                ],
                "decorators": [],
                "docstring": "Publish result to Pub/Sub"
              }
            ],
            "classes": [
              {
                "name": "AnalysisRequest",
                "lineno": 59,
                "bases": [
                  "BaseModel"
                ],
                "methods": [],
                "docstring": null
              },
              {
                "name": "RecoveryRequest",
                "lineno": 65,
                "bases": [
                  "BaseModel"
                ],
                "methods": [],
                "docstring": null
              },
              {
                "name": "JobStatus",
                "lineno": 71,
                "bases": [
                  "BaseModel"
                ],
                "methods": [],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "app",
                "lineno": 32,
                "value_type": "Call"
              },
              {
                "name": "db",
                "lineno": 35,
                "value_type": "Call"
              },
              {
                "name": "publisher",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "secret_client",
                "lineno": 37,
                "value_type": "Call"
              },
              {
                "name": "PROJECT_ID",
                "lineno": 40,
                "value_type": "Constant"
              },
              {
                "name": "ANALYSIS_TOPIC_PATH",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "AGENT_MAP",
                "lineno": 44,
                "value_type": "Dict"
              },
              {
                "name": "_api_keys_cache",
                "lineno": 54,
                "value_type": "Dict"
              },
              {
                "name": "_cache_timestamp",
                "lineno": 55,
                "value_type": "Constant"
              },
              {
                "name": "openai_name",
                "lineno": 101,
                "value_type": "JoinedStr"
              },
              {
                "name": "openai_response",
                "lineno": 102,
                "value_type": "Call"
              },
              {
                "name": "openai_key",
                "lineno": 105,
                "value_type": "Call"
              },
              {
                "name": "anthropic_name",
                "lineno": 108,
                "value_type": "JoinedStr"
              },
              {
                "name": "anthropic_response",
                "lineno": 111,
                "value_type": "Call"
              },
              {
                "name": "anthropic_key",
                "lineno": 114,
                "value_type": "Call"
              },
              {
                "name": "_api_keys_cache",
                "lineno": 116,
                "value_type": "Dict"
              },
              {
                "name": "_cache_timestamp",
                "lineno": 120,
                "value_type": "Call"
              },
              {
                "name": "message",
                "lineno": 134,
                "value_type": "Dict"
              },
              {
                "name": "future",
                "lineno": 141,
                "value_type": "Call"
              },
              {
                "name": "api_keys",
                "lineno": 165,
                "value_type": "Call"
              },
              {
                "name": "has_llm",
                "lineno": 166,
                "value_type": "BoolOp"
              },
              {
                "name": "all_delusions",
                "lineno": 168,
                "value_type": "List"
              },
              {
                "name": "all_recommendations",
                "lineno": 169,
                "value_type": "List"
              },
              {
                "name": "agents_run",
                "lineno": 170,
                "value_type": "List"
              },
              {
                "name": "total_confidence",
                "lineno": 171,
                "value_type": "Constant"
              },
              {
                "name": "avg_confidence",
                "lineno": 204,
                "value_type": "IfExp"
              },
              {
                "name": "result",
                "lineno": 206,
                "value_type": "Dict"
              },
              {
                "name": "doc_ref",
                "lineno": 246,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 257,
                "value_type": "Await"
              },
              {
                "name": "job_id",
                "lineno": 296,
                "value_type": "Call"
              },
              {
                "name": "job_data",
                "lineno": 299,
                "value_type": "Dict"
              },
              {
                "name": "doc_ref",
                "lineno": 310,
                "value_type": "Call"
              },
              {
                "name": "doc_ref",
                "lineno": 340,
                "value_type": "Call"
              },
              {
                "name": "doc",
                "lineno": 341,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 346,
                "value_type": "Call"
              },
              {
                "name": "query",
                "lineno": 360,
                "value_type": "Call"
              },
              {
                "name": "docs",
                "lineno": 369,
                "value_type": "Call"
              },
              {
                "name": "jobs",
                "lineno": 370,
                "value_type": "ListComp"
              },
              {
                "name": "doc_ref",
                "lineno": 275,
                "value_type": "Call"
              },
              {
                "name": "query",
                "lineno": 367,
                "value_type": "Call"
              },
              {
                "name": "agent_class",
                "lineno": 180,
                "value_type": "Subscript"
              },
              {
                "name": "agent",
                "lineno": 181,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 184,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 27,
                "content": "Configure logging"
              },
              {
                "line": 31,
                "content": "Initialize FastAPI app"
              },
              {
                "line": 34,
                "content": "Initialize GCP clients (persistent)"
              },
              {
                "line": 39,
                "content": "Project configuration"
              },
              {
                "line": 43,
                "content": "Agent mapping (loaded once)"
              },
              {
                "line": 53,
                "content": "Cache for API keys (persistent)"
              },
              {
                "line": 58,
                "content": "Pydantic models"
              },
              {
                "line": 80,
                "content": "Health check endpoint"
              },
              {
                "line": 87,
                "content": "Get API keys from cache or Secret Manager"
              },
              {
                "line": 92,
                "content": "Cache for 1 hour"
              },
              {
                "line": 100,
                "content": "Get OpenAI API key"
              },
              {
                "line": 107,
                "content": "Get Anthropic API key"
              },
              {
                "line": 130,
                "content": "Publish result to Pub/Sub"
              },
              {
                "line": 154,
                "content": "Run Ghostbusters analysis"
              },
              {
                "line": 164,
                "content": "Check API keys availability"
              },
              {
                "line": 173,
                "content": "Run each requested agent"
              },
              {
                "line": 186,
                "content": "Add agent name to each delusion"
              },
              {
                "line": 203,
                "content": "Calculate average confidence"
              },
              {
                "line": 237,
                "content": "Background task for analysis"
              },
              {
                "line": 245,
                "content": "Update job status to processing"
              },
              {
                "line": 256,
                "content": "Run analysis"
              },
              {
                "line": 259,
                "content": "Update job status"
              },
              {
                "line": 274,
                "content": "Update job status to failed"
              },
              {
                "line": 288,
                "content": "API endpoints"
              },
              {
                "line": 298,
                "content": "Create job record"
              },
              {
                "line": 313,
                "content": "Start background processing"
              }
            ],
            "total_lines": 381,
            "code_lines": 280
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/client.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 5261,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "time",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "requests",
                "asname": null,
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 106,
                "args": [],
                "decorators": [],
                "docstring": "Demo the Ghostbusters API client"
              },
              {
                "name": "__init__",
                "lineno": 16,
                "args": [
                  "self",
                  "base_url"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "analyze_project",
                "lineno": 29,
                "args": [
                  "self",
                  "project_path",
                  "agents"
                ],
                "decorators": [],
                "docstring": "Queue a Ghostbusters analysis job"
              },
              {
                "name": "recover_project",
                "lineno": 47,
                "args": [
                  "self",
                  "recovery_type",
                  "target_files",
                  "project_path"
                ],
                "decorators": [],
                "docstring": "Queue a Ghostbusters recovery job"
              },
              {
                "name": "get_job_status",
                "lineno": 70,
                "args": [
                  "self",
                  "job_id"
                ],
                "decorators": [],
                "docstring": "Get the status of a Ghostbusters job"
              },
              {
                "name": "list_jobs",
                "lineno": 79,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "List user's Ghostbusters jobs"
              },
              {
                "name": "wait_for_completion",
                "lineno": 85,
                "args": [
                  "self",
                  "job_id",
                  "timeout",
                  "poll_interval"
                ],
                "decorators": [],
                "docstring": "Wait for a job to complete and return the final result"
              }
            ],
            "classes": [
              {
                "name": "GhostbustersAPIClient",
                "lineno": 13,
                "bases": [],
                "methods": [
                  "__init__",
                  "analyze_project",
                  "recover_project",
                  "get_job_status",
                  "list_jobs",
                  "wait_for_completion"
                ],
                "docstring": "Client for the Ghostbusters API service"
              }
            ],
            "variables": [
              {
                "name": "client",
                "lineno": 108,
                "value_type": "Call"
              },
              {
                "name": "analysis_result",
                "lineno": 115,
                "value_type": "Call"
              },
              {
                "name": "job_id",
                "lineno": 116,
                "value_type": "Subscript"
              },
              {
                "name": "final_result",
                "lineno": 121,
                "value_type": "Call"
              },
              {
                "name": "recovery_result",
                "lineno": 142,
                "value_type": "Call"
              },
              {
                "name": "recovery_job_id",
                "lineno": 143,
                "value_type": "Subscript"
              },
              {
                "name": "recovery_final",
                "lineno": 148,
                "value_type": "Call"
              },
              {
                "name": "payload",
                "lineno": 38,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 40,
                "value_type": "Call"
              },
              {
                "name": "payload",
                "lineno": 57,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 72,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 81,
                "value_type": "Call"
              },
              {
                "name": "start_time",
                "lineno": 92,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 102,
                "value_type": "JoinedStr"
              },
              {
                "name": "result",
                "lineno": 129,
                "value_type": "Subscript"
              },
              {
                "name": "result",
                "lineno": 156,
                "value_type": "Subscript"
              },
              {
                "name": "agents",
                "lineno": 36,
                "value_type": "List"
              },
              {
                "name": "target_files",
                "lineno": 55,
                "value_type": "List"
              },
              {
                "name": "status",
                "lineno": 95,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 113,
                "content": "Queue an analysis"
              },
              {
                "line": 119,
                "content": "Wait for completion"
              },
              {
                "line": 140,
                "content": "Queue a recovery"
              },
              {
                "line": 146,
                "content": "Wait for recovery completion"
              }
            ],
            "total_lines": 166,
            "code_lines": 127
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/real_ghostbusters.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 3704,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "agents",
                "names": [
                  "ArchitectureExpert",
                  "BuildExpert",
                  "CodeQualityExpert",
                  "ModelExpert",
                  "SecurityExpert",
                  "TestExpert"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 13
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 120
              }
            ],
            "functions": [
              {
                "name": "run_real_ghostbusters_sync",
                "lineno": 113,
                "args": [
                  "project_path",
                  "agents"
                ],
                "decorators": [],
                "docstring": "Synchronous wrapper for real Ghostbusters analysis"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "AGENT_MAP",
                "lineno": 23,
                "value_type": "Dict"
              },
              {
                "name": "logger",
                "lineno": 32,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 122,
                "value_type": "Call"
              },
              {
                "name": "project_path_obj",
                "lineno": 45,
                "value_type": "Call"
              },
              {
                "name": "all_delusions",
                "lineno": 50,
                "value_type": "List"
              },
              {
                "name": "all_recommendations",
                "lineno": 51,
                "value_type": "List"
              },
              {
                "name": "agents_run",
                "lineno": 52,
                "value_type": "List"
              },
              {
                "name": "total_confidence",
                "lineno": 53,
                "value_type": "Constant"
              },
              {
                "name": "avg_confidence",
                "lineno": 86,
                "value_type": "IfExp"
              },
              {
                "name": "msg",
                "lineno": 47,
                "value_type": "JoinedStr"
              },
              {
                "name": "agent_class",
                "lineno": 62,
                "value_type": "Subscript"
              },
              {
                "name": "agent",
                "lineno": 63,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 66,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Import base agents directly"
              },
              {
                "line": 22,
                "content": "Map agent names to actual agent classes"
              },
              {
                "line": 55,
                "content": "Run each requested agent"
              },
              {
                "line": 68,
                "content": "Add agent name to each delusion"
              },
              {
                "line": 85,
                "content": "Calculate average confidence"
              },
              {
                "line": 119,
                "content": "Test the real integration"
              }
            ],
            "total_lines": 124,
            "code_lines": 93
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/secret_manager.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 2919,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "google.cloud",
                "names": [
                  "secretmanager"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "get_secret",
                "lineno": 17,
                "args": [
                  "secret_name"
                ],
                "decorators": [],
                "docstring": "Get a secret from Google Cloud Secret Manager"
              },
              {
                "name": "get_openai_api_key",
                "lineno": 34,
                "args": [],
                "decorators": [],
                "docstring": "Get OpenAI API key from GCP Secret Manager"
              },
              {
                "name": "get_anthropic_api_key",
                "lineno": 39,
                "args": [],
                "decorators": [],
                "docstring": "Get Anthropic API key from GCP Secret Manager"
              },
              {
                "name": "get_perplexity_api_key",
                "lineno": 44,
                "args": [],
                "decorators": [],
                "docstring": "Get Perplexity API key from GCP Secret Manager"
              },
              {
                "name": "get_mistral_api_key",
                "lineno": 49,
                "args": [],
                "decorators": [],
                "docstring": "Get Mistral API key from GCP Secret Manager"
              },
              {
                "name": "get_all_api_keys",
                "lineno": 54,
                "args": [],
                "decorators": [],
                "docstring": "Get all available API keys from GCP Secret Manager"
              },
              {
                "name": "check_api_keys_availability",
                "lineno": 64,
                "args": [],
                "decorators": [],
                "docstring": "Check which API keys are available"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "logger",
                "lineno": 12,
                "value_type": "Call"
              },
              {
                "name": "PROJECT_ID",
                "lineno": 14,
                "value_type": "Constant"
              },
              {
                "name": "keys",
                "lineno": 66,
                "value_type": "Call"
              },
              {
                "name": "availability",
                "lineno": 75,
                "value_type": "Call"
              },
              {
                "name": "client",
                "lineno": 20,
                "value_type": "Call"
              },
              {
                "name": "name",
                "lineno": 21,
                "value_type": "JoinedStr"
              },
              {
                "name": "response",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "secret_value",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "status",
                "lineno": 79,
                "value_type": "IfExp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 71,
                "content": "Test the secret manager"
              }
            ],
            "total_lines": 95,
            "code_lines": 66
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/llm_agents.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 10346,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "json",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              },
              {
                "module": "requests",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "agents",
                "names": [
                  "ArchitectureExpert",
                  "BuildExpert",
                  "CodeQualityExpert",
                  "DelusionResult",
                  "ModelExpert",
                  "SecurityExpert",
                  "TestExpert"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 13
              },
              {
                "module": "secret_manager",
                "names": [
                  "get_anthropic_api_key",
                  "get_openai_api_key"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 22
              },
              {
                "module": "secret_manager",
                "names": [
                  "check_api_keys_availability"
                ],
                "asnames": [
                  null
                ],
                "lineno": 302
              }
            ],
            "functions": [
              {
                "name": "create_agent",
                "lineno": 244,
                "args": [
                  "agent_name",
                  "use_llm",
                  "llm_provider"
                ],
                "decorators": [],
                "docstring": "Create an agent with optional LLM enhancement"
              },
              {
                "name": "__init__",
                "lineno": 30,
                "args": [
                  "self",
                  "base_agent",
                  "llm_provider"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_get_api_key",
                "lineno": 35,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get API key for the specified LLM provider"
              },
              {
                "name": "_call_llm",
                "lineno": 44,
                "args": [
                  "self",
                  "prompt",
                  "context"
                ],
                "decorators": [],
                "docstring": "Call LLM with the given prompt and context"
              },
              {
                "name": "_call_openai",
                "lineno": 61,
                "args": [
                  "self",
                  "prompt",
                  "context"
                ],
                "decorators": [],
                "docstring": "Call OpenAI API"
              },
              {
                "name": "_call_anthropic",
                "lineno": 92,
                "args": [
                  "self",
                  "prompt",
                  "context"
                ],
                "decorators": [],
                "docstring": "Call Anthropic API"
              },
              {
                "name": "__init__",
                "lineno": 214,
                "args": [
                  "self",
                  "llm_provider"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 219,
                "args": [
                  "self",
                  "llm_provider"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 224,
                "args": [
                  "self",
                  "llm_provider"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 229,
                "args": [
                  "self",
                  "llm_provider"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 234,
                "args": [
                  "self",
                  "llm_provider"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 239,
                "args": [
                  "self",
                  "llm_provider"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "LLMEnhancedAgent",
                "lineno": 27,
                "bases": [],
                "methods": [
                  "__init__",
                  "_get_api_key",
                  "_call_llm",
                  "_call_openai",
                  "_call_anthropic"
                ],
                "docstring": "Base class for LLM-enhanced agents"
              },
              {
                "name": "LLMEnhancedSecurityExpert",
                "lineno": 213,
                "bases": [
                  "LLMEnhancedAgent"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": null
              },
              {
                "name": "LLMEnhancedCodeQualityExpert",
                "lineno": 218,
                "bases": [
                  "LLMEnhancedAgent"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": null
              },
              {
                "name": "LLMEnhancedTestExpert",
                "lineno": 223,
                "bases": [
                  "LLMEnhancedAgent"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": null
              },
              {
                "name": "LLMEnhancedBuildExpert",
                "lineno": 228,
                "bases": [
                  "LLMEnhancedAgent"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": null
              },
              {
                "name": "LLMEnhancedArchitectureExpert",
                "lineno": 233,
                "bases": [
                  "LLMEnhancedAgent"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": null
              },
              {
                "name": "LLMEnhancedModelExpert",
                "lineno": 238,
                "bases": [
                  "LLMEnhancedAgent"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 24,
                "value_type": "Call"
              },
              {
                "name": "base_agent_map",
                "lineno": 279,
                "value_type": "Dict"
              },
              {
                "name": "agent_class",
                "lineno": 288,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 292,
                "value_type": "JoinedStr"
              },
              {
                "name": "availability",
                "lineno": 304,
                "value_type": "Call"
              },
              {
                "name": "headers",
                "lineno": 63,
                "value_type": "Dict"
              },
              {
                "name": "payload",
                "lineno": 68,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 81,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "headers",
                "lineno": 94,
                "value_type": "Dict"
              },
              {
                "name": "payload",
                "lineno": 100,
                "value_type": "Dict"
              },
              {
                "name": "response",
                "lineno": 108,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 116,
                "value_type": "Call"
              },
              {
                "name": "base_result",
                "lineno": 122,
                "value_type": "Await"
              },
              {
                "name": "context",
                "lineno": 163,
                "value_type": "JoinedStr"
              },
              {
                "name": "prompt",
                "lineno": 171,
                "value_type": "JoinedStr"
              },
              {
                "name": "llm_response",
                "lineno": 200,
                "value_type": "Call"
              },
              {
                "name": "status",
                "lineno": 308,
                "value_type": "IfExp"
              },
              {
                "name": "llm_analysis",
                "lineno": 131,
                "value_type": "Await"
              },
              {
                "name": "agent_map",
                "lineno": 253,
                "value_type": "Dict"
              },
              {
                "name": "agent_class",
                "lineno": 261,
                "value_type": "Call"
              },
              {
                "name": "enhanced_delusions",
                "lineno": 134,
                "value_type": "BinOp"
              },
              {
                "name": "enhanced_recommendations",
                "lineno": 138,
                "value_type": "BinOp"
              },
              {
                "name": "agent_map",
                "lineno": 266,
                "value_type": "Dict"
              },
              {
                "name": "agent_class",
                "lineno": 274,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 121,
                "content": "Run the base agent first"
              },
              {
                "line": 124,
                "content": "If no LLM available, return base result"
              },
              {
                "line": 129,
                "content": "Enhance with LLM analysis"
              },
              {
                "line": 133,
                "content": "Merge LLM findings with base findings"
              },
              {
                "line": 162,
                "content": "Create context from base results"
              },
              {
                "line": 170,
                "content": "Create prompt for LLM"
              },
              {
                "line": 199,
                "content": "Call LLM"
              },
              {
                "line": 205,
                "content": "Parse LLM response"
              },
              {
                "line": 212,
                "content": "Create LLM-enhanced versions of all agents"
              },
              {
                "line": 243,
                "content": "Agent factory"
              },
              {
                "line": 251,
                "content": "Check if LLM is available"
              },
              {
                "line": 265,
                "content": "Same mapping for Anthropic"
              },
              {
                "line": 278,
                "content": "Fall back to base agents"
              },
              {
                "line": 297,
                "content": "Test the LLM-enhanced agents"
              },
              {
                "line": 301,
                "content": "Check API key availability"
              }
            ],
            "total_lines": 313,
            "code_lines": 244
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/ghostbusters_api/agents.py",
          "domain": "ghostbusters",
          "file_type": "python",
          "size_bytes": 13796,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Use Ghostbusters for delusion detection and recovery",
            "Ghostbusters agent orchestration",
            "Ghostbusters recovery engines",
            "Ghostbusters functional equivalence",
            "Ghostbusters zero false positives",
            "Ghostbusters deterministic recovery",
            "Ghostbusters multi-agent testing",
            "Run Ghostbusters before linting to fix syntax issues",
            "Use Ghostbusters agents for domain-specific analysis",
            "Apply Ghostbusters recovery engines for automated fixes",
            "Integrate Ghostbusters with LangGraph/LangChain",
            "Use Ghostbusters for multi-agent orchestration",
            "Apply Ghostbusters for confidence scoring and validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "abc",
                "names": [
                  "ABC",
                  "abstractmethod"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 26,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "DelusionResult",
                "lineno": 15,
                "bases": [],
                "methods": [],
                "docstring": "Result from delusion detection"
              },
              {
                "name": "BaseExpert",
                "lineno": 23,
                "bases": [
                  "ABC"
                ],
                "methods": [
                  "__init__"
                ],
                "docstring": "Base class for all expert agents"
              },
              {
                "name": "SecurityExpert",
                "lineno": 34,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Security expert for detecting security delusions"
              },
              {
                "name": "CodeQualityExpert",
                "lineno": 114,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Code quality expert for detecting code quality issues"
              },
              {
                "name": "TestExpert",
                "lineno": 185,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Test expert for detecting test-related issues"
              },
              {
                "name": "BuildExpert",
                "lineno": 236,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Build expert for detecting build-related issues"
              },
              {
                "name": "ArchitectureExpert",
                "lineno": 288,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Architecture expert for detecting architectural issues"
              },
              {
                "name": "ModelExpert",
                "lineno": 339,
                "bases": [
                  "BaseExpert"
                ],
                "methods": [],
                "docstring": "Model expert for detecting model-related issues"
              }
            ],
            "variables": [
              {
                "name": "delusions",
                "lineno": 39,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 40,
                "value_type": "List"
              },
              {
                "name": "credential_patterns",
                "lineno": 43,
                "value_type": "List"
              },
              {
                "name": "subprocess_patterns",
                "lineno": 52,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 98,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 99,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 119,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 120,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 170,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 171,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 190,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 191,
                "value_type": "List"
              },
              {
                "name": "test_files",
                "lineno": 194,
                "value_type": "BinOp"
              },
              {
                "name": "py_files",
                "lineno": 197,
                "value_type": "Call"
              },
              {
                "name": "confidence",
                "lineno": 221,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 222,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 241,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 242,
                "value_type": "List"
              },
              {
                "name": "requirements_files",
                "lineno": 245,
                "value_type": "List"
              },
              {
                "name": "found_requirements",
                "lineno": 246,
                "value_type": "List"
              },
              {
                "name": "confidence",
                "lineno": 273,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 274,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 293,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 294,
                "value_type": "List"
              },
              {
                "name": "src_dir",
                "lineno": 297,
                "value_type": "BinOp"
              },
              {
                "name": "confidence",
                "lineno": 324,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 325,
                "value_type": "List"
              },
              {
                "name": "delusions",
                "lineno": 344,
                "value_type": "List"
              },
              {
                "name": "recommendations",
                "lineno": 345,
                "value_type": "List"
              },
              {
                "name": "model_files",
                "lineno": 348,
                "value_type": "BinOp"
              },
              {
                "name": "confidence",
                "lineno": 384,
                "value_type": "IfExp"
              },
              {
                "name": "recommendations",
                "lineno": 385,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 125,
                "value_type": "Call"
              },
              {
                "name": "lines",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 365,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 42,
                "content": "Check for hardcoded credentials"
              },
              {
                "line": 51,
                "content": "Check for subprocess security vulnerabilities"
              },
              {
                "line": 61,
                "content": "Check for security issues"
              },
              {
                "line": 63,
                "content": "Skip the agents.py file itself (contains detection patterns)"
              },
              {
                "line": 69,
                "content": "Check for hardcoded credentials"
              },
              {
                "line": 82,
                "content": "Check for subprocess vulnerabilities"
              },
              {
                "line": 122,
                "content": "Check for code quality issues"
              },
              {
                "line": 128,
                "content": "Check for missing type annotations"
              },
              {
                "line": 141,
                "content": "Check for inconsistent indentation"
              },
              {
                "line": 148,
                "content": "Check if previous line was indented"
              },
              {
                "line": 193,
                "content": "Check for test coverage"
              },
              {
                "line": 209,
                "content": "Check for missing __init__.py files"
              },
              {
                "line": 244,
                "content": "Check for missing requirements files"
              },
              {
                "line": 262,
                "content": "Check for missing README"
              },
              {
                "line": 296,
                "content": "Check for proper module structure"
              },
              {
                "line": 308,
                "content": "Check for __init__.py files in packages"
              },
              {
                "line": 347,
                "content": "Check for model validation"
              },
              {
                "line": 362,
                "content": "Check for proper data structures"
              },
              {
                "line": 371,
                "content": "Check if it's a data class without proper decorator"
              }
            ],
            "total_lines": 397,
            "code_lines": 316
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "ide_performance": [
        {
          "path": "rules/ide_performance_optimization.md",
          "domain": "ide_performance",
          "file_type": "markdown",
          "size_bytes": 6199,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "rules/ide_performance_optimization.mdc",
          "domain": "ide_performance",
          "file_type": "unknown",
          "size_bytes": 12427,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        }
      ],
      "streamlit": [
        {
          "path": "src/__init__.py",
          "domain": "streamlit",
          "file_type": "python",
          "size_bytes": 349,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Streamlit app security validation",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "__version__",
                "lineno": 10,
                "value_type": "Constant"
              },
              {
                "name": "__author__",
                "lineno": 11,
                "value_type": "Constant"
              }
            ],
            "comments": [],
            "total_lines": 12,
            "code_lines": 9
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/model_driven_projection/projected_artifacts/src/streamlit/openflow_quickstart_app.py",
          "domain": "streamlit",
          "file_type": "python",
          "size_bytes": 2875,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Streamlit app security validation",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 1
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 2
              },
              {
                "module": "jwt",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 21
              },
              {
                "module": "html",
                "asname": null,
                "lineno": 29
              }
            ],
            "functions": [
              {
                "name": "validate_snowflake_url",
                "lineno": 14,
                "args": [
                  "url"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate Snowflake account URL format"
              },
              {
                "name": "validate_uuid",
                "lineno": 19,
                "args": [
                  "uuid_str"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate UUID format"
              },
              {
                "name": "sanitize_input",
                "lineno": 27,
                "args": [
                  "input_str"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Sanitize user input to prevent injection attacks"
              },
              {
                "name": "validate_oauth_credentials",
                "lineno": 34,
                "args": [
                  "credentials"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate OAuth credentials format from a dictionary"
              },
              {
                "name": "encrypt_credential",
                "lineno": 47,
                "args": [
                  "self",
                  "credential"
                ],
                "decorators": [],
                "docstring": "Encrypt sensitive credentials"
              },
              {
                "name": "decrypt_credential",
                "lineno": 51,
                "args": [
                  "self",
                  "encrypted_credential"
                ],
                "decorators": [],
                "docstring": "Decrypt sensitive credentials"
              },
              {
                "name": "store_credential",
                "lineno": 55,
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "decorators": [],
                "docstring": "Store credential securely in Redis with encryption (alias for store_credential_secure)"
              },
              {
                "name": "validate_session_token",
                "lineno": 59,
                "args": [
                  "self",
                  "session_token"
                ],
                "decorators": [],
                "docstring": "Validate JWT session token (alias for validate_session)"
              },
              {
                "name": "create_session_token",
                "lineno": 63,
                "args": [
                  "self",
                  "user_id",
                  "role"
                ],
                "decorators": [],
                "docstring": "Create JWT session token"
              }
            ],
            "classes": [
              {
                "name": "SecurityValidator",
                "lineno": 12,
                "bases": [],
                "methods": [
                  "validate_snowflake_url",
                  "validate_uuid",
                  "sanitize_input",
                  "validate_oauth_credentials"
                ],
                "docstring": null
              },
              {
                "name": "CredentialManager",
                "lineno": 46,
                "bases": [],
                "methods": [
                  "encrypt_credential",
                  "decrypt_credential",
                  "store_credential",
                  "validate_session_token",
                  "create_session_token"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 6,
                "value_type": "Dict"
              },
              {
                "name": "uuid_pattern",
                "lineno": 23,
                "value_type": "Constant"
              },
              {
                "name": "client_id",
                "lineno": 36,
                "value_type": "Call"
              },
              {
                "name": "client_secret",
                "lineno": 37,
                "value_type": "Call"
              },
              {
                "name": "timeout_minutes",
                "lineno": 65,
                "value_type": "Subscript"
              },
              {
                "name": "payload",
                "lineno": 67,
                "value_type": "Dict"
              }
            ],
            "comments": [],
            "total_lines": 77,
            "code_lines": 61
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/streamlit/openflow_quickstart_app_projected.py",
          "domain": "streamlit",
          "file_type": "python",
          "size_bytes": 1601,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Streamlit app security validation",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field",
                  "field_validator"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "validate_account_url",
                "lineno": 33,
                "args": [
                  "self",
                  "v"
                ],
                "decorators": [
                  "field_validator"
                ],
                "docstring": "Validate Snowflake account URL format"
              }
            ],
            "classes": [
              {
                "name": "SnowflakeConfig",
                "lineno": 24,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "validate_account_url"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 9,
                "value_type": "Dict"
              },
              {
                "name": "AWS_CONFIG",
                "lineno": 17,
                "value_type": "Dict"
              },
              {
                "name": "msg",
                "lineno": 36,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 39,
            "code_lines": 31
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/streamlit/openflow_quickstart_app.py",
          "domain": "streamlit",
          "file_type": "python",
          "size_bytes": 1601,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Streamlit app security validation",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 6
              },
              {
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field",
                  "field_validator"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "validate_account_url",
                "lineno": 33,
                "args": [
                  "self",
                  "v"
                ],
                "decorators": [
                  "field_validator"
                ],
                "docstring": "Validate Snowflake account URL format"
              }
            ],
            "classes": [
              {
                "name": "SnowflakeConfig",
                "lineno": 24,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "validate_account_url"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 9,
                "value_type": "Dict"
              },
              {
                "name": "AWS_CONFIG",
                "lineno": 17,
                "value_type": "Dict"
              },
              {
                "name": "msg",
                "lineno": 36,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 39,
            "code_lines": 31
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/streamlit/__init__.py",
          "domain": "streamlit",
          "file_type": "python",
          "size_bytes": 290,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Streamlit app security validation",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [
              {
                "line": 8,
                "content": "Don't import the module here to avoid dependency issues"
              },
              {
                "line": 9,
                "content": "The module can be imported directly when needed"
              }
            ],
            "total_lines": 10,
            "code_lines": 5
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/streamlit/openflow_quickstart_app.py.backup",
          "domain": "streamlit",
          "file_type": "unknown",
          "size_bytes": 3738,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Streamlit app security validation",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        }
      ],
      "security_first": [
        {
          "path": "src/security_first/input_validator.py",
          "domain": "security_first",
          "file_type": "python",
          "size_bytes": 8631,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "html",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 5
              },
              {
                "module": "re",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "urllib.parse",
                "names": [
                  "urlparse"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "jsonschema",
                "names": [
                  "validate"
                ],
                "asnames": [
                  null
                ],
                "lineno": 122
              }
            ],
            "functions": [
              {
                "name": "test_input_validator",
                "lineno": 208,
                "args": [],
                "decorators": [],
                "docstring": "Test input validator functionality"
              },
              {
                "name": "validate_input",
                "lineno": 31,
                "args": [
                  "input_str",
                  "input_type"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate general input based on type"
              },
              {
                "name": "validate_snowflake_url",
                "lineno": 48,
                "args": [
                  "url"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate Snowflake account URL format"
              },
              {
                "name": "validate_uuid",
                "lineno": 53,
                "args": [
                  "uuid_str"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate UUID format"
              },
              {
                "name": "sanitize_input",
                "lineno": 59,
                "args": [
                  "input_str"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Sanitize user input to prevent injection attacks"
              },
              {
                "name": "validate_oauth_credentials",
                "lineno": 64,
                "args": [
                  "credentials"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate OAuth credentials format from a dictionary"
              },
              {
                "name": "validate_email",
                "lineno": 71,
                "args": [
                  "email"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate email format"
              },
              {
                "name": "validate_password_strength",
                "lineno": 77,
                "args": [
                  "password"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate password strength"
              },
              {
                "name": "validate_url",
                "lineno": 90,
                "args": [
                  "url"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate URL format"
              },
              {
                "name": "validate_phone_number",
                "lineno": 99,
                "args": [
                  "phone"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate phone number format"
              },
              {
                "name": "validate_credit_card",
                "lineno": 105,
                "args": [
                  "card_number"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate credit card number using Luhn algorithm"
              },
              {
                "name": "validate_json_schema",
                "lineno": 119,
                "args": [
                  "data",
                  "schema"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate data against JSON schema"
              },
              {
                "name": "validate_file_extension",
                "lineno": 130,
                "args": [
                  "filename",
                  "allowed_extensions"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate file extension"
              },
              {
                "name": "validate_file_size",
                "lineno": 138,
                "args": [
                  "file_size",
                  "max_size_mb"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate file size"
              },
              {
                "name": "validate_sql_injection_safe",
                "lineno": 144,
                "args": [
                  "sql"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Check if SQL string is safe from injection"
              },
              {
                "name": "validate_xss_safe",
                "lineno": 156,
                "args": [
                  "text"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Check if text is safe from XSS attacks"
              },
              {
                "name": "validate_file_upload",
                "lineno": 170,
                "args": [
                  "filename",
                  "file_size",
                  "allowed_extensions",
                  "max_size_mb"
                ],
                "decorators": [
                  "staticmethod"
                ],
                "docstring": "Validate file upload for security and size constraints"
              }
            ],
            "classes": [
              {
                "name": "InputValidator",
                "lineno": 27,
                "bases": [],
                "methods": [
                  "validate_input",
                  "validate_snowflake_url",
                  "validate_uuid",
                  "sanitize_input",
                  "validate_oauth_credentials",
                  "validate_email",
                  "validate_password_strength",
                  "validate_url",
                  "validate_phone_number",
                  "validate_credit_card",
                  "validate_json_schema",
                  "validate_file_extension",
                  "validate_file_size",
                  "validate_sql_injection_safe",
                  "validate_xss_safe",
                  "validate_file_upload"
                ],
                "docstring": "Comprehensive input validation and sanitization"
              }
            ],
            "variables": [
              {
                "name": "SECURITY_CONFIG",
                "lineno": 12,
                "value_type": "Dict"
              },
              {
                "name": "AWS_CONFIG",
                "lineno": 20,
                "value_type": "Dict"
              },
              {
                "name": "validator",
                "lineno": 210,
                "value_type": "Call"
              },
              {
                "name": "uuid_pattern",
                "lineno": 55,
                "value_type": "Constant"
              },
              {
                "name": "client_id",
                "lineno": 66,
                "value_type": "Call"
              },
              {
                "name": "client_secret",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "email_pattern",
                "lineno": 73,
                "value_type": "Constant"
              },
              {
                "name": "checks",
                "lineno": 79,
                "value_type": "Dict"
              },
              {
                "name": "digits_only",
                "lineno": 101,
                "value_type": "Call"
              },
              {
                "name": "card_number",
                "lineno": 107,
                "value_type": "Call"
              },
              {
                "name": "digits",
                "lineno": 110,
                "value_type": "ListComp"
              },
              {
                "name": "odd_digits",
                "lineno": 111,
                "value_type": "Subscript"
              },
              {
                "name": "even_digits",
                "lineno": 112,
                "value_type": "Subscript"
              },
              {
                "name": "checksum",
                "lineno": 113,
                "value_type": "Call"
              },
              {
                "name": "file_ext",
                "lineno": 134,
                "value_type": "IfExp"
              },
              {
                "name": "max_size_bytes",
                "lineno": 140,
                "value_type": "BinOp"
              },
              {
                "name": "dangerous_patterns",
                "lineno": 146,
                "value_type": "List"
              },
              {
                "name": "sql_lower",
                "lineno": 152,
                "value_type": "Call"
              },
              {
                "name": "dangerous_patterns",
                "lineno": 158,
                "value_type": "List"
              },
              {
                "name": "text_lower",
                "lineno": 166,
                "value_type": "Call"
              },
              {
                "name": "dangerous_extensions",
                "lineno": 192,
                "value_type": "List"
              },
              {
                "name": "file_ext",
                "lineno": 193,
                "value_type": "IfExp"
              },
              {
                "name": "suspicious_patterns",
                "lineno": 197,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 93,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              }
            ],
            "total_lines": 227,
            "code_lines": 199
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/setup-security-hooks.sh",
          "domain": "security_first",
          "file_type": "shell",
          "size_bytes": 6488,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/https_enforcement.py",
          "domain": "security_first",
          "file_type": "python",
          "size_bytes": 7816,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "hashlib",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 5
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "socket",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "ssl",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "time",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 10
              },
              {
                "module": "urllib.parse",
                "names": [
                  "urlparse"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "certifi",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "requests",
                "asname": null,
                "lineno": 14
              }
            ],
            "functions": [
              {
                "name": "test_https_enforcement",
                "lineno": 195,
                "args": [],
                "decorators": [],
                "docstring": "Test HTTPS enforcement functionality"
              },
              {
                "name": "__init__",
                "lineno": 22,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_create_ssl_context",
                "lineno": 27,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Create secure SSL context with modern TLS configuration."
              },
              {
                "name": "validate_https_url",
                "lineno": 35,
                "args": [
                  "self",
                  "url"
                ],
                "decorators": [],
                "docstring": "Validate that URL uses HTTPS protocol."
              },
              {
                "name": "enforce_https_redirect",
                "lineno": 40,
                "args": [
                  "self",
                  "url"
                ],
                "decorators": [],
                "docstring": "Enforce HTTPS redirect for HTTP URLs."
              },
              {
                "name": "validate_ssl_certificate",
                "lineno": 48,
                "args": [
                  "self",
                  "hostname",
                  "port"
                ],
                "decorators": [],
                "docstring": "Validate SSL certificate for given hostname."
              },
              {
                "name": "configure_secure_requests_session",
                "lineno": 76,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Configure requests session with secure SSL settings."
              },
              {
                "name": "enforce_csrf_protection",
                "lineno": 83,
                "args": [
                  "self",
                  "token",
                  "session_id"
                ],
                "decorators": [],
                "docstring": "Enforce CSRF protection by validating tokens"
              },
              {
                "name": "_generate_csrf_token",
                "lineno": 88,
                "args": [
                  "self",
                  "session_id"
                ],
                "decorators": [],
                "docstring": "Generate CSRF token for session"
              },
              {
                "name": "__init__",
                "lineno": 99,
                "args": [
                  "self",
                  "redis_client"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "check_rate_limit",
                "lineno": 104,
                "args": [
                  "self",
                  "user_id",
                  "endpoint"
                ],
                "decorators": [],
                "docstring": "Check if user has exceeded rate limit for endpoint."
              },
              {
                "name": "get_remaining_requests",
                "lineno": 120,
                "args": [
                  "self",
                  "user_id",
                  "endpoint"
                ],
                "decorators": [],
                "docstring": "Get remaining requests for user on endpoint."
              },
              {
                "name": "__init__",
                "lineno": 134,
                "args": [
                  "self",
                  "secret_key"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_csrf_token",
                "lineno": 137,
                "args": [
                  "self",
                  "session_id"
                ],
                "decorators": [],
                "docstring": "Generate CSRF token for session."
              },
              {
                "name": "validate_csrf_token",
                "lineno": 142,
                "args": [
                  "self",
                  "token",
                  "session_id"
                ],
                "decorators": [],
                "docstring": "Validate CSRF token for session."
              },
              {
                "name": "__init__",
                "lineno": 151,
                "args": [
                  "self",
                  "redis_client",
                  "secret_key"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "validate_request",
                "lineno": 156,
                "args": [
                  "self",
                  "user_id",
                  "endpoint",
                  "url",
                  "csrf_token",
                  "session_id"
                ],
                "decorators": [],
                "docstring": "Comprehensive request validation."
              },
              {
                "name": "get_security_headers",
                "lineno": 183,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get security headers for responses."
              }
            ],
            "classes": [
              {
                "name": "HTTPSEnforcement",
                "lineno": 19,
                "bases": [],
                "methods": [
                  "__init__",
                  "_create_ssl_context",
                  "validate_https_url",
                  "enforce_https_redirect",
                  "validate_ssl_certificate",
                  "configure_secure_requests_session",
                  "enforce_csrf_protection",
                  "_generate_csrf_token"
                ],
                "docstring": "HTTPS enforcement and SSL/TLS configuration for security-first architecture."
              },
              {
                "name": "RateLimiting",
                "lineno": 96,
                "bases": [],
                "methods": [
                  "__init__",
                  "check_rate_limit",
                  "get_remaining_requests"
                ],
                "docstring": "Rate limiting implementation to prevent abuse."
              },
              {
                "name": "CSRFProtection",
                "lineno": 131,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_csrf_token",
                  "validate_csrf_token"
                ],
                "docstring": "CSRF protection implementation."
              },
              {
                "name": "SecurityManager",
                "lineno": 148,
                "bases": [],
                "methods": [
                  "__init__",
                  "validate_request",
                  "get_security_headers"
                ],
                "docstring": "Comprehensive security manager implementing all critical blind spots."
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 16,
                "value_type": "Call"
              },
              {
                "name": "enforcement",
                "lineno": 197,
                "value_type": "Call"
              },
              {
                "name": "test_urls",
                "lineno": 200,
                "value_type": "List"
              },
              {
                "name": "http_url",
                "lineno": 213,
                "value_type": "Constant"
              },
              {
                "name": "https_url",
                "lineno": 214,
                "value_type": "Call"
              },
              {
                "name": "context",
                "lineno": 29,
                "value_type": "Call"
              },
              {
                "name": "parsed",
                "lineno": 37,
                "value_type": "Call"
              },
              {
                "name": "session",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "expected_token",
                "lineno": 85,
                "value_type": "Call"
              },
              {
                "name": "secret_key",
                "lineno": 91,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 92,
                "value_type": "JoinedStr"
              },
              {
                "name": "key",
                "lineno": 106,
                "value_type": "JoinedStr"
              },
              {
                "name": "current",
                "lineno": 107,
                "value_type": "Call"
              },
              {
                "name": "count",
                "lineno": 113,
                "value_type": "Call"
              },
              {
                "name": "key",
                "lineno": 122,
                "value_type": "JoinedStr"
              },
              {
                "name": "current",
                "lineno": 123,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 139,
                "value_type": "JoinedStr"
              },
              {
                "name": "expected_token",
                "lineno": 144,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 165,
                "value_type": "Dict"
              },
              {
                "name": "is_valid",
                "lineno": 209,
                "value_type": "Call"
              },
              {
                "name": "cert",
                "lineno": 60,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 43,
                "content": "Redirect HTTP to HTTPS"
              },
              {
                "line": 90,
                "content": "Use environment variable for secret key"
              },
              {
                "line": 171,
                "content": "Validate CSRF token if provided"
              },
              {
                "line": 178,
                "content": "Log security validation results"
              },
              {
                "line": 199,
                "content": "Test URL validation"
              },
              {
                "line": 212,
                "content": "Test HTTPS redirect"
              }
            ],
            "total_lines": 221,
            "code_lines": 170
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/test_https_enforcement.py",
          "domain": "security_first",
          "file_type": "python",
          "size_bytes": 9929,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "os",
                "asname": null,
                "lineno": 1
              },
              {
                "module": "ssl",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "unittest.mock",
                "asname": "mock",
                "lineno": 10
              },
              {
                "module": "unittest.mock",
                "names": [
                  "MagicMock"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "pytest",
                "asname": null,
                "lineno": 13
              },
              {
                "module": "https_enforcement",
                "names": [
                  "CSRFProtection",
                  "HTTPSEnforcement",
                  "RateLimiting",
                  "SecurityManager"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 14
              }
            ],
            "functions": [
              {
                "name": "setup_method",
                "lineno": 25,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment."
              },
              {
                "name": "test_validate_https_url_valid",
                "lineno": 29,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test validation of valid HTTPS URLs."
              },
              {
                "name": "test_validate_https_url_invalid",
                "lineno": 43,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test validation of invalid HTTP URLs."
              },
              {
                "name": "test_enforce_https_redirect",
                "lineno": 56,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test HTTPS redirect enforcement."
              },
              {
                "name": "test_ssl_context_configuration",
                "lineno": 68,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test SSL context configuration."
              },
              {
                "name": "test_validate_ssl_certificate_success",
                "lineno": 82,
                "args": [
                  "self",
                  "mock_socket"
                ],
                "decorators": [
                  "<ast.Call object at 0x7ca4ebc3a050>"
                ],
                "docstring": "Test successful SSL certificate validation."
              },
              {
                "name": "test_validate_ssl_certificate_failure",
                "lineno": 94,
                "args": [
                  "self",
                  "mock_socket"
                ],
                "decorators": [
                  "<ast.Call object at 0x7ca4ebd46f10>"
                ],
                "docstring": "Test SSL certificate validation failure."
              },
              {
                "name": "setup_method",
                "lineno": 108,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment."
              },
              {
                "name": "test_check_rate_limit_first_request",
                "lineno": 113,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test rate limit check for first request."
              },
              {
                "name": "test_check_rate_limit_under_limit",
                "lineno": 122,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test rate limit check when under limit."
              },
              {
                "name": "test_check_rate_limit_over_limit",
                "lineno": 131,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test rate limit check when over limit."
              },
              {
                "name": "test_get_remaining_requests",
                "lineno": 140,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test getting remaining requests."
              },
              {
                "name": "setup_method",
                "lineno": 155,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment."
              },
              {
                "name": "test_generate_csrf_token",
                "lineno": 160,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test CSRF token generation."
              },
              {
                "name": "test_validate_csrf_token_valid",
                "lineno": 169,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test valid CSRF token validation."
              },
              {
                "name": "test_validate_csrf_token_invalid",
                "lineno": 178,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test invalid CSRF token validation."
              },
              {
                "name": "setup_method",
                "lineno": 191,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment."
              },
              {
                "name": "test_validate_request_all_valid",
                "lineno": 197,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test request validation with all security checks passing."
              },
              {
                "name": "test_validate_request_https_invalid",
                "lineno": 212,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test request validation with invalid HTTPS."
              },
              {
                "name": "test_validate_request_rate_limit_exceeded",
                "lineno": 222,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test request validation with rate limit exceeded."
              },
              {
                "name": "test_get_security_headers",
                "lineno": 235,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test security headers generation."
              },
              {
                "name": "test_security_manager_integration",
                "lineno": 257,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test integration of all security components."
              }
            ],
            "classes": [
              {
                "name": "TestHTTPSEnforcement",
                "lineno": 22,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_validate_https_url_valid",
                  "test_validate_https_url_invalid",
                  "test_enforce_https_redirect",
                  "test_ssl_context_configuration",
                  "test_validate_ssl_certificate_success",
                  "test_validate_ssl_certificate_failure"
                ],
                "docstring": "Test HTTPS enforcement functionality."
              },
              {
                "name": "TestRateLimiting",
                "lineno": 105,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_check_rate_limit_first_request",
                  "test_check_rate_limit_under_limit",
                  "test_check_rate_limit_over_limit",
                  "test_get_remaining_requests"
                ],
                "docstring": "Test rate limiting functionality."
              },
              {
                "name": "TestCSRFProtection",
                "lineno": 152,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_generate_csrf_token",
                  "test_validate_csrf_token_valid",
                  "test_validate_csrf_token_invalid"
                ],
                "docstring": "Test CSRF protection functionality."
              },
              {
                "name": "TestSecurityManager",
                "lineno": 188,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_validate_request_all_valid",
                  "test_validate_request_https_invalid",
                  "test_validate_request_rate_limit_exceeded",
                  "test_get_security_headers"
                ],
                "docstring": "Test comprehensive security manager."
              },
              {
                "name": "TestIntegration",
                "lineno": 254,
                "bases": [],
                "methods": [
                  "test_security_manager_integration"
                ],
                "docstring": "Integration tests for security components."
              }
            ],
            "variables": [
              {
                "name": "valid_urls",
                "lineno": 31,
                "value_type": "List"
              },
              {
                "name": "invalid_urls",
                "lineno": 45,
                "value_type": "List"
              },
              {
                "name": "test_cases",
                "lineno": 58,
                "value_type": "List"
              },
              {
                "name": "context",
                "lineno": 70,
                "value_type": "Attribute"
              },
              {
                "name": "result",
                "lineno": 87,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 99,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 117,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 126,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 135,
                "value_type": "Call"
              },
              {
                "name": "remaining",
                "lineno": 144,
                "value_type": "Call"
              },
              {
                "name": "session_id",
                "lineno": 162,
                "value_type": "Constant"
              },
              {
                "name": "token",
                "lineno": 164,
                "value_type": "Call"
              },
              {
                "name": "session_id",
                "lineno": 171,
                "value_type": "Constant"
              },
              {
                "name": "token",
                "lineno": 172,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 174,
                "value_type": "Call"
              },
              {
                "name": "session_id",
                "lineno": 180,
                "value_type": "Constant"
              },
              {
                "name": "invalid_token",
                "lineno": 181,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 199,
                "value_type": "Constant"
              },
              {
                "name": "endpoint",
                "lineno": 200,
                "value_type": "Constant"
              },
              {
                "name": "url",
                "lineno": 201,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 206,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 214,
                "value_type": "Constant"
              },
              {
                "name": "endpoint",
                "lineno": 215,
                "value_type": "Constant"
              },
              {
                "name": "url",
                "lineno": 216,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 218,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 224,
                "value_type": "Constant"
              },
              {
                "name": "endpoint",
                "lineno": 225,
                "value_type": "Constant"
              },
              {
                "name": "url",
                "lineno": 226,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 231,
                "value_type": "Call"
              },
              {
                "name": "headers",
                "lineno": 237,
                "value_type": "Call"
              },
              {
                "name": "required_headers",
                "lineno": 240,
                "value_type": "List"
              },
              {
                "name": "mock_redis",
                "lineno": 259,
                "value_type": "Call"
              },
              {
                "name": "secret_key",
                "lineno": 260,
                "value_type": "Call"
              },
              {
                "name": "security_manager",
                "lineno": 261,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 264,
                "value_type": "Constant"
              },
              {
                "name": "endpoint",
                "lineno": 265,
                "value_type": "Constant"
              },
              {
                "name": "url",
                "lineno": 266,
                "value_type": "Constant"
              },
              {
                "name": "session_id",
                "lineno": 267,
                "value_type": "Constant"
              },
              {
                "name": "csrf_token",
                "lineno": 268,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 273,
                "value_type": "Call"
              },
              {
                "name": "headers",
                "lineno": 287,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 65,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 3,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 72,
                "content": "Verify minimum TLS version"
              },
              {
                "line": 75,
                "content": "Verify certificate verification"
              },
              {
                "line": 78,
                "content": "Verify hostname checking"
              },
              {
                "line": 84,
                "content": "Mock successful SSL connection"
              },
              {
                "line": 89,
                "content": "Should attempt to validate"
              },
              {
                "line": 96,
                "content": "Mock connection failure"
              },
              {
                "line": 203,
                "content": "Mock rate limiting to return True"
              },
              {
                "line": 228,
                "content": "Mock rate limiting to return False"
              },
              {
                "line": 239,
                "content": "Verify all required security headers are present"
              },
              {
                "line": 263,
                "content": "Test comprehensive validation"
              },
              {
                "line": 270,
                "content": "Mock rate limiting"
              },
              {
                "line": 281,
                "content": "All security checks should pass"
              },
              {
                "line": 286,
                "content": "Verify security headers"
              }
            ],
            "total_lines": 293,
            "code_lines": 202
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/rate_limiting.py",
          "domain": "security_first",
          "file_type": "python",
          "size_bytes": 3237,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "time",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 9
              },
              {
                "module": "redis",
                "asname": null,
                "lineno": 85
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 17,
                "args": [
                  "self",
                  "redis_client"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "check_rate_limit",
                "lineno": 22,
                "args": [
                  "self",
                  "user_id",
                  "endpoint"
                ],
                "decorators": [],
                "docstring": "Check if user has exceeded rate limit for endpoint."
              },
              {
                "name": "get_remaining_requests",
                "lineno": 38,
                "args": [
                  "self",
                  "user_id",
                  "endpoint"
                ],
                "decorators": [],
                "docstring": "Get remaining requests for user on endpoint."
              },
              {
                "name": "reset_rate_limit",
                "lineno": 48,
                "args": [
                  "self",
                  "user_id",
                  "endpoint"
                ],
                "decorators": [],
                "docstring": "Reset rate limit for user on endpoint."
              },
              {
                "name": "get_rate_limit_info",
                "lineno": 58,
                "args": [
                  "self",
                  "user_id",
                  "endpoint"
                ],
                "decorators": [],
                "docstring": "Get detailed rate limit information."
              }
            ],
            "classes": [
              {
                "name": "RateLimiting",
                "lineno": 14,
                "bases": [],
                "methods": [
                  "__init__",
                  "check_rate_limit",
                  "get_remaining_requests",
                  "reset_rate_limit",
                  "get_rate_limit_info"
                ],
                "docstring": "Rate limiting implementation to prevent abuse."
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 11,
                "value_type": "Call"
              },
              {
                "name": "mock_redis",
                "lineno": 88,
                "value_type": "Call"
              },
              {
                "name": "rate_limiter",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "user_id",
                "lineno": 92,
                "value_type": "Constant"
              },
              {
                "name": "endpoint",
                "lineno": 93,
                "value_type": "Constant"
              },
              {
                "name": "key",
                "lineno": 24,
                "value_type": "JoinedStr"
              },
              {
                "name": "current",
                "lineno": 25,
                "value_type": "Call"
              },
              {
                "name": "count",
                "lineno": 31,
                "value_type": "Call"
              },
              {
                "name": "key",
                "lineno": 40,
                "value_type": "JoinedStr"
              },
              {
                "name": "current",
                "lineno": 41,
                "value_type": "Call"
              },
              {
                "name": "key",
                "lineno": 50,
                "value_type": "JoinedStr"
              },
              {
                "name": "key",
                "lineno": 60,
                "value_type": "JoinedStr"
              },
              {
                "name": "current",
                "lineno": 61,
                "value_type": "Call"
              },
              {
                "name": "ttl",
                "lineno": 62,
                "value_type": "Call"
              },
              {
                "name": "current_count",
                "lineno": 73,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 84,
                "content": "Test rate limiting functionality"
              },
              {
                "line": 87,
                "content": "Mock Redis client for testing"
              },
              {
                "line": 91,
                "content": "Test rate limit checking"
              }
            ],
            "total_lines": 100,
            "code_lines": 74
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/test_streamlit_security_first.py",
          "domain": "security_first",
          "file_type": "python",
          "size_bytes": 20590,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "sys",
                "asname": null,
                "lineno": 16
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 17
              },
              {
                "module": "unittest.mock",
                "names": [
                  "Mock",
                  "patch"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 18
              },
              {
                "module": "jwt",
                "asname": null,
                "lineno": 20
              },
              {
                "module": "pytest",
                "asname": null,
                "lineno": 21
              },
              {
                "module": "pydantic",
                "names": [
                  "ValidationError"
                ],
                "asnames": [
                  null
                ],
                "lineno": 22
              },
              {
                "module": "streamlit_app",
                "names": [
                  "SECURITY_CONFIG",
                  "DeploymentManager",
                  "InputValidator",
                  "MonitoringDashboard",
                  "OpenFlowConfig",
                  "OpenFlowQuickstartApp",
                  "SecurityManager",
                  "SnowflakeConfig"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 25
              }
            ],
            "functions": [
              {
                "name": "setup_method",
                "lineno": 40,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_credential_encryption_decryption",
                "lineno": 47,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test credential encryption and decryption"
              },
              {
                "name": "test_secure_credential_storage",
                "lineno": 61,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test secure credential storage in Redis"
              },
              {
                "name": "test_session_token_creation",
                "lineno": 72,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test JWT session token creation"
              },
              {
                "name": "test_session_validation_valid_token",
                "lineno": 89,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test session validation with valid token"
              },
              {
                "name": "test_session_validation_expired_token",
                "lineno": 103,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test session validation with expired token"
              },
              {
                "name": "test_session_validation_invalid_token",
                "lineno": 123,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test session validation with invalid token"
              },
              {
                "name": "setup_method",
                "lineno": 138,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_validate_snowflake_url_valid",
                "lineno": 142,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test valid Snowflake URL validation"
              },
              {
                "name": "test_validate_snowflake_url_invalid",
                "lineno": 153,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test invalid Snowflake URL validation"
              },
              {
                "name": "test_validate_uuid_valid",
                "lineno": 167,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test valid UUID validation"
              },
              {
                "name": "test_validate_uuid_invalid",
                "lineno": 178,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test invalid UUID validation"
              },
              {
                "name": "test_sanitize_input",
                "lineno": 191,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test input sanitization"
              },
              {
                "name": "test_validate_oauth_credentials_valid",
                "lineno": 207,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test valid OAuth credentials validation"
              },
              {
                "name": "test_validate_oauth_credentials_invalid",
                "lineno": 221,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test invalid OAuth credentials validation"
              },
              {
                "name": "setup_method",
                "lineno": 241,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_deploy_stack_success",
                "lineno": 246,
                "args": [
                  "self",
                  "mock_boto3_client"
                ],
                "decorators": [
                  "patch"
                ],
                "docstring": "Test successful stack deployment"
              },
              {
                "name": "test_deploy_stack_failure",
                "lineno": 267,
                "args": [
                  "self",
                  "mock_boto3_client"
                ],
                "decorators": [
                  "patch"
                ],
                "docstring": "Test failed stack deployment"
              },
              {
                "name": "test_get_stack_status",
                "lineno": 286,
                "args": [
                  "self",
                  "mock_boto3_client"
                ],
                "decorators": [
                  "patch"
                ],
                "docstring": "Test getting stack status"
              },
              {
                "name": "test_get_stack_events",
                "lineno": 302,
                "args": [
                  "self",
                  "mock_boto3_client"
                ],
                "decorators": [
                  "patch"
                ],
                "docstring": "Test getting stack events"
              },
              {
                "name": "setup_method",
                "lineno": 328,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_create_deployment_timeline",
                "lineno": 333,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test deployment timeline visualization creation"
              },
              {
                "name": "test_create_resource_status_matrix",
                "lineno": 361,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test resource status matrix visualization creation"
              },
              {
                "name": "setup_method",
                "lineno": 393,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup test environment"
              },
              {
                "name": "test_app_initialization",
                "lineno": 397,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test app initialization"
              },
              {
                "name": "test_validate_credentials_valid",
                "lineno": 405,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test valid credential validation"
              },
              {
                "name": "test_validate_credentials_invalid",
                "lineno": 413,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test invalid credential validation"
              },
              {
                "name": "test_snowflake_config_valid",
                "lineno": 431,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test valid Snowflake configuration"
              },
              {
                "name": "test_snowflake_config_invalid_url",
                "lineno": 446,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test invalid Snowflake configuration URL"
              },
              {
                "name": "test_openflow_config_valid",
                "lineno": 460,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test valid OpenFlow configuration"
              },
              {
                "name": "test_openflow_config_invalid_uuid",
                "lineno": 474,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test invalid OpenFlow configuration UUID"
              },
              {
                "name": "test_no_hardcoded_credentials",
                "lineno": 491,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that no hardcoded credentials exist in the codebase"
              },
              {
                "name": "test_secure_session_configuration",
                "lineno": 497,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test secure session configuration"
              },
              {
                "name": "test_input_validation_coverage",
                "lineno": 508,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test that all inputs are validated"
              },
              {
                "name": "test_color_contrast_compliance",
                "lineno": 518,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test color contrast compliance"
              },
              {
                "name": "test_keyboard_navigation",
                "lineno": 524,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test keyboard navigation support"
              },
              {
                "name": "test_screen_reader_support",
                "lineno": 530,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test screen reader support"
              },
              {
                "name": "test_caching_implementation",
                "lineno": 540,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test caching implementation"
              },
              {
                "name": "test_memory_management",
                "lineno": 546,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test memory management"
              },
              {
                "name": "test_parallel_processing",
                "lineno": 552,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Test parallel processing implementation"
              }
            ],
            "classes": [
              {
                "name": "TestSecurityManager",
                "lineno": 37,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_credential_encryption_decryption",
                  "test_secure_credential_storage",
                  "test_session_token_creation",
                  "test_session_validation_valid_token",
                  "test_session_validation_expired_token",
                  "test_session_validation_invalid_token"
                ],
                "docstring": "Test security-first credential and session management"
              },
              {
                "name": "TestInputValidator",
                "lineno": 135,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_validate_snowflake_url_valid",
                  "test_validate_snowflake_url_invalid",
                  "test_validate_uuid_valid",
                  "test_validate_uuid_invalid",
                  "test_sanitize_input",
                  "test_validate_oauth_credentials_valid",
                  "test_validate_oauth_credentials_invalid"
                ],
                "docstring": "Test comprehensive input validation and sanitization"
              },
              {
                "name": "TestDeploymentManager",
                "lineno": 238,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_deploy_stack_success",
                  "test_deploy_stack_failure",
                  "test_get_stack_status",
                  "test_get_stack_events"
                ],
                "docstring": "Test AWS CloudFormation deployment management"
              },
              {
                "name": "TestMonitoringDashboard",
                "lineno": 325,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_create_deployment_timeline",
                  "test_create_resource_status_matrix"
                ],
                "docstring": "Test real-time monitoring and visualization dashboard"
              },
              {
                "name": "TestOpenFlowQuickstartApp",
                "lineno": 390,
                "bases": [],
                "methods": [
                  "setup_method",
                  "test_app_initialization",
                  "test_validate_credentials_valid",
                  "test_validate_credentials_invalid"
                ],
                "docstring": "Test main Streamlit application"
              },
              {
                "name": "TestPydanticModels",
                "lineno": 428,
                "bases": [],
                "methods": [
                  "test_snowflake_config_valid",
                  "test_snowflake_config_invalid_url",
                  "test_openflow_config_valid",
                  "test_openflow_config_invalid_uuid"
                ],
                "docstring": "Test Pydantic validation models"
              },
              {
                "name": "TestSecurityFirstArchitecture",
                "lineno": 488,
                "bases": [],
                "methods": [
                  "test_no_hardcoded_credentials",
                  "test_secure_session_configuration",
                  "test_input_validation_coverage"
                ],
                "docstring": "Test security-first architecture compliance"
              },
              {
                "name": "TestAccessibilityCompliance",
                "lineno": 515,
                "bases": [],
                "methods": [
                  "test_color_contrast_compliance",
                  "test_keyboard_navigation",
                  "test_screen_reader_support"
                ],
                "docstring": "Test accessibility compliance"
              },
              {
                "name": "TestPerformanceOptimization",
                "lineno": 537,
                "bases": [],
                "methods": [
                  "test_caching_implementation",
                  "test_memory_management",
                  "test_parallel_processing"
                ],
                "docstring": "Test performance optimization features"
              }
            ],
            "variables": [
              {
                "name": "encrypted",
                "lineno": 50,
                "value_type": "Call"
              },
              {
                "name": "decrypted",
                "lineno": 56,
                "value_type": "Call"
              },
              {
                "name": "retrieved",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 75,
                "value_type": "Call"
              },
              {
                "name": "decoded",
                "lineno": 85,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 92,
                "value_type": "Call"
              },
              {
                "name": "is_valid",
                "lineno": 98,
                "value_type": "Call"
              },
              {
                "name": "payload",
                "lineno": 106,
                "value_type": "Dict"
              },
              {
                "name": "expired_token",
                "lineno": 111,
                "value_type": "Call"
              },
              {
                "name": "is_valid",
                "lineno": 118,
                "value_type": "Call"
              },
              {
                "name": "invalid_token",
                "lineno": 126,
                "value_type": "Constant"
              },
              {
                "name": "is_valid",
                "lineno": 129,
                "value_type": "Call"
              },
              {
                "name": "valid_urls",
                "lineno": 144,
                "value_type": "List"
              },
              {
                "name": "invalid_urls",
                "lineno": 155,
                "value_type": "List"
              },
              {
                "name": "valid_uuids",
                "lineno": 169,
                "value_type": "List"
              },
              {
                "name": "invalid_uuids",
                "lineno": 180,
                "value_type": "List"
              },
              {
                "name": "test_inputs",
                "lineno": 193,
                "value_type": "List"
              },
              {
                "name": "valid_credentials",
                "lineno": 209,
                "value_type": "List"
              },
              {
                "name": "invalid_credentials",
                "lineno": 223,
                "value_type": "List"
              },
              {
                "name": "mock_cloudformation",
                "lineno": 249,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 256,
                "value_type": "Call"
              },
              {
                "name": "mock_cloudformation",
                "lineno": 270,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 275,
                "value_type": "Call"
              },
              {
                "name": "mock_cloudformation",
                "lineno": 289,
                "value_type": "Call"
              },
              {
                "name": "status",
                "lineno": 296,
                "value_type": "Call"
              },
              {
                "name": "mock_cloudformation",
                "lineno": 305,
                "value_type": "Call"
              },
              {
                "name": "events",
                "lineno": 318,
                "value_type": "Call"
              },
              {
                "name": "mock_events",
                "lineno": 336,
                "value_type": "List"
              },
              {
                "name": "fig",
                "lineno": 354,
                "value_type": "Call"
              },
              {
                "name": "mock_events",
                "lineno": 364,
                "value_type": "List"
              },
              {
                "name": "fig",
                "lineno": 382,
                "value_type": "Call"
              },
              {
                "name": "is_valid",
                "lineno": 408,
                "value_type": "Call"
              },
              {
                "name": "invalid_credentials",
                "lineno": 416,
                "value_type": "List"
              },
              {
                "name": "valid_config",
                "lineno": 433,
                "value_type": "Dict"
              },
              {
                "name": "config",
                "lineno": 442,
                "value_type": "Call"
              },
              {
                "name": "invalid_config",
                "lineno": 448,
                "value_type": "Dict"
              },
              {
                "name": "valid_config",
                "lineno": 462,
                "value_type": "Dict"
              },
              {
                "name": "config",
                "lineno": 470,
                "value_type": "Call"
              },
              {
                "name": "invalid_config",
                "lineno": 476,
                "value_type": "Dict"
              },
              {
                "name": "sanitized",
                "lineno": 204,
                "value_type": "Call"
              },
              {
                "name": "is_valid",
                "lineno": 424,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Import the app components"
              },
              {
                "line": 49,
                "content": "Encrypt credential"
              },
              {
                "line": 52,
                "content": "Verify encryption changed the value"
              },
              {
                "line": 55,
                "content": "Decrypt credential"
              },
              {
                "line": 58,
                "content": "Verify decryption restored original value"
              },
              {
                "line": 63,
                "content": "Store credential securely"
              },
              {
                "line": 66,
                "content": "Retrieve credential securely"
              },
              {
                "line": 69,
                "content": "Verify credential was stored and retrieved correctly"
              },
              {
                "line": 74,
                "content": "Create session token"
              },
              {
                "line": 80,
                "content": "Verify token is not empty"
              },
              {
                "line": 84,
                "content": "Verify token can be decoded"
              },
              {
                "line": 91,
                "content": "Create valid token"
              },
              {
                "line": 97,
                "content": "Validate token"
              },
              {
                "line": 100,
                "content": "Verify token is valid"
              },
              {
                "line": 105,
                "content": "Create expired token"
              },
              {
                "line": 117,
                "content": "Validate token"
              },
              {
                "line": 120,
                "content": "Verify token is invalid"
              },
              {
                "line": 125,
                "content": "Create invalid token"
              },
              {
                "line": 128,
                "content": "Validate token"
              },
              {
                "line": 131,
                "content": "Verify token is invalid"
              },
              {
                "line": 248,
                "content": "Mock successful response"
              },
              {
                "line": 255,
                "content": "Test deployment"
              },
              {
                "line": 262,
                "content": "Verify success"
              },
              {
                "line": 269,
                "content": "Mock failure response"
              },
              {
                "line": 274,
                "content": "Test deployment"
              },
              {
                "line": 281,
                "content": "Verify failure"
              },
              {
                "line": 288,
                "content": "Mock successful response"
              },
              {
                "line": 295,
                "content": "Test getting status"
              },
              {
                "line": 298,
                "content": "Verify status"
              },
              {
                "line": 304,
                "content": "Mock successful response"
              },
              {
                "line": 317,
                "content": "Test getting events"
              },
              {
                "line": 320,
                "content": "Verify events"
              },
              {
                "line": 335,
                "content": "Mock stack events"
              },
              {
                "line": 353,
                "content": "Create timeline"
              },
              {
                "line": 356,
                "content": "Verify figure was created"
              },
              {
                "line": 363,
                "content": "Mock stack events"
              },
              {
                "line": 381,
                "content": "Create matrix"
              },
              {
                "line": 384,
                "content": "Verify figure was created"
              },
              {
                "line": 399,
                "content": "Verify app components were initialized"
              },
              {
                "line": 407,
                "content": "Test with valid credentials"
              },
              {
                "line": 410,
                "content": "Verify credentials are valid"
              },
              {
                "line": 415,
                "content": "Test with invalid credentials"
              },
              {
                "line": 493,
                "content": "This test ensures no hardcoded credentials are present"
              },
              {
                "line": 494,
                "content": "In a real implementation, you would scan the codebase"
              },
              {
                "line": 499,
                "content": "Verify session timeout is reasonable"
              },
              {
                "line": 502,
                "content": "Verify password minimum length is secure"
              },
              {
                "line": 505,
                "content": "Verify JWT secret is configured"
              },
              {
                "line": 510,
                "content": "This test ensures comprehensive input validation"
              },
              {
                "line": 511,
                "content": "In a real implementation, you would check all input points"
              },
              {
                "line": 520,
                "content": "This test ensures color contrast meets WCAG standards"
              },
              {
                "line": 521,
                "content": "In a real implementation, you would test actual colors"
              },
              {
                "line": 526,
                "content": "This test ensures keyboard navigation works"
              },
              {
                "line": 527,
                "content": "In a real implementation, you would test actual navigation"
              },
              {
                "line": 532,
                "content": "This test ensures screen reader compatibility"
              },
              {
                "line": 533,
                "content": "In a real implementation, you would test actual screen reader support"
              },
              {
                "line": 542,
                "content": "This test ensures caching is properly implemented"
              },
              {
                "line": 543,
                "content": "In a real implementation, you would test actual caching"
              },
              {
                "line": 548,
                "content": "This test ensures proper memory management"
              },
              {
                "line": 549,
                "content": "In a real implementation, you would test actual memory usage"
              },
              {
                "line": 554,
                "content": "This test ensures parallel processing works correctly"
              },
              {
                "line": 555,
                "content": "In a real implementation, you would test actual parallel processing"
              },
              {
                "line": 560,
                "content": "Run all tests"
              }
            ],
            "total_lines": 562,
            "code_lines": 391
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/test_security_model.py",
          "domain": "security_first",
          "file_type": "python",
          "size_bytes": 2848,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "re",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              }
            ],
            "functions": [
              {
                "name": "test_no_hardcoded_credentials",
                "lineno": 10,
                "args": [],
                "decorators": [],
                "docstring": "Test that no real credentials exist in code"
              },
              {
                "name": "test_config_uses_placeholders",
                "lineno": 43,
                "args": [],
                "decorators": [],
                "docstring": "Test that config files use placeholders"
              },
              {
                "name": "test_environment_validation",
                "lineno": 56,
                "args": [],
                "decorators": [],
                "docstring": "Test that required environment variables are documented"
              },
              {
                "name": "test_deployment_parameterized",
                "lineno": 73,
                "args": [],
                "decorators": [],
                "docstring": "Test that deployment uses parameters"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "patterns",
                "lineno": 13,
                "value_type": "List"
              },
              {
                "name": "excludes",
                "lineno": 23,
                "value_type": "List"
              },
              {
                "name": "violations",
                "lineno": 29,
                "value_type": "List"
              },
              {
                "name": "config_files",
                "lineno": 45,
                "value_type": "List"
              },
              {
                "name": "required_vars",
                "lineno": 58,
                "value_type": "List"
              },
              {
                "name": "content",
                "lineno": 68,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 76,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "content",
                "lineno": 33,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Check for common credential patterns"
              },
              {
                "line": 19,
                "content": "UUIDs are context-dependent - only flag if they look like real credentials"
              },
              {
                "line": 20,
                "content": "and aren't in example/placeholder contexts"
              },
              {
                "line": 22,
                "content": "Exclude legitimate files"
              },
              {
                "line": 50,
                "content": "Check that it uses placeholder patterns"
              },
              {
                "line": 66,
                "content": "Check that these are documented in example config"
              }
            ],
            "total_lines": 88,
            "code_lines": 63
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/security_manager.py",
          "domain": "security_first",
          "file_type": "python",
          "size_bytes": 8286,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "hashlib",
                "asname": null,
                "lineno": 4
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 5
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "time",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta",
                  "timezone"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              },
              {
                "module": "jwt",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "redis",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "cryptography.fernet",
                "names": [
                  "Fernet"
                ],
                "asnames": [
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "test_security_manager",
                "lineno": 200,
                "args": [],
                "decorators": [],
                "docstring": "Test security manager functionality"
              },
              {
                "name": "__init__",
                "lineno": 29,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Initialize security manager with encryption and Redis client"
              },
              {
                "name": "encrypt_credential",
                "lineno": 39,
                "args": [
                  "self",
                  "credential"
                ],
                "decorators": [],
                "docstring": "Encrypt sensitive credentials using Fernet"
              },
              {
                "name": "decrypt_credential",
                "lineno": 43,
                "args": [
                  "self",
                  "encrypted_credential"
                ],
                "decorators": [],
                "docstring": "Decrypt sensitive credentials using Fernet"
              },
              {
                "name": "store_credential",
                "lineno": 47,
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "decorators": [],
                "docstring": "Store credential securely in Redis with encryption"
              },
              {
                "name": "get_credential",
                "lineno": 57,
                "args": [
                  "self",
                  "key"
                ],
                "decorators": [],
                "docstring": "Retrieve credential securely from Redis"
              },
              {
                "name": "validate_session_token",
                "lineno": 64,
                "args": [
                  "self",
                  "session_token"
                ],
                "decorators": [],
                "docstring": "Validate JWT session token"
              },
              {
                "name": "create_session_token",
                "lineno": 77,
                "args": [
                  "self",
                  "user_id",
                  "role"
                ],
                "decorators": [],
                "docstring": "Create JWT session token with proper expiration"
              },
              {
                "name": "enforce_csrf_protection",
                "lineno": 91,
                "args": [
                  "self",
                  "token",
                  "session_id"
                ],
                "decorators": [],
                "docstring": "Enforce CSRF protection by validating tokens"
              },
              {
                "name": "_generate_csrf_token",
                "lineno": 96,
                "args": [
                  "self",
                  "session_id"
                ],
                "decorators": [],
                "docstring": "Generate CSRF token for session"
              },
              {
                "name": "get_security_headers",
                "lineno": 101,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get security headers for responses"
              },
              {
                "name": "validate_security_config",
                "lineno": 112,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Validate security configuration and return status"
              },
              {
                "name": "enforce_security_policies",
                "lineno": 138,
                "args": [
                  "self",
                  "user_id",
                  "action"
                ],
                "decorators": [],
                "docstring": "Enforce security policies for user actions"
              },
              {
                "name": "audit_security_events",
                "lineno": 169,
                "args": [
                  "self",
                  "user_id",
                  "event_type",
                  "details"
                ],
                "decorators": [],
                "docstring": "Audit security events for compliance and monitoring"
              }
            ],
            "classes": [
              {
                "name": "SecurityManager",
                "lineno": 26,
                "bases": [],
                "methods": [
                  "__init__",
                  "encrypt_credential",
                  "decrypt_credential",
                  "store_credential",
                  "get_credential",
                  "validate_session_token",
                  "create_session_token",
                  "enforce_csrf_protection",
                  "_generate_csrf_token",
                  "get_security_headers",
                  "validate_security_config",
                  "enforce_security_policies",
                  "audit_security_events"
                ],
                "docstring": "Comprehensive security manager implementing all critical security functions"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 15,
                "value_type": "Call"
              },
              {
                "name": "SECURITY_CONFIG",
                "lineno": 18,
                "value_type": "Dict"
              },
              {
                "name": "manager",
                "lineno": 202,
                "value_type": "Call"
              },
              {
                "name": "test_credential",
                "lineno": 205,
                "value_type": "Constant"
              },
              {
                "name": "encrypted",
                "lineno": 206,
                "value_type": "Call"
              },
              {
                "name": "decrypted",
                "lineno": 207,
                "value_type": "Call"
              },
              {
                "name": "token",
                "lineno": 211,
                "value_type": "Call"
              },
              {
                "name": "fernet_key",
                "lineno": 31,
                "value_type": "Subscript"
              },
              {
                "name": "encrypted_value",
                "lineno": 49,
                "value_type": "Call"
              },
              {
                "name": "encrypted_value",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "timeout_minutes",
                "lineno": 79,
                "value_type": "Subscript"
              },
              {
                "name": "payload",
                "lineno": 80,
                "value_type": "Dict"
              },
              {
                "name": "expected_token",
                "lineno": 93,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 98,
                "value_type": "JoinedStr"
              },
              {
                "name": "validation_results",
                "lineno": 114,
                "value_type": "Dict"
              },
              {
                "name": "required_fields",
                "lineno": 125,
                "value_type": "List"
              },
              {
                "name": "policies",
                "lineno": 140,
                "value_type": "Dict"
              },
              {
                "name": "login_attempts_key",
                "lineno": 148,
                "value_type": "JoinedStr"
              },
              {
                "name": "current_attempts",
                "lineno": 149,
                "value_type": "Call"
              },
              {
                "name": "action_key",
                "lineno": 159,
                "value_type": "JoinedStr"
              },
              {
                "name": "audit_entry",
                "lineno": 176,
                "value_type": "Dict"
              },
              {
                "name": "audit_key",
                "lineno": 186,
                "value_type": "JoinedStr"
              },
              {
                "name": "recent_events",
                "lineno": 193,
                "value_type": "Call"
              },
              {
                "name": "fernet_key",
                "lineno": 33,
                "value_type": "Call"
              },
              {
                "name": "payload",
                "lineno": 67,
                "value_type": "Call"
              },
              {
                "name": "fernet_key",
                "lineno": 35,
                "value_type": "Call"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 17,
                "content": "Security configuration"
              },
              {
                "line": 124,
                "content": "Check if any required fields are missing"
              },
              {
                "line": 147,
                "content": "Check if user has exceeded login attempts"
              },
              {
                "line": 158,
                "content": "Log the action"
              },
              {
                "line": 185,
                "content": "Store audit event in Redis with 30-day retention"
              },
              {
                "line": 189,
                "content": "Log to application logs"
              },
              {
                "line": 192,
                "content": "Check for suspicious patterns"
              },
              {
                "line": 204,
                "content": "Test credential encryption/decryption"
              },
              {
                "line": 210,
                "content": "Test session token creation and validation"
              }
            ],
            "total_lines": 219,
            "code_lines": 173
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/security_policy_model.json",
          "domain": "security_first",
          "file_type": "json",
          "size_bytes": 1263,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/input_validator.py.backup",
          "domain": "security_first",
          "file_type": "unknown",
          "size_bytes": 8745,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/security_first/__init__.py",
          "domain": "security_first",
          "file_type": "python",
          "size_bytes": 544,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Security-first architecture enforcement",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "HTTPS enforcement for all connections",
            "Rate limiting to prevent abuse",
            "CSRF protection for session security"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 1
              },
              {
                "module": "https_enforcement",
                "names": [
                  "CSRFProtection",
                  "HTTPSEnforcement",
                  "RateLimiting",
                  "SecurityManager"
                ],
                "asnames": [
                  null,
                  null,
                  null,
                  null
                ],
                "lineno": 14
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [
              {
                "line": 13,
                "content": "Import security components"
              }
            ],
            "total_lines": 27,
            "code_lines": 21
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "mdc_generator": [
        {
          "path": "src/mdc_generator/mdc_model.py",
          "domain": "mdc_generator",
          "file_type": "python",
          "size_bytes": 9751,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "MDC file modeling and generation",
            "Simple projection from model to file"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 7
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 9
              },
              {
                "module": "yaml",
                "asname": null,
                "lineno": 11
              },
              {
                "module": "argparse",
                "asname": null,
                "lineno": 277
              }
            ],
            "functions": [
              {
                "name": "main",
                "lineno": 275,
                "args": [],
                "decorators": [],
                "docstring": "Main function for command-line usage"
              },
              {
                "name": "to_yaml",
                "lineno": 22,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Convert to YAML string"
              },
              {
                "name": "to_mdc_content",
                "lineno": 40,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate complete .mdc file content"
              },
              {
                "name": "save",
                "lineno": 45,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Save .mdc file"
              },
              {
                "name": "from_file",
                "lineno": 56,
                "args": [
                  "cls",
                  "file_path"
                ],
                "decorators": [
                  "classmethod"
                ],
                "docstring": "Load .mdc file from disk"
              },
              {
                "name": "create_rule",
                "lineno": 100,
                "args": [
                  "cls",
                  "description",
                  "globs",
                  "content",
                  "file_path",
                  "always_apply"
                ],
                "decorators": [
                  "classmethod"
                ],
                "docstring": "Create a new MDC rule file"
              },
              {
                "name": "__init__",
                "lineno": 125,
                "args": [
                  "self",
                  "base_dir"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "generate_all_rules",
                "lineno": 129,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Generate all standard .mdc rules"
              },
              {
                "name": "_get_standard_rules",
                "lineno": 144,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Get standard rule definitions"
              },
              {
                "name": "validate_mdc_file",
                "lineno": 258,
                "args": [
                  "self",
                  "file_path"
                ],
                "decorators": [],
                "docstring": "Validate a single .mdc file"
              },
              {
                "name": "validate_all_mdc_files",
                "lineno": 267,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Validate all .mdc files in the project"
              }
            ],
            "classes": [
              {
                "name": "MDCFrontmatter",
                "lineno": 15,
                "bases": [],
                "methods": [
                  "to_yaml"
                ],
                "docstring": "Model for MDC file YAML frontmatter"
              },
              {
                "name": "MDCFile",
                "lineno": 33,
                "bases": [],
                "methods": [
                  "to_mdc_content",
                  "save",
                  "from_file",
                  "create_rule"
                ],
                "docstring": "Complete MDC file model"
              },
              {
                "name": "MDCGenerator",
                "lineno": 122,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_all_rules",
                  "_get_standard_rules",
                  "validate_mdc_file",
                  "validate_all_mdc_files"
                ],
                "docstring": "Generator for MDC files"
              }
            ],
            "variables": [
              {
                "name": "parser",
                "lineno": 279,
                "value_type": "Call"
              },
              {
                "name": "args",
                "lineno": 292,
                "value_type": "Call"
              },
              {
                "name": "generator",
                "lineno": 294,
                "value_type": "Call"
              },
              {
                "name": "data",
                "lineno": 24,
                "value_type": "Dict"
              },
              {
                "name": "yaml_content",
                "lineno": 42,
                "value_type": "Call"
              },
              {
                "name": "target_path",
                "lineno": 47,
                "value_type": "BoolOp"
              },
              {
                "name": "lines",
                "lineno": 62,
                "value_type": "Call"
              },
              {
                "name": "frontmatter_end",
                "lineno": 68,
                "value_type": "Constant"
              },
              {
                "name": "frontmatter_text",
                "lineno": 79,
                "value_type": "Call"
              },
              {
                "name": "frontmatter_data",
                "lineno": 80,
                "value_type": "Call"
              },
              {
                "name": "content_lines",
                "lineno": 83,
                "value_type": "Subscript"
              },
              {
                "name": "content",
                "lineno": 84,
                "value_type": "Call"
              },
              {
                "name": "frontmatter",
                "lineno": 87,
                "value_type": "Call"
              },
              {
                "name": "frontmatter",
                "lineno": 109,
                "value_type": "Call"
              },
              {
                "name": "rules",
                "lineno": 131,
                "value_type": "Call"
              },
              {
                "name": "results",
                "lineno": 269,
                "value_type": "Dict"
              },
              {
                "name": "results",
                "lineno": 302,
                "value_type": "Call"
              },
              {
                "name": "valid_files",
                "lineno": 304,
                "value_type": "ListComp"
              },
              {
                "name": "invalid_files",
                "lineno": 305,
                "value_type": "ListComp"
              },
              {
                "name": "msg",
                "lineno": 49,
                "value_type": "Constant"
              },
              {
                "name": "content",
                "lineno": 59,
                "value_type": "Call"
              },
              {
                "name": "msg",
                "lineno": 64,
                "value_type": "JoinedStr"
              },
              {
                "name": "msg",
                "lineno": 75,
                "value_type": "JoinedStr"
              },
              {
                "name": "file_path",
                "lineno": 133,
                "value_type": "BinOp"
              },
              {
                "name": "mdc_file",
                "lineno": 134,
                "value_type": "Call"
              },
              {
                "name": "frontmatter_end",
                "lineno": 71,
                "value_type": "Name"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 61,
                "content": "Parse YAML frontmatter"
              },
              {
                "line": 67,
                "content": "Find frontmatter end"
              },
              {
                "line": 78,
                "content": "Extract frontmatter"
              },
              {
                "line": 82,
                "content": "Extract content"
              },
              {
                "line": 86,
                "content": "Create frontmatter object"
              },
              {
                "line": 165,
                "content": "# BANNED: Stochastic/Fuzzy Editors"
              },
              {
                "line": 170,
                "content": "# REQUIRED: Deterministic Tools"
              },
              {
                "line": 172,
                "content": "## YAML Files"
              },
              {
                "line": 177,
                "content": "## JSON Files"
              },
              {
                "line": 182,
                "content": "## Python Files"
              },
              {
                "line": 187,
                "content": "## MDC Files"
              },
              {
                "line": 192,
                "content": "## Other Formats"
              },
              {
                "line": 197,
                "content": "# Validation Steps:"
              },
              {
                "line": 204,
                "content": "# Remember:"
              },
              {
                "line": 221,
                "content": "# NEVER Hardcode These:"
              },
              {
                "line": 229,
                "content": "# ALWAYS Use These Instead:"
              },
              {
                "line": 235,
                "content": "# Validation Checklist:"
              },
              {
                "line": 243,
                "content": "# File Types to Check:"
              },
              {
                "line": 251,
                "content": "# Remember:"
              }
            ],
            "total_lines": 319,
            "code_lines": 246
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/mdc_generator/__init__.py",
          "domain": "mdc_generator",
          "file_type": "python",
          "size_bytes": 219,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "MDC file modeling and generation",
            "Simple projection from model to file"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "mdc_model",
                "names": [
                  "MDCFile",
                  "MDCFrontmatter",
                  "MDCGenerator"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 6
              }
            ],
            "functions": [],
            "classes": [],
            "variables": [
              {
                "name": "__version__",
                "lineno": 8,
                "value_type": "Constant"
              },
              {
                "name": "__all__",
                "lineno": 9,
                "value_type": "List"
              }
            ],
            "comments": [],
            "total_lines": 10,
            "code_lines": 7
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "mcp_integration": [
        {
          "path": "src/mcp_integration/github_mcp_client.py",
          "domain": "mcp_integration",
          "file_type": "python",
          "size_bytes": 10399,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "json",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "src.secure_shell_service.elegant_client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 18,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_setup_mcp_server",
                "lineno": 23,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Setup the MCP server connection"
              }
            ],
            "classes": [
              {
                "name": "GitHubMCPClient",
                "lineno": 15,
                "bases": [],
                "methods": [
                  "__init__",
                  "_setup_mcp_server"
                ],
                "docstring": "GitHub MCP Client for intelligent repository analysis"
              }
            ],
            "variables": [
              {
                "name": "client",
                "lineno": 254,
                "value_type": "Call"
              },
              {
                "name": "repo_url",
                "lineno": 265,
                "value_type": "Constant"
              },
              {
                "name": "client",
                "lineno": 267,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 268,
                "value_type": "Await"
              },
              {
                "name": "structure",
                "lineno": 281,
                "value_type": "Call"
              },
              {
                "name": "insights",
                "lineno": 188,
                "value_type": "Dict"
              },
              {
                "name": "result",
                "lineno": 27,
                "value_type": "Call"
              },
              {
                "name": "analysis",
                "lineno": 82,
                "value_type": "Dict"
              },
              {
                "name": "important_files",
                "lineno": 93,
                "value_type": "List"
              },
              {
                "name": "temp_dir",
                "lineno": 126,
                "value_type": "JoinedStr"
              },
              {
                "name": "clone_result",
                "lineno": 129,
                "value_type": "Await"
              },
              {
                "name": "tree_result",
                "lineno": 134,
                "value_type": "Await"
              },
              {
                "name": "temp_dir",
                "lineno": 156,
                "value_type": "JoinedStr"
              },
              {
                "name": "clone_result",
                "lineno": 159,
                "value_type": "Await"
              },
              {
                "name": "results",
                "lineno": 163,
                "value_type": "Dict"
              },
              {
                "name": "structure",
                "lineno": 198,
                "value_type": "Call"
              },
              {
                "name": "important_files",
                "lineno": 221,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 43,
                "value_type": "Await"
              },
              {
                "name": "file_paths_str",
                "lineno": 65,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 66,
                "value_type": "Await"
              },
              {
                "name": "full_path",
                "lineno": 165,
                "value_type": "JoinedStr"
              },
              {
                "name": "read_result",
                "lineno": 166,
                "value_type": "Await"
              },
              {
                "name": "file_extensions",
                "lineno": 201,
                "value_type": "List"
              },
              {
                "name": "ext",
                "lineno": 204,
                "value_type": "Subscript"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 26,
                "content": "Check if mcp-git-ingest is available"
              },
              {
                "line": 42,
                "content": "Use MCP server for intelligent structure analysis"
              },
              {
                "line": 49,
                "content": "Fallback: basic git clone and tree analysis"
              },
              {
                "line": 64,
                "content": "Use MCP server for intelligent file reading"
              },
              {
                "line": 72,
                "content": "Fallback: basic file reading"
              },
              {
                "line": 89,
                "content": "Get repository structure"
              },
              {
                "line": 92,
                "content": "Identify and read important files"
              },
              {
                "line": 113,
                "content": "Analyze the repository"
              },
              {
                "line": 125,
                "content": "Clone repository temporarily"
              },
              {
                "line": 128,
                "content": "Clone the repository"
              },
              {
                "line": 133,
                "content": "Get directory structure"
              },
              {
                "line": 138,
                "content": "Cleanup"
              },
              {
                "line": 158,
                "content": "Clone repository"
              },
              {
                "line": 175,
                "content": "Cleanup"
              },
              {
                "line": 197,
                "content": "Analyze structure"
              },
              {
                "line": 200,
                "content": "Count files by type"
              },
              {
                "line": 208,
                "content": "Determine project type"
              },
              {
                "line": 220,
                "content": "Analyze important files"
              },
              {
                "line": 232,
                "content": "Identify key files"
              },
              {
                "line": 237,
                "content": "Assess structure quality"
              },
              {
                "line": 251,
                "content": "Convenience function for quick repository analysis"
              },
              {
                "line": 258,
                "content": "Example usage"
              },
              {
                "line": 264,
                "content": "Test with our own repository"
              }
            ],
            "total_lines": 287,
            "code_lines": 211
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "rule_compliance": [
        {
          "path": "src/multi_agent_testing/.cursorrules",
          "domain": "rule_compliance",
          "file_type": "unknown",
          "size_bytes": 6875,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Rule compliance enforcement system",
            "Deterministic editing enforcement",
            "Immediate IDE feedback"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/multi_agent_testing/__init__.py",
          "domain": "rule_compliance",
          "file_type": "python",
          "size_bytes": 223,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation",
            "Rule compliance enforcement system",
            "Deterministic editing enforcement",
            "Immediate IDE feedback"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [],
            "functions": [],
            "classes": [],
            "variables": [],
            "comments": [],
            "total_lines": 10,
            "code_lines": 8
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "secure_shell": [
        {
          "path": "src/secure_shell_service/secure_shell_grpc.pb.go",
          "domain": "secure_shell",
          "file_type": "go",
          "size_bytes": 5906,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/real_client.py",
          "domain": "secure_shell",
          "file_type": "python",
          "size_bytes": 7082,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 8
              },
              {
                "module": "grpc",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "secure_shell_pb2",
                "names": [
                  "CommandRequest",
                  "HealthRequest"
                ],
                "asnames": [
                  null,
                  null
                ],
                "lineno": 13
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 15
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 22,
                "args": [
                  "self",
                  "channel"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 76,
                "args": [
                  "self",
                  "host",
                  "port"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MockSecureShellServiceStub",
                "lineno": 19,
                "bases": [],
                "methods": [
                  "__init__"
                ],
                "docstring": "Mock gRPC stub that simulates the real service"
              },
              {
                "name": "RealSecureShellClient",
                "lineno": 73,
                "bases": [],
                "methods": [
                  "__init__"
                ],
                "docstring": "Real secure shell client using gRPC"
              }
            ],
            "variables": [
              {
                "name": "client",
                "lineno": 183,
                "value_type": "Call"
              },
              {
                "name": "client",
                "lineno": 196,
                "value_type": "Call"
              },
              {
                "name": "health",
                "lineno": 199,
                "value_type": "Await"
              },
              {
                "name": "commands",
                "lineno": 203,
                "value_type": "List"
              },
              {
                "name": "command",
                "lineno": 31,
                "value_type": "Attribute"
              },
              {
                "name": "result",
                "lineno": 207,
                "value_type": "Await"
              },
              {
                "name": "output",
                "lineno": 33,
                "value_type": "Constant"
              },
              {
                "name": "success",
                "lineno": 34,
                "value_type": "Constant"
              },
              {
                "name": "exit_code",
                "lineno": 35,
                "value_type": "Constant"
              },
              {
                "name": "health",
                "lineno": 93,
                "value_type": "Await"
              },
              {
                "name": "request",
                "lineno": 124,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 131,
                "value_type": "Await"
              },
              {
                "name": "request",
                "lineno": 157,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 158,
                "value_type": "Await"
              },
              {
                "name": "output",
                "lineno": 47,
                "value_type": "JoinedStr"
              },
              {
                "name": "success",
                "lineno": 48,
                "value_type": "Constant"
              },
              {
                "name": "exit_code",
                "lineno": 49,
                "value_type": "Constant"
              },
              {
                "name": "output",
                "lineno": 39,
                "value_type": "Constant"
              },
              {
                "name": "success",
                "lineno": 40,
                "value_type": "Constant"
              },
              {
                "name": "exit_code",
                "lineno": 41,
                "value_type": "UnaryOp"
              },
              {
                "name": "output",
                "lineno": 43,
                "value_type": "Constant"
              },
              {
                "name": "success",
                "lineno": 44,
                "value_type": "Constant"
              },
              {
                "name": "exit_code",
                "lineno": 45,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 12,
                "content": "Import generated protobuf"
              },
              {
                "line": 18,
                "content": "For now, we'll create a mock gRPC stub until we generate the full gRPC code"
              },
              {
                "line": 27,
                "content": "Simulate network delay"
              },
              {
                "line": 30,
                "content": "Simulate command execution"
              },
              {
                "line": 37,
                "content": "Simulate timeout"
              },
              {
                "line": 86,
                "content": "Create insecure channel (for development)"
              },
              {
                "line": 92,
                "content": "Test connection with health check"
              },
              {
                "line": 123,
                "content": "Create protobuf request"
              },
              {
                "line": 130,
                "content": "Execute command via gRPC"
              },
              {
                "line": 176,
                "content": "Convenience function to replace secure_execute"
              },
              {
                "line": 190,
                "content": "Example usage - NO MORE SHELL COMMANDS! \ud83c\udf89"
              },
              {
                "line": 198,
                "content": "Health check"
              },
              {
                "line": 202,
                "content": "Test secure command execution"
              }
            ],
            "total_lines": 218,
            "code_lines": 165
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/client.py",
          "domain": "secure_shell",
          "file_type": "python",
          "size_bytes": 5173,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "grpc",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 23,
                "args": [
                  "self",
                  "channel"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "__init__",
                "lineno": 44,
                "args": [
                  "self",
                  "host",
                  "port"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "MockSecureShellServiceStub",
                "lineno": 20,
                "bases": [],
                "methods": [
                  "__init__"
                ],
                "docstring": "Mock implementation until protobuf is generated"
              },
              {
                "name": "SecureShellClient",
                "lineno": 41,
                "bases": [],
                "methods": [
                  "__init__"
                ],
                "docstring": "Secure shell client to replace subprocess calls"
              }
            ],
            "variables": [
              {
                "name": "client",
                "lineno": 145,
                "value_type": "Call"
              },
              {
                "name": "client",
                "lineno": 155,
                "value_type": "Call"
              },
              {
                "name": "health",
                "lineno": 158,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 162,
                "value_type": "Await"
              },
              {
                "name": "request",
                "lineno": 82,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 93,
                "value_type": "Await"
              },
              {
                "name": "request",
                "lineno": 119,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 120,
                "value_type": "Await"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 14,
                "content": "Import generated protobuf (would be generated from .proto file)"
              },
              {
                "line": 15,
                "content": "from secure_shell_pb2 import CommandRequest, CommandResponse, HealthRequest, HealthResponse"
              },
              {
                "line": 16,
                "content": "from secure_shell_pb2_grpc import SecureShellServiceStub"
              },
              {
                "line": 19,
                "content": "For now, we'll create a mock implementation"
              },
              {
                "line": 81,
                "content": "Create request"
              },
              {
                "line": 92,
                "content": "Execute command"
              },
              {
                "line": 138,
                "content": "Convenience function to replace secure_execute"
              },
              {
                "line": 152,
                "content": "Example usage"
              },
              {
                "line": 157,
                "content": "Health check"
              },
              {
                "line": 161,
                "content": "Execute command"
              }
            ],
            "total_lines": 170,
            "code_lines": 127
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/README.md",
          "domain": "secure_shell",
          "file_type": "markdown",
          "size_bytes": 6689,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/secure_shell.pb.go",
          "domain": "secure_shell",
          "file_type": "go",
          "size_bytes": 14912,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/secure_shell.proto",
          "domain": "secure_shell",
          "file_type": "proto",
          "size_bytes": 1427,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/secure_executor.py",
          "domain": "secure_shell",
          "file_type": "python",
          "size_bytes": 13336,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 8
              },
              {
                "module": "os",
                "asname": null,
                "lineno": 9
              },
              {
                "module": "tempfile",
                "asname": null,
                "lineno": 10
              },
              {
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "asnames": [
                  null
                ],
                "lineno": 11
              },
              {
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "asnames": [
                  null
                ],
                "lineno": 12
              },
              {
                "module": "typing",
                "names": [
                  "Any",
                  "Optional",
                  "Union"
                ],
                "asnames": [
                  null,
                  null,
                  null
                ],
                "lineno": 13
              }
            ],
            "functions": [
              {
                "name": "secure_execute",
                "lineno": 341,
                "args": [
                  "command",
                  "capture_output",
                  "text",
                  "timeout"
                ],
                "decorators": [],
                "docstring": "Convenience function for secure command execution"
              },
              {
                "name": "__init__",
                "lineno": 35,
                "args": [
                  "self",
                  "timeout",
                  "working_dir"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_load_allowed_commands",
                "lineno": 40,
                "args": [
                  "self"
                ],
                "decorators": [],
                "docstring": "Load allowed commands from configuration"
              },
              {
                "name": "_validate_command",
                "lineno": 105,
                "args": [
                  "self",
                  "command"
                ],
                "decorators": [],
                "docstring": "Validate command is allowed and safe"
              },
              {
                "name": "_sanitize_command",
                "lineno": 193,
                "args": [
                  "self",
                  "command"
                ],
                "decorators": [],
                "docstring": "Sanitize command for safe execution"
              },
              {
                "name": "execute_sync",
                "lineno": 313,
                "args": [
                  "self",
                  "command",
                  "capture_output",
                  "text",
                  "timeout"
                ],
                "decorators": [],
                "docstring": "Synchronous version of execute"
              },
              {
                "name": "run",
                "lineno": 326,
                "args": [
                  "self",
                  "command",
                  "capture_output",
                  "text",
                  "timeout"
                ],
                "decorators": [],
                "docstring": "Alias for execute_sync"
              }
            ],
            "classes": [
              {
                "name": "CommandResult",
                "lineno": 21,
                "bases": [],
                "methods": [],
                "docstring": "Result of a secure command execution"
              },
              {
                "name": "SecureExecutor",
                "lineno": 32,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_allowed_commands",
                  "_validate_command",
                  "_sanitize_command",
                  "execute_sync",
                  "run"
                ],
                "docstring": "Secure command execution without subprocess vulnerabilities"
              }
            ],
            "variables": [
              {
                "name": "logger",
                "lineno": 17,
                "value_type": "Call"
              },
              {
                "name": "capture_output",
                "lineno": 349,
                "value_type": "IfExp"
              },
              {
                "name": "text",
                "lineno": 350,
                "value_type": "IfExp"
              },
              {
                "name": "executor",
                "lineno": 351,
                "value_type": "Call"
              },
              {
                "name": "executor",
                "lineno": 358,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 361,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 366,
                "value_type": "Call"
              },
              {
                "name": "parts",
                "lineno": 107,
                "value_type": "IfExp"
              },
              {
                "name": "cmd",
                "lineno": 112,
                "value_type": "Subscript"
              },
              {
                "name": "args",
                "lineno": 113,
                "value_type": "IfExp"
              },
              {
                "name": "allowed_args",
                "lineno": 179,
                "value_type": "Subscript"
              },
              {
                "name": "parts",
                "lineno": 195,
                "value_type": "IfExp"
              },
              {
                "name": "sanitized",
                "lineno": 198,
                "value_type": "List"
              },
              {
                "name": "capture_output",
                "lineno": 221,
                "value_type": "IfExp"
              },
              {
                "name": "text",
                "lineno": 222,
                "value_type": "IfExp"
              },
              {
                "name": "start_time",
                "lineno": 224,
                "value_type": "Call"
              },
              {
                "name": "capture_output",
                "lineno": 322,
                "value_type": "IfExp"
              },
              {
                "name": "text",
                "lineno": 323,
                "value_type": "IfExp"
              },
              {
                "name": "capture_output",
                "lineno": 335,
                "value_type": "IfExp"
              },
              {
                "name": "text",
                "lineno": 336,
                "value_type": "IfExp"
              },
              {
                "name": "subcommand",
                "lineno": 139,
                "value_type": "Subscript"
              },
              {
                "name": "subcommand_args",
                "lineno": 140,
                "value_type": "IfExp"
              },
              {
                "name": "allowed_args",
                "lineno": 148,
                "value_type": "Subscript"
              },
              {
                "name": "clean_part",
                "lineno": 201,
                "value_type": "Call"
              },
              {
                "name": "clean_part",
                "lineno": 202,
                "value_type": "Call"
              },
              {
                "name": "sanitized_cmd",
                "lineno": 239,
                "value_type": "Call"
              },
              {
                "name": "original_dir",
                "lineno": 244,
                "value_type": "Call"
              },
              {
                "name": "process",
                "lineno": 249,
                "value_type": "Await"
              },
              {
                "name": "timeout_actual",
                "lineno": 257,
                "value_type": "BoolOp"
              },
              {
                "name": "duration",
                "lineno": 271,
                "value_type": "BinOp"
              },
              {
                "name": "stdout_str",
                "lineno": 265,
                "value_type": "IfExp"
              },
              {
                "name": "stderr_str",
                "lineno": 266,
                "value_type": "IfExp"
              },
              {
                "name": "stdout_str",
                "lineno": 268,
                "value_type": "Name"
              },
              {
                "name": "stderr_str",
                "lineno": 269,
                "value_type": "Name"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 15,
                "content": "Configure logging"
              },
              {
                "line": 115,
                "content": "Check if command is allowed"
              },
              {
                "line": 117,
                "content": "Allow python executable paths"
              },
              {
                "line": 119,
                "content": "This is a python executable, allow it"
              },
              {
                "line": 121,
                "content": "Allow secure shell service paths"
              },
              {
                "line": 126,
                "content": "This is a secure shell service path, allow it"
              },
              {
                "line": 132,
                "content": "Special handling for 'uv run' commands"
              },
              {
                "line": 134,
                "content": "For 'uv run <subcommand>', validate the subcommand"
              },
              {
                "line": 142,
                "content": "Check if subcommand is allowed"
              },
              {
                "line": 147,
                "content": "Validate subcommand arguments"
              },
              {
                "line": 151,
                "content": "Allow file paths for certain subcommands"
              },
              {
                "line": 155,
                "content": "This is a file path, allow it"
              },
              {
                "line": 162,
                "content": "Special handling for python executable commands"
              },
              {
                "line": 164,
                "content": "Allow python module execution"
              },
              {
                "line": 178,
                "content": "Check if arguments are allowed for other commands"
              },
              {
                "line": 182,
                "content": "Allow file paths for certain commands"
              },
              {
                "line": 186,
                "content": "This is a file path, allow it"
              },
              {
                "line": 197,
                "content": "Remove any shell metacharacters"
              },
              {
                "line": 200,
                "content": "Remove dangerous characters"
              },
              {
                "line": 220,
                "content": "Set defaults if None"
              },
              {
                "line": 227,
                "content": "Validate command"
              },
              {
                "line": 238,
                "content": "Sanitize command"
              },
              {
                "line": 241,
                "content": "Create temporary working directory if needed"
              },
              {
                "line": 243,
                "content": "Change to working directory"
              },
              {
                "line": 248,
                "content": "Execute command using asyncio"
              },
              {
                "line": 256,
                "content": "Wait for completion with timeout"
              },
              {
                "line": 263,
                "content": "Convert output to text if requested"
              },
              {
                "line": 321,
                "content": "Set defaults if None"
              },
              {
                "line": 334,
                "content": "Set defaults if None"
              },
              {
                "line": 340,
                "content": "Convenience function for easy replacement"
              },
              {
                "line": 348,
                "content": "Set defaults if None"
              },
              {
                "line": 355,
                "content": "Example usage"
              },
              {
                "line": 357,
                "content": "Test secure execution"
              },
              {
                "line": 360,
                "content": "Test allowed command"
              },
              {
                "line": 365,
                "content": "Test disallowed command"
              }
            ],
            "total_lines": 369,
            "code_lines": 288
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/elegant_client.py",
          "domain": "secure_shell",
          "file_type": "python",
          "size_bytes": 7955,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "logging",
                "asname": null,
                "lineno": 7
              },
              {
                "module": "typing",
                "names": [
                  "Any"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              },
              {
                "module": "grpc",
                "asname": null,
                "lineno": 12
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 14
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "lineno": 20,
                "args": [
                  "self",
                  "host",
                  "port"
                ],
                "decorators": [],
                "docstring": null
              },
              {
                "name": "_create_mock_stub",
                "lineno": 45,
                "args": [
                  "self",
                  "channel"
                ],
                "decorators": [],
                "docstring": "Create a mock stub that simulates the real service"
              },
              {
                "name": "__init__",
                "lineno": 49,
                "args": [
                  "self",
                  "channel"
                ],
                "decorators": [],
                "docstring": null
              }
            ],
            "classes": [
              {
                "name": "ElegantSecureShellClient",
                "lineno": 17,
                "bases": [],
                "methods": [
                  "__init__",
                  "_create_mock_stub"
                ],
                "docstring": "Elegant secure shell client - NO MORE SHELL COMMANDS! \ud83c\udf89"
              },
              {
                "name": "MockStub",
                "lineno": 48,
                "bases": [],
                "methods": [
                  "__init__"
                ],
                "docstring": null
              }
            ],
            "variables": [
              {
                "name": "client",
                "lineno": 196,
                "value_type": "Call"
              },
              {
                "name": "client",
                "lineno": 209,
                "value_type": "Call"
              },
              {
                "name": "health",
                "lineno": 212,
                "value_type": "Await"
              },
              {
                "name": "commands",
                "lineno": 216,
                "value_type": "List"
              },
              {
                "name": "result",
                "lineno": 226,
                "value_type": "Await"
              },
              {
                "name": "request",
                "lineno": 133,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 144,
                "value_type": "Await"
              },
              {
                "name": "request",
                "lineno": 170,
                "value_type": "Call"
              },
              {
                "name": "response",
                "lineno": 171,
                "value_type": "Await"
              },
              {
                "name": "command",
                "lineno": 57,
                "value_type": "Call"
              },
              {
                "name": "timeout_sec",
                "lineno": 58,
                "value_type": "Call"
              },
              {
                "name": "process",
                "lineno": 63,
                "value_type": "Await"
              },
              {
                "name": "success",
                "lineno": 76,
                "value_type": "Compare"
              },
              {
                "name": "output",
                "lineno": 77,
                "value_type": "Call"
              },
              {
                "name": "error",
                "lineno": 78,
                "value_type": "Call"
              },
              {
                "name": "exit_code",
                "lineno": 79,
                "value_type": "Attribute"
              },
              {
                "name": "success",
                "lineno": 82,
                "value_type": "Constant"
              },
              {
                "name": "output",
                "lineno": 83,
                "value_type": "Constant"
              },
              {
                "name": "error",
                "lineno": 84,
                "value_type": "JoinedStr"
              },
              {
                "name": "exit_code",
                "lineno": 85,
                "value_type": "UnaryOp"
              },
              {
                "name": "success",
                "lineno": 87,
                "value_type": "Constant"
              },
              {
                "name": "output",
                "lineno": 88,
                "value_type": "Constant"
              },
              {
                "name": "error",
                "lineno": 89,
                "value_type": "Call"
              },
              {
                "name": "exit_code",
                "lineno": 90,
                "value_type": "UnaryOp"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 9,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 30,
                "content": "Create insecure channel (for development)"
              },
              {
                "line": 33,
                "content": "For now, we'll use a simple mock until we get the real gRPC working"
              },
              {
                "line": 56,
                "content": "Parse the request (simplified)"
              },
              {
                "line": 60,
                "content": "Execute command elegantly"
              },
              {
                "line": 62,
                "content": "\ud83d\ude31 TEMPORARY: Use subprocess for now, but with proper timeout"
              },
              {
                "line": 132,
                "content": "Create a simple request object"
              },
              {
                "line": 143,
                "content": "Execute command via elegant gRPC"
              },
              {
                "line": 189,
                "content": "Elegant convenience function - NO MORE CRINGING! \ud83d\ude04"
              },
              {
                "line": 203,
                "content": "Example usage - NO MORE SHELL COMMANDS! \ud83c\udf89"
              },
              {
                "line": 211,
                "content": "Health check"
              },
              {
                "line": 215,
                "content": "Test elegant command execution"
              }
            ],
            "total_lines": 239,
            "code_lines": 182
          },
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/main.go",
          "domain": "secure_shell",
          "file_type": "go",
          "size_bytes": 1699,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/migration_example.py",
          "domain": "secure_shell",
          "file_type": "python",
          "size_bytes": 5641,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": {
            "success": true,
            "imports": [
              {
                "module": "asyncio",
                "asname": null,
                "lineno": 6
              },
              {
                "module": "elegant_client",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 8
              },
              {
                "module": "src.secure_shell_service.secure_executor",
                "names": [
                  "secure_execute"
                ],
                "asnames": [
                  null
                ],
                "lineno": 10
              }
            ],
            "functions": [
              {
                "name": "cringy_old_way",
                "lineno": 14,
                "args": [],
                "decorators": [],
                "docstring": "The old way - makes you cringe every time you see it \ud83d\ude31"
              }
            ],
            "classes": [],
            "variables": [
              {
                "name": "result",
                "lineno": 19,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 23,
                "value_type": "Call"
              },
              {
                "name": "user_input",
                "lineno": 27,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 28,
                "value_type": "Call"
              },
              {
                "name": "result",
                "lineno": 37,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 41,
                "value_type": "Await"
              },
              {
                "name": "user_input",
                "lineno": 45,
                "value_type": "Constant"
              },
              {
                "name": "result",
                "lineno": 46,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 50,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 67,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 75,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 83,
                "value_type": "Await"
              },
              {
                "name": "result",
                "lineno": 91,
                "value_type": "Await"
              },
              {
                "name": "old_code",
                "lineno": 105,
                "value_type": "Constant"
              },
              {
                "name": "new_code",
                "lineno": 119,
                "value_type": "Constant"
              }
            ],
            "comments": [
              {
                "line": 1,
                "content": "!/usr/bin/env python3"
              },
              {
                "line": 13,
                "content": "\ud83d\ude31 BEFORE: CRINGY subprocess calls"
              },
              {
                "line": 16,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 18,
                "content": "\ud83d\ude31 CRINGY: Direct subprocess call"
              },
              {
                "line": 22,
                "content": "\ud83d\ude31 CRINGY: No timeout, can hang forever"
              },
              {
                "line": 26,
                "content": "\ud83d\ude31 CRINGY: Command injection risk"
              },
              {
                "line": 32,
                "content": "\ud83c\udf89 AFTER: ELEGANT secure shell calls"
              },
              {
                "line": 36,
                "content": "\ud83c\udf89 ELEGANT: Secure command execution"
              },
              {
                "line": 40,
                "content": "\ud83c\udf89 ELEGANT: Built-in timeout protection"
              },
              {
                "line": 44,
                "content": "\ud83c\udf89 ELEGANT: Input validation and sanitization"
              },
              {
                "line": 49,
                "content": "\ud83c\udf89 ELEGANT: Proper error handling"
              },
              {
                "line": 55,
                "content": "Migration examples for common patterns"
              },
              {
                "line": 62,
                "content": "Example 1: Simple command execution"
              },
              {
                "line": 70,
                "content": "Example 2: Command with timeout"
              },
              {
                "line": 78,
                "content": "Example 3: Error handling"
              },
              {
                "line": 86,
                "content": "Example 4: Complex command"
              },
              {
                "line": 97,
                "content": "Real migration example"
              },
              {
                "line": 104,
                "content": "Simulate migrating a file that uses subprocess"
              },
              {
                "line": 106,
                "content": "\ud83d\ude31 OLD CODE (CRINGY!)"
              },
              {
                "line": 107,
                "content": "import subprocess  # REMOVED - replaced with secure_execute"
              },
              {
                "line": 120,
                "content": "\ud83c\udf89 NEW CODE (ELEGANT!)"
              },
              {
                "line": 151,
                "content": "Show the difference"
              },
              {
                "line": 154,
                "content": "Show real migration example"
              }
            ],
            "total_lines": 162,
            "code_lines": 94
          },
          "model_coverage": false,
          "issues": []
        }
      ],
      "go": [
        {
          "path": "src/secure_shell_service/go.sum",
          "domain": "go",
          "file_type": "unknown",
          "size_bytes": 1866,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        },
        {
          "path": "src/secure_shell_service/go.mod",
          "domain": "go",
          "file_type": "unknown",
          "size_bytes": 383,
          "requirements_traced": [
            "Use domain-specific tools",
            "Intelligent content analysis",
            "Intelligent confidence scoring",
            "Actual tool execution works",
            "Extensible domain registry",
            "Domain-based file organization",
            "Domain-specific rules validation"
          ],
          "ast_analysis": null,
          "model_coverage": false,
          "issues": []
        }
      ]
    }
  },
  "requirements_analysis": {
    "requirements_coverage": {
      "Don't lint CloudFormation with generic YAML tools": 6,
      "Use domain-specific tools": 318,
      "Generate proper exclusions": 0,
      "Intelligent content analysis": 318,
      "Intelligent confidence scoring": 318,
      "Actual tool execution works": 318,
      "Extensible domain registry": 318,
      "YAML type-specific validation": 0,
      "Configuration YAML validation": 0,
      "CI/CD YAML validation": 0,
      "Kubernetes YAML validation": 0,
      "Streamlit app security validation": 6,
      "Security-first architecture enforcement": 11,
      "Multi-agent testing validation": 0,
      "Domain-based file organization": 318,
      "Bash script validation": 0,
      "Documentation validation": 0,
      "Configuration validation": 0,
      "Data file validation": 0,
      "Healthcare CDC domain validation": 7,
      "Domain-specific rules validation": 318,
      "Rule compliance enforcement system": 2,
      "Deterministic editing enforcement": 2,
      "Immediate IDE feedback": 2,
      "MDC file modeling and generation": 2,
      "Simple projection from model to file": 2,
      "HIPAA compliance validation": 7,
      "PHI detection and validation": 7,
      "Immutable audit logging": 7,
      "Healthcare data encryption": 7,
      "Healthcare access control and authentication": 7,
      "Healthcare CDC CI/CD integration": 7,
      "HTTPS enforcement for all connections": 11,
      "Rate limiting to prevent abuse": 11,
      "CSRF protection for session security": 11,
      "UV package management enforcement": 12,
      "Streamlit app dependencies with UV": 12,
      "Security-first dependencies with UV": 12,
      "Development dependencies with UV": 12,
      "Use Ghostbusters for delusion detection and recovery": 46,
      "Ghostbusters agent orchestration": 46,
      "Ghostbusters recovery engines": 46,
      "Ghostbusters functional equivalence": 46,
      "Ghostbusters zero false positives": 46,
      "Ghostbusters deterministic recovery": 46,
      "Ghostbusters multi-agent testing": 46,
      "Run Ghostbusters before linting to fix syntax issues": 46,
      "Use Ghostbusters agents for domain-specific analysis": 46,
      "Apply Ghostbusters recovery engines for automated fixes": 46,
      "Integrate Ghostbusters with LangGraph/LangChain": 46,
      "Use Ghostbusters for multi-agent orchestration": 46,
      "Apply Ghostbusters for confidence scoring and validation": 46,
      "Use functions_framework for Cloud Functions": 1,
      "Integrate with Google Cloud Firestore for data storage": 1,
      "Use Google Cloud Pub/Sub for real-time updates": 1,
      "Implement proper authentication and authorization": 1,
      "Handle Cloud Function cold starts efficiently": 1,
      "Provide comprehensive error handling and logging": 1,
      "Support both simple and embedded API modes": 1,
      "Implement proper request validation": 1,
      "Use environment variables for configuration": 1,
      "Follow GCP security best practices": 1,
      "Implement proper testing with mocks": 1,
      "Support async operations where needed": 1,
      "Provide status tracking and progress updates": 1,
      "Implement proper data serialization": 1,
      "Handle large payloads efficiently": 1
    },
    "missing_requirements": [
      "CI/CD YAML validation",
      "Bash script validation",
      "Kubernetes YAML validation",
      "Configuration YAML validation",
      "Generate proper exclusions",
      "Data file validation",
      "YAML type-specific validation",
      "Documentation validation",
      "Configuration validation",
      "Multi-agent testing validation"
    ],
    "total_requirements": 67,
    "traced_requirements": 57
  },
  "python_analysis": {
    "total_python_files": 275,
    "ast_parsing_success": 274,
    "ast_parsing_failures": 1,
    "python_issues": [
      {
        "path": "data/cost_analysis.py",
        "domain": "python",
        "file_type": "python",
        "size_bytes": 12739,
        "requirements_traced": [
          "Use domain-specific tools",
          "Intelligent content analysis",
          "Intelligent confidence scoring",
          "Actual tool execution works",
          "Extensible domain registry",
          "Domain-based file organization",
          "Domain-specific rules validation"
        ],
        "ast_analysis": {
          "success": false,
          "error": "unexpected indent (<unknown>, line 219)",
          "imports": [],
          "functions": [],
          "classes": [],
          "variables": [],
          "comments": []
        },
        "model_coverage": false,
        "issues": [
          "AST parsing failed: unexpected indent (<unknown>, line 219)"
        ]
      }
    ]
  },
  "file_type_analysis": {
    "file_types": {
      "python": 275,
      "unknown": 44,
      "json": 23,
      "markdown": 113,
      "shell": 27,
      "yaml": 9,
      "toml": 3,
      "image": 11,
      "documentation": 8,
      "data": 4,
      "requirements": 3,
      "config": 1,
      "go": 3,
      "proto": 1
    },
    "large_files": [
      {
        "path": "comprehensive_artifact_analysis_report.json",
        "domain": null,
        "file_type": "json",
        "size_bytes": 2273494,
        "requirements_traced": [],
        "ast_analysis": null,
        "model_coverage": false,
        "issues": []
      },
      {
        "path": "data/billing_reports/visualizations/interactive_dashboard.html",
        "domain": null,
        "file_type": "unknown",
        "size_bytes": 4672813,
        "requirements_traced": [],
        "ast_analysis": null,
        "model_coverage": false,
        "issues": []
      },
      {
        "path": "src/secure_shell_service/secure-shell-service",
        "domain": null,
        "file_type": "unknown",
        "size_bytes": 13028244,
        "requirements_traced": [],
        "ast_analysis": null,
        "model_coverage": false,
        "issues": []
      }
    ]
  },
  "recommendations": [
    "\ud83d\udd0d 207 artifacts are not traced to any domain. Consider adding domain patterns for these files.",
    "\ud83d\udccb 10 requirements are not traced to any artifacts. Consider implementing these requirements.",
    "\ud83d\udc0d 1 Python files failed AST parsing. Review these files for syntax issues.",
    "\ud83d\udce6 3 files are larger than 1MB. Consider if these should be in version control."
  ]
}